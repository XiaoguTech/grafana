{"version":3,"sources":["webpack:///./public/vendor/flot/jquery.flot.gauge.js","webpack:///./public/vendor/flot/jquery.flot.dashes.js","webpack:///./public/vendor/flot/jquery.flot.crosshair.js","webpack:///./public/vendor/flot/jquery.flot.fillbelow.js","webpack:///./public/vendor/flot/jquery.flot.stackpercent.js","webpack:///./public/vendor/flot/jquery.flot.stack.js","webpack:///./public/vendor/flot/jquery.flot.selection.js","webpack:///./public/vendor/flot/jquery.flot.pie.js","webpack:///./public/app/plugins/datasource/prometheus/snippets/prometheus.js","webpack:///./public/app/plugins/datasource/prometheus/mode-prometheus.js","webpack:///./public/app/features/panellinks/link_srv.ts","webpack:///./public/app/features/panellinks/module.ts","webpack:///./public/app/features/dashlinks/editor.ts","webpack:///./public/app/features/dashlinks/module.ts","webpack:///./public/app/features/annotations/editor_ctrl.ts","webpack:///./public/app/features/annotations/events_processing.ts","webpack:///./public/app/features/annotations/annotations_srv.ts","webpack:///./public/app/features/annotations/event_editor.ts","webpack:///./public/app/features/annotations/event.ts","webpack:///./public/app/features/annotations/event_manager.ts","webpack:///./public/app/features/annotations/annotation_tooltip.ts","webpack:///./public/app/features/annotations/all.ts","webpack:///./public/app/features/templating/variable.ts","webpack:///./public/app/features/templating/editor_ctrl.ts","webpack:///./public/app/features/templating/template_srv.ts","webpack:///./public/app/core/utils/dag.ts","webpack:///./public/app/features/templating/variable_srv.ts","webpack:///./public/app/features/templating/interval_variable.ts","webpack:///./public/app/features/templating/query_variable.ts","webpack:///./public/app/features/templating/datasource_variable.ts","webpack:///./public/app/features/templating/custom_variable.ts","webpack:///./public/app/features/templating/constant_variable.ts","webpack:///./public/app/features/templating/adhoc_variable.ts","webpack:///./public/app/features/templating/all.ts","webpack:///./public/app/features/plugins/plugin_edit_ctrl.ts","webpack:///./public/app/features/plugins/plugin_page_ctrl.ts","webpack:///./public/app/features/plugins/plugin_list_ctrl.ts","webpack:///./public/app/features/plugins/import_list/import_list.ts","webpack:///./public/app/features/plugins/ds_edit_ctrl.ts","webpack:///./public/app/features/plugins/ds_dashboards_ctrl.ts","webpack:///./public/app/features/plugins/ds_list_ctrl.ts","webpack:///./public/app/features/panel/panel_ctrl.ts","webpack:///./public/app/features/panel/metrics_tab.ts","webpack:///./public/app/features/panel/metrics_panel_ctrl.ts","webpack:///./public/app/features/panel/query_ctrl.ts","webpack:///./public/app/features/alerting/threshold_mapper.ts","webpack:///./public/app/features/alerting/alert_tab_ctrl.ts","webpack:///./public/app/plugins/sdk.ts","webpack:///./public/app/core/utils/file_export.ts","webpack:///./public/app/core/utils/flatten.ts","webpack:///./public/app/core/utils/version.ts","webpack:///./public/app/plugins/datasource/graphite/gfunc.ts","webpack:///./public/app/plugins/datasource/graphite/datasource.ts","webpack:///./public/app/plugins/datasource/graphite/add_graphite_func.ts","webpack:///./public/app/plugins/datasource/graphite/func_editor.ts","webpack:///./public/app/plugins/datasource/graphite/lexer.ts","webpack:///./public/app/plugins/datasource/graphite/parser.ts","webpack:///./public/app/plugins/datasource/graphite/graphite_query.ts","webpack:///./public/app/plugins/datasource/graphite/query_ctrl.ts","webpack:///./public/app/plugins/datasource/graphite/module.ts","webpack:///./public/app/plugins/datasource/graphite/config_ctrl.ts","webpack:///./public/app/plugins/datasource/cloudwatch/query_parameter_ctrl.ts","webpack:///./public/app/plugins/datasource/cloudwatch/datasource.ts","webpack:///./public/app/plugins/datasource/cloudwatch/config_ctrl.ts","webpack:///./public/app/plugins/datasource/cloudwatch/query_ctrl.ts","webpack:///./public/app/plugins/datasource/cloudwatch/module.ts","webpack:///./public/app/plugins/datasource/elasticsearch/query_def.ts","webpack:///./public/app/plugins/datasource/elasticsearch/query_builder.ts","webpack:///./public/app/plugins/datasource/elasticsearch/elastic_response.ts","webpack:///./public/app/plugins/datasource/elasticsearch/index_pattern.ts","webpack:///./public/app/plugins/datasource/elasticsearch/datasource.ts","webpack:///./public/app/plugins/datasource/elasticsearch/bucket_agg.ts","webpack:///./public/app/plugins/datasource/elasticsearch/metric_agg.ts","webpack:///./public/app/plugins/datasource/elasticsearch/query_ctrl.ts","webpack:///./public/app/plugins/datasource/elasticsearch/config_ctrl.ts","webpack:///./public/app/plugins/datasource/opentsdb/datasource.ts","webpack:///./public/app/plugins/datasource/elasticsearch/module.ts","webpack:///./public/app/plugins/datasource/opentsdb/query_ctrl.ts","webpack:///./public/app/plugins/datasource/opentsdb/config_ctrl.ts","webpack:///./public/app/plugins/datasource/opentsdb/module.ts","webpack:///./public/app/plugins/datasource/grafana/datasource.ts","webpack:///./public/app/plugins/datasource/grafana/module.ts","webpack:///./public/app/plugins/datasource/influxdb/influx_series.ts","webpack:///./public/app/plugins/datasource/influxdb/query_part.ts","webpack:///./public/app/plugins/datasource/influxdb/influx_query.ts","webpack:///./public/app/plugins/datasource/influxdb/query_builder.ts","webpack:///./public/app/plugins/datasource/influxdb/response_parser.ts","webpack:///./public/app/plugins/datasource/influxdb/datasource.ts","webpack:///./public/app/plugins/datasource/influxdb/query_ctrl.ts","webpack:///./public/app/plugins/datasource/influxdb/module.ts","webpack:///./public/app/core/logs_model.ts","webpack:///./public/app/plugins/datasource/logging/result_transformer.ts","webpack:///./public/app/plugins/datasource/logging/datasource.ts","webpack:///./public/app/plugins/datasource/mysql/response_parser.ts","webpack:///./public/app/plugins/datasource/logging/module.ts","webpack:///./public/app/plugins/datasource/mixed/datasource.ts","webpack:///./public/app/plugins/datasource/mixed/module.ts","webpack:///./public/app/plugins/datasource/mysql/datasource.ts","webpack:///./public/app/plugins/datasource/mysql/module.ts","webpack:///./public/app/plugins/datasource/mysql/query_ctrl.ts","webpack:///./public/app/plugins/datasource/postgres/response_parser.ts","webpack:///./public/app/plugins/datasource/postgres/datasource.ts","webpack:///./public/app/plugins/datasource/postgres/module.ts","webpack:///./public/app/plugins/datasource/postgres/query_ctrl.ts","webpack:///./public/app/plugins/datasource/prometheus/metric_find_query.ts","webpack:///./public/app/plugins/datasource/prometheus/result_transformer.ts","webpack:///./public/app/plugins/datasource/prometheus/datasource.ts","webpack:///./public/app/plugins/datasource/prometheus/completer.ts","webpack:///./public/app/plugins/datasource/prometheus/query_ctrl.ts","webpack:///./public/app/plugins/datasource/prometheus/config_ctrl.ts","webpack:///./public/app/plugins/datasource/mssql/response_parser.ts","webpack:///./public/app/plugins/datasource/prometheus/module.ts","webpack:///./public/app/plugins/datasource/mssql/datasource.ts","webpack:///./public/app/plugins/datasource/testdata/datasource.ts","webpack:///./public/app/plugins/datasource/mssql/query_ctrl.ts","webpack:///./public/app/plugins/datasource/mssql/module.ts","webpack:///./public/app/plugins/datasource/testdata/query_ctrl.ts","webpack:///./public/app/plugins/datasource/testdata/module.ts","webpack:///./public/app/plugins/panel/text/module.ts","webpack:///./public/app/plugins/panel/graph/jquery.flot.events.ts","webpack:///./public/app/plugins/panel/graph/graph_tooltip.ts","webpack:///./public/app/plugins/panel/graph/threshold_manager.ts","webpack:///./public/app/plugins/panel/graph/align_yaxes.ts","webpack:///./public/app/plugins/panel/graph/histogram.ts","webpack:///./public/app/plugins/panel/graph/graph.ts","webpack:///./public/app/plugins/panel/graph/legend.ts","webpack:///./public/app/plugins/panel/graph/series_overrides_ctrl.ts","webpack:///./public/app/plugins/panel/graph/thresholds_form.ts","webpack:///./public/app/plugins/panel/graph/template.ts","webpack:///./public/app/plugins/panel/graph/data_processor.ts","webpack:///./public/app/plugins/panel/graph/module.ts","webpack:///./public/app/plugins/panel/graph/axes_editor.ts","webpack:///./public/app/plugins/panel/dashlist/module.ts","webpack:///./public/app/plugins/panel/pluginlist/module.ts","webpack:///./public/app/plugins/panel/alertlist/module.ts","webpack:///./public/app/plugins/panel/heatmap/color_scale.ts","webpack:///./public/app/plugins/panel/heatmap/color_legend.ts","webpack:///./public/app/plugins/panel/heatmap/display_editor.ts","webpack:///./public/app/plugins/panel/heatmap/heatmap_data_converter.ts","webpack:///./public/app/plugins/panel/heatmap/axes_editor.ts","webpack:///./public/app/plugins/panel/heatmap/heatmap_tooltip.ts","webpack:///./public/app/plugins/panel/heatmap/rendering.ts","webpack:///./public/app/plugins/panel/heatmap/heatmap_ctrl.ts","webpack:///./public/app/plugins/panel/heatmap/module.ts","webpack:///./public/app/plugins/panel/table/transformers.ts","webpack:///./public/app/plugins/panel/table/editor.ts","webpack:///./public/app/plugins/panel/table/column_options.ts","webpack:///./public/app/plugins/panel/table/renderer.ts","webpack:///./public/app/plugins/panel/table/module.ts","webpack:///./public/app/plugins/panel/singlestat/module.ts","webpack:///./public/app/plugins/panel/gettingstarted/module.ts","webpack:///./public/app/features/plugins/built_in_plugins.ts","webpack:///./public/app/features/plugins/plugin_loader.ts","webpack:///./public/app/features/plugins/datasource_srv.ts","webpack:///./public/app/plugins/panel/unknown/module.ts","webpack:///./public/app/features/plugins/plugin_component.ts","webpack:///./public/app/features/dashboard/dashboard_ctrl.ts","webpack:///./public/app/features/plugins/all.ts","webpack:///./public/app/features/dashboard/alerting_srv.ts","webpack:///./public/app/features/dashboard/history/history_srv.ts","webpack:///./public/app/features/dashboard/history/history.ts","webpack:///./public/app/features/dashboard/dashboard_loader_srv.ts","webpack:///./public/app/features/dashboard/dashnav/dashnav.ts","webpack:///./public/app/features/dashboard/submenu/submenu.ts","webpack:///./public/app/features/dashboard/save_as_modal.ts","webpack:///./public/app/features/dashboard/save_modal.ts","webpack:///./public/app/features/dashboard/save_provisioned_modal.ts","webpack:///./public/app/features/dashboard/shareModalCtrl.ts","webpack:///./public/app/features/dashboard/share_snapshot_ctrl.ts","webpack:///./public/app/features/dashboard/dashboard_srv.ts","webpack:///./public/app/features/dashboard/view_state_srv.ts","webpack:///./public/app/features/dashboard/validation_srv.ts","webpack:///./public/app/features/dashboard/time_srv.ts","webpack:///./public/app/features/dashboard/change_tracker.ts","webpack:///./public/app/features/dashboard/unsaved_changes_srv.ts","webpack:///./public/app/features/dashboard/unsaved_changes_modal.ts","webpack:///./public/app/features/dashboard/timepicker/input_date.ts","webpack:///./public/app/features/dashboard/timepicker/timepicker.ts","webpack:///./public/app/features/dashboard/upload.ts","webpack:///./public/app/features/dashboard/export/exporter.ts","webpack:///./public/app/features/dashboard/export/export_modal.ts","webpack:///./public/app/features/dashboard/export_data/export_data_modal.ts","webpack:///./public/app/features/dashboard/ad_hoc_filters.ts","webpack:///./public/app/features/dashboard/repeat_option/repeat_option.ts","webpack:///./public/app/features/dashboard/dashgrid/DashboardRow.tsx","webpack:///./public/app/core/components/ScrollBar/ScrollBar.tsx","webpack:///./public/app/features/dashboard/dashgrid/AddPanelPanel.tsx","webpack:///./public/app/features/dashboard/dashgrid/DashboardPanel.tsx","webpack:///./public/app/features/dashboard/dashgrid/DashboardGrid.tsx","webpack:///./public/app/features/dashboard/dashgrid/PanelLoader.ts","webpack:///./public/app/features/dashboard/dashgrid/DashboardGridDirective.ts","webpack:///./public/app/features/dashboard/dashgrid/RowOptions.ts","webpack:///./public/app/features/dashboard/folder_picker/folder_picker.ts","webpack:///./public/app/features/dashboard/move_to_folder_modal/move_to_folder.ts","webpack:///./public/app/features/dashboard/settings/settings.ts","webpack:///./public/app/features/dashboard/dashboard_list_ctrl.ts","webpack:///./public/app/features/dashboard/folder_page_loader.ts","webpack:///./public/app/features/dashboard/folder_dashboards_ctrl.ts","webpack:///./public/app/features/dashboard/folder_settings_ctrl.ts","webpack:///./public/app/features/dashboard/dashboard_import_ctrl.ts","webpack:///./public/app/features/playlist/playlists_ctrl.ts","webpack:///./public/app/features/dashboard/create_folder_ctrl.ts","webpack:///./public/app/features/dashboard/all.ts","webpack:///./public/app/features/playlist/playlist_search.ts","webpack:///./public/app/features/playlist/playlist_srv.ts","webpack:///./public/app/features/playlist/playlist_edit_ctrl.ts","webpack:///./public/app/features/playlist/playlist_routes.ts","webpack:///./public/app/features/playlist/all.ts","webpack:///./public/app/features/snapshot/snapshot_ctrl.ts","webpack:///./public/app/features/panel/panel_header.ts","webpack:///./public/app/features/snapshot/all.ts","webpack:///./public/app/features/panel/panel_directive.ts","webpack:///./public/app/features/panel/solo_panel_ctrl.ts","webpack:///./public/app/features/panel/panel_editor_tab.ts","webpack:///./public/app/features/panel/query_editor_row.ts","webpack:///./public/app/features/panel/query_troubleshooter.ts","webpack:///./public/app/features/panel/all.ts","webpack:///./public/app/features/org/org_users_ctrl.ts","webpack:///./public/app/features/org/profile_ctrl.ts","webpack:///./public/app/features/org/select_org_ctrl.ts","webpack:///./public/app/features/org/new_org_ctrl.ts","webpack:///./public/app/features/org/change_password_ctrl.ts","webpack:///./public/app/features/org/user_invite_ctrl.ts","webpack:///./public/app/features/org/create_team_ctrl.ts","webpack:///./public/app/features/org/org_api_keys_ctrl.ts","webpack:///./public/app/features/org/org_details_ctrl.ts","webpack:///./public/app/features/org/prefs_control.ts","webpack:///./public/app/features/org/all.ts","webpack:///./public/app/features/admin/admin_list_users_ctrl.ts","webpack:///./public/app/features/admin/admin_list_orgs_ctrl.ts","webpack:///./public/app/features/admin/admin_edit_org_ctrl.ts","webpack:///./public/app/features/admin/admin_edit_user_ctrl.ts","webpack:///./public/app/features/admin/admin.ts","webpack:///./public/app/features/alerting/notifications_list_ctrl.ts","webpack:///./public/app/features/alerting/notification_edit_ctrl.ts","webpack:///./public/app/features/alerting/all.ts","webpack:///./public/app/features/styleguide/styleguide.ts","webpack:///./public/app/features/all.ts"],"names":["$","Gauge","context","placeholder","options","gaugeOptions","series","plot","ctx","getPlaceholder","getOptions","gauges","getData","getLogger","debug","calculateAutoValues","gaugeOptionsi","cellWidth","gauge","width","Math","max","label","margin","font","size","value","threshold","calculateAngle","layout","data","a","startAngle","endAngle","min","drawArcWithShadow","cx","cy","r","w","rd1","rd2","lc","lw","fc","blur","save","drawArc","clip","shadowOffsetX","shadowOffsetY","shadowBlur","shadowColor","restore","drawThresholdValue","cellLayout","i","drawText","thresholdLabelMargin","thresholdLabelFontSize","radius","cos","toRad","sin","formatter","x","y","id","text","textOptions","span","exists","length","attr","css","family","color","background","opacity","append","parseInt","height","prototype","calculateLayout","canvasWidth","canvasHeight","columns","rows","ceil","hMargin","vMargin","cellHeight","square","cell","cellMargin","labelMargin","labelFontSize","show","valueMargin","valueFontSize","thresholdWidth","maxRadiusH","dAngle","heightRatioV","outerRadiusV","maxRadiusV","outerRadius","gaugeOuterHeight","calculateCellLayout","c","col","floor","row","blank","offsetY","vAlign","drawBackground","frame","strokeStyle","grid","borderColor","lineWidth","borderWidth","strokeRect","backgroundColor","fillStyle","fillRect","drawCellBackground","border","drawGauge","shadow","c1","values","getColor","a2","drawThreshold","a1","drawLable","item","drawValue","drawThresholdValues","j","debugOptions","Logger","PI","beginPath","arc","lineTo","closePath","stroke","fill","defaults","log","alert","plugins","push","init","hooks","processOptions","legend","sort","b","draw","extend","name","version","jQuery","processDatapoints","datapoints","dashes","plotOffset","getPlotOffset","axisx","xaxis","axisy","yaxis","plotDashes","xoffset","yoffset","dashOnLength","dashOffLength","points","ps","pointsize","prevx","prevy","dashRemainder","dashOn","dashLength","x1","y1","x2","y2","moveTo","p2c","dashOffset","ax1","ay1","ax2","ay2","lineSegmentOffset","deltaX","deltaY","remainder","distance","segmentLength","sqrt","pow","ysign","translate","left","top","lineJoin","sw","shadowSize","angle","crosshair","locked","onMouseOut","e","triggerRedrawOverlay","onMouseMove","getSelection","offset","pageX","pageY","setCrosshair","pos","o","clearCrosshair","lockCrosshair","unlockCrosshair","bindEvents","eventHolder","mode","mouseout","mousemove","drawOverlay","adj","indexOf","drawX","drawY","shutdown","unbind","segmentIntersection","top_left_x","top_left_y","top_right_x","top_right_y","bottom_left_x","bottom_left_y","bottom_right_x","bottom_right_y","top_delta_x","top_delta_y","bottom_delta_x","bottom_delta_y","s","t","drawSeries","otherseries","otherps","otherpoints","openPolygon","findNextStart","start_i","end_i","console","assert","intersect","start","equal","intersectionPoint","topTraversal","right_i","error","bottomTraversal","fillBelowTo","allseries","findBelowSeries","validateInput","parse","normalize","toString","stackBases","processed","stackSums","getStackSums","_data","data_len","sums","stackpercent","key_idx","value_idx","bars","horizontal","num","processRawData","percents","sum","newPoints","stack","other","res","findMatchingSeries","px","py","intery","qx","qy","bottom","l","m","newpoints","withlines","lines","withbottom","format","withsteps","steps","keyOffset","accumulateOffset","fromgap","selection","first","second","active","savedhandlers","mouseUpHandler","updateSelection","trigger","onMouseDown","which","document","body","focus","undefined","onselectstart","ondrag","setSelectionPos","selectionIsSane","triggerSelectedEvent","setTimeout","isSelecting","onMouseUp","one","c2","axes","getAxes","each","axis","used","anyUsed","p1","c2p","direction","p2","from","to","event","ctrlKey","metaKey","clamp","clearSelection","preventEvent","extractRange","ranges","coord","key","k","n","getXAxes","getYAxes","tmp","minSize","abs","setSelection","range","mousedown","scale","shape","h","REDRAW_ATTEMPTS","REDRAW_SHRINK","pie","innerRadius","tilt","alpha","slice","round","percent","combine","highlight","canvas","target","maxRadius","centerLeft","centerTop","highlights","getCanvas","parent","setData","total","combined","numCombined","newdata","isArray","isNaN","parseFloat","isFinite","newCtx","legendWidth","children","filter","position","match","slices","attempts","clear","drawShadow","drawPie","prepend","setSeries","insertLegend","clearRect","remove","shadowLeft","shadowTop","globalAlpha","currentAngle","drawSlice","drawDonutHole","drawLabel","index","lf","labelFormatter","plf","halfAngle","html","labelTop","labelLeft","insertBefore","drawLabels","layer","globalCompositeOperation","isPointInPoly","poly","pt","triggerClickHoverEvent","onClick","eventname","mouseX","mouseY","isPointInPath","datapoint","dataIndex","seriesIndex","findNearbySlice","autoHighlight","auto","unhighlight","indexOfHighlight","splice","hoverable","clickable","click","octx","drawHighlight","ace","define","require","exports","module","snippets","content","scope","tabTrigger","oop","TextHighlightRules","PrometheusHighlightRules","keywordMapper","this","createKeywordMapper","support.function","keyword","constant.language","$rules","token","regex","next","start-label-matcher","start-label-list-matcher","normalizeRules","inherits","lang","keyWordsCompletions","map","word","caption","meta","score","Number","MAX_VALUE","functionsCompletions","def","docText","docHTML","escapeHTML","replace","convertMarkDownTags","str","len","space_index","line_start","next_line_end","line","join","wrapText","convertToHTML","PrometheusCompletions","getCompletions","state","session","prefix","callback","getTokenAt","column","type","concat","call","CstyleBehaviour","Behaviour","TokenIterator","PrometheusBehaviour","inherit","add","action","editor","getSelectionRange","selected","doc","getTextRange","getWrapBehavioursEnabled","opening","closing","rowDiff","end","getWrapped","isSaneInsertion","cursor","getCursorPosition","getLine","substring","$findOpeningBracket","isAutoInsertedClosing","isMultiLine","TextMode","Mode","HighlightRules","$behaviour","$completer","completer","$id","__webpack_require__","singlestat_module_namespaceObject","d","module_SingleStatCtrl","getColorForValue","gettingstarted_module_namespaceObject","module_GettingStartedPanelCtrl","angular","lodash","LinkSrv","templateSrv","timeSrv","getLinkUrl","link","url","keepTime","timeRangeForUrl","includeVars","fillVariableValuesForUrl","params","addParamsToUrl","paramsArray","lodash_default","instance","encodeURIComponent","appendToQueryString","stringToAppend","isUndefined","getAnchorInfo","href","title","info","getPanelLinkAnchorInfo","scopedVars","targetBlank","dashUri","service","link_srv_LinkSrv","$scope","backendSrv","panel","links","searchDashboards","queryStr","search","query","then","hits","dashboards","dash","dashboardChanged","dashboard","find","uri","deleteLink","without","$inject","PanelLinksEditorCtrl","restrict","controller","module_PanelLinksEditorCtrl","question","cloud","DashLinkEditorCtrl","$rootScope","iconMap","$on","appEvent","backToList","setupNew","icon","addLink","editLink","saveLink","move","dir","updateSubmenuVisibility","$compile","$sanitize","linkSrv","elem","asDropdown","update","linkInfo","anchor","anchorSanitized","sanitizeAnchor","tooltip","container","template","contents","$last","addClass","directive","editor_DashLinkEditorCtrl","templateUrl","bindToController","controllerAs","$q","dashboardSrv","getCurrent","linkDef","tags","when","updateDashLinks","promises","buildLinks","results","generatedLinks","flatten","limit","tag","reduce","memo","currentDashId","hit","searchHits","onAppEvent","dashLink","module_DashLinksContainerCtrl","jquery_js_exposed","editor_ctrl_AnnotationsEditorCtrl","AnnotationsEditorCtrl","datasourceSrv","annotationDefaults","datasource","iconColor","enable","showIn","hide","showOptions","ctrl","datasources","getAnnotationSources","annotations","list","reset","onColorChange","bind","datasourceChanged","_this","get","currentAnnotation","ds","currentDatasource","edit","annotation","currentIsNew","jquery_js_exposed_default","angular_default","copy","removeAnnotation","newColor","partition","regionEvents","_a","singleEvents","events","regionId","regions","groupBy","region_events","compact","region_obj","head","timeEnd","time","isRegion","isStartOfRegion","valueOf","isPanelAlert","eventType","AnnotationsSrv","clearCache","globalAnnotationsPromise","alertStatesPromise","getAnnotations","all","getGlobalAnnotations","getAlertStates","flattenDeep","makeRegions","dedup","eventsById","eventGroup","every","dedupAnnotations","panelId","source","alertState","catch","err","message","raw","timeRange","this_1","annotationQuery","rangeRaw","snapshot","snapshotData","translateQueryResult","_i","state_1","_loop_1","saveAnnotationEvent","post","results_1","annotations_srv_AnnotationsSrv","moment","annotationsSrv","panelCtrl","dashboardId","tryEpochToMoment","timeFormated","formatDate","form","$valid","saveModel","cloneDeep","updateAnnotationEvent","refresh","close","delete","deleteAnnotationEvent","epoch","timestamp","moment_default","tinycolor","tinycolor_default","AnnotationEvent","EventManager","editorClosed","editorOpen","render","editorOpened","updateTime","editEvent","addFlotEvents","flotOptions","colors","markerSize","editModel","newState","types","fillColor","colorString","isValid","setAlpha","toRgbString","addAlphaToRGB","region","defaultColor","markings","event_manager_getRegions","eventSectionHeight","levels","keys","manager","contextSrv","escape","onEdit","element","titleStateClass","alertId","stateModel","alert_def","getStateDisplayModel","stateClass","iconClass","getAlertAnnotationInfo","isString","header","login","sanitizeString","canEdit","appendTo","annotationTooltipDirective","model_utils","variableTypes","containsVariable","args","arguments","kbn","regexEscape","variableName","RegExp","exec","VariableEditorCtrl","variableSrv","namePattern","_","optionsLimit","refreshOptions","sortOptions","hideOptions","variables","$watch","val","setMode","addVariable","current","app_events","emit","sameName","validate","infoText","getTagKeys","runQuery","updateOptions","variable","duplicate","clone","getSaveModel","createVariableFromModel","updateTemplateData","getMetricSources","mixed","datasourceTypes","typeChanged","old","oldIndex","removeVariable","showMoreOptions","editor_ctrl_VariableEditorCtrl","template_srv","TemplateSrv","grafanaVariables","builtIns","isNone","variableInitialized","getAdhocFilters","datasourceName","filters","luceneFormat","luceneEscape","Array","formatValue","escapedValues","distributeVariable","setGrafanaVariable","getVariableName","expression","lastIndex","variableExists","highlightVariablesAsHtml","var1","var2","fmt2","var3","getAllValue","allValue","systemValue","fmt","fmt3","isAllValue","replaceWithText","option","skipUrlSync","getValueForUrl","Edge","_linkTo","node","inputEdges","outputEdges","edges","inputNode","outputNode","unlink","inode","onode","Node","getEdgeFrom","getEdgeTo","getOptimizedInputEdges","toBeRemoved","forEach","edgeToRemove","Graph","nodes","createNode","createNodes","names","input","output","inputArr","outputArr","inputNodes","getNode","outputNodes","createEdge","VariableSrv","$location","$injector","onDashboardRefresh","updateUrlParamsWithCurrentVariables","templating","initLock","defer","processVariable","queryParams","evt","payload","fromVariableValueUpdated","Promise","resolve","previousOptions","toJson","$emit","dependencies","otherVariable","dependsOn","promise","urlValue","setValueFromUrl","finally","model","ctor","instantiate","variableUpdated","emitChangeEvents","createGraph","v","$broadcast","selectOptionsForCurrentValue","validateVariableSelectionState","setValue","currentOption","setOptionFromUrl","op","defaultText","defaultValue","setOptionAsCurrent","setAdhocFilter","operator","g","v1","v2","variable_srv_VariableSrv","IntervalVariable","auto_min","auto_count","Object","updateAutoValue","calculateInterval","interval","trim","query_variable_QueryVariable","QueryVariable","multi","includeAll","updateOptionsFromMetricFindQuery","updateTags","useTags","metricFindQuery","tagsQuery","getValuesForTag","tagKey","tagValuesQuery","metricNamesToVariableValues","addAllOption","unshift","metricNames","matches","stringToJsRegex","isNumber","uniqBy","sortVariableValues","sortOrder","sortType","reverseSort","sortBy","opt","toLower","reverse","DatasourceVariable","sources","skipVariables","datasource_variable_DatasourceVariable","description","CustomVariable","split","custom_variable_CustomVariable","supportsMulti","constant_variable_ConstantVariable","ConstantVariable","AdhocVariable","unescapeDelimiter","escapeDelimiter","setFilters","adhoc_variable_AdhocVariable","factory","remarkable","PluginEditCtrl","$sce","$routeParams","navModelSrv","pluginId","postUpdateHook","setNavModel","defaultTab","navModel","main","img","logos","large","subTitle","author","breadcrumbs","includes","tab","result","pluginIcon","getPluginIcon","plug","initReadme","md","remarkable_default","linkify","readmeHtml","trustAsHtml","preUpdateHook","updateCmd","enabled","pinned","jsonData","secureJsonData","window","location","importDashboards","setPreUpdateHook","setPostUpdateHook","updateAvailable","$new","plugin","src","modalScope","disable","plugin_edit_ctrl_PluginEditCtrl","AppPageCtrl","initPage","pluginInfoCache","loadPluginInfo","app","appModel","page","slug","getNotFoundNav","pluginNav","getNav","plugin_page_ctrl_AppPageCtrl","plugin_list_ctrl_PluginListCtrl","PluginListCtrl","tabIndex","embedded","allPlugins","onQueryUpdated","searchQuery","test","DashImportListCtrl","on","importAll","importNext","reject","import","overwrite","installCmd","path","importedUri","imported","import_list_DashImportListCtrl","DataSourceEditCtrl","nav","load","mobx_module","store","loadDatasourceTypes","getDatasourceById","initNewDatasourceModel","isNew","ds_edit_ctrl_defaults","gettingstarted","gettingStarted","isDefault","datasourceCreated","testDatasource","userChangedType","updateNav","initDatasourceEditNav","datasourceMeta","pluginInfo","updateFrontendSettings","settings","config","defaultDatasource","testing","done","status","withNoBackendCache","statusText","saveChanges","editForm","put","confirmDelete","core","yesText","onConfirm","ds_edit_ctrl_DataSourceEditCtrl","noDirectAccess","pre","attrs","showAccessOption","showAccessHelp","toggleAccessHelp","getSuggestUrls","suggestUrl","ds_dashboards_ctrl_DataSourceDashboardsCtrl","DataSourceDashboardsCtrl","getPluginInfo","DataSourcesCtrl","unfiltered","removeDataSource","removeDataSourceConfirmed","ds_list_ctrl_DataSourcesCtrl","system_default","system","PanelCtrl","$timeout","editorTabIndex","timing","panels","pluginName","panelDidMount","removeAllListeners","publishAppEvent","renderingCompleted","evtName","$root","changeView","fullscreen","viewPanel","editPanel","exitFullscreen","initEditMode","toLowerCase","editorTabs","urlTab","changeTab","newIndex","route","updateParams","addEditorTab","directiveFn","editorTab","getMenu","menu","role","shortcut","apply","getAdditionalMenuItems","extendedMenu","getExtendedMenu","submenu","divider","otherPanelInFullscreenMode","calculatePanelHeight","docHeight","editHeight","fullscreenHeight","containerHeight","editMode","gridPos","constants","soloMode","renderStart","Date","getTime","duplicatePanel","removePanel","editPanelJson","editScope","object","updateHandler","replacePanel","enableCopy","copyPanel","core_store","set","JSON","stringify","newPanel","oldPanel","findIndex","deletedPanel","panel_model","sharePanel","shareScope","getInfoMode","sanitize","openInspector","panelInfoHtml","getInfoContent","inspector","datemath","MetricsTabCtrl","panelDsValue","datasourceInstance","addQueryDropdown","fake","nextRefId","getNextQueryLetter","updateDatasourceOptions","hasQueryHelp","queryOptions","includeBuiltin","builtIn","setDatasource","addMixedQuery","addQuery","toggleHelp","optionsOpen","queryTroubleshooterOpen","helpOpen","helpHtml","toggleOptions","toggleQueryTroubleshooter","metrics_tab_MetricsTabCtrl","_super","MetricsPanelCtrl","targets","onMetricsPanelRefresh","onInitMetricsPanelEditMode","onPanelTearDown","dataSubscription","unsubscribe","metricsTabDirective","updateTimeRange","data_1","dataStream","loading","setTimeQueryStart","issueQueries","handleQueryResult","cancelled","queryStart","setTimeQueryEnd","queryEnd","applyPanelTimeOverrides","maxDataPoints","resolution","intervalOverride","intervalMs","timeInfo","timeFrom","timeFromInterpolated","timeFromInfo","rangeutil","invalid","timeFromDate","display","timeShift","timeShiftInterpolated","hideTimeOverride","assign","__interval","getTimezone","cacheTimeout","metricsQuery","subscribe","handleDataStream","stream","complete","items","exploreEnabled","isEditor","supportsExplore","explore","tslib_es6","getExploreState","exploreState","location_util","refId","removeQuery","moveQuery","alertToGraphThresholds","conditions","condition","evaluator","thresholds","value2","value1","colorMode","AlertTabCtrl","uiSegmentSrv","subTabIndex","evalFunctions","evalOperators","conditionTypes","noDataModes","executionErrorModes","appSubUrl","$onInit","addNotificationSegment","newPlusButton","thresholdChangedEventHandler","graphThresholdChanged","off","editingThresholds","notifications","alertNotifications","alertHistory","initModel","validateModel","getAlertHistory","ah","getNotificationIcon","getNotifications","newSegment","changeTabIndex","newTabIndex","notificationAdded","removeNotification","buildDefaultCondition","noDataState","executionErrorState","frequency","handler","defaultName","conditionModels","buildConditionModel","ThresholdMapper","addedNotification","_c","_b","notification","bgColor","handleIndex","evaluatorParamsChanged","firstTarget","foundTarget","alerting","targetContainsTemplate","cm","queryPart","query_part","alertQueryDef","reducerPart","createReducerPart","reducer","handleQueryPartEvent","conditionModel","handleReducerPartEvent","reducerTypes","addCondition","removeCondition","text2","evaluatorTypeChanged","clearHistory","prism","slate_es","slate_react_es","slate_plain_serializer_es","react_default","react","react_dom","react_dom_default","time_series2","DEFAULT_DATETIME_FORMAT","POINT_TIME_INDEX","POINT_VALUE_INDEX","END_COLUMN","END_ROW","QUOTE","EXPORT_FILENAME","csvEscaped","DOMParser","htmlDecoded","regexp","domParser","parseFromString","textContent","formatSpecialHeader","useExcelHeader","formatRow","addEndRowDelimiter","util","toLocaleString","dateTimeFormat","excel","seriesList","alias","exportSeriesListToCsv","convertSeriesListToCsv","timestamps","seriesPoints","seriesTimestamps","p","extendedSeries","pointIndex","mergeSeriesByTime","table","saveSaveBlob","fname","blob","Blob","FileSaver","opts","delimiter","maxDepth","currentDepth","step","prev","isarray","safe","isobject","newKey","utils_ticks","impression_srv","versionPattern","version_SemVersion","SemVersion","major","minor","patch","isGtOrEq","compared","isVersionGtOrEq","gfunc_index","addFuncDef","funcDef","defaultParams","shortName","optionalSeriesRefArgs","optional","multiple","isVersionRelatedFunction","obj","graphiteVersion","category","FuncInstance","withDefaultParams","updateText","metricExp","paramType","last","parameters","pop","_hasMultipleParamsInString","strValue","updateParam","partVal","idx","gfunc","getFuncDef","gfunc_FuncInstance","funcs","param","rawDefs","funcName","group","required","shift","rawParam","default","func","suggestions","GraphiteDatasource","instanceSettings","basicAuth","supportsTags","withCredentials","render_method","funcDefsPromise","getQueryOptionsInfo","graphOptions","translateTime","until","buildGraphiteParams","httpOptions","method","headers","Content-Type","requestId","doGraphiteRequest","convertDataPointsToMs","tagString","graphiteQuery","target_1","tags_1","parseTags","what","date","roundUp","subtract","unix","optionalOptions","interpolatedQuery","expressions","exprRegex","getTagValuesAutoComplete","getTagsAutoComplete","metric","expandable","getTags","tagPrefix","expr","valuePrefix","createFuncInstance","funcDefs","waitForFuncDefsLoaded","getFuncDefs","supportsFunctionIndex","parseFuncDefs","Authorization","inspect","datasourceRequest","targetValue","graphite_options","clean_options","intervalFormatFixRegex","hasTargets","fixIntervalFormat","g1","nestedSeriesRegexReplacer","rst2html_min","js_drop","drop","allFunctions","functionMenu","categories","createFunctionDropDownMenu","$input","typeahead","minLength","updater","$apply","addFunction","$button","removeClass","cleanUpDrop","destroy","shortDesc","contentElement","createElement","innerHTML","rst2html_min_default","drop_default","classes","openOn","tetherOptions","attachment","targetAttachment","popoverSrv","$funcLink","$funcControls","scheduledRelink","paramCountAtLink","cancelBlur","clickFuncParam","paramIndex","$link","$comma","select","lookup","paramDef","switchToLink","inputElem","clearTimeout","newValue","relink","targetChanged","hasClass","inputBlur","inputKeyPress","inputKeyDown","style","toggleFuncControls","targetDiv","closest","addElementsAndCompile","defParams","lastParam","paramValue","$paramLink","paramTemplate","partial","keypress","$element","process","addTypeahead","added","$target","removeFunction","queryModel","functions","$index","classNames","open","graphiteAddFunc","graphiteFuncEditor","unicodeLetterTable","lexer_i","identifierStartTable","Lexer","char","Parser","lexer","tokens","tokenize","charAt","peek","skip","scanStringLiteral","scanPunctuator","scanNumericLiteral","scanIdentifier","scanTemplateSequence","isUnicodeLetter","code","isHexDigit","readUnicodeEscapeSequence","ch1","ch2","ch3","ch4","getIdentifierStart","chr","charCodeAt","getIdentifierPart","ch","isDecimalDigit","isMalformed","isIdentifierStart","base","isOctalDigit","bad","isPunctuator","quote","isUnclosed","functionCall","metricExpression","curlySegment","consumeToken","errorMark","curly","curlyBraceSegment","parts","segments","metricSegment","segment","functionParameters","numericLiteral","seriesRefExpression","boolExpression","stringLiteral","currentToken","token1","token2","matchToken","graphite_query","GraphiteQuery","parseTarget","removeTagValue","textEditor","getAst","astNode","checkForSeriesByTag","checkOtherSegmentsIndex","hidden","splitSeriesByTagParams","seriesByTagFunc","getSegmentPathUpTo","arr","parseTargetRecursive","innerFunc_1","addFunctionParameter","updateSegmentValue","addSelectMetricSegment","newFunc","moveAliasFuncLast","startsWith","aliasFunc","updateModelTarget","metricPath","wrapFunction","updateRenderedTarget","targetsByRefId","keyBy","nestedSeriesRefRegex","count","refCount","countTargetRefs","targetWithNestedQueries","updated","targetFull","tagPattern","getSeriesByTagFuncIndex","seriesByTagFuncIndex","addTag","newTagParam","renderTagString","getSeriesByTagFunc","removeTag","updateTag","tagIndex","renderTagExpressions","excludeIndex","tagExpr","GraphiteQueryCtrl","paused","toggleEditorMode","buildSegments","checkOtherSegments","seriesByTagUsed","fixTagSegments","newSelectMetric","fromIndex","setSegmentFocus","segmentIndex","getAltSegments","altSegments","eachRight","removeTaggedEntry","addAltTagSegments","getTagsAsSegments","tagSegments","TAG_PREFIX","segmentValueChanged","removeTagPrefix","pause","addSeriesByTagFunc","spliceSegments","emptySegments","targetTextChanged","oldTarget","smartlyHandleNewAliasByNode","tagParam","getAllTags","altTags","mapToDropdownOptions","tagExpressions","getTagOperators","GRAPHITE_TAG_OPERATORS","getAllTagValues","getTagValues","altValues","tagChanged","addNewTag","newTag","addTagSegments","showDelimiter","unpause","query_ctrl_QueryCtrl","GraphiteConfigCtrl","graphiteVersions","autoDetectGraphiteVersion","loadDatasource","getVersion","onChange","CloudWatchQueryParameterCtrl","namespace","metricName","statistics","dimensions","period","returnData","highResolution","regionSegment","getSegmentForValue","namespaceSegment","dimSegments","newOperator","newKeyValue","statSegments","stat","ensurePlusButton","removeDimSegment","removeStatSegment","isEmpty","standardStatistics","seg","lastSegment","getDimensionKeys","dimensionKey","getDimensionValues","transformToSegments","dimSegmentChanged","newFake","cssClass","dims","keySegment","valueSegment","getRegions","getNamespaces","getMetrics","regionChanged","namespaceChanged","metricChanged","addTemplateVars","CloudWatchQueryParameter","query_parameter_ctrl_CloudWatchQueryParameterCtrl","cloudwatch_datasource","CloudWatchDatasource","supportMetrics","proxyUrl","defaultRegion","expandTemplateVariable","queries","getActualRegion","convertDimensionFormat","String","getPeriod","some","datasourceId","request","performTimeSeriesQuery","now","convertToCloudWatchTime","periodUnit","interval_to_seconds","daySec","awsRequest","queryRes","transformSuggestDataFromTable","suggestData","tables","doMetricQueryRequest","subtype","filterDimensions","getEbsVolumeIds","instanceId","getEc2InstanceAttribute","attributeName","filterJson","metricNameQuery","dimensionKeysQuery","dimensionValuesQuery","ebsVolumeIdsQuery","ec2InstanceAttributeQuery","targetAttributeName","defaultPeriod","prefixMatching","actionPrefix","alarmNamePrefix","getDefaultRegion","getExpandedVariables","currentVariables","selectedVariables","scopedVar","chain","findKey","has","multiVariable","convertedDimensions","query_ctrl_CloudWatchQueryCtrl","CloudWatchQueryCtrl","aliasSyntax","CloudWatchConfigCtrl","accessKeyExist","secretKeyExist","authTypes","indexPatternTypes","example","timeField","authType","secureJsonFields","accessKey","secretKey","resetAccessKey","resetSecretKey","CloudWatchAnnotationsQueryCtrl","requiresField","supportsInlineScript","supportsMissing","isPipelineAgg","minVersion","orderByOptions","orderOptions","movingAvgModelOptions","query_def_pipelineOptions","moving_avg","ewma","holt","holt_winters","isCheckbox","getMetricAggTypes","esVersion","query_def_metricAggTypes","f","metricType","po","getMovingAvgSettings","filtered","movingAvgModelSettings","setting","filteredResult","field","ElasticQueryBuilder","getRangeFilter","gte","lte","buildTermsAgg","aggDef","queryNode","metricRef","terms","orderBy","order","metrics","aggs","min_doc_count","missing","getDateHistogramAgg","esAgg","extended_bounds","getHistogramAgg","getFiltersAgg","analyze_wildcard","documentQuery","unmapped_type","fields","script_fields","fielddata_fields","docvalue_fields","addAdhocFilters","adhocFilters","queryCondition","bool","must","match_phrase","must_not","lt","gt","build","queryString","bucketAggs","query_string","precision","nestedAggs","metricAgg","pipelineAgg","buckets_path","prop","hasOwnProperty","aggField","getTermsQuery","queryDef","1","_term","Hourly","startOf","amount","Daily","IndexPattern","pattern","getIndexForToday","utc","getIndexList","intervalMap","endEpoch","response","processMetrics","props","bucket","newSeries","buckets","doc_count","percentileName","percentiles","statName","stats","std_deviation_bounds_upper","std_deviation_bounds","upper","std_deviation_bounds_lower","lower","normalized_value","processAggregationDocs","propKey","addColumn","filterable","addMetricValue","_d","_e","propValues","_f","_g","getMetricName","processBuckets","depth","aggId","nameIndex","key_as_string","ElasticResponse","metricDef","extendedStats","getSeriesName","metricTypeCount","g2","appliedAgg","describeMetric","propName","nameSeries","uniq","processHits","_id","_type","_index","_source","trimDatapoints","aggregations","histogram","trimEdges","getErrorFromElasticResponse","root_cause","reason","$$config","getTimeSeries","responses","tmpSeriesList","table_model","ElasticDatasource","indexPattern","index_pattern_IndexPattern","timeInterval","maxConcurrentShardRequests","queryBuilder","query_builder_ElasticQueryBuilder","index_list","tagsField","textField","fieldName","fieldNames","fieldValue","getFieldFromSource","titleField","setTime","getFields","dateFields","getQueryHeader","searchType","timeTo","query_header","sentTargets","queryObj","elastic_response_ElasticResponse","string","scaled_float","nested","shouldAddField","typeMap","fieldNameParts","getFieldsRecursively","subObj","isObject","properties","indexName","mappings","typeName","getTerms","esQuery","fromJson","objectContainsTemplate","isPrimitive","agg","settingsLinkText","describeOrder","describeOrderBy","substr","defaultTo","addFiltersQuery","removeFiltersQuery","getOrderByOptions","metricRefs","getFieldsInternal","$fieldType","getIntervalOptions","intervalOptions","addBucketAgg","lastBucket","addIndex","removeBucketAgg","bucket_agg_ElasticBucketAggCtrl","metricAggs","updatePipelineAggOptions","getPipelineAggOptions","isSingle","metricAggTypes","pipelineOptions","getPipelineOptions","precision_threshold","movingAvgModelTypes","modelSettings","updateMovingAvgModelSettings","inlineScript","script","inline","modelSettingsKeys","onChangeClearInternal","minimize","onTypeChange","addMetricAgg","removeMetricAgg","toggleShowMetric","metric_agg_ElasticMetricAggCtrl","ElasticQueryCtrl","queryUpdated","jsonStr","handleQueryError","newJson","rawQueryOld","getCollapsedText","bucketAggTypes","query_def_bucketAggTypes","bucketAgg","ElasticConfigCtrl","esVersions","indexPatternTypeChanged","database","opentsdb_datasource","tsdbVersion","tsdbResolution","tagKeys","aggregatorsPromise","filterTypesPromise","convertToTSDBTime","convertTargetToQuery","qs","groupByTags","tagk","metricToTargetMapping","mapMetricsToTargets","metricData","_saveTagKeys","transformMetricData","eventList","aggregator","annotationObject","isGlobal","globalAnnotations","startTime","OpenTsDatasource","msResolution","reqBody","showQuery","_addCredentialOptions","suggestTagKeys","aggregateTags","_performSuggestQuery","_get","q","_performMetricKeyValueLookup","keysArray","keysQuery","tagvs","_performMetricKeyLookup","tagks","tagv","relativeUrl","interpolated","responseTransform","metrics_query","tag_names_query","tag_values_query","tag_names_suggest_query","tag_values_suggest_query","getAggregators","getFilterTypes","metricLabel","createMetricLabel","dps","scopedVars_1","toPairs","tagData","isCounter","counterMax","counterResetValue","rateOptions","resetValue","dropResets","ResetValue","disableDownsampling","downsampleInterval","downsample","downsampleAggregator","filter_key","tag_key","explicitTags","interpolatedTagValue","arrTagV","tagV","tagK","query_ctrl_OpenTsQueryCtrl","OpenTsQueryCtrl","errors","validateTarget","aggregators","fillPolicies","filterTypes","downsampleFillPolicy","suggestMetrics","getTextValues","suggestTagValues","targetBlur","metricFindResult","addTagMode","currentTagKey","currentTagValue","editTag","closeAddTagMode","addFilter","addFilterMode","currentFilterType","currentFilterGroupBy","currentFilter","currentFilterKey","currentFilterValue","removeFilter","editFilter","fil","closeAddFilterMode","errs","shouldDownsample","describe_interval","OpenTsConfigCtrl","tsdbVersions","tsdbResolutions","AnnotationsQueryCtrl","datasource_GrafanaDatasource","GrafanaDatasource","GrafanaQueryCtrl","influx_series","InfluxSeries","seriesName","columnName","_getSeriesName","segIndex","tagsCol","titleCol","titleColumn","tagsColumn","textColumn","textCol","timeCol","getTable","reordered","Aliasing","Fields","createPart","part","query_part_index","register","groupByTimeFunctions","innerExpr","replaceAggregationAddStrategy","selectParts","partModel","query_part_categories","Aggregations","morePartsAvailable","Selectors","addTransformationStrategy","addStrategy","selectModels","dynamicLookup","renderer","fieldRenderer","Transformations","Predictors","partCount","influxdb_query_part","influx_query","InfluxQuery","policy","resultFormat","orderByTime","updateProjection","create","groupByParts","updatePersistedParts","hasGroupByTime","hasFill","addGroupBy","stringParts","typePart","arg","removeGroupByPart","getCategories","removeSelect","removeSelectPart","modelsIndex","partIndex","addSelectPart","renderTagCondition","interpolate","getMeasurementAndPolicy","measurement","interpolateQueryStr","defaultFormatFn","rawQuery","selectText","groupBySection","slimit","response_parser","ResponseParser","influxResults","normalizedQuery","isValueFirst","serie","addUnique","InfluxQueryBuilder","buildExploreQuery","withKey","withMeasurementFilter","whereConditions","influxdb_datasource","username","password","getTimeFilter","queryTargets","allQueries","acc","timeFilter","renderAdhocFilters","_seriesQuery","influxSeries","timeSeries","curry","responseParser","query_builder_InfluxQueryBuilder","_influxRequest","serializeParams","InfluxDatasource","currentUrl","urls","u","db","paramSerializer","req","getInfluxTime","fromIsAbsolute","InfluxQueryCtrl","groupBySegment","policySegment","measurementSegment","newSelectMeasurement","newCondition","removeOrderByTime","buildSelectMenu","selectMenu","cat","getGroupByOptions","groupByAction","plusButton","subitem","handleSelectPartEvent","fieldsQuery","handleGroupByPartEvent","measurementChanged","getPolicySegments","policiesQuery","policyChanged","getMeasurements","measurementFilter","getTagsOrValues","nextValue","newOperators","removeTagFilterSegment","getFieldSegments","tagSegmentUpdated","rebuildTargetTagConditions","tagOperator","segment2","getTagValueOperator","tagValue","InfluxConfigCtrl","InfluxAnnotationsQueryCtrl","processEntry","entry","labels","timeFromNow","fromNow","timeLocal","searchMatches","getSearchMatches","logLevel","level","LogLevel","getLogLevel","logging_datasource","_request","apiUrl","LoggingDatasource","prepareQueryTarget","DEFAULT_QUERY_PARAMS","QUERY_REGEXP","parseQuery","streams","combinedEntries","entries","processStreams","metadataRequest","silent","MixedDatasource","sets","dsName","mysql_response_parser","processQueryResult","parseMetricFindQueryResult","rowCount","findColIndex","textColIndex","valueColIndex","transformToKeyValueList","transformToSimpleList","containsKey","colName","transformAnnotationResponse","timeColumnIndex","textColumnIndex","tagsColumnIndex","MysqlDatasource","interpolateVariable","rawSql","defaultQuery","query_ctrl_MysqlQueryCtrl","MysqlQueryCtrl","formats","onDataReceived","onDataError","dataList","lastQueryMeta","anySeriesFromQuery","lastQueryError","MysqlConfigCtrl","MysqlAnnotationsQueryCtrl","module_defaultQuery","postgres_response_parser","PostgresDatasource","query_ctrl_defaultQuery","query_ctrl_PostgresQueryCtrl","PostgresQueryCtrl","sslmode","PostgresAnnotationsQueryCtrl","postgres_module_defaultQuery","metric_find_query","PrometheusMetricFindQuery","label_values_query","labelValuesQuery","metric_names_query","query_result_query","queryResultQuery","metricNameAndLabelsQuery","_labels","metricFilterPattern","matchedMetricName","getPrometheusTime","performInstantQuery","__name__","self","getOriginalMetricName","ResultTransformer","transform","prometheusResult","transformMetricDataToTable","responseListLength","sortSeriesByLabel","prometheusResult_1","transformToHistogramOverTime","prometheusResult_2","resultType","transformInstantMetricData","Error","dp_value","baseTimestamp","stepMs","endTimestamp","responseIndex","resultCount","metricLabels","sortedLabels","labelIndex","valueText","labelData","legendFormat","renderTemplate","aliasPattern","aliasData","topSeries","bottomSeries","bottomPoint","s1","s2","le2","le1","parseHistogramLabel","le","Infinity","prometheusRegularEscape","prometheusSpecialRegexEscape","PrometheusDatasource","editorSrc","directUrl","queryTimeout","httpMethod","resultTransformer","result_transformer_ResultTransformer","ruleMappings","loadRules","transformRequest","interpolateQueryExpr","activeTargets","createQuery","allQueryPromise","instant","responseList","hints","transformerOptions","hinting","queryHints","fix","increasing_1","monotonic","dp","mapping_1","mappingForQuery","ruleName","mapping","determineQueryHints","minInterval","intervalFactor","adjustedInterval","adjustInterval","getRangeScopedVars","__interval_ms","adjusted","alignRange","performSuggestQuery","cache","metricsNameCache","expire","interval_to_ms","msRange","diff","sRange","regularRange","secondsToHms","__range_ms","titleFormat","textFormat","json","groups","rules","rule","extractRuleMappingFromGroups","modifyQuery","previousWord","nextSelectorEnd","nextSelectorStart","keywords","insideSelector","previousWordIsKeyWord","builtInWords","labelParts","selector","selectorRegexp","addLabelToQuery","mapping_2","ruleNames","rulesRegex","labelValueCache","templateVariableCompletions","wrappedCallback","completions","getCompletionsForLabelMatcherName","getCompletionsForLabelMatcherValue","getCompletionsForBinaryOperator","vectors","unit","findMetricName","labelNameCache","transformToCompletions","labelNames","findToken","labelName","labelNameToken","getLabelNameAndValueForExpression","labelValues","rparenToken","keywordOperatorToken","findExpressionMatchedParen","binaryOperatorToken","metricName_1","labelQueryCache","words","nameLabelValueToken","getTokens","nameLabelNameToken","metricNameToken","PromCompleter","guard","nc","deep","query_ctrl_PrometheusQueryCtrl","PrometheusQueryCtrl","getDefaultFormat","resolutions","factor","getCompleter","completer_PromCompleter","refreshMetricData","isEqual","updateLink","rangeDiff","endTime","g0.step_input","g0.stacked","g0.tab","linkToPrometheus","PrometheusConfigCtrl","PrometheusAnnotationsQueryCtrl","mssql_response_parser","MssqlDatasource","mssql_query_ctrl_defaultQuery","MssqlQueryCtrl","MssqlConfigCtrl","mssql_module_defaultQuery","MssqlAnnotationsQueryCtrl","datasource_TestDataDatasource","TestDataDatasource","scenarioId","stringInput","TestDataQueryCtrl","scenarioList","newPointTime","selectedPoint","getPoints","point","pointSelected","deletePoint","addPoint","newPointValue","scenario","scenarioChanged","TestDataAnnotationsQueryCtrl","TextPanelCtrl","onInitEditMode","onRefresh","onRender","renderMarkdown","updateContent","renderText","$applyAsync","scrollable","injector","tmpScope","eventManager","createEditPopover","markerElementToAttachTo","invoke","constraints","pin","$destroy","DrawableEvent","drawFunc","clearFunc","moveFunc","_object","_drawFunc","_moveFunc","_position","_width","_height","_clearFunc","getObject","drawableEvent","visual","_drawableEvent","VisualEvent","getParent","_parent","isHidden","_hidden","unhide","EventMarkers","_types","_plot","eventsEnabled","getEvents","_events","setTypes","setupEvents","ve","_buildDiv","vre","_buildRegDiv","ao","bo","drawEvents","_insidePlot","updateEvents","_clearEvents","markerShow","lineStyle","eventTypeId","markerTooltip","topOffset","border-left-width","border-left-style","marker_1","font-size","line-height","border-left","border-right","toUpperCase","border-top","border-bottom","that","hover","createAnnotationToolip","regionWidth","right","border-left-color","background-color","xc","jquery_flot_events_EventMarkers","eventMarkers","hideEvents","getHandleHtml","valueStr","initDragging","posTop","handleElem","currentTarget","parents","lastY","dragging","clientY","stopped","graphValue","toFixed","cleanUp","renderHandle","defaultHandleTopPos","valueCanvasPos","toggleClass","handleTopPos","shouldDrawHandles","hasSecondYAxis","prepare","thresholdMargin","needsCleanup","addFlotOptions","ltLimit","gtLimit","lineColor","y2axis","ThresholdManager","convertToHistogramData","bucketSize","hiddenSeries","getSeriesValues","getBucketBound","maxBound","bound","minBound","bound_1","histogam_series","convertValuesToHistogram","alignYLevel","yAxes","checkCorrectAxes","checkCorrectAxis","yLeft","yRight","moveLevelToZero","expandStuckValues","zero","oneSide","checkOneSide","checkOppositeSides","rate","rateLeft","rateRight","checkTwoCross","absLeftMin","absLeftMax","absRightMin","absRightMax","upLeft","downLeft","upRight","downRight","getRate","GraphElement","panelWidth","event_manager_EventManager","thresholdManager","threshold_manager_ThresholdManager","getSeriesFn","posX","initial","middle","renderAndShow","absoluteTime","innerHtml","xMode","place_tt","hoverIndex","hoverDistance","pointTime","minDistance","minTime","last_value","hideEmpty","allIsNull","hideZero","allIsZero","hideTooltip","findHoverIndexFromData","value_type","findHoverIndexFromDataPoints","aliasEscaped","shared","$tooltip","detach","hoverInfo","seriesHtml","tooltipFormat","allSeriesMode","panelRelY","pointOffset","sharedCrosshairModeOnly","hasMsResolution","seriesHoverInfo","getMultiSeriesPlotHoverInfo","plotData","highlightClass","sortedSeries","onPanelteardown","onLegendRenderingComplete","onGraphHover","onGraphHoverClear","onPlotSelected","onPlotClick","onScopeDestroy","renderData","buildFlotPairs","graphHeight","sharedTooltipModeEnabled","render_panel","canMakeEditable","shouldAbortRender","drawHook","yaxes","dataWarning","processOffsetHook","gridMargin","panelOptions","processRangeHook","align","alignLevel","getMinTimeStepOfSeries","timeStep","buildFlotOptions","prepareXAxis","configureYAxisOptions","sortSeries","getFlotPairs","nullPointMode","barWidth","addXSeriesAxis","histMin","histMax","ticks","addXHistogramAxis","addXTableAxis","addTimeAxis","callPlot","incrementRenderCounter","renderError","gridColor","bootData","user","lightTheme","processOffset","processRange","percentage","translateFillOption","linewidth","steppedLine","spaceLength","pointradius","minBorderMargin","labelMarginX","sortDesc","haveSortBy","haveSortOrder","shouldSortBy","zindex","timezone","timeformat","time_format","defaultTicks","tick_values","tickStep_1","ticks_num","configureAxisMode","logBase","parseNumber","decimals","secondY","tickDecimals","applyLogScale","toNumber","MIN_VALUE","logmin","inverseTransform","generateTicksForLogScaleYAxis","minSetToZero","nextTick","maxNumTicks","numTicks","valueFormats","scaledDecimals","graph_GraphElement","graphDirective","src_core","SeriesOverridesCtrl","overrideMenu","currentOverrides","override","addOverrideOption","propertyName","lenght","setOverride","subItem","addSeriesOverride","updateCurrentOverrides","openColorSelector","colorSelected","fakeSeries","autoClose","onClose","removeOverride","getSeriesNames","legendScrollbar","getSeriesIndexForElement","el","toggleAxis","changeSeriesColor","toggleSeries","seriesInfo","scrollPosition","scroller","scrollTop","sortLegend","getTableHeaderHtml","renderLegendElement","tableHeaderElem","seriesElements","hideFromLegend","avg","renderSeriesLegendElements","alignAsTable","tbodyElem","wrap","rightSide","legendRightDefaultWidth","scrollRoot","scrollbarParams","root","bar","track","barOnCls","scrollingCls","destroyScrollbar","core_default","marginRight","offsetWidth","clientWidth","scroll","addScrollbar","dispose","legendElem","empty","sideWidth","ieWidth","ThresholdFormCtrl","disabled","unbindDestroy","addThreshold","removeThreshold","onFillColorChange","onLineColorChange","getSeriesList","firstItem","autoDetectMode","getAutoDetectXAxisMode","setPanelDefaultsForNewXAxisMode","timeSeriesHandler","customHandler","seriesData","colorIndex","aliasColors","isOutsideRange","DataProcessor","dataItem","validateXAxisSeriesValue","validOptions","getXAxisValueOptions","getDataFieldNames","onlyNumbers","fieldParts","getPropertiesRecursive","pluckDeep","property","propertyParts","axes_editor_AxesEditorCtrl","AxesEditorCtrl","unitFormats","getUnitFormats","logScales","linear","log (base 2)","log (base 10)","log (base 32)","log (base 1024)","setUnitFormat","xAxisModeChanged","processor","xAxisValueChanged","GraphCtrl","panelDefaults","seriesOverrides","data_processor_DataProcessor","onDataSnapshotLoad","onInitPanelActions","axesEditorComponent","alertingEnabled","alertTab","actions","zoomOut","annotationsPromise","tip","applySeriesOverrides","shiftKey","toggleSeriesExclusiveMode","removeSeriesOverride","toggleLegend","legendValuesOptionChanged","exportCsv","templateHtml","modalClass","DashListCtrl","recent","starred","headings","folderId","modes","getRecentDashboards","getStarred","getSearch","folderIds","starDashboard","isStarred","dashIds","take","getDashboardOpened","dashboardIds","onFolderChange","folder","pluginList","viewModel","gotoPlugin","stopPropagation","$event","preventDefault","hasUpdate","sortOrderOptions","stateFilter","currentAlerts","onlyAlertsOnDashboard","dashboardFilter","nameFilter","AlertListPanel","sortResult","alerts","alertStateSortScore","updateStateFilter","getAlertsPromise","getCurrentAlertState","getStateChanges","al","noAlertsMessage","dashboardQuery","dashboardTags","dashboardTag","newStateDate","locale","colorScheme","maxValue","minValue","d3_scale_chromatic","invert","colorInterpolator","domain","d3","colorScale","legendOpacityScale","exponent","drawLegendValues","rangeFrom","rangeTo","childNodes","legendValueScale","tickStepSize","ticksNum","isValueCloseTo","buildLegendTicks","xAxis","tickValues","tickSize","LEGEND_TICK_SIZE","colorRect","posY","svgElem","baseVal","getSvgElemHeight","LEGEND_VALUE_MARGIN","getSvgElemX","clearLegend","valueTo","outerWidth","getColorScale","colorSchemes","valuesNumber","rangeStep","valuesRange","legendRects","selectAll","enter","legendHeight","drawSimpleColorLegend","colorOptions","legendOpacityScale_1","cardColor","drawSimpleOpacityLegend","cards","cardStats","widthFactor","drawColorLegend","getOpacityScale","opacityScale","drawOpacityLegend","dataFormats","Time series","Time series buckets","Auto","Upper","Lower","yAxis","axesEditor","heatmap_axes_editor_AxesEditorCtrl","HeatmapDisplayEditorCtrl","heatmapDisplayEditor","label2","label1","heatmap_data_converter_parseHistogramLabel","yBounds","yBucket","bounds","convertToHeatMap","yBucketSize","xBucketSize","heatmap","bucketBound","heatmap_data_converter_getBucketBound","TIME_INDEX","bucketNum","VALUE_INDEX","point_ext","pushToXBuckets","seriesList_1","xBucket","yBucketSplitFactor","getLogScaleBucketBounds","convertToLogScaleValueBuckets","getBucketBounds","pushToYBuckets","convertToValueBuckets","getValueBucketBound","getLogScaleBucketBound","logp","value_log","additional_log","additional_bucket_size","powTop","getDistance","originalFillColor","onMouseLeave","HeatmapTooltip","getBucketIndexes","xBucketIndex","yBucketIndex","boundBottom","boundTop","countValueFormatter","bucketBoundFormatter","xData","yData","bucketIndex","tooltipDecimals","tickValueFormatter","tooltipHtml","tsBuckets","tickFormatter","valIndex","tsBucketsFormatted","showHistogram","addHistogram","getXBucketIndex","getYBucketIndex","heatmapPanel","chartHeight","histogramData","histXScale","yScale","barNumberFactor","histogramDomain","histYScale","tooltipWidth","tooltipHeight","clientHeight","innerWidth","pageYOffset","innerHeight","DATA_RANGE_WIDING_FACTOR","HeatmapRenderer","$heatmap","heatmap_tooltip_HeatmapTooltip","padding","dataRangeWidingFactor","drawSharedCrosshair","setElementHeight","getYAxisWidth","axis_text","getBBox","getXAxisHeight","axis_line_position","addXAxis","xScale","chartWidth","timeFormat","grafanaTimeFormatter","tickFormat","tickPadding","yAxisWidth","addYAxis","tick_interval","heatmapStats","wideYAxisRange","y_min","y_max","decimalsAuto","flot_tick_size","tickSizeInner","tickSizeOuter","tickInterval","y_widing","addLogYAxis","log_base","adjustLogRange","minLog","adjustLogMin","adjustLogMax","logScaleTickValues","addYAxisFromBuckets","valueFormatted","domainMin","domainMax","tick_value","fixYAxisTickSize","addAxes","chartTop","chartBottom","dataFormat","xAxisHeight","addHeatmapCanvas","heatmap_elem","cardPadding","cardRound","addHeatmap","yBuckets","emptyBucket","nullBucket","minBucket","newBucket","mergeZeroBuckets","cardsData","maxValueAuto","setCardSize","getCardX","getCardWidth","getCardY","getCardHeight","getCardColor","getCardOpacity","mouseOverBucket","highlightCard","resetCardHighLight","highlightColor","darker","strokeColor","brighter","current_card","xGridSize","yGridSize","splitFactor","cardWidth","cardHeight","cutted_width","getEventOffset","clientX","elemOffset","selectionRange","limitSelection","drawSelection","getEventPos","drawCrosshair","emitGraphHoverEvent","posX1","posX2","selectionX","selectionWidth","graphTooltip","yBucketBound","HeatmapCtrl","opacityScales","colorModes","selectionActivated","defaultsDeep","onCardColorChange","convertHistogramToHeatmapData","convertTimeSeriesToHeatmapData","bucketsData","xBucketNumber","xBucketSizeByNumber","interval_regex","parseSeries","yBucketNumber","convertToCards","getPanelDataSourceType","ds_support_histogram_sort","panelDatasource","heatmap_data_converter_sortSeriesByLabel","histogramToHeatmap","calculateBucketSize","seriesHandler","flotpairs","parseHistogramSeries","rendering_HeatmapRenderer","timeKey","cells","noTableIndex","fromCharCode","columnsUnion","columnNames","columnIndexMapper","flattenedRows","mapper","alteredRow","mergedRows","compactedRows","rowIndex","otherRow","areRowsMatching","matchedRow","columnIndex","foundFieldToMatch","maxDocs","flattened","z","tableCol","TablePanelEditorCtrl","transformers","fontSizes","addColumnSegment","updateTransformHints","canSetColumns","columnsHelpMessage","getColumnOptions","dataRaw","getColumns","transformChanged","removeColumn","tablePanelEditor","editor_TablePanelEditorCtrl","ColumnOptionsCtrl","activeStyleIndex","columnTypes","dateFormats","mappingTypes","getColumnNames","addColumnStyle","styles","stylesCount","indexToInsert","dateFormat","removeColumnStyle","invertColorOrder","ref","styleIndex","addValueMap","valueMaps","removeValueMap","addRangeMap","rangeMaps","removeRangeMap","column_options_ColumnOptionsCtrl","isUtc","setTable","initColumns","colIndex","formatters","createColumnFormatter","defaultCellFormatter","mappingType","setColorState","valueFormatter_1","NaN","colorState","numericValue","renderRowVariables","formatColumnValue","renderCell","addWidthHack","cellClasses","cellClass","columnHtml","preserveFormat","cellLink","linkUrl","linkTooltip","linkTargetBlank","cellTarget","cellLinkTooltip","pageSize","startPos","endPos","rowClasses","rowClass","cellHtml","rowStyle","render_values","new_row","TableRenderer","TablePanelCtrl","showHeader","fontSize","desc","pageIndex","columnOptionsTab","transformer","transformDataToTable","renderer_TableRenderer","isTimezoneUtc","toggleColumnSort","pageCount","renderPanel","panelElem","rootElem","footerElem","appendTableRows","startPage","endPage","paginationList","activeClass","pageLinkElem","appendPaginationControls","max-height","panelHeight","getTableHeight","filterData","SingleStatCtrl","dataType","valueNameOptions","postfix","nullText","valueName","prefixFontSize","postfixFontSize","colorBackground","colorValue","sparkline","full","thresholdMarkers","thresholdLabels","tableColumn","onSparklineColorChange","onSparklineFillChange","tableData","tableHandler","setTableValues","setValues","tableColumnOptions","setTableColumnToSensibleDefault","valueRounded","decimalInfo","getDecimalsForValue","formatFunc","roundValue","canModifyText","setColoring","panelColorIndex","delta","LN10","magn","dec","norm","lastPoint","lastValue","setValueMapping","rangeMap","valueString","className","addGauge","dimension","invalidGaugeRange","plotCanvas","plotCss","colorMap","fontScale","gaugeWidthReduceRatio","gaugeWidth","thresholdMarkersWidth","getValueText","plotSeries","addSparkline","dynamicHeightMargin","strVale","applyColoringThresholds","getSpan","colorPostfix","$panelContainer","drilldownTooltip","mouseleave","hookupDrilldownLinkTooltip","GettingStartedPanelCtrl","note","check","cta","passed","currentStep","nextStep","dismiss","showSuccessAlert","helpFlags1","panel_ctrl_PanelCtrl","built_in_plugins","graphite_module_namespaceObject","cloudwatch_module_namespaceObject","app/plugins/datasource/elasticsearch/module","elasticsearch_module_namespaceObject","opentsdb_module_namespaceObject","grafana_module_namespaceObject","influxdb_module_namespaceObject","logging_module_namespaceObject","mixed_module_namespaceObject","mysql_module_namespaceObject","app/plugins/datasource/postgres/module","postgres_module_namespaceObject","app/plugins/datasource/mssql/module","mssql_module_namespaceObject","app/plugins/datasource/prometheus/module","prometheus_module_namespaceObject","testdata_module_namespaceObject","app/plugins/panel/text/module","text_module_namespaceObject","app/plugins/panel/graph/module","graph_module_namespaceObject","app/plugins/panel/dashlist/module","dashlist_module_namespaceObject","app/plugins/panel/pluginlist/module","pluginlist_module_namespaceObject","app/plugins/panel/alertlist/module","alertlist_module_namespaceObject","app/plugins/panel/heatmap/module","heatmap_module_namespaceObject","app/plugins/panel/table/module","table_module_namespaceObject","app/plugins/panel/singlestat/module","app/plugins/panel/gettingstarted/module","Observable","Subject","bust","exposeToPlugin","component","registerDynamic","registry","newModule","locate","address","baseURL","defaultExtension","packages","/*","esModule","authorization","loader","prism_default","sdk_namespaceObject","file_export_namespaceObject","flatten_namespaceObject","flotDeps_1","plugin_loader_i","fakeDep","importPluginModule","light","dark","pluginDef","dsConfig","deferred","Datasource","DatasourceSrv","getAll","addDataSourceVariables","getExploreSources","es","metricSources","metricSource","datasource_srv_DatasourceSrv","UnknownPanelCtrl","$http","$templateCache","baseUrl","class","module_UnknownPanelCtrl","panelInfo","panelModule","Component","registered","componentInfo","templatePromise","relativeTemplateUrlToAbs","cached","getTemplate","registerPluginComponent","notFound","directiveName","$normalize","bindings","getPluginComponentDirective","core_module","child","dsModule","panel-ctrl","QueryCtrl","dsMeta_1","ConfigCtrl","model_1","appModule","appEditCtrl","app-model","app-edit-ctrl","appModel_1","loadPanelComponentInfo","getModule","pluginDirectiveLoader","dashboard_ctrl_DashboardCtrl","DashboardCtrl","keybindingSrv","alertingSrv","unsavedChangesSrv","dashboardViewStateSrv","playlistSrv","panelLoader","editTab","getPanelContainer","setupDashboard","setupDashboardInternal","setCurrent","processRepeats","autoFitPanels","dashboardViewState","setupDashboardBindings","setWindowTitleAndTheme","onInitFailed","msg","fatal","loadedFallbackDashboard","templateVariableUpdated","window_title_prefix","showJsonEditor","getDashboard","getPanelLoader","timezoneChanged","onRemovingPanel","getPanelInfoById","ask","confirmText","AlertingSrv","HistorySrv","getHistoryList","calculateDiff","restoreDashboard","history_srv_HistorySrv","HistoryListCtrl","$route","historySrv","appending","canCompare","onDashboardSaved","resetFromSource","switchMode","addToLog","getLog","revisionSelectionChanged","revisions","checked","formatBasicDate","getDiff","newInfo","baseInfo","isNewLatest","new","revisions_1","rev","createdDateString","created","ageString","isLastPage","basic","restoreConfirm","stripBaseFromUrl","reload","history_HistoryListCtrl","DashboardLoaderSrv","_dashboardLoadFailed","canStar","isSnapshot","canDelete","canSave","dashboardNotFound","loadDashboard","uid","_loadScriptedDashboard","getDashboardByUid","isFolder","addDashboardImpression","file","_executeScript","fromScript","services","script_result","Function","script_func","isFunction","deferred_1","dashnav_DashNavCtrl","DashNavCtrl","saveDashboard","titleTooltip","calendar","expires","toggleSettings","editview","toggleViewMode","shareDashboard","showSearch","addPanel","animate","navItemClicked","navItem","clickHandler","transclude","SubmenuCtrl","annotationStateChanged","openEditView","submenu_SubmenuCtrl","save_as_modal_template","SaveDashboardAsModalCtrl","isValidFolderSelection","getSaveModelClone","editable","hideControls","autoUpdate","keyDown","keyCode","onEnterFolderCreation","onExitFolderCreation","SaveDashboardModalCtrl","saveVariables","saveTimerange","originalCurrent","timeChange","variableValueChange","isSaving","hasTimeChanged","hasVariableValuesChanged","saveForm","postSave","resetOriginalVariables","resetOriginalTime","save_modal_template","SaveProvisionedDashboardModalCtrl","dashboardJson","getJsonForClipboard","ShareModalCtrl","modeSharePanel","modalTitle","tabs","buildUrl","absUrl","orgId","includeTemplateVars","forCurrent","theme","soloUrl","iframeHtml","imageUrl","getLocalTimeZone","Intl","utcOffset","DateTimeFormat","resolvedOptions","timeZone","shareUrl","save_provisioned_modal_template","save_provisioned_modal_SaveProvisionedDashboardModalCtrl","ShareSnapshotCtrl","expireOptions","accessOptions","externalUrl","sharingButtonText","externalEnabled","createSnapshot","external","originalUrl","saveSnapshot","scrubDashboard","cmdData","postUrl","deleteUrl","snapshotUrl","saveExternalSnapshotRef","deleteKey","singlePanel","forEachPanel","deleteSnapshot","share_snapshot_ctrl_ShareSnapshotCtrl","dashboard_srv_DashboardSrv","DashboardSrv","dashboard_model","handleSaveDashboardError","isHandled","altActionText","onAltAction","showSaveAsModal","newUrl","provisioned","showDashboardProvisionedModal","makeEditable","showSaveModal","saveJSONDashboard","panelScopes","urlState","getQueryStringState","needsSync","registerPanel","serializeToUrl","fromRouteUpdated","toggle","editStateChanged","toggleCollapsedPanelRow","syncState","DashboardViewState","collapsed","toggleRow","panelScope","getPanelScope","fullscreenPanel","leaveFullscreen","editModeInitiated","enterFullscreen","oldTimeRange","setViewMode","view_state_srv_DashboardViewState","hitTypes","ValidationSrv","rootName","validateNewDashboardName","validateNewFolderName","existingErrorMessage","nameLowerCased","hits_1","time_srv_TimeSrv","TimeSrv","timer","routeUpdated","addEventListener","autoRefreshBlocked","visibilityState","refreshDashboard","cancelAll","initTimeFromUrl","parseTime","timeAtLoad","setAutoRefresh","parseUrlParam","urlRange","timeHasChangedSinceLoad","cancelNextRefresh","intervalMs_1","refreshTimer","startNextRefreshTimer","afterMs","isGrafanaVisible","cancel","fromRouteUpdate","isMoment","oldRefresh","urlParams","timespan","center","ChangeTracker","originalCopyDelay","$window","originalPath","original","onbeforeunload","ignoreChanges","hasChanges","open_modal","fromFile","cleanDashboardFromIgnoredChanges","dashData","schemaVersion","iteration","repeatPanelId","currentTimepicker","originalTimepicker","discardChanges","gotoNext","baseLen","nextUrl","tracker","change_tracker_ChangeTracker","UnsavedChangesModalCtrl","discard","unsaved_changes_modal_template","timepicker_TimePickerCtrl","TimePickerCtrl","openDropdown","timepicker","firstDayOfWeek","localeData","timeRaw","local","absolute","fromJs","toDate","toJs","isAbsolute","zoom","closeDropdown","editTimeRaw","rangeString","refresh_intervals","isOpen","applyCustom","absoluteFromChanged","getAbsoluteMomentForTimezone","absoluteToChanged","jsDate","setRelativeFilter","nowDelay","$elem","ngModel","$parsers","$setValidity","parsed","$formatters","currentValue","alertSrv","wnd","File","FileReader","FileList","getElementById","files","reader","onload","onUpload","readAsText","uploadDashboardDirective","makeExportable","variableLookup","templateizeDatasourceUsage","refName","requires","processPanel","panelDef","_h","_j","annotationDef","buildInfo","inputs","newObj","DashboardExporter","DashExportCtrl","exporter","exporter_DashboardExporter","saveJson","export_modal_DashExportCtrl","export","asRows","exportSeriesListToCsvColumns","ExportDataModalCtrl","export_data_modal_ExportDataModalCtrl","buildSegmentModel","AdHocFiltersCtrl","segmentChanged","updateVariableModel","filterIndex","hasFakes","ad_hoc_filters_template","ad_hoc_filters_AdHocFiltersCtrl","dashRepeatOptionDirective","repeat_option_template","repeat","repeatDirection","react2angular","react_grid_layout","classnames","DashboardRow_DashboardRow","DashboardRow","panelContainer","openSettings","setState","prevState","forceUpdate","removeRow","classnames_default","fa-chevron-right","chevronClass","components_ScrollBar_ScrollBar","ScrollBar","handleRef","componentDidMount","scrollbar","parentElement","componentDidUpdate","componentWillUnmount","setScrollTop","setScrollLeft","scrollLeft","AddPanelPanel_AddPanelPanel","AddPanelPanel","onAddPanel","panelPluginInfo","handleCloseAddPanel","renderPanelItem","panelSizeChanged","panelPlugins","getPanelPlugins","copiedPanelPlugins","getCopiedPanelPlugins","small","hideFromList","copiedPanelJson","copiedPanel","pluginCopy","copiedPanels","filterPanels","searchWords","main_default","highlightClassName","textToHighlight","noCopiedPanelPlugins","filterChange","openCopy","openAdd","panelTab","active active--panel","","copyClass","autoFocus","onKeyPress","filterKeyPress","DashboardPanel_DashboardPanel","DashboardPanel","attachedPanel","lastGridWidth","SizedReactLayoutGrid","react_sizeme","react_sizeme_default","monitorWidth","onWidthChange","react_grid_layout_default","isDraggable","isResizable","measureBeforeMount","containerPadding","useCSSTransforms","cols","rowHeight","draggableHandle","onResize","onResizeStop","onDragStop","onLayoutChange","DashboardGrid_DashboardGrid","DashboardGrid","animated","triggerForceUpdate","buildLayout","panelMap","stringId","panelPos","newLayout","newLayout_1","newPos","updateGridPos","sortPanelsByGridPos","resizeDone","oldItem","newItem","renderPanels","panelClasses","panel--fullscreen","panelElements","watchDepth","wrapApply","PanelLoader_PanelLoader","PanelLoader","compiledElem","RowOptionsCtrl","onUpdated","FolderPickerCtrl","validationSrv","labelClass","loadInitialValue","permission","enableCreateNew","enableReset","initialTitle","createNewFolder","enterFolderCreation","$folder","newFolderNameChanged","newFolderNameTouched","newFolderName","hasValidationError","validationError","createFolder","closeCreateFolder","cancelCreateFolder","exitFolderCreation","resetFolder","rootFolder","initialFolderId","folder_picker_FolderPickerCtrl","MoveToFolderCtrl","moveDashboards","successCount","totalCount","alreadyInFolderCount","afterSave","move_to_folder_MoveToFolderCtrl","settings_SettingsCtrl","SettingsCtrl","canSaveAs","hasEditPermissionInFolders","buildSectionList","onRouteUpdated","onPostSave","sections","canAdmin","section","sectionParams","viewId","openSaveAsModal","saveDashboardJson","hideSettings","currentSection","deleteDashboard","sumBy","deleteDashboardConfirmed","hasUnsavedFolderChange","getFolder","folderTitle","folderUrl","DashboardListCtrl","FolderPageLoader","activeChildId","getFolderByUid","dashTab","FolderDashboardsCtrl","folderPageLoader","titleChanged","hasChanged","handleSaveFolderError","deleteFolder","updateFolder","FolderSettingsCtrl","nameExists","uidExists","autoGenerateUid","autoGenerateUidValue","initialFolderTitle","gnetId","gnetUrl","checkGnetDashboard","__inputs","inputModel","setDatasourceOptions","inputsValid","uidChanged","DashboardImportCtrl","inputValueChanged","titleTouched","hasNameValidationError","nameValidationError","hasUidValidationError","uidValidationError","importedUrl","loadJsonText","parseError","jsonText","gnetError","gnetInfo","back","create_folder_ctrl_CreateFolderCtrl","CreateFolderCtrl","folder_dashboards_ctrl_FolderDashboardsCtrl","folder_settings_ctrl_FolderSettingsCtrl","dashboard_import_ctrl_DashboardImportCtrl","PlaylistsCtrl","playlists","startUrl","removePlaylistConfirmed","playlist","removePlaylist","playlists_ctrl_PlaylistsCtrl","PlaylistSearchCtrl","tagsMode","prom","dashboardResult","tagResult","searchStarted","showStarred","queryHasNoFilters","filterByTag","PlaylistSrv","cancelPromise","filteredParams","pickBy","utils_url","playlistId","stop","isPlaying","exit","playlist_srv_PlaylistSrv","PlaylistEditCtrl","filteredTags","dashboardresult","tagresult","playlistItems","filterFoundPlaylistItems","filteredDashboards","playlistItem","listPlaylistItem","term","addPlaylistItem","addTagPlaylistItem","listedPlaylistItem","savePlaylist","isPlaylistEmpty","movePlaylistItem","currentPosition","newPosition","movePlaylistItemUp","movePlaylistItemDown","$routeProvider","playlist_edit_ctrl_PlaylistEditCtrl","snapshots","removeSnapshotConfirmed","removeSnapshot","SnapshotsCtrl","snapshot_ctrl_SnapshotsCtrl","listItemClass","renderMenuItem","menuScope","isDragged","togglePanelStackPosition","parentsUntil","menuElem","targetClass","menuHtml","createMenuTemplate","dropdown","togglePanelMenu","panelHeader","$document","infoDrop","panelScrollbar","lastAlertState","hasAlertRule","panelContent","transparentLastState","lastHasAlertRule","panelHeightUpdated","updatePanelCornerInfo","cornerMode","cornerInfoElem","hoverOpenDelay","transparent","__proto__","constructor","$watchGroup","$watchCollection","setPanelFocus","solo_panel_ctrl_SoloPanelCtrl","SoloPanelCtrl","dashboardLoaderSrv","sidemenu","initDashboard","getDashboardBySlug","initPanelScope","panelEditorTab","dynamicDirectiveSrv","fn","QueryRowCtrl","queryCtrl","toggleCollapse","toggleHideQuery","canCollapse","__collapsedQueryCache","collapsedText","duplicateQuery","query_editor_row_module","query_editor_row_QueryRowCtrl","query_troubleshooter_template","query_troubleshooter_QueryTroubleshooterCtrl","QueryTroubleshooterCtrl","onRequestResponseEventListener","onRequestResponse","onRequestErrorEventListener","removeEventsListeners","stateChanged","toggleMocking","isMocking","onRequestError","hasError","isLoading","getClipboardText","jsonExplorer","handleMocking","mockedData","mockedResponse","transformResponse","jsonpCallbackParam","renderJsonExplorer","toggleExpand","allNodesExpanded","openAtDepth","jsonElem","animateOpen","org_users_ctrl_OrgUsersCtrl","OrgUsersCtrl","externalUserMngLinkUrl","externalUserMngLinkName","canInvite","disableLoginForm","externalUserMngInfo","linkTarget","users","pendingInvites","email","updateOrgUser","userId","removeUser","removeUserConfirmed","revokeInvite","invite","getInviteUrl","ProfileCtrl","showTeamsList","showOrgsList","readonlyLoginFields","getUser","getUserTeams","getUserOrgs","teams","orgs","setUsingOrg","org","userForm","old_theme","profile_ctrl_ProfileCtrl","SelectOrgCtrl","select_org_ctrl_SelectOrgCtrl","ChangePasswordCtrl","command","authProxyEnabled","ldapEnabled","changePassword","newPassword","confirmNew","change_password_ctrl_ChangePasswordCtrl","NewOrgCtrl","newOrg","UserInviteCtrl","sendEmail","sendInvite","inviteForm","CreateTeamCtrl","teamId","org_api_keys_ctrl_OrgApiKeysCtrl","OrgApiKeysCtrl","roleTypes","obj2","index2","roleText","removeToken","addToken","rootPath","origin","getOrgInfo","orgForm","updateAddress","addressForm","OrgDetailsCtrl","PrefsControlCtrl","themes","prefs","oldTheme","updatePrefs","prefsForm","cmd","homeDashboardId","prefs_control_PrefsControlCtrl","prefs_control_template","admin_list_users_ctrl","AdminListUsersCtrl","showPaging","getUsers","perPage","totalPages","pages","navigateToPage","deleteUser","AdminListOrgsCtrl","getOrgs","deleteOrg","AdminEditOrgCtrl","getOrg","getOrgUsers","orgUsers","orgDetailsForm","orgUser","removeOrgUser","AdminEditUserCtrl","permissions","user_id","passwordForm","updatePermissions","orgsSearchCache","searchOrgs","addOrgForm","orgInfo","loginOrEmail","admin_edit_user_ctrl_AdminEditUserCtrl","AdminSettingsCtrl","AdminHomeCtrl","AdminStatsCtrl","AlertNotificationsListCtrl","loadNotifications","deleteNotification"],"mappings":"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","file":"3.29115ebcdd2779225ada.js","sourcesContent":["/*!\n * jquery.flot.gauge v1.1.0 *\n *\n * Flot plugin for rendering gauge charts.\n *\n * Copyright (c) 2015 @toyoty99.\n * Licensed under the MIT license.\n */\n\n/**\n * @module flot.gauge\n */\n(function($) {\n\n\n    /**\n     * Gauge class\n     *\n     * @class Gauge\n     */\n    var Gauge = (function() {\n        /**\n         * context of canvas\n         *\n         * @property context\n         * @type Object\n         */\n        var context;\n        /**\n         * placeholder of canvas\n         *\n         * @property placeholder\n         * @type Object\n         */\n        var placeholder;\n        /**\n         * options of plot\n         *\n         * @property options\n         * @type Object\n         */\n        var options;\n        /**\n         * options of gauge\n         *\n         * @property gaugeOptions\n         * @type Object\n         */\n        var gaugeOptions;\n        /**\n         * data series\n         *\n         * @property series\n         * @type Array\n         */\n        var series;\n        /**\n         * logger\n         *\n         * @property logger\n         * @type Object\n         */\n        var logger;\n\n        /**\n         * constructor\n         *\n         * @class Gauge\n         * @constructor\n         * @param  {Object} gaugeOptions gauge options\n         */\n        var Gauge = function(plot, ctx) {\n            context = ctx;\n            placeholder = plot.getPlaceholder();\n            options = plot.getOptions();\n            gaugeOptions = options.series.gauges;\n            series = plot.getData();\n            logger = getLogger(gaugeOptions.debug);\n        }\n\n        /**\n         * calculate layout\n         *\n         * @method calculateLayout\n         * @return the calculated layout properties\n         */\n        Gauge.prototype.calculateLayout = function() {\n\n            var canvasWidth = placeholder.width();\n            var canvasHeight = placeholder.height();\n\n\n\n            // calculate cell size\n            var columns = Math.min(series.length, gaugeOptions.layout.columns);\n            var rows = Math.ceil(series.length / columns);\n\n\n\n            var margin = gaugeOptions.layout.margin;\n            var hMargin = gaugeOptions.layout.hMargin;\n            var vMargin = gaugeOptions.layout.vMargin;\n            var cellWidth = (canvasWidth - (margin * 2) - (hMargin * (columns - 1))) / columns;\n            var cellHeight = (canvasHeight - (margin * 2) - (vMargin * (rows - 1))) / rows;\n            if (gaugeOptions.layout.square) {\n                var cell = Math.min(cellWidth, cellHeight);\n                cellWidth = cell;\n                cellHeight = cell;\n            }\n\n\n\n            // calculate 'auto' values\n            calculateAutoValues(gaugeOptions, cellWidth);\n\n            // calculate maximum radius\n            var cellMargin = gaugeOptions.cell.margin;\n            var labelMargin = 0;\n            var labelFontSize = 0;\n            if (gaugeOptions.label.show) {\n                labelMargin = gaugeOptions.label.margin;\n                labelFontSize = gaugeOptions.label.font.size;\n            }\n            var valueMargin = 0;\n            var valueFontSize = 0;\n            if (gaugeOptions.value.show) {\n                valueMargin = gaugeOptions.value.margin;\n                valueFontSize = gaugeOptions.value.font.size;\n            }\n            var thresholdWidth = 0;\n            if (gaugeOptions.threshold.show) {\n                thresholdWidth = gaugeOptions.threshold.width;\n            }\n            var thresholdLabelMargin = 0;\n            var thresholdLabelFontSize = 0;\n            if (gaugeOptions.threshold.label.show) {\n                thresholdLabelMargin = gaugeOptions.threshold.label.margin;\n                thresholdLabelFontSize = gaugeOptions.threshold.label.font.size;\n            }\n\n            var maxRadiusH = (cellWidth / 2) - cellMargin - thresholdWidth - (thresholdLabelMargin * 2) - thresholdLabelFontSize;\n\n            var startAngle = gaugeOptions.gauge.startAngle;\n            var endAngle = gaugeOptions.gauge.endAngle;\n            var dAngle = (endAngle - startAngle) / 100;\n            var heightRatioV = -1;\n            for (var a = startAngle; a < endAngle; a += dAngle) {\n                heightRatioV = Math.max(heightRatioV, Math.sin(toRad(a)));\n            }\n            heightRatioV = Math.max(heightRatioV, Math.sin(toRad(endAngle)));\n            var outerRadiusV = (cellHeight - (cellMargin * 2) - (labelMargin * 2) - labelFontSize) / (1 + heightRatioV);\n            if (outerRadiusV * heightRatioV < valueMargin + (valueFontSize / 2)) {\n                outerRadiusV = cellHeight - (cellMargin * 2) - (labelMargin * 2) - labelFontSize - valueMargin - (valueFontSize / 2);\n            }\n            var maxRadiusV = outerRadiusV - (thresholdLabelMargin * 2) - thresholdLabelFontSize - thresholdWidth;\n\n            var radius = Math.min(maxRadiusH, maxRadiusV);\n\n\n            var width = gaugeOptions.gauge.width;\n            if (width >= radius) {\n                width = Math.max(3, radius / 3);\n            }\n\n\n            var outerRadius = (thresholdLabelMargin * 2) + thresholdLabelFontSize + thresholdWidth + radius;\n            var gaugeOuterHeight = Math.max(outerRadius * (1 + heightRatioV), outerRadius + valueMargin + (valueFontSize / 2));\n\n            return {\n                canvasWidth: canvasWidth,\n                canvasHeight: canvasHeight,\n                margin: margin,\n                hMargin: hMargin,\n                vMargin: vMargin,\n                columns: columns,\n                rows: rows,\n                cellWidth: cellWidth,\n                cellHeight: cellHeight,\n                cellMargin: cellMargin,\n                labelMargin: labelMargin,\n                labelFontSize: labelFontSize,\n                valueMargin: valueMargin,\n                valueFontSize: valueFontSize,\n                width: width,\n                radius: radius,\n                thresholdWidth: thresholdWidth,\n                thresholdLabelMargin: thresholdLabelMargin,\n                thresholdLabelFontSize: thresholdLabelFontSize,\n                gaugeOuterHeight: gaugeOuterHeight\n            };\n        }\n\n        /**\n         * calculate the values which are set as 'auto'\n         *\n         * @method calculateAutoValues\n         * @param  {Object} gaugeOptionsi the options of the gauge\n         * @param  {Number} cellWidth the width of cell\n         */\n        function calculateAutoValues(gaugeOptionsi, cellWidth) {\n\n            if (gaugeOptionsi.gauge.width === \"auto\") {\n                gaugeOptionsi.gauge.width = Math.max(5, cellWidth / 8);\n            }\n            if (gaugeOptionsi.label.margin === \"auto\") {\n                gaugeOptionsi.label.margin = Math.max(1, cellWidth / 20);\n            }\n            if (gaugeOptionsi.label.font.size === \"auto\") {\n                gaugeOptionsi.label.font.size = Math.max(5, cellWidth / 8);\n            }\n            if (gaugeOptionsi.value.margin === \"auto\") {\n                gaugeOptionsi.value.margin = Math.max(1, cellWidth / 30);\n            }\n            if (gaugeOptionsi.value.font.size === \"auto\") {\n                gaugeOptionsi.value.font.size = Math.max(5, cellWidth / 9);\n            }\n            if (gaugeOptionsi.threshold.width === \"auto\") {\n                gaugeOptionsi.threshold.width = Math.max(3, cellWidth / 100);\n            }\n            if (gaugeOptionsi.threshold.label.margin === \"auto\") {\n                gaugeOptionsi.threshold.label.margin = Math.max(3, cellWidth / 40);\n            }\n            if (gaugeOptionsi.threshold.label.font.size === \"auto\") {\n                gaugeOptionsi.threshold.label.font.size = Math.max(5, cellWidth / 15);\n            }\n\n        }\n        Gauge.prototype.calculateAutoValues = calculateAutoValues;\n\n        /**\n         * calculate the layout of the cell inside\n         *\n         * @method calculateCellLayout\n         * @param  {Object} gaugeOptionsi the options of the gauge\n         * @param  {Number} cellWidth the width of cell\n         * @param  {Number} i the index of the series\n         * @return the calculated cell layout properties\n         */\n        Gauge.prototype.calculateCellLayout = function(gaugeOptionsi, layout, i) {\n\n            // calculate top, left and center\n            var c = col(layout.columns, i);\n            var r = row(layout.columns, i);\n            var x = layout.margin + (layout.cellWidth + layout.hMargin) * c;\n            var y = layout.margin + (layout.cellHeight + layout.vMargin) * r;\n            var cx = x + (layout.cellWidth / 2);\n            var cy = y + layout.cellMargin + (layout.labelMargin * 2) + layout.labelFontSize + layout.thresholdWidth\n                        + layout.thresholdLabelFontSize + (layout.thresholdLabelMargin * 2) + layout.radius;\n            var blank = layout.cellHeight - (layout.cellMargin * 2) - (layout.labelMargin * 2) - layout.labelFontSize - layout.gaugeOuterHeight;\n            var offsetY = 0;\n            if (gaugeOptionsi.cell.vAlign === \"middle\") {\n                offsetY = (blank / 2);\n            } else if (gaugeOptionsi.cell.vAlign === \"bottom\") {\n                offsetY = blank;\n            }\n            cy += offsetY;\n\n            return {\n                col: c,\n                row: r,\n                x: x,\n                y: y,\n                offsetY: offsetY,\n                cellWidth: layout.cellWidth,\n                cellHeight: layout.cellHeight,\n                cellMargin: layout.cellMargin,\n                cx: cx,\n                cy: cy\n            }\n        }\n\n        /**\n         * draw the background of chart\n         *\n         * @method drawBackground\n         * @param  {Object} layout the layout properties\n         */\n        Gauge.prototype.drawBackground = function(layout) {\n\n            if (!gaugeOptions.frame.show) {\n                return;\n            }\n            context.save();\n            context.strokeStyle = options.grid.borderColor;\n            context.lineWidth = options.grid.borderWidth;\n            context.strokeRect(0, 0, layout.canvasWidth, layout.canvasHeight);\n            if (options.grid.backgroundColor) {\n                context.fillStyle = options.grid.backgroundColor;\n                context.fillRect(0, 0, layout.canvasWidth, layout.canvasHeight);\n            }\n            context.restore();\n        }\n\n        /**\n         * draw the background of cell\n         *\n         * @method drawCellBackground\n         * @param  {Object} gaugeOptionsi the options of the gauge\n         * @param  {Object} cellLayout the cell layout properties\n         */\n        Gauge.prototype.drawCellBackground = function(gaugeOptionsi, cellLayout) {\n\n            context.save();\n            if (gaugeOptionsi.cell.border && gaugeOptionsi.cell.border.show && gaugeOptionsi.cell.border.color && gaugeOptionsi.cell.border.width) {\n                context.strokeStyle = gaugeOptionsi.cell.border.color;\n                context.lineWidth = gaugeOptionsi.cell.border.width;\n                context.strokeRect(cellLayout.x, cellLayout.y, cellLayout.cellWidth, cellLayout.cellHeight);\n            }\n            if (gaugeOptionsi.cell.background && gaugeOptionsi.cell.background.color) {\n                context.fillStyle = gaugeOptionsi.cell.background.color;\n                context.fillRect(cellLayout.x, cellLayout.y, cellLayout.cellWidth, cellLayout.cellHeight);\n            }\n            context.restore();\n        }\n\n        /**\n         * draw the gauge\n         *\n         * @method drawGauge\n         * @param  {Object} gaugeOptionsi the options of the gauge\n         * @param  {Object} layout the layout properties\n         * @param  {Object} cellLayout the cell layout properties\n         * @param  {String} label the label of data\n         * @param  {Number} data the value of the gauge\n         */\n        Gauge.prototype.drawGauge = function(gaugeOptionsi, layout, cellLayout, label, data) {\n\n\n            var blur = gaugeOptionsi.gauge.shadow.show ? gaugeOptionsi.gauge.shadow.blur : 0;\n\n\n            // draw gauge frame\n            drawArcWithShadow(\n                cellLayout.cx, // center x\n                cellLayout.cy, // center y\n                layout.radius,\n                layout.width,\n                toRad(gaugeOptionsi.gauge.startAngle),\n                toRad(gaugeOptionsi.gauge.endAngle),\n                gaugeOptionsi.gauge.border.color,      // line color\n                gaugeOptionsi.gauge.border.width,      // line width\n                gaugeOptionsi.gauge.background.color,  // fill color\n                blur);\n\n            // draw gauge\n            var c1 = getColor(gaugeOptionsi, data);\n            var a2 = calculateAngle(gaugeOptionsi, layout, data);\n            drawArcWithShadow(\n                cellLayout.cx, // center x\n                cellLayout.cy, // center y\n                layout.radius - 1,\n                layout.width - 2,\n                toRad(gaugeOptionsi.gauge.startAngle),\n                toRad(a2),\n                c1,           // line color\n                1,            // line width\n                c1,           // fill color\n                blur);\n        }\n\n        /**\n         * decide the color of the data from the threshold options\n         *\n         * @method getColor\n         * @private\n         * @param  {Object} gaugeOptionsi the options of the gauge\n         * @param  {Number} data the value of the gauge\n         */\n        function getColor(gaugeOptionsi, data) {\n            var color;\n            for (var i = 0; i < gaugeOptionsi.threshold.values.length; i++) {\n                var threshold = gaugeOptionsi.threshold.values[i];\n                color = threshold.color;\n                if (data < threshold.value) {\n                    break;\n                }\n            }\n            return color;\n        }\n\n        /**\n         * calculate the angle of the data\n         *\n         * @method calculateAngle\n         * @private\n         * @param  {Object} gaugeOptionsi the options of the gauge\n         * @param  {Object} layout the layout properties\n         * @param  {Number} data the value of the gauge\n         */\n        function calculateAngle(gaugeOptionsi, layout, data) {\n            var a =\n                gaugeOptionsi.gauge.startAngle\n                    + (gaugeOptionsi.gauge.endAngle - gaugeOptionsi.gauge.startAngle)\n                        * ((data - gaugeOptionsi.gauge.min) / (gaugeOptionsi.gauge.max - gaugeOptionsi.gauge.min));\n\n            if (a < gaugeOptionsi.gauge.startAngle) {\n                a = gaugeOptionsi.gauge.startAngle;\n            } else if (a > gaugeOptionsi.gauge.endAngle) {\n                a = gaugeOptionsi.gauge.endAngle;\n            }\n            return a;\n        }\n\n        /**\n         * draw the arc of the threshold\n         *\n         * @method drawThreshold\n         * @param  {Object} gaugeOptionsi the options of the gauge\n         * @param  {Object} layout the layout properties\n         * @param  {Object} cellLayout the cell layout properties\n         */\n        Gauge.prototype.drawThreshold = function(gaugeOptionsi, layout, cellLayout) {\n\n            var a1 = gaugeOptionsi.gauge.startAngle;\n            for (var i = 0; i < gaugeOptionsi.threshold.values.length; i++) {\n                var threshold = gaugeOptionsi.threshold.values[i];\n                c1 = threshold.color;\n                a2 = calculateAngle(gaugeOptionsi, layout, threshold.value);\n                drawArc(\n                    context,\n                    cellLayout.cx, // center x\n                    cellLayout.cy, // center y\n                    layout.radius + layout.thresholdWidth,\n                    layout.thresholdWidth - 2,\n                    toRad(a1),\n                    toRad(a2),\n                    c1,           // line color\n                    1,            // line width\n                    c1);          // fill color\n                a1 = a2;\n            }\n        }\n\n        /**\n         * draw an arc with a shadow\n         *\n         * @method drawArcWithShadow\n         * @private\n         * @param  {Number} cx the x position of the center\n         * @param  {Number} cy the y position of the center\n         * @param  {Number} r the radius of an arc\n         * @param  {Number} w the width of an arc\n         * @param  {Number} rd1 the start angle of an arc in radians\n         * @param  {Number} rd2 the end angle of an arc in radians\n         * @param  {String} lc the color of a line\n         * @param  {Number} lw the widht of a line\n         * @param  {String} fc the fill color  of an arc\n         * @param  {Number} blur the shdow blur\n         */\n        function drawArcWithShadow(cx, cy, r, w, rd1, rd2, lc, lw, fc, blur) {\n            if (rd1 === rd2) {\n                return;\n            }\n            context.save();\n\n            drawArc(context, cx, cy, r, w, rd1, rd2, lc, lw, fc);\n\n            if (blur) {\n                drawArc(context, cx, cy, r, w, rd1, rd2);\n                context.clip();\n                context.shadowOffsetX = 0;\n                context.shadowOffsetY = 0;\n                context.shadowBlur = 10;\n                context.shadowColor = \"gray\";\n                drawArc(context, cx, cy, r + 1, w + 2, rd1, rd2, lc, 1);\n            }\n            context.restore();\n        }\n\n        /**\n         * draw the label of the gauge\n         *\n         * @method drawLable\n         * @param  {Object} gaugeOptionsi the options of the gauge\n         * @param  {Object} layout the layout properties\n         * @param  {Object} cellLayout the cell layout properties\n         * @param  {Number} i the index of the series\n         * @param  {Object} item the item of the series\n         */\n        Gauge.prototype.drawLable = function(gaugeOptionsi, layout, cellLayout, i, item) {\n\n            drawText(\n                cellLayout.cx,\n                cellLayout.y + cellLayout.cellMargin + layout.labelMargin + cellLayout.offsetY,\n                \"flotGagueLabel\" + i,\n                gaugeOptionsi.label.formatter ? gaugeOptionsi.label.formatter(item.label, item.data[0][1]) : text,\n                gaugeOptionsi.label);\n        }\n\n        /**\n         * draw the value of the gauge\n         *\n         * @method drawValue\n         * @param  {Object} gaugeOptionsi the options of the gauge\n         * @param  {Object} layout the layout properties\n         * @param  {Object} cellLayout the cell layout properties\n         * @param  {Number} i the index of the series\n         * @param  {Object} item the item of the series\n         */\n        Gauge.prototype.drawValue = function(gaugeOptionsi, layout, cellLayout, i, item) {\n\n            drawText(\n                cellLayout.cx,\n                cellLayout.cy - (gaugeOptionsi.value.font.size / 2),\n                \"flotGagueValue\" + i,\n                gaugeOptionsi.value.formatter ? gaugeOptionsi.value.formatter(item.label, item.data[0][1]) : text,\n                gaugeOptionsi.value);\n        }\n\n        /**\n         * draw the values of the threshold\n         *\n         * @method drawThresholdValues\n         * @param  {Object} gaugeOptionsi the options of the gauge\n         * @param  {Object} layout the layout properties\n         * @param  {Object} cellLayout the cell layout properties\n         * @param  {Number} i the index of the series\n         */\n        Gauge.prototype.drawThresholdValues = function(gaugeOptionsi, layout, cellLayout, i) {\n\n            // min, max\n            drawThresholdValue(gaugeOptionsi, layout, cellLayout, \"Min\" + i, gaugeOptionsi.gauge.min, gaugeOptionsi.gauge.startAngle);\n            drawThresholdValue(gaugeOptionsi, layout, cellLayout, \"Max\" + i, gaugeOptionsi.gauge.max, gaugeOptionsi.gauge.endAngle);\n            // threshold values\n            for (var j = 0; j < gaugeOptionsi.threshold.values.length; j++) {\n                var threshold = gaugeOptionsi.threshold.values[j];\n                if (threshold.value > gaugeOptionsi.gauge.min && threshold.value < gaugeOptionsi.gauge.max) {\n                    var a = calculateAngle(gaugeOptionsi, layout, threshold.value);\n                    drawThresholdValue(gaugeOptionsi, layout, cellLayout, i + \"_\" + j, threshold.value, a);\n                }\n            }\n        }\n\n        /**\n         * draw the value of the threshold\n         *\n         * @method drawThresholdValue\n         * @param  {Object} gaugeOptionsi the options of the gauge\n         * @param  {Object} layout the layout properties\n         * @param  {Object} cellLayout the cell layout properties\n         * @param  {Number} i the index of the series\n         * @param  {Number} value the value of the threshold\n         * @param  {Number} a the angle of the value drawn\n         */\n        function drawThresholdValue(gaugeOptionsi, layout, cellLayout, i, value, a) {\n            drawText(\n                cellLayout.cx\n                    + ((layout.thresholdLabelMargin + (layout.thresholdLabelFontSize / 2) + layout.radius)\n                        * Math.cos(toRad(a))),\n                cellLayout.cy\n                    + ((layout.thresholdLabelMargin + (layout.thresholdLabelFontSize / 2) + layout.radius)\n                        * Math.sin(toRad(a))),\n                \"flotGagueThresholdValue\" + i,\n                gaugeOptionsi.threshold.label.formatter ? gaugeOptionsi.threshold.label.formatter(value) : value,\n                gaugeOptionsi.threshold.label,\n                a);\n        }\n\n        /**\n         * draw a text\n         *\n         * the textOptions is assumed as follows:\n         *\n         *   textOptions: {\n         *       background: {\n         *           color: null,\n         *           opacity: 0\n         *       },\n         *       font: {\n         *           size: \"auto\"\n         *           family: \"\\\"ＭＳ ゴシック\\\",sans-serif\"\n         *       },\n         *       color: null\n         *   }\n         *\n         * @method drawText\n         * @private\n         * @param  {Number} x the x position of the text drawn (left top)\n         * @param  {Number} y the y position of the text drawn (left top)\n         * @param  {String} id the id of the dom element\n         * @param  {String} text the text drawn\n         * @param  {Object} textOptions the option of the text\n         * @param  {Number} [a] the angle of the value drawn\n         */\n        function drawText(x, y, id, text, textOptions, a) {\n            var span = $(\".\" + id, placeholder);\n            var exists = span.length;\n            if (!exists) {\n                span = $(\"<span></span>\")\n                span.attr(\"id\", id);\n                span.css(\"position\", \"absolute\");\n                span.css(\"top\", y + \"px\");\n                if (textOptions.font.size) {\n                    span.css(\"font-size\", textOptions.font.size + \"px\");\n                }\n                if (textOptions.font.family) {\n                    span.css(\"font-family\", textOptions.font.family);\n                }\n                if (textOptions.color) {\n                    span.css(\"color\", textOptions.color);\n                }\n                if (textOptions.background.color) {\n                    span.css(\"background-color\", textOptions.background.color);\n                }\n                if (textOptions.background.opacity) {\n                    span.css(\"opacity\", textOptions.background.opacity);\n                }\n                placeholder.append(span);\n            }\n            span.text(text);\n            // after append, readjust the left position\n            span.css(\"left\", x + \"px\"); // for redraw, resetting the left position is needed here\n            span.css(\"left\", (parseInt(span.css(\"left\")) - (span.width()/ 2)) + \"px\");\n\n            // at last, set angle\n            if (!exists && a) {\n                span.css(\"top\", (parseInt(span.css(\"top\")) - (span.height()/ 2)) + \"px\");\n                span.css(\"transform\", \"rotate(\" + ((180 * a) + 90) + \"deg)\"); // not supported for ie8\n            }\n        }\n\n        return Gauge;\n    })();\n    /**\n     * get a instance of Logger\n     *\n     * @method  getLogger\n     * @for flot.gauge\n     * @private\n     * @param  {Object} debugOptions the options of debug\n     */\n    function getLogger(debugOptions) {\n        return typeof Logger !== \"undefined\" ? new Logger(debugOptions) : null;\n    }\n\n    /**\n     * calculate the index of columns for the specified data\n     *\n     * @method col\n     * @for flot.gauge\n     * @param  {Number} columns the number of columns\n     * @param  {Number} i       the index of the series\n     * @return the index of columns\n     */\n    function col(columns, i) {\n        return i % columns;\n    }\n\n    /**\n     * calculate the index of rows for the specified data\n     *\n     * @method row\n     * @for flot.gauge\n     * @param  {Number} columns the number of rows\n     * @param  {Number} i       the index of the series\n     * @return the index of rows\n     */\n    function row(columns, i) {\n        return Math.floor(i / columns);\n    }\n\n    /**\n     * calculate the angle in radians\n     *\n     * internally, use a number without PI (0 - 2).\n     * so, in this function, multiply PI\n     *\n     * @method toRad\n     * @for flot.gauge\n     * @param  {Number} a the number of angle without PI\n     * @return the angle in radians\n     */\n    function toRad(a) {\n        return a * Math.PI;\n    }\n\n    /**\n     * draw an arc\n     *\n     * @method drawArc\n     * @for flot.gauge\n     * @param  {Object} context the context of canvas\n     * @param  {Number} cx the x position of the center\n     * @param  {Number} cy the y position of the center\n     * @param  {Number} r the radius of an arc\n     * @param  {Number} w the width of an arc\n     * @param  {Number} rd1 the start angle of an arc in radians\n     * @param  {Number} rd2 the end angle of an arc in radians\n     * @param  {String} lc the color of a line\n     * @param  {Number} lw the widht of a line\n     * @param  {String} fc the fill color  of an arc\n     */\n    function drawArc(context, cx, cy, r, w, rd1, rd2, lc, lw, fc) {\n        if (rd1 === rd2) {\n            return;\n        }\n        var counterClockwise = false;\n        context.save();\n        context.beginPath();\n        context.arc(cx, cy, r, rd1, rd2, counterClockwise);\n        context.lineTo(cx + (r - w) * Math.cos(rd2),\n                       cy + (r - w) * Math.sin(rd2));\n        context.arc(cx, cy, r - w, rd2, rd1, !counterClockwise);\n        context.closePath();\n        if (lw) {\n            context.lineWidth = lw;\n        }\n        if (lc) {\n            context.strokeStyle = lc;\n            context.stroke();\n        }\n        if (fc) {\n            context.fillStyle = fc;\n            context.fill();\n        }\n        context.restore();\n    }\n\n    /**\n     * initialize plugin\n     *\n     * @method init\n     * @for flot.gauge\n     * @private\n     * @param  {Object} plot a instance of plot\n     */\n    function init (plot) {\n        // add processOptions hook\n        plot.hooks.processOptions.push(function(plot, options) {\n            var logger = getLogger(options.series.gauges.debug);\n\n\n\n\n            // turn 'grid' and 'legend' off\n            if (options.series.gauges.show) {\n                options.grid.show = false;\n                options.legend.show = false;\n            }\n\n            // sort threshold\n            var thresholds = options.series.gauges.threshold.values;\n\n            thresholds.sort(function(a, b) {\n                if (a.value < b.value) {\n                    return -1;\n                } else if (a.value > b.value) {\n                    return 1;\n                } else {\n                    return 0;\n                }\n            });\n\n\n\n        });\n\n        // add draw hook\n        plot.hooks.draw.push(function(plot, context) {\n            var options = plot.getOptions();\n            var gaugeOptions = options.series.gauges;\n\n            var logger = getLogger(gaugeOptions.debug);\n\n\n            if (!gaugeOptions.show) {\n                return;\n            }\n\n            var series = plot.getData();\n\n            if (!series || !series.length) {\n                return; // if no series were passed\n            }\n\n            var gauge = new Gauge(plot, context);\n\n            // calculate layout\n            var layout = gauge.calculateLayout();\n\n            // debug layout\n            if (gaugeOptions.debug.layout) {\n\n            }\n\n            // draw background\n            gauge.drawBackground(layout)\n\n            // draw cells (label, gauge, value, threshold)\n            for (var i = 0; i < series.length; i++) {\n                var item = series[i];\n\n                var gaugeOptionsi = $.extend({}, gaugeOptions, item.gauges);\n                if (item.gauges) {\n                    // re-calculate 'auto' values\n                    gauge.calculateAutoValues(gaugeOptionsi, layout.cellWidth);\n                }\n\n                // calculate cell layout\n                var cellLayout = gauge.calculateCellLayout(gaugeOptionsi, layout, i);\n\n                // draw cell background\n                gauge.drawCellBackground(gaugeOptionsi, cellLayout)\n                // debug layout\n                if (gaugeOptionsi.debug.layout) {\n\n                }\n                // draw label\n                if (gaugeOptionsi.label.show) {\n                    gauge.drawLable(gaugeOptionsi, layout, cellLayout, i, item);\n                }\n                // draw gauge\n                gauge.drawGauge(gaugeOptionsi, layout, cellLayout, item.label, item.data[0][1]);\n                // draw threshold\n                if (gaugeOptionsi.threshold.show) {\n                    gauge.drawThreshold(gaugeOptionsi, layout, cellLayout);\n                }\n                if (gaugeOptionsi.threshold.label.show) {\n                    gauge.drawThresholdValues(gaugeOptionsi, layout, cellLayout, i)\n                }\n                // draw value\n                if (gaugeOptionsi.value.show) {\n                    gauge.drawValue(gaugeOptionsi, layout, cellLayout, i, item);\n                }\n            }\n        });\n    }\n\n    /**\n     * [defaults description]\n     *\n     * @property defaults\n     * @type {Object}\n     */\n    var defaults = {\n        series: {\n            gauges: {\n                debug: {\n                    log: false,\n                    layout: false,\n                    alert: false\n                },\n                show: false,\n                layout: {\n                    margin: 5,\n                    columns: 3,\n                    hMargin: 5,\n                    vMargin: 5,\n                    square: false\n                },\n                frame: {\n                    show: true\n                },\n                cell: {\n                    background: {\n                        color: null\n                    },\n                    border: {\n                        show: true,\n                        color: \"black\",\n                        width: 1\n                    },\n                    margin: 5,\n                    vAlign: \"middle\" // 'top' or 'middle' or 'bottom'\n                },\n                gauge: {\n                    width: \"auto\", // a specified number, or 'auto'\n                    startAngle: 0.9, // 0 - 2 factor of the radians\n                    endAngle: 2.1, // 0 - 2 factor of the radians\n                    min: 0,\n                    max: 100,\n                    background: {\n                        color: \"white\"\n                    },\n                    border: {\n                        color: \"lightgray\",\n                        width: 2\n                    },\n                    shadow: {\n                        show: true,\n                        blur: 5\n                    }\n                },\n                label: {\n                    show: true,\n                    margin: \"auto\", // a specified number, or 'auto'\n                    background: {\n                        color: null,\n                        opacity: 0\n                    },\n                    font: {\n                        size: \"auto\", // a specified number, or 'auto'\n                        family: \"sans-serif\"\n                    },\n                    color: null,\n                    formatter: function(label, value) {\n                        return label;\n                    }\n                },\n                value: {\n                    show: true,\n                    margin: \"auto\", // a specified number, or 'auto'\n                    background: {\n                        color: null,\n                        opacity: 0\n                    },\n                    font: {\n                        size: \"auto\", // a specified number, or 'auto'\n                        family: \"sans-serif\"\n                    },\n                    color: null,\n                    formatter: function(label, value) {\n                        return parseInt(value);\n                    }\n                },\n                threshold: {\n                    show: true,\n                    width: \"auto\", // a specified number, or 'auto'\n                    label: {\n                        show: true,\n                        margin: \"auto\", // a specified number, or 'auto'\n                        background: {\n                            color: null,\n                            opacity: 0\n                        },\n                        font: {\n                            size: \"auto\", // a specified number, or 'auto'\n                            family: \",sans-serif\"\n                        },\n                        color: null,\n                        formatter: function(value) {\n                            return value;\n                        }\n                    },\n                    values: [\n                        {\n                            value: 50,\n                            color: \"lightgreen\"\n                        }, {\n                            value: 80,\n                            color: \"yellow\"\n                        }, {\n                            value: 100,\n                            color: \"red\"\n                        }\n                    ]\n                }\n            }\n        }\n    };\n\n    // register the gauge plugin\n    $.plot.plugins.push({\n        init: init,\n        options: defaults,\n        name: \"gauge\",\n        version: \"1.1.0\"\n    });\n\n})(jQuery);\n","/*\n * jQuery.flot.dashes\n *\n * options = {\n *   series: {\n *     dashes: {\n *\n *       // show\n *       // default: false\n *       // Whether to show dashes for the series.\n *       show: <boolean>,\n *\n *       // lineWidth\n *       // default: 2\n *       // The width of the dashed line in pixels.\n *       lineWidth: <number>,\n *\n *       // dashLength\n *       // default: 10\n *       // Controls the length of the individual dashes and the amount of\n *       // space between them.\n *       // If this is a number, the dashes and spaces will have that length.\n *       // If this is an array, it is read as [ dashLength, spaceLength ]\n *       dashLength: <number> or <array[2]>\n *     }\n *   }\n * }\n */\n(function($){\n\n  function init(plot) {\n\n    plot.hooks.processDatapoints.push(function(plot, series, datapoints) {\n\n      if (!series.dashes.show) return;\n\n      plot.hooks.draw.push(function(plot, ctx) {\n\n        var plotOffset = plot.getPlotOffset(),\n          axisx = series.xaxis,\n          axisy = series.yaxis;\n\n        function plotDashes(xoffset, yoffset) {\n\n          var points = datapoints.points,\n            ps = datapoints.pointsize,\n            prevx = null,\n            prevy = null,\n            dashRemainder = 0,\n            dashOn = true,\n            dashOnLength,\n            dashOffLength;\n\n          if (series.dashes.dashLength[0]) {\n            dashOnLength = series.dashes.dashLength[0];\n            if (series.dashes.dashLength[1]) {\n              dashOffLength = series.dashes.dashLength[1];\n            } else {\n              dashOffLength = dashOnLength;\n            }\n          } else {\n            dashOffLength = dashOnLength = series.dashes.dashLength;\n          }\n\n          ctx.beginPath();\n\n          for (var i = ps; i < points.length; i += ps) {\n\n            var x1 = points[i - ps],\n              y1 = points[i - ps + 1],\n              x2 = points[i],\n              y2 = points[i + 1];\n\n            if (x1 == null || x2 == null) continue;\n\n            // clip with ymin\n            if (y1 <= y2 && y1 < axisy.min) {\n              if (y2 < axisy.min) continue;   // line segment is outside\n              // compute new intersection point\n              x1 = (axisy.min - y1) / (y2 - y1) * (x2 - x1) + x1;\n              y1 = axisy.min;\n            } else if (y2 <= y1 && y2 < axisy.min) {\n              if (y1 < axisy.min) continue;\n              x2 = (axisy.min - y1) / (y2 - y1) * (x2 - x1) + x1;\n              y2 = axisy.min;\n            }\n\n            // clip with ymax\n            if (y1 >= y2 && y1 > axisy.max) {\n              if (y2 > axisy.max) continue;\n              x1 = (axisy.max - y1) / (y2 - y1) * (x2 - x1) + x1;\n              y1 = axisy.max;\n            } else if (y2 >= y1 && y2 > axisy.max) {\n              if (y1 > axisy.max) continue;\n              x2 = (axisy.max - y1) / (y2 - y1) * (x2 - x1) + x1;\n              y2 = axisy.max;\n            }\n\n            // clip with xmin\n            if (x1 <= x2 && x1 < axisx.min) {\n              if (x2 < axisx.min) continue;\n              y1 = (axisx.min - x1) / (x2 - x1) * (y2 - y1) + y1;\n              x1 = axisx.min;\n            } else if (x2 <= x1 && x2 < axisx.min) {\n              if (x1 < axisx.min) continue;\n              y2 = (axisx.min - x1) / (x2 - x1) * (y2 - y1) + y1;\n              x2 = axisx.min;\n            }\n\n            // clip with xmax\n            if (x1 >= x2 && x1 > axisx.max) {\n              if (x2 > axisx.max) continue;\n              y1 = (axisx.max - x1) / (x2 - x1) * (y2 - y1) + y1;\n              x1 = axisx.max;\n            } else if (x2 >= x1 && x2 > axisx.max) {\n              if (x1 > axisx.max) continue;\n              y2 = (axisx.max - x1) / (x2 - x1) * (y2 - y1) + y1;\n              x2 = axisx.max;\n            }\n\n            if (x1 != prevx || y1 != prevy) {\n              ctx.moveTo(axisx.p2c(x1) + xoffset, axisy.p2c(y1) + yoffset);\n            }\n\n            var ax1 = axisx.p2c(x1) + xoffset,\n              ay1 = axisy.p2c(y1) + yoffset,\n              ax2 = axisx.p2c(x2) + xoffset,\n              ay2 = axisy.p2c(y2) + yoffset,\n              dashOffset;\n\n            function lineSegmentOffset(segmentLength) {\n\n              var c = Math.sqrt(Math.pow(ax2 - ax1, 2) + Math.pow(ay2 - ay1, 2));\n\n              if (c <= segmentLength) {\n                return {\n                  deltaX: ax2 - ax1,\n                  deltaY: ay2 - ay1,\n                  distance: c,\n                  remainder: segmentLength - c\n                }\n              } else {\n                var xsign = ax2 > ax1 ? 1 : -1,\n                  ysign = ay2 > ay1 ? 1 : -1;\n                return {\n                  deltaX: xsign * Math.sqrt(Math.pow(segmentLength, 2) / (1 + Math.pow((ay2 - ay1)/(ax2 - ax1), 2))),\n                  deltaY: ysign * Math.sqrt(Math.pow(segmentLength, 2) - Math.pow(segmentLength, 2) / (1 + Math.pow((ay2 - ay1)/(ax2 - ax1), 2))),\n                  distance: segmentLength,\n                  remainder: 0\n                };\n              }\n            }\n            //-end lineSegmentOffset\n\n            do {\n\n              dashOffset = lineSegmentOffset(\n                dashRemainder > 0 ? dashRemainder :\n                  dashOn ? dashOnLength : dashOffLength);\n\n              if (dashOffset.deltaX != 0 || dashOffset.deltaY != 0) {\n                if (dashOn) {\n                  ctx.lineTo(ax1 + dashOffset.deltaX, ay1 + dashOffset.deltaY);\n                } else {\n                  ctx.moveTo(ax1 + dashOffset.deltaX, ay1 + dashOffset.deltaY);\n                }\n              }\n\n              dashOn = !dashOn;\n              dashRemainder = dashOffset.remainder;\n              ax1 += dashOffset.deltaX;\n              ay1 += dashOffset.deltaY;\n\n            } while (dashOffset.distance > 0);\n\n            prevx = x2;\n            prevy = y2;\n          }\n\n          ctx.stroke();\n        }\n        //-end plotDashes\n\n        ctx.save();\n        ctx.translate(plotOffset.left, plotOffset.top);\n        ctx.lineJoin = 'round';\n\n        var lw = series.dashes.lineWidth,\n          sw = series.shadowSize;\n\n        // FIXME: consider another form of shadow when filling is turned on\n        if (lw > 0 && sw > 0) {\n          // draw shadow as a thick and thin line with transparency\n          ctx.lineWidth = sw;\n          ctx.strokeStyle = \"rgba(0,0,0,0.1)\";\n          // position shadow at angle from the mid of line\n          var angle = Math.PI/18;\n          plotDashes(Math.sin(angle) * (lw/2 + sw/2), Math.cos(angle) * (lw/2 + sw/2));\n          ctx.lineWidth = sw/2;\n          plotDashes(Math.sin(angle) * (lw/2 + sw/4), Math.cos(angle) * (lw/2 + sw/4));\n        }\n\n        ctx.lineWidth = lw;\n        ctx.strokeStyle = series.color;\n\n        if (lw > 0) {\n          plotDashes(0, 0);\n        }\n\n        ctx.restore();\n\n      });\n      //-end draw hook\n\n    });\n    //-end processDatapoints hook\n\n  }\n  //-end init\n\n  $.plot.plugins.push({\n    init: init,\n    options: {\n      series: {\n        dashes: {\n          show: false,\n          lineWidth: 2,\n          dashLength: 10\n        }\n      }\n    },\n    name: 'dashes',\n    version: '0.1'\n  });\n\n})(jQuery)\n","/* Flot plugin for showing crosshairs when the mouse hovers over the plot.\n\nCopyright (c) 2007-2014 IOLA and Ole Laursen.\nLicensed under the MIT license.\n\nThe plugin supports these options:\n\n\tcrosshair: {\n\t\tmode: null or \"x\" or \"y\" or \"xy\"\n\t\tcolor: color\n\t\tlineWidth: number\n\t}\n\nSet the mode to one of \"x\", \"y\" or \"xy\". The \"x\" mode enables a vertical\ncrosshair that lets you trace the values on the x axis, \"y\" enables a\nhorizontal crosshair and \"xy\" enables them both. \"color\" is the color of the\ncrosshair (default is \"rgba(170, 0, 0, 0.80)\"), \"lineWidth\" is the width of\nthe drawn lines (default is 1).\n\nThe plugin also adds four public methods:\n\n  - setCrosshair( pos )\n\n    Set the position of the crosshair. Note that this is cleared if the user\n    moves the mouse. \"pos\" is in coordinates of the plot and should be on the\n    form { x: xpos, y: ypos } (you can use x2/x3/... if you're using multiple\n    axes), which is coincidentally the same format as what you get from a\n    \"plothover\" event. If \"pos\" is null, the crosshair is cleared.\n\n  - clearCrosshair()\n\n    Clear the crosshair.\n\n  - lockCrosshair(pos)\n\n    Cause the crosshair to lock to the current location, no longer updating if\n    the user moves the mouse. Optionally supply a position (passed on to\n    setCrosshair()) to move it to.\n\n    Example usage:\n\n\tvar myFlot = $.plot( $(\"#graph\"), ..., { crosshair: { mode: \"x\" } } };\n\t$(\"#graph\").bind( \"plothover\", function ( evt, position, item ) {\n\t\tif ( item ) {\n\t\t\t// Lock the crosshair to the data point being hovered\n\t\t\tmyFlot.lockCrosshair({\n\t\t\t\tx: item.datapoint[ 0 ],\n\t\t\t\ty: item.datapoint[ 1 ]\n\t\t\t});\n\t\t} else {\n\t\t\t// Return normal crosshair operation\n\t\t\tmyFlot.unlockCrosshair();\n\t\t}\n\t});\n\n  - unlockCrosshair()\n\n    Free the crosshair to move again after locking it.\n*/\n\n(function ($) {\n    var options = {\n        crosshair: {\n            mode: null, // one of null, \"x\", \"y\" or \"xy\",\n            color: \"rgba(170, 0, 0, 0.80)\",\n            lineWidth: 1\n        }\n    };\n    \n    function init(plot) {\n        // position of crosshair in pixels\n        var crosshair = { x: -1, y: -1, locked: false };\n\n        plot.setCrosshair = function setCrosshair(pos) {\n            if (!pos)\n                crosshair.x = -1;\n            else {\n                var o = plot.p2c(pos);\n                crosshair.x = Math.max(0, Math.min(o.left, plot.width()));\n                crosshair.y = Math.max(0, Math.min(o.top, plot.height()));\n            }\n            \n            plot.triggerRedrawOverlay();\n        };\n        \n        plot.clearCrosshair = plot.setCrosshair; // passes null for pos\n        \n        plot.lockCrosshair = function lockCrosshair(pos) {\n            if (pos)\n                plot.setCrosshair(pos);\n            crosshair.locked = true;\n        };\n\n        plot.unlockCrosshair = function unlockCrosshair() {\n            crosshair.locked = false;\n        };\n\n        function onMouseOut(e) {\n            if (crosshair.locked)\n                return;\n\n            if (crosshair.x != -1) {\n                crosshair.x = -1;\n                plot.triggerRedrawOverlay();\n            }\n        }\n\n        function onMouseMove(e) {\n            if (crosshair.locked)\n                return;\n                \n            if (plot.getSelection && plot.getSelection()) {\n                crosshair.x = -1; // hide the crosshair while selecting\n                return;\n            }\n                \n            var offset = plot.offset();\n            crosshair.x = Math.max(0, Math.min(e.pageX - offset.left, plot.width()));\n            crosshair.y = Math.max(0, Math.min(e.pageY - offset.top, plot.height()));\n            plot.triggerRedrawOverlay();\n        }\n        \n        plot.hooks.bindEvents.push(function (plot, eventHolder) {\n            if (!plot.getOptions().crosshair.mode)\n                return;\n\n            eventHolder.mouseout(onMouseOut);\n            eventHolder.mousemove(onMouseMove);\n        });\n\n        plot.hooks.drawOverlay.push(function (plot, ctx) {\n            var c = plot.getOptions().crosshair;\n            if (!c.mode)\n                return;\n\n            var plotOffset = plot.getPlotOffset();\n            \n            ctx.save();\n            ctx.translate(plotOffset.left, plotOffset.top);\n\n            if (crosshair.x != -1) {\n                var adj = plot.getOptions().crosshair.lineWidth % 2 ? 0.5 : 0;\n\n                ctx.strokeStyle = c.color;\n                ctx.lineWidth = c.lineWidth;\n                ctx.lineJoin = \"round\";\n\n                ctx.beginPath();\n                if (c.mode.indexOf(\"x\") != -1) {\n                    var drawX = Math.floor(crosshair.x) + adj;\n                    ctx.moveTo(drawX, 0);\n                    ctx.lineTo(drawX, plot.height());\n                }\n                if (c.mode.indexOf(\"y\") != -1) {\n                    var drawY = Math.floor(crosshair.y) + adj;\n                    ctx.moveTo(0, drawY);\n                    ctx.lineTo(plot.width(), drawY);\n                }\n                ctx.stroke();\n            }\n            ctx.restore();\n        });\n\n        plot.hooks.shutdown.push(function (plot, eventHolder) {\n            eventHolder.unbind(\"mouseout\", onMouseOut);\n            eventHolder.unbind(\"mousemove\", onMouseMove);\n        });\n    }\n    \n    $.plot.plugins.push({\n        init: init,\n        options: options,\n        name: 'crosshair',\n        version: '1.0'\n    });\n})(jQuery);\n","(function($) {\n    \"use strict\";\n\n    var options = {\n        series: {\n            fillBelowTo: null\n        }\n    };\n\n    function init(plot) {\n        function findBelowSeries( series, allseries ) {\n\n            var i;\n\n            for ( i = 0; i < allseries.length; ++i ) {\n                if ( allseries[ i ].id === series.fillBelowTo ) {\n                    return allseries[ i ];\n                }\n            }\n\n            return null;\n        }\n\n        /* top and bottom doesn't actually matter for this, we're just using it to help make this easier to think about */\n        /* this is a vector cross product operation */\n        function segmentIntersection(top_left_x, top_left_y, top_right_x, top_right_y, bottom_left_x, bottom_left_y, bottom_right_x, bottom_right_y) {\n            var top_delta_x, top_delta_y, bottom_delta_x, bottom_delta_y,\n                s, t;\n\n            top_delta_x = top_right_x - top_left_x;\n            top_delta_y = top_right_y - top_left_y;\n            bottom_delta_x = bottom_right_x - bottom_left_x;\n            bottom_delta_y = bottom_right_y - bottom_left_y;\n\n            s = (\n                (-top_delta_y * (top_left_x - bottom_left_x)) + (top_delta_x * (top_left_y - bottom_left_y))\n            ) / (\n                -bottom_delta_x * top_delta_y + top_delta_x * bottom_delta_y\n            );\n\n            t = (\n                (bottom_delta_x * (top_left_y - bottom_left_y)) - (bottom_delta_y * (top_left_x - bottom_left_x))\n            ) / (\n                -bottom_delta_x * top_delta_y + top_delta_x * bottom_delta_y\n            );\n\n            // Collision detected\n            if (s >= 0 && s <= 1 && t >= 0 && t <= 1) {\n                return [\n                    top_left_x + (t * top_delta_x), // X\n                    top_left_y + (t * top_delta_y) // Y\n                ];\n            }\n\n            // No collision\n            return null;\n        }\n\n        function plotDifferenceArea(plot, ctx, series) {\n            if ( series.fillBelowTo === null ) {\n                return;\n            }\n\n            var otherseries,\n\n                ps,\n                points,\n\n                otherps,\n                otherpoints,\n\n                plotOffset,\n                fillStyle;\n\n            function openPolygon(x, y) {\n                ctx.beginPath();\n                ctx.moveTo(\n                    series.xaxis.p2c(x) + plotOffset.left,\n                    series.yaxis.p2c(y) + plotOffset.top\n                );\n\n            }\n\n            function closePolygon() {\n                ctx.closePath();\n                ctx.fill();\n            }\n\n            function validateInput() {\n                if (points.length/ps !== otherpoints.length/otherps) {\n                    console.error(\"Refusing to graph inconsistent number of points\");\n                    return false;\n                }\n\n                var i;\n                for (i = 0; i < (points.length / ps); i++) {\n                    if (\n                        points[i * ps] !== null &&\n                        otherpoints[i * otherps] !== null &&\n                        points[i * ps] !== otherpoints[i * otherps]\n                    ) {\n                        console.error(\"Refusing to graph points without matching value\");\n                        return false;\n                    }\n                }\n\n                return true;\n            }\n\n            function findNextStart(start_i, end_i) {\n                console.assert(end_i > start_i, \"expects the end index to be greater than the start index\");\n\n                var start = (\n                        start_i === 0 ||\n                        points[start_i - 1] === null ||\n                        otherpoints[start_i - 1] === null\n                    ),\n                    equal = false,\n                    i,\n                    intersect;\n\n                for (i = start_i; i < end_i; i++) {\n                    // Take note of null points\n                    if (\n                        points[(i * ps) + 1] === null ||\n                        otherpoints[(i * ps) + 1] === null\n                    ) {\n                        equal = false;\n                        start = true;\n                    }\n\n                    // Take note of equal points\n                    else if (points[(i * ps) + 1] === otherpoints[(i * otherps) + 1]) {\n                        equal = true;\n                        start = false;\n                    }\n\n\n                    else if (points[(i * ps) + 1] > otherpoints[(i * otherps) + 1]) {\n                        // If we begin above the desired point\n                        if (start) {\n                            openPolygon(points[i * ps], points[(i * ps) + 1]);\n                        }\n\n                        // If an equal point preceeds this, start the polygon at that equal point\n                        else if (equal) {\n                            openPolygon(points[(i - 1) * ps], points[((i - 1) * ps) + 1]);\n                        }\n\n                        // Otherwise, find the intersection point, and start it there\n                        else {\n                            intersect = intersectionPoint(i);\n                            openPolygon(intersect[0], intersect[1]);\n                        }\n\n                        topTraversal(i, end_i);\n                        return;\n                    }\n\n                    // If we go below equal, equal at any preceeding point is irrelevant\n                    else {\n                        start = false;\n                        equal = false;\n                    }\n                }\n            }\n\n            function intersectionPoint(right_i) {\n                console.assert(right_i > 0, \"expects the second point in the series line segment\");\n\n                var i, intersect;\n\n                for (i = 1; i < (otherpoints.length/otherps); i++) {\n                    intersect = segmentIntersection(\n                        points[(right_i - 1) * ps], points[((right_i - 1) * ps) + 1],\n                        points[right_i * ps], points[(right_i * ps) + 1],\n\n                        otherpoints[(i - 1) * otherps], otherpoints[((i - 1) * otherps) + 1],\n                        otherpoints[i * otherps], otherpoints[(i * otherps) + 1]\n                    );\n\n                    if (intersect !== null) {\n                        return intersect;\n                    }\n                }\n\n                console.error(\"intersectionPoint() should only be called when an intersection happens\");\n            }\n\n            function bottomTraversal(start_i, end_i) {\n                console.assert(start_i >= end_i, \"the start should be the rightmost point, and the end should be the leftmost (excluding the equal or intersecting point)\");\n\n                var i;\n\n                for (i = start_i; i >= end_i; i--) {\n                    ctx.lineTo(\n                        otherseries.xaxis.p2c(otherpoints[i * otherps]) + plotOffset.left,\n                        otherseries.yaxis.p2c(otherpoints[(i * otherps) + 1]) + plotOffset.top\n                    );\n                }\n\n                closePolygon();\n            }\n\n            function topTraversal(start_i, end_i) {\n                console.assert(start_i <= end_i, \"the start should be the rightmost point, and the end should be the leftmost (excluding the equal or intersecting point)\");\n\n                var i,\n                    intersect;\n\n                for (i = start_i; i < end_i; i++) {\n                    if (points[(i * ps) + 1] === null && i > start_i) {\n                        bottomTraversal(i - 1, start_i);\n                        findNextStart(i, end_i);\n                        return;\n                    }\n\n                    else if (points[(i * ps) + 1] === otherpoints[(i * otherps) + 1]) {\n                        bottomTraversal(i, start_i);\n                        findNextStart(i, end_i);\n                        return;\n                    }\n\n                    else if (points[(i * ps) + 1] < otherpoints[(i * otherps) + 1]) {\n                        intersect = intersectionPoint(i);\n                        ctx.lineTo(\n                            series.xaxis.p2c(intersect[0]) + plotOffset.left,\n                            series.yaxis.p2c(intersect[1]) + plotOffset.top\n                        );\n                        bottomTraversal(i, start_i);\n                        findNextStart(i, end_i);\n                        return;\n\n                    }\n\n                    else {\n                        ctx.lineTo(\n                            series.xaxis.p2c(points[i * ps]) + plotOffset.left,\n                            series.yaxis.p2c(points[(i * ps) + 1]) + plotOffset.top\n                        );\n                    }\n                }\n\n                bottomTraversal(end_i, start_i);\n            }\n\n\n            // Begin processing\n\n            otherseries = findBelowSeries( series, plot.getData() );\n\n            if ( !otherseries ) {\n                return;\n            }\n\n            ps = series.datapoints.pointsize;\n            points = series.datapoints.points;\n            otherps = otherseries.datapoints.pointsize;\n            otherpoints = otherseries.datapoints.points;\n            plotOffset = plot.getPlotOffset();\n\n            if (!validateInput()) {\n                return;\n            }\n\n\n            // Flot's getFillStyle() should probably be exposed somewhere\n            fillStyle = $.color.parse(series.color);\n            fillStyle.a = 0.4;\n            fillStyle.normalize();\n            ctx.fillStyle = fillStyle.toString();\n\n\n            // Begin recursive bi-directional traversal\n            findNextStart(0, points.length/ps);\n        }\n\n        plot.hooks.drawSeries.push(plotDifferenceArea);\n    }\n\n    $.plot.plugins.push({\n        init: init,\n        options: options,\n        name: \"fillbelow\",\n        version: \"0.1.0\"\n    });\n\n})(jQuery);\n","(function ($) {\n    var options = {\n        series: {\n            stackpercent: null\n        } // or number/string\n    };\n\n    function init(plot) {\n\n        // will be built up dynamically as a hash from x-value, or y-value if horizontal\n        var stackBases = {};\n        var processed = false;\n        var stackSums = {};\n\n        //set percentage for stacked chart\n        function processRawData(plot, series, data, datapoints) {\n            if (!processed) {\n                processed = true;\n                stackSums = getStackSums(plot.getData());\n            }\n\t\t\tif (series.stackpercent == true) {\n\t\t\t\tvar num = data.length;\n\t\t\t\tseries.percents = [];\n\t\t\t\tvar key_idx = 0;\n\t\t\t\tvar value_idx = 1;\n\t\t\t\tif (series.bars && series.bars.horizontal && series.bars.horizontal === true) {\n\t\t\t\t\tkey_idx = 1;\n\t\t\t\t\tvalue_idx = 0;\n\t\t\t\t}\n\t\t\t\tfor (var j = 0; j < num; j++) {\n\t\t\t\t\tvar sum = stackSums[data[j][key_idx] + \"\"];\n\t\t\t\t\tif (sum > 0) {\n\t\t\t\t\t\tseries.percents.push(data[j][value_idx] * 100 / sum);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tseries.percents.push(0);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n        }\n\n        //calculate summary\n        function getStackSums(_data) {\n            var data_len = _data.length;\n            var sums = {};\n            if (data_len > 0) {\n                //caculate summary\n                for (var i = 0; i < data_len; i++) {\n                    if (_data[i].stackpercent) {\n\t\t\t\t\t\tvar key_idx = 0;\n\t\t\t\t\t\tvar value_idx = 1;\n\t\t\t\t\t\tif (_data[i].bars && _data[i].bars.horizontal && _data[i].bars.horizontal === true) {\n\t\t\t\t\t\t\tkey_idx = 1;\n\t\t\t\t\t\t\tvalue_idx = 0;\n\t\t\t\t\t\t}\n                        var num = _data[i].data.length;\n                        for (var j = 0; j < num; j++) {\n                            var value = 0;\n                            if (_data[i].data[j][1] != null) {\n                                value = _data[i].data[j][value_idx];\n                            }\n                            if (sums[_data[i].data[j][key_idx] + \"\"]) {\n                                sums[_data[i].data[j][key_idx] + \"\"] += value;\n                            } else {\n                                sums[_data[i].data[j][key_idx] + \"\"] = value;\n                            }\n\n                        }\n                    }\n                }\n            }\n            return sums;\n        }\n\n        function stackData(plot, s, datapoints) {\n            if (!s.stackpercent) return;\n            if (!processed) {\n                stackSums = getStackSums(plot.getData());\n            }\n            var newPoints = [];\n\n\n\t\t\tvar key_idx = 0;\n\t\t\tvar value_idx = 1;\n\t\t\tif (s.bars && s.bars.horizontal && s.bars.horizontal === true) {\n\t\t\t\tkey_idx = 1;\n\t\t\t\tvalue_idx = 0;\n\t\t\t}\n\n\t\t\tfor (var i = 0; i < datapoints.points.length; i += 3) {\n\t\t\t\t// note that the values need to be turned into absolute y-values.\n\t\t\t\t// in other words, if you were to stack (x, y1), (x, y2), and (x, y3),\n\t\t\t\t// (each from different series, which is where stackBases comes in),\n\t\t\t\t// you'd want the new points to be (x, y1, 0), (x, y1+y2, y1), (x, y1+y2+y3, y1+y2)\n\t\t\t\t// generally, (x, thisValue + (base up to this point), + (base up to this point))\n\t\t\t\tif (!stackBases[datapoints.points[i + key_idx]]) {\n\t\t\t\t\tstackBases[datapoints.points[i + key_idx]] = 0;\n\t\t\t\t}\n\t\t\t\tnewPoints[i + key_idx] = datapoints.points[i + key_idx];\n\t\t\t\tnewPoints[i + value_idx] = datapoints.points[i + value_idx] + stackBases[datapoints.points[i + key_idx]];\n\t\t\t\tnewPoints[i + 2] = stackBases[datapoints.points[i + key_idx]];\n\t\t\t\tstackBases[datapoints.points[i + key_idx]] += datapoints.points[i + value_idx];\n\t\t\t\t// change points to percentage values\n\t\t\t\t// you may need to set yaxis:{ max = 100 }\n\t\t\t\tif ( stackSums[newPoints[i+key_idx]+\"\"] > 0 ){\n\t\t\t\t\tnewPoints[i + value_idx] = newPoints[i + value_idx] * 100 / stackSums[newPoints[i + key_idx] + \"\"];\n\t\t\t\t\tnewPoints[i + 2] = newPoints[i + 2] * 100 / stackSums[newPoints[i + key_idx] + \"\"];\n\t\t\t\t} else {\n\t\t\t\t\tnewPoints[i + value_idx] = 0;\n\t\t\t\t\tnewPoints[i + 2] = 0;\n\t\t\t\t}\n\t\t\t}\n\n            datapoints.points = newPoints;\n        }\n\n\t\tplot.hooks.processRawData.push(processRawData);\n        plot.hooks.processDatapoints.push(stackData);\n    }\n\n    $.plot.plugins.push({\n        init: init,\n        options: options,\n        name: 'stackpercent',\n        version: '0.1'\n    });\n})(jQuery);\n","/* Flot plugin for stacking data sets rather than overlyaing them.\n\nCopyright (c) 2007-2014 IOLA and Ole Laursen.\nLicensed under the MIT license.\n\nThe plugin assumes the data is sorted on x (or y if stacking horizontally).\nFor line charts, it is assumed that if a line has an undefined gap (from a\nnull point), then the line above it should have the same gap - insert zeros\ninstead of \"null\" if you want another behaviour. This also holds for the start\nand end of the chart. Note that stacking a mix of positive and negative values\nin most instances doesn't make sense (so it looks weird).\n\nTwo or more series are stacked when their \"stack\" attribute is set to the same\nkey (which can be any number or string or just \"true\"). To specify the default\nstack, you can set the stack option like this:\n\n    series: {\n        stack: null/false, true, or a key (number/string)\n    }\n\nYou can also specify it for a single series, like this:\n\n    $.plot( $(\"#placeholder\"), [{\n        data: [ ... ],\n        stack: true\n    }])\n\nThe stacking order is determined by the order of the data series in the array\n(later series end up on top of the previous).\n\nInternally, the plugin modifies the datapoints in each series, adding an\noffset to the y value. For line series, extra data points are inserted through\ninterpolation. If there's a second y value, it's also adjusted (e.g for bar\ncharts or filled areas).\n\n*/\n\n(function ($) {\n    var options = {\n        series: { stack: null } // or number/string\n    };\n\n    function init(plot) {\n        function findMatchingSeries(s, allseries) {\n            var res = null;\n            for (var i = 0; i < allseries.length; ++i) {\n                if (s == allseries[i])\n                    break;\n\n                if (allseries[i].stack == s.stack)\n                    res = allseries[i];\n            }\n\n            return res;\n        }\n\n        function stackData(plot, s, datapoints) {\n            if (s.stack == null || s.stack === false)\n                return;\n\n            var other = findMatchingSeries(s, plot.getData());\n            if (!other)\n                return;\n\n            var ps = datapoints.pointsize,\n                points = datapoints.points,\n                otherps = other.datapoints.pointsize,\n                otherpoints = other.datapoints.points,\n                newpoints = [],\n                px, py, intery, qx, qy, bottom,\n                withlines = s.lines.show,\n                horizontal = s.bars.horizontal,\n                withbottom = ps > 2 && (horizontal ? datapoints.format[2].x : datapoints.format[2].y),\n                withsteps = withlines && s.lines.steps,\n                keyOffset = horizontal ? 1 : 0,\n                accumulateOffset = horizontal ? 0 : 1,\n                i = 0, j = 0, l, m;\n\n            while (true) {\n                if (i >= points.length && j >= otherpoints.length)\n                    break;\n\n                l = newpoints.length;\n\n                if (i < points.length && points[i] == null) {\n                    // copy gaps\n                    for (m = 0; m < ps; ++m)\n                        newpoints.push(points[i + m]);\n                    i += ps;\n                }\n                else if (i >= points.length) {\n                    // take the remaining points from the previous series\n                    for (m = 0; m < ps; ++m)\n                        newpoints.push(otherpoints[j + m]);\n                    if (withbottom)\n                        newpoints[l + 2] = otherpoints[j + accumulateOffset];\n                    j += otherps;\n                }\n                else if (j >= otherpoints.length) {\n                    // take the remaining points from the current series\n                    for (m = 0; m < ps; ++m)\n                        newpoints.push(points[i + m]);\n                    i += ps;\n                }\n                else if (j < otherpoints.length && otherpoints[j] == null) {\n                    // ignore point\n                    j += otherps;\n                }\n                else {\n                    // cases where we actually got two points\n                    px = points[i + keyOffset];\n                    py = points[i + accumulateOffset];\n                    qx = otherpoints[j + keyOffset];\n                    qy = otherpoints[j + accumulateOffset];\n                    bottom = 0;\n\n                    if (px == qx) {\n                        for (m = 0; m < ps; ++m)\n                            newpoints.push(points[i + m]);\n\n                        newpoints[l + accumulateOffset] += qy;\n                        bottom = qy;\n\n                        i += ps;\n                        j += otherps;\n                    }\n                    else if (px > qx) {\n                        // take the point from the previous series so that next series will correctly stack\n                        if (i == 0) {\n                            for (m = 0; m < ps; ++m)\n                                newpoints.push(otherpoints[j + m]);\n                            bottom = qy;\n                        }\n                        // we got past point below, might need to\n                        // insert interpolated extra point\n                        if (i > 0 && points[i - ps] != null) {\n                            intery = py + (points[i - ps + accumulateOffset] - py) * (qx - px) / (points[i - ps + keyOffset] - px);\n                            newpoints.push(qx);\n                            newpoints.push(intery + qy);\n                            for (m = 2; m < ps; ++m)\n                                newpoints.push(points[i + m]);\n                            bottom = qy;\n                        }\n\n                        j += otherps;\n                    }\n                    else { // px < qx\n                        for (m = 0; m < ps; ++m)\n                            newpoints.push(points[i + m]);\n\n                        // we might be able to interpolate a point below,\n                        // this can give us a better y\n                        if (j > 0 && otherpoints[j - otherps] != null)\n                            bottom = qy + (otherpoints[j - otherps + accumulateOffset] - qy) * (px - qx) / (otherpoints[j - otherps + keyOffset] - qx);\n\n                        newpoints[l + accumulateOffset] += bottom;\n\n                        i += ps;\n                    }\n\n                    fromgap = false;\n\n                    if (l != newpoints.length && withbottom)\n                        newpoints[l + 2] = bottom;\n                }\n\n                // maintain the line steps invariant\n                if (withsteps && l != newpoints.length && l > 0\n                    && newpoints[l] != null\n                    && newpoints[l] != newpoints[l - ps]\n                    && newpoints[l + 1] != newpoints[l - ps + 1]) {\n                    for (m = 0; m < ps; ++m)\n                        newpoints[l + ps + m] = newpoints[l + m];\n                    newpoints[l + 1] = newpoints[l - ps + 1];\n                }\n            }\n\n            datapoints.points = newpoints;\n        }\n\n        plot.hooks.processDatapoints.push(stackData);\n    }\n\n    $.plot.plugins.push({\n        init: init,\n        options: options,\n        name: 'stack',\n        version: '1.2'\n    });\n})(jQuery);\n","/* Flot plugin for selecting regions of a plot.\n\nCopyright (c) 2007-2013 IOLA and Ole Laursen.\nLicensed under the MIT license.\n\nThe plugin supports these options:\n\nselection: {\n\tmode: null or \"x\" or \"y\" or \"xy\",\n\tcolor: color,\n\tshape: \"round\" or \"miter\" or \"bevel\",\n\tminSize: number of pixels\n}\n\nSelection support is enabled by setting the mode to one of \"x\", \"y\" or \"xy\".\nIn \"x\" mode, the user will only be able to specify the x range, similarly for\n\"y\" mode. For \"xy\", the selection becomes a rectangle where both ranges can be\nspecified. \"color\" is color of the selection (if you need to change the color\nlater on, you can get to it with plot.getOptions().selection.color). \"shape\"\nis the shape of the corners of the selection.\n\n\"minSize\" is the minimum size a selection can be in pixels. This value can\nbe customized to determine the smallest size a selection can be and still\nhave the selection rectangle be displayed. When customizing this value, the\nfact that it refers to pixels, not axis units must be taken into account.\nThus, for example, if there is a bar graph in time mode with BarWidth set to 1\nminute, setting \"minSize\" to 1 will not make the minimum selection size 1\nminute, but rather 1 pixel. Note also that setting \"minSize\" to 0 will prevent\n\"plotunselected\" events from being fired when the user clicks the mouse without\ndragging.\n\nWhen selection support is enabled, a \"plotselected\" event will be emitted on\nthe DOM element you passed into the plot function. The event handler gets a\nparameter with the ranges selected on the axes, like this:\n\n\tplaceholder.bind( \"plotselected\", function( event, ranges ) {\n\t\talert(\"You selected \" + ranges.xaxis.from + \" to \" + ranges.xaxis.to)\n\t\t// similar for yaxis - with multiple axes, the extra ones are in\n\t\t// x2axis, x3axis, ...\n\t});\n\nThe \"plotselected\" event is only fired when the user has finished making the\nselection. A \"plotselecting\" event is fired during the process with the same\nparameters as the \"plotselected\" event, in case you want to know what's\nhappening while it's happening,\n\nA \"plotunselected\" event with no arguments is emitted when the user clicks the\nmouse to remove the selection. As stated above, setting \"minSize\" to 0 will\ndestroy this behavior.\n\nThe plugin allso adds the following methods to the plot object:\n\n- setSelection( ranges, preventEvent )\n\n  Set the selection rectangle. The passed in ranges is on the same form as\n  returned in the \"plotselected\" event. If the selection mode is \"x\", you\n  should put in either an xaxis range, if the mode is \"y\" you need to put in\n  an yaxis range and both xaxis and yaxis if the selection mode is \"xy\", like\n  this:\n\n\tsetSelection({ xaxis: { from: 0, to: 10 }, yaxis: { from: 40, to: 60 } });\n\n  setSelection will trigger the \"plotselected\" event when called. If you don't\n  want that to happen, e.g. if you're inside a \"plotselected\" handler, pass\n  true as the second parameter. If you are using multiple axes, you can\n  specify the ranges on any of those, e.g. as x2axis/x3axis/... instead of\n  xaxis, the plugin picks the first one it sees.\n\n- clearSelection( preventEvent )\n\n  Clear the selection rectangle. Pass in true to avoid getting a\n  \"plotunselected\" event.\n\n- getSelection()\n\n  Returns the current selection in the same format as the \"plotselected\"\n  event. If there's currently no selection, the function returns null.\n\n*/\n\n(function ($) {\n    function init(plot) {\n        var selection = {\n                first: { x: -1, y: -1}, second: { x: -1, y: -1},\n                show: false,\n                active: false\n            };\n\n        // FIXME: The drag handling implemented here should be\n        // abstracted out, there's some similar code from a library in\n        // the navigation plugin, this should be massaged a bit to fit\n        // the Flot cases here better and reused. Doing this would\n        // make this plugin much slimmer.\n        var savedhandlers = {};\n\n        var mouseUpHandler = null;\n\n        function onMouseMove(e) {\n            if (selection.active) {\n                updateSelection(e);\n\n                plot.getPlaceholder().trigger(\"plotselecting\", [ getSelection() ]);\n            }\n        }\n\n        function onMouseDown(e) {\n            if (e.which != 1)  // only accept left-click\n                return;\n\n            // cancel out any text selections\n            document.body.focus();\n\n            // prevent text selection and drag in old-school browsers\n            if (document.onselectstart !== undefined && savedhandlers.onselectstart == null) {\n                savedhandlers.onselectstart = document.onselectstart;\n                document.onselectstart = function () { return false; };\n            }\n            if (document.ondrag !== undefined && savedhandlers.ondrag == null) {\n                savedhandlers.ondrag = document.ondrag;\n                document.ondrag = function () { return false; };\n            }\n\n            setSelectionPos(selection.first, e);\n\n            selection.active = true;\n\n            // this is a bit silly, but we have to use a closure to be\n            // able to whack the same handler again\n            mouseUpHandler = function (e) { onMouseUp(e); };\n\n            $(document).one(\"mouseup\", mouseUpHandler);\n        }\n\n        function onMouseUp(e) {\n            mouseUpHandler = null;\n\n            // revert drag stuff for old-school browsers\n            if (document.onselectstart !== undefined)\n                document.onselectstart = savedhandlers.onselectstart;\n            if (document.ondrag !== undefined)\n                document.ondrag = savedhandlers.ondrag;\n\n            // no more dragging\n            selection.active = false;\n            updateSelection(e);\n\n            if (selectionIsSane())\n                triggerSelectedEvent(e);\n            else {\n                // this counts as a clear\n                plot.getPlaceholder().trigger(\"plotunselected\", [ ]);\n                plot.getPlaceholder().trigger(\"plotselecting\", [ null ]);\n            }\n\n            setTimeout(function() {\n              plot.isSelecting = false;\n            }, 10);\n\n            return false;\n        }\n\n        function getSelection() {\n            if (!selectionIsSane())\n                return null;\n\n            if (!selection.show) return null;\n\n            var r = {}, c1 = selection.first, c2 = selection.second;\n            var axes = plot.getAxes();\n            // look if no axis is used\n            var noAxisInUse = true;\n            $.each(axes, function (name, axis) {\n              if (axis.used) {\n                anyUsed = false;\n              }\n            })\n\n            $.each(axes, function (name, axis) {\n                if (axis.used || noAxisInUse) {\n                    var p1 = axis.c2p(c1[axis.direction]), p2 = axis.c2p(c2[axis.direction]);\n                    r[name] = { from: Math.min(p1, p2), to: Math.max(p1, p2) };\n                }\n            });\n            return r;\n        }\n\n        function triggerSelectedEvent(event) {\n            var r = getSelection();\n\n            // Add ctrlKey and metaKey to event\n            r.ctrlKey = event.ctrlKey;\n            r.metaKey = event.metaKey;\n\n            plot.getPlaceholder().trigger(\"plotselected\", [ r ]);\n\n            // backwards-compat stuff, to be removed in future\n            if (r.xaxis && r.yaxis)\n                plot.getPlaceholder().trigger(\"selected\", [ { x1: r.xaxis.from, y1: r.yaxis.from, x2: r.xaxis.to, y2: r.yaxis.to } ]);\n        }\n\n        function clamp(min, value, max) {\n            return value < min ? min: (value > max ? max: value);\n        }\n\n        function setSelectionPos(pos, e) {\n            var o = plot.getOptions();\n            var offset = plot.getPlaceholder().offset();\n            var plotOffset = plot.getPlotOffset();\n            pos.x = clamp(0, e.pageX - offset.left - plotOffset.left, plot.width());\n            pos.y = clamp(0, e.pageY - offset.top - plotOffset.top, plot.height());\n\n            if (o.selection.mode == \"y\")\n                pos.x = pos == selection.first ? 0 : plot.width();\n\n            if (o.selection.mode == \"x\")\n                pos.y = pos == selection.first ? 0 : plot.height();\n        }\n\n        function updateSelection(pos) {\n            if (pos.pageX == null)\n                return;\n\n            setSelectionPos(selection.second, pos);\n            if (selectionIsSane()) {\n                plot.isSelecting = true;\n                selection.show = true;\n                plot.triggerRedrawOverlay();\n            }\n            else\n                clearSelection(true);\n        }\n\n        function clearSelection(preventEvent) {\n            if (selection.show) {\n                selection.show = false;\n                plot.triggerRedrawOverlay();\n                if (!preventEvent)\n                    plot.getPlaceholder().trigger(\"plotunselected\", [ ]);\n            }\n        }\n\n        // function taken from markings support in Flot\n        function extractRange(ranges, coord) {\n            var axis, from, to, key, axes = plot.getAxes();\n\n            for (var k in axes) {\n                axis = axes[k];\n                if (axis.direction == coord) {\n                    key = coord + axis.n + \"axis\";\n                    if (!ranges[key] && axis.n == 1)\n                        key = coord + \"axis\"; // support x1axis as xaxis\n                    if (ranges[key]) {\n                        from = ranges[key].from;\n                        to = ranges[key].to;\n                        break;\n                    }\n                }\n            }\n\n            // backwards-compat stuff - to be removed in future\n            if (!ranges[key]) {\n                axis = coord == \"x\" ? plot.getXAxes()[0] : plot.getYAxes()[0];\n                from = ranges[coord + \"1\"];\n                to = ranges[coord + \"2\"];\n            }\n\n            // auto-reverse as an added bonus\n            if (from != null && to != null && from > to) {\n                var tmp = from;\n                from = to;\n                to = tmp;\n            }\n\n            return { from: from, to: to, axis: axis };\n        }\n\n        function setSelection(ranges, preventEvent) {\n            var axis, range, o = plot.getOptions();\n\n            if (o.selection.mode == \"y\") {\n                selection.first.x = 0;\n                selection.second.x = plot.width();\n            }\n            else {\n                range = extractRange(ranges, \"x\");\n\n                selection.first.x = range.axis.p2c(range.from);\n                selection.second.x = range.axis.p2c(range.to);\n            }\n\n            if (o.selection.mode == \"x\") {\n                selection.first.y = 0;\n                selection.second.y = plot.height();\n            }\n            else {\n                range = extractRange(ranges, \"y\");\n\n                selection.first.y = range.axis.p2c(range.from);\n                selection.second.y = range.axis.p2c(range.to);\n            }\n\n            selection.show = true;\n            plot.triggerRedrawOverlay();\n            if (!preventEvent && selectionIsSane())\n                triggerSelectedEvent();\n        }\n\n        function selectionIsSane() {\n            var minSize = plot.getOptions().selection.minSize;\n            return Math.abs(selection.second.x - selection.first.x) >= minSize &&\n                Math.abs(selection.second.y - selection.first.y) >= minSize;\n        }\n\n        plot.clearSelection = clearSelection;\n        plot.setSelection = setSelection;\n        plot.getSelection = getSelection;\n\n        plot.hooks.bindEvents.push(function(plot, eventHolder) {\n            var o = plot.getOptions();\n            if (o.selection.mode != null) {\n                eventHolder.mousemove(onMouseMove);\n                eventHolder.mousedown(onMouseDown);\n            }\n        });\n\n\n        plot.hooks.drawOverlay.push(function (plot, ctx) {\n            // draw selection\n            if (selection.show && selectionIsSane()) {\n                var plotOffset = plot.getPlotOffset();\n                var o = plot.getOptions();\n\n                ctx.save();\n                ctx.translate(plotOffset.left, plotOffset.top);\n\n                var c = $.color.parse(o.selection.color);\n\n                ctx.strokeStyle = c.scale('a', 0.8).toString();\n                ctx.lineWidth = 1;\n                ctx.lineJoin = o.selection.shape;\n                ctx.fillStyle = c.scale('a', 0.4).toString();\n\n                var x = Math.min(selection.first.x, selection.second.x) + 0.5,\n                    y = Math.min(selection.first.y, selection.second.y) + 0.5,\n                    w = Math.abs(selection.second.x - selection.first.x) - 1,\n                    h = Math.abs(selection.second.y - selection.first.y) - 1;\n\n                ctx.fillRect(x, y, w, h);\n                ctx.strokeRect(x, y, w, h);\n\n                ctx.restore();\n            }\n        });\n\n        plot.hooks.shutdown.push(function (plot, eventHolder) {\n            eventHolder.unbind(\"mousemove\", onMouseMove);\n            eventHolder.unbind(\"mousedown\", onMouseDown);\n\n            if (mouseUpHandler)\n                $(document).unbind(\"mouseup\", mouseUpHandler);\n        });\n\n    }\n\n    $.plot.plugins.push({\n        init: init,\n        options: {\n            selection: {\n                mode: null, // one of null, \"x\", \"y\" or \"xy\"\n                color: \"#e8cfac\",\n                shape: \"round\", // one of \"round\", \"miter\", or \"bevel\"\n                minSize: 5 // minimum number of pixels\n            }\n        },\n        name: 'selection',\n        version: '1.1'\n    });\n})(jQuery);\n","/* Flot plugin for rendering pie charts.\n\nCopyright (c) 2007-2013 IOLA and Ole Laursen.\nLicensed under the MIT license.\n\nThe plugin assumes that each series has a single data value, and that each\nvalue is a positive integer or zero.  Negative numbers don't make sense for a\npie chart, and have unpredictable results.  The values do NOT need to be\npassed in as percentages; the plugin will calculate the total and per-slice\npercentages internally.\n\n* Created by Brian Medendorp\n\n* Updated with contributions from btburnett3, Anthony Aragues and Xavi Ivars\n\nThe plugin supports these options:\n\n\tseries: {\n\t\tpie: {\n\t\t\tshow: true/false\n\t\t\tradius: 0-1 for percentage of fullsize, or a specified pixel length, or 'auto'\n\t\t\tinnerRadius: 0-1 for percentage of fullsize or a specified pixel length, for creating a donut effect\n\t\t\tstartAngle: 0-2 factor of PI used for starting angle (in radians) i.e 3/2 starts at the top, 0 and 2 have the same result\n\t\t\ttilt: 0-1 for percentage to tilt the pie, where 1 is no tilt, and 0 is completely flat (nothing will show)\n\t\t\toffset: {\n\t\t\t\ttop: integer value to move the pie up or down\n\t\t\t\tleft: integer value to move the pie left or right, or 'auto'\n\t\t\t},\n\t\t\tstroke: {\n\t\t\t\tcolor: any hexidecimal color value (other formats may or may not work, so best to stick with something like '#FFF')\n\t\t\t\twidth: integer pixel width of the stroke\n\t\t\t},\n\t\t\tlabel: {\n\t\t\t\tshow: true/false, or 'auto'\n\t\t\t\tformatter:  a user-defined function that modifies the text/style of the label text\n\t\t\t\tradius: 0-1 for percentage of fullsize, or a specified pixel length\n\t\t\t\tbackground: {\n\t\t\t\t\tcolor: any hexidecimal color value (other formats may or may not work, so best to stick with something like '#000')\n\t\t\t\t\topacity: 0-1\n\t\t\t\t},\n\t\t\t\tthreshold: 0-1 for the percentage value at which to hide labels (if they're too small)\n\t\t\t},\n\t\t\tcombine: {\n\t\t\t\tthreshold: 0-1 for the percentage value at which to combine slices (if they're too small)\n\t\t\t\tcolor: any hexidecimal color value (other formats may or may not work, so best to stick with something like '#CCC'), if null, the plugin will automatically use the color of the first slice to be combined\n\t\t\t\tlabel: any text value of what the combined slice should be labeled\n\t\t\t}\n\t\t\thighlight: {\n\t\t\t\topacity: 0-1\n\t\t\t}\n\t\t}\n\t}\n\nMore detail and specific examples can be found in the included HTML file.\n\n*/\n\n(function($) {\n\n\t// Maximum redraw attempts when fitting labels within the plot\n\n\tvar REDRAW_ATTEMPTS = 10;\n\n\t// Factor by which to shrink the pie when fitting labels within the plot\n\n\tvar REDRAW_SHRINK = 0.95;\n\n\tfunction init(plot) {\n\n\t\tvar canvas = null,\n\t\t\ttarget = null,\n\t\t\tmaxRadius = null,\n\t\t\tcenterLeft = null,\n\t\t\tcenterTop = null,\n\t\t\tprocessed = false,\n\t\t\tctx = null;\n\n\t\t// interactive variables\n\n\t\tvar highlights = [];\n\n\t\t// add hook to determine if pie plugin in enabled, and then perform necessary operations\n\n\t\tplot.hooks.processOptions.push(function(plot, options) {\n\t\t\tif (options.series.pie.show) {\n\n\t\t\t\toptions.grid.show = false;\n\n\t\t\t\t// set labels.show\n\n\t\t\t\tif (options.series.pie.label.show == \"auto\") {\n\t\t\t\t\tif (options.legend.show) {\n\t\t\t\t\t\toptions.series.pie.label.show = false;\n\t\t\t\t\t} else {\n\t\t\t\t\t\toptions.series.pie.label.show = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// set radius\n\n\t\t\t\tif (options.series.pie.radius == \"auto\") {\n\t\t\t\t\tif (options.series.pie.label.show) {\n\t\t\t\t\t\toptions.series.pie.radius = 3/4;\n\t\t\t\t\t} else {\n\t\t\t\t\t\toptions.series.pie.radius = 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// ensure sane tilt\n\n\t\t\t\tif (options.series.pie.tilt > 1) {\n\t\t\t\t\toptions.series.pie.tilt = 1;\n\t\t\t\t} else if (options.series.pie.tilt < 0) {\n\t\t\t\t\toptions.series.pie.tilt = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tplot.hooks.bindEvents.push(function(plot, eventHolder) {\n\t\t\tvar options = plot.getOptions();\n\t\t\tif (options.series.pie.show) {\n\t\t\t\tif (options.grid.hoverable) {\n\t\t\t\t\teventHolder.unbind(\"mousemove\").mousemove(onMouseMove);\n\t\t\t\t}\n\t\t\t\tif (options.grid.clickable) {\n\t\t\t\t\teventHolder.unbind(\"click\").click(onClick);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tplot.hooks.processDatapoints.push(function(plot, series, data, datapoints) {\n\t\t\tvar options = plot.getOptions();\n\t\t\tif (options.series.pie.show) {\n\t\t\t\tprocessDatapoints(plot, series, data, datapoints);\n\t\t\t}\n\t\t});\n\n\t\tplot.hooks.drawOverlay.push(function(plot, octx) {\n\t\t\tvar options = plot.getOptions();\n\t\t\tif (options.series.pie.show) {\n\t\t\t\tdrawOverlay(plot, octx);\n\t\t\t}\n\t\t});\n\n\t\tplot.hooks.draw.push(function(plot, newCtx) {\n\t\t\tvar options = plot.getOptions();\n\t\t\tif (options.series.pie.show) {\n\t\t\t\tdraw(plot, newCtx);\n\t\t\t}\n\t\t});\n\n\t\tfunction processDatapoints(plot, series, datapoints) {\n\t\t\tif (!processed)\t{\n\t\t\t\tprocessed = true;\n\t\t\t\tcanvas = plot.getCanvas();\n\t\t\t\ttarget = $(canvas).parent();\n\t\t\t\toptions = plot.getOptions();\n\t\t\t\tplot.setData(combine(plot.getData()));\n\t\t\t}\n\t\t}\n\n\t\tfunction combine(data) {\n\n\t\t\tvar total = 0,\n\t\t\t\tcombined = 0,\n\t\t\t\tnumCombined = 0,\n\t\t\t\tcolor = options.series.pie.combine.color,\n\t\t\t\tnewdata = [];\n\n\t\t\t// Fix up the raw data from Flot, ensuring the data is numeric\n\n\t\t\tfor (var i = 0; i < data.length; ++i) {\n\n\t\t\t\tvar value = data[i].data;\n\n\t\t\t\t// If the data is an array, we'll assume that it's a standard\n\t\t\t\t// Flot x-y pair, and are concerned only with the second value.\n\n\t\t\t\t// Note how we use the original array, rather than creating a\n\t\t\t\t// new one; this is more efficient and preserves any extra data\n\t\t\t\t// that the user may have stored in higher indexes.\n\n\t\t\t\tif ($.isArray(value) && value.length == 1) {\n    \t\t\t\tvalue = value[0];\n\t\t\t\t}\n\n\t\t\t\tif ($.isArray(value)) {\n\t\t\t\t\t// Equivalent to $.isNumeric() but compatible with jQuery < 1.7\n\t\t\t\t\tif (!isNaN(parseFloat(value[1])) && isFinite(value[1])) {\n\t\t\t\t\t\tvalue[1] = +value[1];\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvalue[1] = 0;\n\t\t\t\t\t}\n\t\t\t\t} else if (!isNaN(parseFloat(value)) && isFinite(value)) {\n\t\t\t\t\tvalue = [1, +value];\n\t\t\t\t} else {\n\t\t\t\t\tvalue = [1, 0];\n\t\t\t\t}\n\n\t\t\t\tdata[i].data = [value];\n\t\t\t}\n\n\t\t\t// Sum up all the slices, so we can calculate percentages for each\n\n\t\t\tfor (var i = 0; i < data.length; ++i) {\n\t\t\t\ttotal += data[i].data[0][1];\n\t\t\t}\n\n\t\t\t// Count the number of slices with percentages below the combine\n\t\t\t// threshold; if it turns out to be just one, we won't combine.\n\n\t\t\tfor (var i = 0; i < data.length; ++i) {\n\t\t\t\tvar value = data[i].data[0][1];\n\t\t\t\tif (value / total <= options.series.pie.combine.threshold) {\n\t\t\t\t\tcombined += value;\n\t\t\t\t\tnumCombined++;\n\t\t\t\t\tif (!color) {\n\t\t\t\t\t\tcolor = data[i].color;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (var i = 0; i < data.length; ++i) {\n\t\t\t\tvar value = data[i].data[0][1];\n\t\t\t\tif (numCombined < 2 || value / total > options.series.pie.combine.threshold) {\n\t\t\t\t\tnewdata.push({\n\t\t\t\t\t\tdata: [[1, value]],\n\t\t\t\t\t\tcolor: data[i].color,\n\t\t\t\t\t\tlabel: data[i].label,\n\t\t\t\t\t\tangle: value * Math.PI * 2 / total,\n\t\t\t\t\t\tpercent: value / (total / 100)\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (numCombined > 1) {\n\t\t\t\tnewdata.push({\n\t\t\t\t\tdata: [[1, combined]],\n\t\t\t\t\tcolor: color,\n\t\t\t\t\tlabel: options.series.pie.combine.label,\n\t\t\t\t\tangle: combined * Math.PI * 2 / total,\n\t\t\t\t\tpercent: combined / (total / 100)\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn newdata;\n\t\t}\n\n\t\tfunction draw(plot, newCtx) {\n\n\t\t\tif (!target) {\n\t\t\t\treturn; // if no series were passed\n\t\t\t}\n\n\t\t\tvar canvasWidth = plot.getPlaceholder().width(),\n\t\t\t\tcanvasHeight = plot.getPlaceholder().height(),\n\t\t\t\tlegendWidth = target.children().filter(\".legend\").children().width() || 0;\n\n\t\t\tctx = newCtx;\n\n\t\t\t// WARNING: HACK! REWRITE THIS CODE AS SOON AS POSSIBLE!\n\n\t\t\t// When combining smaller slices into an 'other' slice, we need to\n\t\t\t// add a new series.  Since Flot gives plugins no way to modify the\n\t\t\t// list of series, the pie plugin uses a hack where the first call\n\t\t\t// to processDatapoints results in a call to setData with the new\n\t\t\t// list of series, then subsequent processDatapoints do nothing.\n\n\t\t\t// The plugin-global 'processed' flag is used to control this hack;\n\t\t\t// it starts out false, and is set to true after the first call to\n\t\t\t// processDatapoints.\n\n\t\t\t// Unfortunately this turns future setData calls into no-ops; they\n\t\t\t// call processDatapoints, the flag is true, and nothing happens.\n\n\t\t\t// To fix this we'll set the flag back to false here in draw, when\n\t\t\t// all series have been processed, so the next sequence of calls to\n\t\t\t// processDatapoints once again starts out with a slice-combine.\n\t\t\t// This is really a hack; in 0.9 we need to give plugins a proper\n\t\t\t// way to modify series before any processing begins.\n\n\t\t\tprocessed = false;\n\n\t\t\t// calculate maximum radius and center point\n\n\t\t\tmaxRadius =  Math.min(canvasWidth, canvasHeight / options.series.pie.tilt) / 2;\n\t\t\tcenterTop = canvasHeight / 2 + options.series.pie.offset.top;\n\t\t\tcenterLeft = canvasWidth / 2;\n\n\t\t\tif (options.series.pie.offset.left == \"auto\") {\n\t\t\t\tif (options.legend.position.match(\"w\")) {\n\t\t\t\t\tcenterLeft += legendWidth / 2;\n\t\t\t\t} else {\n\t\t\t\t\tcenterLeft -= legendWidth / 2;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcenterLeft += options.series.pie.offset.left;\n\t\t\t}\n\n\t\t\tif (centerLeft < maxRadius) {\n\t\t\t\tcenterLeft = maxRadius;\n\t\t\t} else if (centerLeft > canvasWidth - maxRadius) {\n\t\t\t\tcenterLeft = canvasWidth - maxRadius;\n\t\t\t}\n\n\t\t\tvar slices = plot.getData(),\n\t\t\t\tattempts = 0;\n\n\t\t\t// Keep shrinking the pie's radius until drawPie returns true,\n\t\t\t// indicating that all the labels fit, or we try too many times.\n\n\t\t\tdo {\n\t\t\t\tif (attempts > 0) {\n\t\t\t\t\tmaxRadius *= REDRAW_SHRINK;\n\t\t\t\t}\n\t\t\t\tattempts += 1;\n\t\t\t\tclear();\n\t\t\t\tif (options.series.pie.tilt <= 0.8) {\n\t\t\t\t\tdrawShadow();\n\t\t\t\t}\n\t\t\t} while (!drawPie() && attempts < REDRAW_ATTEMPTS)\n\n\t\t\tif (attempts >= REDRAW_ATTEMPTS) {\n\t\t\t\tclear();\n\t\t\t\ttarget.prepend(\"<div class='error'>Could not draw pie with labels contained inside canvas</div>\");\n\t\t\t}\n\n\t\t\tif (plot.setSeries && plot.insertLegend) {\n\t\t\t\tplot.setSeries(slices);\n\t\t\t\tplot.insertLegend();\n\t\t\t}\n\n\t\t\t// we're actually done at this point, just defining internal functions at this point\n\n\t\t\tfunction clear() {\n\t\t\t\tctx.clearRect(0, 0, canvasWidth, canvasHeight);\n\t\t\t\ttarget.children().filter(\".pieLabel, .pieLabelBackground\").remove();\n\t\t\t}\n\n\t\t\tfunction drawShadow() {\n\n\t\t\t\tvar shadowLeft = options.series.pie.shadow.left;\n\t\t\t\tvar shadowTop = options.series.pie.shadow.top;\n\t\t\t\tvar edge = 10;\n\t\t\t\tvar alpha = options.series.pie.shadow.alpha;\n\t\t\t\tvar radius = options.series.pie.radius > 1 ? options.series.pie.radius : maxRadius * options.series.pie.radius;\n\n\t\t\t\tif (radius >= canvasWidth / 2 - shadowLeft || radius * options.series.pie.tilt >= canvasHeight / 2 - shadowTop || radius <= edge) {\n\t\t\t\t\treturn;\t// shadow would be outside canvas, so don't draw it\n\t\t\t\t}\n\n\t\t\t\tctx.save();\n\t\t\t\tctx.translate(shadowLeft,shadowTop);\n\t\t\t\tctx.globalAlpha = alpha;\n\t\t\t\tctx.fillStyle = \"#000\";\n\n\t\t\t\t// center and rotate to starting position\n\n\t\t\t\tctx.translate(centerLeft,centerTop);\n\t\t\t\tctx.scale(1, options.series.pie.tilt);\n\n\t\t\t\t//radius -= edge;\n\n\t\t\t\tfor (var i = 1; i <= edge; i++) {\n\t\t\t\t\tctx.beginPath();\n\t\t\t\t\tctx.arc(0, 0, radius, 0, Math.PI * 2, false);\n\t\t\t\t\tctx.fill();\n\t\t\t\t\tradius -= i;\n\t\t\t\t}\n\n\t\t\t\tctx.restore();\n\t\t\t}\n\n\t\t\tfunction drawPie() {\n\n\t\t\t\tvar startAngle = Math.PI * options.series.pie.startAngle;\n\t\t\t\tvar radius = options.series.pie.radius > 1 ? options.series.pie.radius : maxRadius * options.series.pie.radius;\n\n\t\t\t\t// center and rotate to starting position\n\n\t\t\t\tctx.save();\n\t\t\t\tctx.translate(centerLeft,centerTop);\n\t\t\t\tctx.scale(1, options.series.pie.tilt);\n\t\t\t\t//ctx.rotate(startAngle); // start at top; -- This doesn't work properly in Opera\n\n\t\t\t\t// draw slices\n\n\t\t\t\tctx.save();\n\t\t\t\tvar currentAngle = startAngle;\n\t\t\t\tfor (var i = 0; i < slices.length; ++i) {\n\t\t\t\t\tslices[i].startAngle = currentAngle;\n\t\t\t\t\tdrawSlice(slices[i].angle, slices[i].color, true);\n\t\t\t\t}\n\t\t\t\tctx.restore();\n\n\t\t\t\t// draw slice outlines\n\n\t\t\t\tif (options.series.pie.stroke.width > 0) {\n\t\t\t\t\tctx.save();\n\t\t\t\t\tctx.lineWidth = options.series.pie.stroke.width;\n\t\t\t\t\tcurrentAngle = startAngle;\n\t\t\t\t\tfor (var i = 0; i < slices.length; ++i) {\n\t\t\t\t\t\tdrawSlice(slices[i].angle, options.series.pie.stroke.color, false);\n\t\t\t\t\t}\n\t\t\t\t\tctx.restore();\n\t\t\t\t}\n\n\t\t\t\t// draw donut hole\n\n\t\t\t\tdrawDonutHole(ctx);\n\n\t\t\t\tctx.restore();\n\n\t\t\t\t// Draw the labels, returning true if they fit within the plot\n\n\t\t\t\tif (options.series.pie.label.show) {\n\t\t\t\t\treturn drawLabels();\n\t\t\t\t} else return true;\n\n\t\t\t\tfunction drawSlice(angle, color, fill) {\n\n\t\t\t\t\tif (angle <= 0 || isNaN(angle)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (fill) {\n\t\t\t\t\t\tctx.fillStyle = color;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tctx.strokeStyle = color;\n\t\t\t\t\t\tctx.lineJoin = \"round\";\n\t\t\t\t\t}\n\n\t\t\t\t\tctx.beginPath();\n\t\t\t\t\tif (Math.abs(angle - Math.PI * 2) > 0.000000001) {\n\t\t\t\t\t\tctx.moveTo(0, 0); // Center of the pie\n\t\t\t\t\t}\n\n\t\t\t\t\t//ctx.arc(0, 0, radius, 0, angle, false); // This doesn't work properly in Opera\n\t\t\t\t\tctx.arc(0, 0, radius,currentAngle, currentAngle + angle / 2, false);\n\t\t\t\t\tctx.arc(0, 0, radius,currentAngle + angle / 2, currentAngle + angle, false);\n\t\t\t\t\tctx.closePath();\n\t\t\t\t\t//ctx.rotate(angle); // This doesn't work properly in Opera\n\t\t\t\t\tcurrentAngle += angle;\n\n\t\t\t\t\tif (fill) {\n\t\t\t\t\t\tctx.fill();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tctx.stroke();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tfunction drawLabels() {\n\n\t\t\t\t\tvar currentAngle = startAngle;\n\t\t\t\t\tvar radius = options.series.pie.label.radius > 1 ? options.series.pie.label.radius : maxRadius * options.series.pie.label.radius;\n\n\t\t\t\t\tfor (var i = 0; i < slices.length; ++i) {\n\t\t\t\t\t\tif (slices[i].percent >= options.series.pie.label.threshold * 100) {\n\t\t\t\t\t\t\tif (!drawLabel(slices[i], currentAngle, i)) {\n\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcurrentAngle += slices[i].angle;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn true;\n\n\t\t\t\t\tfunction drawLabel(slice, startAngle, index) {\n\n\t\t\t\t\t\tif (slice.data[0][1] == 0) {\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// format label text\n\n\t\t\t\t\t\tvar lf = options.legend.labelFormatter, text, plf = options.series.pie.label.formatter;\n\n\t\t\t\t\t\tif (lf) {\n\t\t\t\t\t\t\ttext = lf(slice.label, slice);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttext = slice.label;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (plf) {\n\t\t\t\t\t\t\ttext = plf(text, slice);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar halfAngle = ((startAngle + slice.angle) + startAngle) / 2;\n\t\t\t\t\t\tvar x = centerLeft + Math.round(Math.cos(halfAngle) * radius);\n\t\t\t\t\t\tvar y = centerTop + Math.round(Math.sin(halfAngle) * radius) * options.series.pie.tilt;\n\n\t\t\t\t\t\tvar html = \"<span class='pieLabel' id='pieLabel\" + index + \"' style='position:absolute;top:\" + y + \"px;left:\" + x + \"px;'>\" + text + \"</span>\";\n\t\t\t\t\t\ttarget.append(html);\n\n\t\t\t\t\t\tvar label = target.children(\"#pieLabel\" + index);\n\t\t\t\t\t\tvar labelTop = (y - label.height() / 2);\n\t\t\t\t\t\tvar labelLeft = (x - label.width() / 2);\n\n\t\t\t\t\t\tlabel.css(\"top\", labelTop);\n\t\t\t\t\t\tlabel.css(\"left\", labelLeft);\n\n\t\t\t\t\t\t// check to make sure that the label is not outside the canvas\n\n\t\t\t\t\t\tif (0 - labelTop > 0 || 0 - labelLeft > 0 || canvasHeight - (labelTop + label.height()) < 0 || canvasWidth - (labelLeft + label.width()) < 0) {\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (options.series.pie.label.background.opacity != 0) {\n\n\t\t\t\t\t\t\t// put in the transparent background separately to avoid blended labels and label boxes\n\n\t\t\t\t\t\t\tvar c = options.series.pie.label.background.color;\n\n\t\t\t\t\t\t\tif (c == null) {\n\t\t\t\t\t\t\t\tc = slice.color;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tvar pos = \"top:\" + labelTop + \"px;left:\" + labelLeft + \"px;\";\n\t\t\t\t\t\t\t$(\"<div class='pieLabelBackground' style='position:absolute;width:\" + label.width() + \"px;height:\" + label.height() + \"px;\" + pos + \"background-color:\" + c + \";'></div>\")\n\t\t\t\t\t\t\t\t.css(\"opacity\", options.series.pie.label.background.opacity)\n\t\t\t\t\t\t\t\t.insertBefore(label);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t} // end individual label function\n\t\t\t\t} // end drawLabels function\n\t\t\t} // end drawPie function\n\t\t} // end draw function\n\n\t\t// Placed here because it needs to be accessed from multiple locations\n\n\t\tfunction drawDonutHole(layer) {\n\t\t\tif (options.series.pie.innerRadius > 0) {\n\n\t\t\t\t// subtract the center\n\n\t\t\t\tlayer.save();\n\t\t\t\tvar innerRadius = options.series.pie.innerRadius > 1 ? options.series.pie.innerRadius : maxRadius * options.series.pie.innerRadius;\n\t\t\t\tlayer.globalCompositeOperation = \"destination-out\"; // this does not work with excanvas, but it will fall back to using the stroke color\n\t\t\t\tlayer.beginPath();\n\t\t\t\tlayer.fillStyle = options.series.pie.stroke.color;\n\t\t\t\tlayer.arc(0, 0, innerRadius, 0, Math.PI * 2, false);\n\t\t\t\tlayer.fill();\n\t\t\t\tlayer.closePath();\n\t\t\t\tlayer.restore();\n\n\t\t\t\t// add inner stroke\n\n\t\t\t\tlayer.save();\n\t\t\t\tlayer.beginPath();\n\t\t\t\tlayer.strokeStyle = options.series.pie.stroke.color;\n\t\t\t\tlayer.arc(0, 0, innerRadius, 0, Math.PI * 2, false);\n\t\t\t\tlayer.stroke();\n\t\t\t\tlayer.closePath();\n\t\t\t\tlayer.restore();\n\n\t\t\t\t// TODO: add extra shadow inside hole (with a mask) if the pie is tilted.\n\t\t\t}\n\t\t}\n\n\t\t//-- Additional Interactive related functions --\n\n\t\tfunction isPointInPoly(poly, pt) {\n\t\t\tfor(var c = false, i = -1, l = poly.length, j = l - 1; ++i < l; j = i)\n\t\t\t\t((poly[i][1] <= pt[1] && pt[1] < poly[j][1]) || (poly[j][1] <= pt[1] && pt[1]< poly[i][1]))\n\t\t\t\t&& (pt[0] < (poly[j][0] - poly[i][0]) * (pt[1] - poly[i][1]) / (poly[j][1] - poly[i][1]) + poly[i][0])\n\t\t\t\t&& (c = !c);\n\t\t\treturn c;\n\t\t}\n\n\t\tfunction findNearbySlice(mouseX, mouseY) {\n\n\t\t\tvar slices = plot.getData(),\n\t\t\t\toptions = plot.getOptions(),\n\t\t\t\tradius = options.series.pie.radius > 1 ? options.series.pie.radius : maxRadius * options.series.pie.radius,\n\t\t\t\tx, y;\n\n\t\t\tfor (var i = 0; i < slices.length; ++i) {\n\n\t\t\t\tvar s = slices[i];\n\n\t\t\t\tif (s.pie.show) {\n\n\t\t\t\t\tctx.save();\n\t\t\t\t\tctx.beginPath();\n\t\t\t\t\tctx.moveTo(0, 0); // Center of the pie\n\t\t\t\t\t//ctx.scale(1, options.series.pie.tilt);\t// this actually seems to break everything when here.\n\t\t\t\t\tctx.arc(0, 0, radius, s.startAngle, s.startAngle + s.angle / 2, false);\n\t\t\t\t\tctx.arc(0, 0, radius, s.startAngle + s.angle / 2, s.startAngle + s.angle, false);\n\t\t\t\t\tctx.closePath();\n\t\t\t\t\tx = mouseX - centerLeft;\n\t\t\t\t\ty = mouseY - centerTop;\n\n\t\t\t\t\tif (ctx.isPointInPath) {\n\t\t\t\t\t\tif (ctx.isPointInPath(mouseX - centerLeft, mouseY - centerTop)) {\n\t\t\t\t\t\t\tctx.restore();\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tdatapoint: [s.percent, s.data],\n\t\t\t\t\t\t\t\tdataIndex: 0,\n\t\t\t\t\t\t\t\tseries: s,\n\t\t\t\t\t\t\t\tseriesIndex: i\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// excanvas for IE doesn;t support isPointInPath, this is a workaround.\n\n\t\t\t\t\t\tvar p1X = radius * Math.cos(s.startAngle),\n\t\t\t\t\t\t\tp1Y = radius * Math.sin(s.startAngle),\n\t\t\t\t\t\t\tp2X = radius * Math.cos(s.startAngle + s.angle / 4),\n\t\t\t\t\t\t\tp2Y = radius * Math.sin(s.startAngle + s.angle / 4),\n\t\t\t\t\t\t\tp3X = radius * Math.cos(s.startAngle + s.angle / 2),\n\t\t\t\t\t\t\tp3Y = radius * Math.sin(s.startAngle + s.angle / 2),\n\t\t\t\t\t\t\tp4X = radius * Math.cos(s.startAngle + s.angle / 1.5),\n\t\t\t\t\t\t\tp4Y = radius * Math.sin(s.startAngle + s.angle / 1.5),\n\t\t\t\t\t\t\tp5X = radius * Math.cos(s.startAngle + s.angle),\n\t\t\t\t\t\t\tp5Y = radius * Math.sin(s.startAngle + s.angle),\n\t\t\t\t\t\t\tarrPoly = [[0, 0], [p1X, p1Y], [p2X, p2Y], [p3X, p3Y], [p4X, p4Y], [p5X, p5Y]],\n\t\t\t\t\t\t\tarrPoint = [x, y];\n\n\t\t\t\t\t\t// TODO: perhaps do some mathmatical trickery here with the Y-coordinate to compensate for pie tilt?\n\n\t\t\t\t\t\tif (isPointInPoly(arrPoly, arrPoint)) {\n\t\t\t\t\t\t\tctx.restore();\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tdatapoint: [s.percent, s.data],\n\t\t\t\t\t\t\t\tdataIndex: 0,\n\t\t\t\t\t\t\t\tseries: s,\n\t\t\t\t\t\t\t\tseriesIndex: i\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tctx.restore();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn null;\n\t\t}\n\n\t\tfunction onMouseMove(e) {\n\t\t\ttriggerClickHoverEvent(\"plothover\", e);\n\t\t}\n\n\t\tfunction onClick(e) {\n\t\t\ttriggerClickHoverEvent(\"plotclick\", e);\n\t\t}\n\n\t\t// trigger click or hover event (they send the same parameters so we share their code)\n\n\t\tfunction triggerClickHoverEvent(eventname, e) {\n\n\t\t\tvar offset = plot.offset();\n\t\t\tvar canvasX = parseInt(e.pageX - offset.left);\n\t\t\tvar canvasY =  parseInt(e.pageY - offset.top);\n\t\t\tvar item = findNearbySlice(canvasX, canvasY);\n\n\t\t\tif (options.grid.autoHighlight) {\n\n\t\t\t\t// clear auto-highlights\n\n\t\t\t\tfor (var i = 0; i < highlights.length; ++i) {\n\t\t\t\t\tvar h = highlights[i];\n\t\t\t\t\tif (h.auto == eventname && !(item && h.series == item.series)) {\n\t\t\t\t\t\tunhighlight(h.series);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// highlight the slice\n\n\t\t\tif (item) {\n\t\t\t\thighlight(item.series, eventname);\n\t\t\t}\n\n\t\t\t// trigger any hover bind events\n\n\t\t\tvar pos = { pageX: e.pageX, pageY: e.pageY };\n\t\t\ttarget.trigger(eventname, [pos, item]);\n\t\t}\n\n\t\tfunction highlight(s, auto) {\n\t\t\t//if (typeof s == \"number\") {\n\t\t\t//\ts = series[s];\n\t\t\t//}\n\n\t\t\tvar i = indexOfHighlight(s);\n\n\t\t\tif (i == -1) {\n\t\t\t\thighlights.push({ series: s, auto: auto });\n\t\t\t\tplot.triggerRedrawOverlay();\n\t\t\t} else if (!auto) {\n\t\t\t\thighlights[i].auto = false;\n\t\t\t}\n\t\t}\n\n\t\tfunction unhighlight(s) {\n\t\t\tif (s == null) {\n\t\t\t\thighlights = [];\n\t\t\t\tplot.triggerRedrawOverlay();\n\t\t\t}\n\n\t\t\t//if (typeof s == \"number\") {\n\t\t\t//\ts = series[s];\n\t\t\t//}\n\n\t\t\tvar i = indexOfHighlight(s);\n\n\t\t\tif (i != -1) {\n\t\t\t\thighlights.splice(i, 1);\n\t\t\t\tplot.triggerRedrawOverlay();\n\t\t\t}\n\t\t}\n\n\t\tfunction indexOfHighlight(s) {\n\t\t\tfor (var i = 0; i < highlights.length; ++i) {\n\t\t\t\tvar h = highlights[i];\n\t\t\t\tif (h.series == s)\n\t\t\t\t\treturn i;\n\t\t\t}\n\t\t\treturn -1;\n\t\t}\n\n\t\tfunction drawOverlay(plot, octx) {\n\n\t\t\tvar options = plot.getOptions();\n\n\t\t\tvar radius = options.series.pie.radius > 1 ? options.series.pie.radius : maxRadius * options.series.pie.radius;\n\n\t\t\toctx.save();\n\t\t\toctx.translate(centerLeft, centerTop);\n\t\t\toctx.scale(1, options.series.pie.tilt);\n\n\t\t\tfor (var i = 0; i < highlights.length; ++i) {\n\t\t\t\tdrawHighlight(highlights[i].series);\n\t\t\t}\n\n\t\t\tdrawDonutHole(octx);\n\n\t\t\toctx.restore();\n\n\t\t\tfunction drawHighlight(series) {\n\n\t\t\t\tif (series.angle <= 0 || isNaN(series.angle)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t//octx.fillStyle = parseColor(options.series.pie.highlight.color).scale(null, null, null, options.series.pie.highlight.opacity).toString();\n\t\t\t\toctx.fillStyle = \"rgba(255, 255, 255, \" + options.series.pie.highlight.opacity + \")\"; // this is temporary until we have access to parseColor\n\t\t\t\toctx.beginPath();\n\t\t\t\tif (Math.abs(series.angle - Math.PI * 2) > 0.000000001) {\n\t\t\t\t\toctx.moveTo(0, 0); // Center of the pie\n\t\t\t\t}\n\t\t\t\toctx.arc(0, 0, radius, series.startAngle, series.startAngle + series.angle / 2, false);\n\t\t\t\toctx.arc(0, 0, radius, series.startAngle + series.angle / 2, series.startAngle + series.angle, false);\n\t\t\t\toctx.closePath();\n\t\t\t\toctx.fill();\n\t\t\t}\n\t\t}\n\t} // end init (plugin body)\n\n\t// define pie specific options and their default values\n\n\tvar options = {\n\t\tseries: {\n\t\t\tpie: {\n\t\t\t\tshow: false,\n\t\t\t\tradius: \"auto\",\t// actual radius of the visible pie (based on full calculated radius if <=1, or hard pixel value)\n\t\t\t\tinnerRadius: 0, /* for donut */\n\t\t\t\tstartAngle: 3/2,\n\t\t\t\ttilt: 1,\n\t\t\t\tshadow: {\n\t\t\t\t\tleft: 5,\t// shadow left offset\n\t\t\t\t\ttop: 15,\t// shadow top offset\n\t\t\t\t\talpha: 0.02\t// shadow alpha\n\t\t\t\t},\n\t\t\t\toffset: {\n\t\t\t\t\ttop: 0,\n\t\t\t\t\tleft: \"auto\"\n\t\t\t\t},\n\t\t\t\tstroke: {\n\t\t\t\t\tcolor: \"#fff\",\n\t\t\t\t\twidth: 1\n\t\t\t\t},\n\t\t\t\tlabel: {\n\t\t\t\t\tshow: \"auto\",\n\t\t\t\t\tformatter: function(label, slice) {\n\t\t\t\t\t\treturn \"<div style='font-size:x-small;text-align:center;padding:2px;color:\" + slice.color + \";'>\" + label + \"<br/>\" + Math.round(slice.percent) + \"%</div>\";\n\t\t\t\t\t},\t// formatter function\n\t\t\t\t\tradius: 1,\t// radius at which to place the labels (based on full calculated radius if <=1, or hard pixel value)\n\t\t\t\t\tbackground: {\n\t\t\t\t\t\tcolor: null,\n\t\t\t\t\t\topacity: 0\n\t\t\t\t\t},\n\t\t\t\t\tthreshold: 0\t// percentage at which to hide the label (i.e. the slice is too narrow)\n\t\t\t\t},\n\t\t\t\tcombine: {\n\t\t\t\t\tthreshold: -1,\t// percentage at which to combine little slices into one larger slice\n\t\t\t\t\tcolor: null,\t// color to give the new slice (auto-generated if null)\n\t\t\t\t\tlabel: \"Other\"\t// label to give the new slice\n\t\t\t\t},\n\t\t\t\thighlight: {\n\t\t\t\t\t//color: \"#fff\",\t\t// will add this functionality once parseColor is available\n\t\t\t\t\topacity: 0.5\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\t$.plot.plugins.push({\n\t\tinit: init,\n\t\toptions: options,\n\t\tname: \"pie\",\n\t\tversion: \"1.1\"\n\t});\n\n})(jQuery);\n","// jshint ignore: start\n// jscs: disable\nace.define(\"ace/snippets/prometheus\",[\"require\",\"exports\",\"module\"], function(require, exports, module) {\n\"use strict\";\n\n// exports.snippetText = \"# rate\\n\\\n// snippet r\\n\\\n//   rate(${1:metric}[${2:range}])\\n\\\n// \";\n\nexports.snippets = [\n  {\n    \"content\": \"rate(${1:metric}[${2:range}])\",\n    \"name\": \"rate()\",\n    \"scope\": \"prometheus\",\n    \"tabTrigger\": \"r\"\n  }\n];\n\nexports.scope = \"prometheus\";\n});\n","// jshint ignore: start\n// jscs: disable\nace.define(\"ace/mode/prometheus_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"], function(require, exports, module) {\n\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\nvar PrometheusHighlightRules = function() {\n  var keywords = (\n    \"count|count_values|min|max|avg|sum|stddev|stdvar|bottomk|topk|quantile\"\n  );\n\n  var builtinConstants = (\n    \"true|false|null|__name__|job\"\n  );\n\n  var builtinFunctions = (\n    \"abs|absent|ceil|changes|clamp_max|clamp_min|count_scalar|day_of_month|day_of_week|days_in_month|delta|deriv|\" + \"drop_common_labels|exp|floor|histogram_quantile|holt_winters|hour|idelta|increase|irate|label_replace|ln|log2|\" +\n    \"log10|minute|month|predict_linear|rate|resets|round|scalar|sort|sort_desc|sqrt|time|vector|year|avg_over_time|\" +\n    \"min_over_time|max_over_time|sum_over_time|count_over_time|quantile_over_time|stddev_over_time|stdvar_over_time\"\n  );\n\n  var keywordMapper = this.createKeywordMapper({\n    \"support.function\": builtinFunctions,\n    \"keyword\": keywords,\n    \"constant.language\": builtinConstants\n  }, \"identifier\", true);\n\n  this.$rules = {\n    \"start\" : [ {\n      token : \"string\", // single line\n      regex : /\"(?:[^\"\\\\]|\\\\.)*?\"/\n    }, {\n      token : \"string\", // string\n      regex : \"'.*?'\"\n    }, {\n      token : \"constant.numeric\", // float\n      regex : \"[-]?\\\\d+(?:(?:\\\\.\\\\d*)?(?:[eE][+-]?\\\\d+)?)?\\\\b\"\n    }, {\n      token : \"constant.language\", // time\n      regex : \"\\\\d+[smhdwy]\"\n    }, {\n      token : \"keyword.operator.binary\",\n      regex : \"\\\\+|\\\\-|\\\\*|\\\\/|%|\\\\^|==|!=|<=|>=|<|>|and|or|unless\"\n    }, {\n      token : \"keyword.other\",\n      regex : \"keep_common|offset|bool\"\n    }, {\n      token : \"keyword.control\",\n      regex : \"by|without|on|ignoring|group_left|group_right\",\n      next  : \"start-label-list-matcher\"\n    }, {\n      token : \"variable\",\n      regex : \"\\\\$[A-Za-z0-9_]+\"\n    }, {\n      token : keywordMapper,\n      regex : \"[a-zA-Z_:][a-zA-Z0-9_:]*\"\n    }, {\n      token : \"paren.lparen\",\n      regex : \"[[(]\"\n    }, {\n      token : \"paren.lparen.label-matcher\",\n      regex : \"{\",\n      next  : \"start-label-matcher\"\n    }, {\n      token : \"paren.rparen\",\n      regex : \"[\\\\])]\"\n    }, {\n      token : \"paren.rparen.label-matcher\",\n      regex : \"}\"\n    }, {\n      token : \"text\",\n      regex : \"\\\\s+\"\n    } ],\n    \"start-label-matcher\" : [ {\n      token : \"entity.name.tag.label-matcher\",\n      regex : '[a-zA-Z_][a-zA-Z0-9_]*'\n    }, {\n      token : \"keyword.operator.label-matcher\",\n      regex : '=~|=|!~|!='\n    }, {\n      token : \"string.quoted.label-matcher\",\n      regex : '\"[^\"]*\"|\\'[^\\']*\\''\n    }, {\n      token : \"punctuation.operator.label-matcher\",\n      regex : \",\"\n    }, {\n      token : \"paren.rparen.label-matcher\",\n      regex : \"}\",\n      next  : \"start\"\n    } ],\n    \"start-label-list-matcher\" : [ {\n      token : \"paren.lparen.label-list-matcher\",\n      regex : \"[(]\"\n    }, {\n      token : \"entity.name.tag.label-list-matcher\",\n      regex : '[a-zA-Z_][a-zA-Z0-9_]*'\n    }, {\n      token : \"punctuation.operator.label-list-matcher\",\n      regex : \",\"\n    }, {\n      token : \"paren.rparen.label-list-matcher\",\n      regex : \"[)]\",\n      next  : \"start\"\n    } ]\n  };\n\n  this.normalizeRules();\n};\n\noop.inherits(PrometheusHighlightRules, TextHighlightRules);\n\nexports.PrometheusHighlightRules = PrometheusHighlightRules;\n});\n\nace.define(\"ace/mode/prometheus_completions\",[\"require\",\"exports\",\"module\",\"ace/token_iterator\", \"ace/lib/lang\"], function(require, exports, module) {\n\"use strict\";\n\nvar lang = require(\"../lib/lang\");\n\nvar prometheusKeyWords = [\n  \"by\", \"without\", \"keep_common\", \"offset\", \"bool\", \"and\", \"or\", \"unless\", \"ignoring\", \"on\", \"group_left\",\n  \"group_right\", \"count\", \"count_values\", \"min\", \"max\", \"avg\", \"sum\", \"stddev\", \"stdvar\", \"bottomk\", \"topk\", \"quantile\"\n];\n\nvar keyWordsCompletions = prometheusKeyWords.map(function(word) {\n  return {\n    caption: word,\n    value: word,\n    meta: \"keyword\",\n    score: Number.MAX_VALUE\n  }\n});\n\nvar prometheusFunctions = [\n  {\n    name: 'abs()', value: 'abs',\n    def: 'abs(v instant-vector)',\n    docText: 'Returns the input vector with all sample values converted to their absolute value.'\n  },\n  {\n    name: 'absent()', value: 'absent',\n    def: 'absent(v instant-vector)',\n    docText: 'Returns an empty vector if the vector passed to it has any elements and a 1-element vector with the value 1 if the vector passed to it has no elements. This is useful for alerting on when no time series exist for a given metric name and label combination.'\n  },\n  {\n    name: 'ceil()', value: 'ceil',\n    def: 'ceil(v instant-vector)',\n    docText: 'Rounds the sample values of all elements in `v` up to the nearest integer.'\n  },\n  {\n    name: 'changes()', value: 'changes',\n    def: 'changes(v range-vector)',\n    docText: 'For each input time series, `changes(v range-vector)` returns the number of times its value has changed within the provided time range as an instant vector.'\n  },\n  {\n    name: 'clamp_max()', value: 'clamp_max',\n    def: 'clamp_max(v instant-vector, max scalar)',\n    docText: 'Clamps the sample values of all elements in `v` to have an upper limit of `max`.'\n  },\n  {\n    name: 'clamp_min()', value: 'clamp_min',\n    def: 'clamp_min(v instant-vector, min scalar)',\n    docText: 'Clamps the sample values of all elements in `v` to have a lower limit of `min`.'\n  },\n  {\n    name: 'count_scalar()', value: 'count_scalar',\n    def: 'count_scalar(v instant-vector)',\n    docText: 'Returns the number of elements in a time series vector as a scalar. This is in contrast to the `count()` aggregation operator, which always returns a vector (an empty one if the input vector is empty) and allows grouping by labels via a `by` clause.'\n  },\n  {\n    name: 'day_of_month()', value: 'day_of_month',\n    def: 'day_of_month(v=vector(time()) instant-vector)',\n    docText: 'Returns the day of the month for each of the given times in UTC. Returned values are from 1 to 31.'\n  },\n  {\n    name: 'day_of_week()', value: 'day_of_week',\n    def: 'day_of_week(v=vector(time()) instant-vector)',\n    docText: 'Returns the day of the week for each of the given times in UTC. Returned values are from 0 to 6, where 0 means Sunday etc.'\n  },\n  {\n    name: 'days_in_month()', value: 'days_in_month',\n    def: 'days_in_month(v=vector(time()) instant-vector)',\n    docText: 'Returns number of days in the month for each of the given times in UTC. Returned values are from 28 to 31.'\n  },\n  {\n    name: 'delta()', value: 'delta',\n    def: 'delta(v range-vector)',\n    docText: 'Calculates the difference between the first and last value of each time series element in a range vector `v`, returning an instant vector with the given deltas and equivalent labels. The delta is extrapolated to cover the full time range as specified in the range vector selector, so that it is possible to get a non-integer result even if the sample values are all integers.'\n  },\n  {\n    name: 'deriv()', value: 'deriv',\n    def: 'deriv(v range-vector)',\n    docText: 'Calculates the per-second derivative of the time series in a range vector `v`, using simple linear regression.'\n  },\n  {\n    name: 'drop_common_labels()', value: 'drop_common_labels',\n    def: 'drop_common_labels(instant-vector)',\n    docText: 'Drops all labels that have the same name and value across all series in the input vector.'\n  },\n  {\n    name: 'exp()', value: 'exp',\n    def: 'exp(v instant-vector)',\n    docText: 'Calculates the exponential function for all elements in `v`.\\nSpecial cases are:\\n* `Exp(+Inf) = +Inf` \\n* `Exp(NaN) = NaN`'\n  },\n  {\n    name: 'floor()', value: 'floor',\n    def: 'floor(v instant-vector)',\n    docText: 'Rounds the sample values of all elements in `v` down to the nearest integer.'\n  },\n  {\n    name: 'histogram_quantile()', value: 'histogram_quantile',\n    def: 'histogram_quantile(φ float, b instant-vector)',\n    docText: 'Calculates the φ-quantile (0 ≤ φ ≤ 1) from the buckets `b` of a histogram. The samples in `b` are the counts of observations in each bucket. Each sample must have a label `le` where the label value denotes the inclusive upper bound of the bucket. (Samples without such a label are silently ignored.) The histogram metric type automatically provides time series with the `_bucket` suffix and the appropriate labels.'\n  },\n  {\n    name: 'holt_winters()', value: 'holt_winters',\n    def: 'holt_winters(v range-vector, sf scalar, tf scalar)',\n    docText: 'Produces a smoothed value for time series based on the range in `v`. The lower the smoothing factor `sf`, the more importance is given to old data. The higher the trend factor `tf`, the more trends in the data is considered. Both `sf` and `tf` must be between 0 and 1.'\n  },\n  {\n    name: 'hour()', value: 'hour',\n    def: 'hour(v=vector(time()) instant-vector)',\n    docText: 'Returns the hour of the day for each of the given times in UTC. Returned values are from 0 to 23.'\n  },\n  {\n    name: 'idelta()', value: 'idelta',\n    def: 'idelta(v range-vector)',\n    docText: 'Calculates the difference between the last two samples in the range vector `v`, returning an instant vector with the given deltas and equivalent labels.'\n  },\n  {\n    name: 'increase()', value: 'increase',\n    def: 'increase(v range-vector)',\n    docText: 'Calculates the increase in the time series in the range vector. Breaks in monotonicity (such as counter resets due to target restarts) are automatically adjusted for. The increase is extrapolated to cover the full time range as specified in the range vector selector, so that it is possible to get a non-integer result even if a counter increases only by integer increments.'\n  },\n  {\n    name: 'irate()', value: 'irate',\n    def: 'irate(v range-vector)',\n    docText: 'Calculates the per-second instant rate of increase of the time series in the range vector. This is based on the last two data points. Breaks in monotonicity (such as counter resets due to target restarts) are automatically adjusted for.'\n  },\n  {\n    name: 'label_replace()', value: 'label_replace',\n    def: 'label_replace(v instant-vector, dst_label string, replacement string, src_label string, regex string)',\n    docText: 'For each timeseries in `v`, `label_replace(v instant-vector, dst_label string, replacement string, src_label string, regex string)`  matches the regular expression `regex` against the label `src_label`.  If it matches, then the timeseries is returned with the label `dst_label` replaced by the expansion of `replacement`. `$1` is replaced with the first matching subgroup, `$2` with the second etc. If the regular expression doesn\\'t match then the timeseries is returned unchanged.'\n  },\n  {\n    name: 'ln()', value: 'ln',\n    def: 'ln(v instant-vector)',\n    docText: 'calculates the natural logarithm for all elements in `v`.\\nSpecial cases are:\\n * `ln(+Inf) = +Inf`\\n * `ln(0) = -Inf`\\n * `ln(x < 0) = NaN`\\n * `ln(NaN) = NaN`'\n  },\n  {\n    name: 'log2()', value: 'log2',\n    def: 'log2(v instant-vector)',\n    docText: 'Calculates the binary logarithm for all elements in `v`. The special cases are equivalent to those in `ln`.'\n  },\n  {\n    name: 'log10()', value: 'log10',\n    def: 'log10(v instant-vector)',\n    docText: 'Calculates the decimal logarithm for all elements in `v`. The special cases are equivalent to those in `ln`.'\n  },\n  {\n    name: 'minute()', value: 'minute',\n    def: 'minute(v=vector(time()) instant-vector)',\n    docText: 'Returns the minute of the hour for each of the given times in UTC. Returned values are from 0 to 59.'\n  },\n  {\n    name: 'month()', value: 'month',\n    def: 'month(v=vector(time()) instant-vector)',\n    docText: 'Returns the month of the year for each of the given times in UTC. Returned values are from 1 to 12, where 1 means January etc.'\n  },\n  {\n    name: 'predict_linear()', value: 'predict_linear',\n    def: 'predict_linear(v range-vector, t scalar)',\n    docText: 'Predicts the value of time series `t` seconds from now, based on the range vector `v`, using simple linear regression.'\n  },\n  {\n    name: 'rate()', value: 'rate',\n    def: 'rate(v range-vector)',\n    docText: \"Calculates the per-second average rate of increase of the time series in the range vector. Breaks in monotonicity (such as counter resets due to target restarts) are automatically adjusted for. Also, the calculation extrapolates to the ends of the time range, allowing for missed scrapes or imperfect alignment of scrape cycles with the range's time period.\"\n  },\n  {\n    name: 'resets()', value: 'resets',\n    def: 'resets(v range-vector)',\n    docText: 'For each input time series, `resets(v range-vector)` returns the number of counter resets within the provided time range as an instant vector. Any decrease in the value between two consecutive samples is interpreted as a counter reset.'\n  },\n  {\n    name: 'round()', value: 'round',\n    def: 'round(v instant-vector, to_nearest=1 scalar)',\n    docText: 'Rounds the sample values of all elements in `v` to the nearest integer. Ties are resolved by rounding up. The optional `to_nearest` argument allows specifying the nearest multiple to which the sample values should be rounded. This multiple may also be a fraction.'\n  },\n  {\n    name: 'scalar()', value: 'scalar',\n    def: 'scalar(v instant-vector)',\n    docText: 'Given a single-element input vector, `scalar(v instant-vector)` returns the sample value of that single element as a scalar. If the input vector does not have exactly one element, `scalar` will return `NaN`.'\n  },\n  {\n    name: 'sort()', value: 'sort',\n    def: 'sort(v instant-vector)',\n    docText: 'Returns vector elements sorted by their sample values, in ascending order.'\n  },\n  {\n    name: 'sort_desc()', value: 'sort_desc',\n    def: 'sort_desc(v instant-vector)',\n    docText: 'Returns vector elements sorted by their sample values, in descending order.'\n  },\n  {\n    name: 'sqrt()', value: 'sqrt',\n    def: 'sqrt(v instant-vector)',\n    docText: 'Calculates the square root of all elements in `v`.'\n  },\n  {\n    name: 'time()', value: 'time',\n    def: 'time()',\n    docText: 'Returns the number of seconds since January 1, 1970 UTC. Note that this does not actually return the current time, but the time at which the expression is to be evaluated.'\n  },\n  {\n    name: 'vector()', value: 'vector',\n    def: 'vector(s scalar)',\n    docText: 'Returns the scalar `s` as a vector with no labels.'\n  },\n  {\n    name: 'year()', value: 'year',\n    def: 'year(v=vector(time()) instant-vector)',\n    docText: 'Returns the year for each of the given times in UTC.'\n  },\n  {\n    name: 'avg_over_time()', value: 'avg_over_time',\n    def: 'avg_over_time(range-vector)',\n    docText: 'The average value of all points in the specified interval.'\n  },\n  {\n    name: 'min_over_time()', value: 'min_over_time',\n    def: 'min_over_time(range-vector)',\n    docText: 'The minimum value of all points in the specified interval.'\n  },\n  {\n    name: 'max_over_time()', value: 'max_over_time',\n    def: 'max_over_time(range-vector)',\n    docText: 'The maximum value of all points in the specified interval.'\n  },\n  {\n    name: 'sum_over_time()', value: 'sum_over_time',\n    def: 'sum_over_time(range-vector)',\n    docText: 'The sum of all values in the specified interval.'\n  },\n  {\n    name: 'count_over_time()', value: 'count_over_time',\n    def: 'count_over_time(range-vector)',\n    docText: 'The count of all values in the specified interval.'\n  },\n  {\n    name: 'quantile_over_time()', value: 'quantile_over_time',\n    def: 'quantile_over_time(scalar, range-vector)',\n    docText: 'The φ-quantile (0 ≤ φ ≤ 1) of the values in the specified interval.'\n  },\n  {\n    name: 'stddev_over_time()', value: 'stddev_over_time',\n    def: 'stddev_over_time(range-vector)',\n    docText: 'The population standard deviation of the values in the specified interval.'\n  },\n  {\n    name: 'stdvar_over_time()', value: 'stdvar_over_time',\n    def: 'stdvar_over_time(range-vector)',\n    docText: 'The population standard variance of the values in the specified interval.'\n  },\n];\n\nfunction wrapText(str, len) {\n  len = len || 60;\n  var lines = [];\n  var space_index = 0;\n  var line_start = 0;\n  var next_line_end = len;\n  var line = \"\";\n  for (var i = 0; i < str.length; i++) {\n    if (str[i] === ' ') {\n      space_index = i;\n    } else if (i >= next_line_end  && space_index != 0) {\n      line = str.slice(line_start, space_index);\n      lines.push(line);\n      line_start = space_index + 1;\n      next_line_end = i + len;\n      space_index = 0;\n    }\n  }\n  line = str.slice(line_start);\n  lines.push(line);\n  return lines.join(\"&nbsp<br>\");\n}\n\nfunction convertMarkDownTags(text) {\n  text = text.replace(/```(.+)```/, \"<pre>$1</pre>\");\n  text = text.replace(/`([^`]+)`/, \"<code>$1</code>\");\n  return text;\n}\n\nfunction convertToHTML(item) {\n  var docText = lang.escapeHTML(item.docText);\n  docText = convertMarkDownTags(wrapText(docText, 40));\n  return [\n    \"<b>\", lang.escapeHTML(item.def), \"</b>\", \"<hr></hr>\", docText, \"<br>&nbsp\"\n  ].join(\"\");\n}\n\nvar functionsCompletions = prometheusFunctions.map(function(item) {\n  return {\n    caption: item.name,\n    value: item.value,\n    docHTML: convertToHTML(item),\n    meta: \"function\",\n    score: Number.MAX_VALUE\n  };\n});\n\nvar PrometheusCompletions = function() {};\n\n(function() {\n  this.getCompletions = function(state, session, pos, prefix, callback) {\n    var token = session.getTokenAt(pos.row, pos.column);\n    if (token.type === 'entity.name.tag.label-matcher'\n      || token.type === 'string.quoted.label-matcher'\n      || token.type === 'entity.name.tag.label-list-matcher') {\n      return callback(null, []);\n    }\n\n    var completions = keyWordsCompletions.concat(functionsCompletions);\n    callback(null, completions);\n  };\n\n}).call(PrometheusCompletions.prototype);\n\nexports.PrometheusCompletions = PrometheusCompletions;\n});\n\nace.define(\"ace/mode/behaviour/prometheus\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/behaviour\",\"ace/mode/behaviour/cstyle\",\"ace/token_iterator\"], function(require, exports, module) {\n\"use strict\";\n\nvar oop = require(\"../../lib/oop\");\nvar Behaviour = require(\"../behaviour\").Behaviour;\nvar CstyleBehaviour = require(\"./cstyle\").CstyleBehaviour;\nvar TokenIterator = require(\"../../token_iterator\").TokenIterator;\n\nfunction getWrapped(selection, selected, opening, closing) {\n  var rowDiff = selection.end.row - selection.start.row;\n  return {\n    text: opening + selected + closing,\n    selection: [\n      0,\n      selection.start.column + 1,\n      rowDiff,\n      selection.end.column + (rowDiff ? 0 : 1)\n    ]\n  };\n};\n\nvar PrometheusBehaviour = function () {\n  this.inherit(CstyleBehaviour);\n\n  // Rewrite default CstyleBehaviour for {} braces\n  this.add(\"braces\", \"insertion\", function(state, action, editor, session, text) {\n    if (text == '{') {\n      var selection = editor.getSelectionRange();\n      var selected = session.doc.getTextRange(selection);\n      if (selected !== \"\" && editor.getWrapBehavioursEnabled()) {\n        return getWrapped(selection, selected, '{', '}');\n      } else if (CstyleBehaviour.isSaneInsertion(editor, session)) {\n        return {\n          text: '{}',\n          selection: [1, 1]\n        };\n      }\n    } else if (text == '}') {\n      var cursor = editor.getCursorPosition();\n      var line = session.doc.getLine(cursor.row);\n      var rightChar = line.substring(cursor.column, cursor.column + 1);\n      if (rightChar == '}') {\n        var matching = session.$findOpeningBracket('}', {column: cursor.column + 1, row: cursor.row});\n        if (matching !== null && CstyleBehaviour.isAutoInsertedClosing(cursor, line, text)) {\n          return {\n            text: '',\n            selection: [1, 1]\n          };\n        }\n      }\n    }\n  });\n\n  this.add(\"braces\", \"deletion\", function(state, action, editor, session, range) {\n    var selected = session.doc.getTextRange(range);\n    if (!range.isMultiLine() && selected == '{') {\n      var line = session.doc.getLine(range.start.row);\n      var rightChar = line.substring(range.start.column + 1, range.start.column + 2);\n      if (rightChar == '}') {\n        range.end.column++;\n        return range;\n      }\n    }\n  });\n\n}\noop.inherits(PrometheusBehaviour, CstyleBehaviour);\n\nexports.PrometheusBehaviour = PrometheusBehaviour;\n});\n\nace.define(\"ace/mode/prometheus\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/prometheus_highlight_rules\"], function(require, exports, module) {\n\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar TextMode = require(\"./text\").Mode;\nvar PrometheusHighlightRules = require(\"./prometheus_highlight_rules\").PrometheusHighlightRules;\nvar PrometheusCompletions = require(\"./prometheus_completions\").PrometheusCompletions;\nvar PrometheusBehaviour = require(\"./behaviour/prometheus\").PrometheusBehaviour;\n\nvar Mode = function() {\n  this.HighlightRules = PrometheusHighlightRules;\n  this.$behaviour = new PrometheusBehaviour();\n  this.$completer = new PrometheusCompletions();\n  // replace keyWordCompleter\n  this.completer = this.$completer;\n};\noop.inherits(Mode, TextMode);\n\n(function() {\n\n  this.$id = \"ace/mode/prometheus\";\n}).call(Mode.prototype);\n\nexports.Mode = Mode;\n\n});\n","import angular from 'angular';\nimport _ from 'lodash';\nimport kbn from 'app/core/utils/kbn';\n\nexport class LinkSrv {\n  /** @ngInject */\n  constructor(private templateSrv, private timeSrv) {}\n\n  getLinkUrl(link) {\n    const url = this.templateSrv.replace(link.url || '');\n    const params = {};\n\n    if (link.keepTime) {\n      const range = this.timeSrv.timeRangeForUrl();\n      params['from'] = range.from;\n      params['to'] = range.to;\n    }\n\n    if (link.includeVars) {\n      this.templateSrv.fillVariableValuesForUrl(params);\n    }\n\n    return this.addParamsToUrl(url, params);\n  }\n\n  addParamsToUrl(url, params) {\n    const paramsArray = [];\n\n    _.each(params, function(value, key) {\n      if (value === null) {\n        return;\n      }\n      if (value === true) {\n        paramsArray.push(key);\n      } else if (_.isArray(value)) {\n        _.each(value, function(instance) {\n          paramsArray.push(key + '=' + encodeURIComponent(instance));\n        });\n      } else {\n        paramsArray.push(key + '=' + encodeURIComponent(value));\n      }\n    });\n\n    if (paramsArray.length === 0) {\n      return url;\n    }\n\n    return this.appendToQueryString(url, paramsArray.join('&'));\n  }\n\n  appendToQueryString(url, stringToAppend) {\n    if (!_.isUndefined(stringToAppend) && stringToAppend !== null && stringToAppend !== '') {\n      const pos = url.indexOf('?');\n      if (pos !== -1) {\n        if (url.length - pos > 1) {\n          url += '&';\n        }\n      } else {\n        url += '?';\n      }\n      url += stringToAppend;\n    }\n\n    return url;\n  }\n\n  getAnchorInfo(link) {\n    const info: any = {};\n    info.href = this.getLinkUrl(link);\n    info.title = this.templateSrv.replace(link.title || '');\n    return info;\n  }\n\n  getPanelLinkAnchorInfo(link, scopedVars) {\n    const info: any = {};\n    if (link.type === 'absolute') {\n      info.target = link.targetBlank ? '_blank' : '_self';\n      info.href = this.templateSrv.replace(link.url || '', scopedVars);\n      info.title = this.templateSrv.replace(link.title || '', scopedVars);\n    } else if (link.url) {\n      info.href = link.url;\n      info.title = this.templateSrv.replace(link.title || '', scopedVars);\n      info.target = link.targetBlank ? '_blank' : '';\n    } else if (link.dashUri) {\n      info.href = 'dashboard/' + link.dashUri + '?';\n      info.title = this.templateSrv.replace(link.title || '', scopedVars);\n      info.target = link.targetBlank ? '_blank' : '';\n    } else {\n      info.title = this.templateSrv.replace(link.title || '', scopedVars);\n      const slug = kbn.slugifyForUrl(link.dashboard || '');\n      info.href = 'dashboard/db/' + slug + '?';\n    }\n\n    const params = {};\n\n    if (link.keepTime) {\n      const range = this.timeSrv.timeRangeForUrl();\n      params['from'] = range.from;\n      params['to'] = range.to;\n    }\n\n    if (link.includeVars) {\n      this.templateSrv.fillVariableValuesForUrl(params, scopedVars);\n    }\n\n    info.href = this.addParamsToUrl(info.href, params);\n\n    if (link.params) {\n      info.href = this.appendToQueryString(info.href, this.templateSrv.replace(link.params, scopedVars));\n    }\n\n    return info;\n  }\n}\n\nangular.module('grafana.services').service('linkSrv', LinkSrv);\n","import angular from 'angular';\nimport _ from 'lodash';\nimport './link_srv';\n\nfunction panelLinksEditor() {\n  return {\n    scope: {\n      panel: '=',\n    },\n    restrict: 'E',\n    controller: 'PanelLinksEditorCtrl',\n    templateUrl: 'public/app/features/panellinks/module.html',\n    link: function() {},\n  };\n}\n\nexport class PanelLinksEditorCtrl {\n  /** @ngInject */\n  constructor($scope, backendSrv) {\n    $scope.panel.links = $scope.panel.links || [];\n\n    $scope.addLink = function() {\n      $scope.panel.links.push({\n        type: 'dashboard',\n      });\n    };\n\n    $scope.searchDashboards = function(queryStr, callback) {\n      backendSrv.search({ query: queryStr }).then(function(hits) {\n        const dashboards = _.map(hits, function(dash) {\n          return dash.title;\n        });\n\n        callback(dashboards);\n      });\n    };\n\n    $scope.dashboardChanged = function(link) {\n      backendSrv.search({ query: link.dashboard }).then(function(hits) {\n        const dashboard = _.find(hits, { title: link.dashboard });\n        if (dashboard) {\n          if (dashboard.url) {\n            link.url = dashboard.url;\n          } else {\n            // To support legacy url's\n            link.dashUri = dashboard.uri;\n          }\n          link.title = dashboard.title;\n        }\n      });\n    };\n\n    $scope.deleteLink = function(link) {\n      $scope.panel.links = _.without($scope.panel.links, link);\n    };\n  }\n}\n\nangular\n  .module('grafana.directives')\n  .directive('panelLinksEditor', panelLinksEditor)\n  .controller('PanelLinksEditorCtrl', PanelLinksEditorCtrl);\n","import angular from 'angular';\nimport _ from 'lodash';\n\nexport let iconMap = {\n  'external link': 'fa-external-link',\n  dashboard: 'fa-th-large',\n  question: 'fa-question',\n  info: 'fa-info',\n  bolt: 'fa-bolt',\n  doc: 'fa-file-text-o',\n  cloud: 'fa-cloud',\n};\n\nexport class DashLinkEditorCtrl {\n  dashboard: any;\n  iconMap: any;\n  mode: any;\n  link: any;\n\n  /** @ngInject */\n  constructor($scope, $rootScope) {\n    this.iconMap = iconMap;\n    this.dashboard.links = this.dashboard.links || [];\n    this.mode = 'list';\n\n    $scope.$on('$destroy', () => {\n      $rootScope.appEvent('dash-links-updated');\n    });\n  }\n\n  backToList() {\n    this.mode = 'list';\n  }\n\n  setupNew() {\n    this.mode = 'new';\n    this.link = { type: 'dashboards', icon: 'external link' };\n  }\n\n  addLink() {\n    this.dashboard.links.push(this.link);\n    this.mode = 'list';\n  }\n\n  editLink(link) {\n    this.link = link;\n    this.mode = 'edit';\n    console.log(this.link);\n  }\n\n  saveLink() {\n    this.backToList();\n  }\n\n  moveLink(index, dir) {\n    _.move(this.dashboard.links, index, index + dir);\n  }\n\n  deleteLink(index) {\n    this.dashboard.links.splice(index, 1);\n    this.dashboard.updateSubmenuVisibility();\n  }\n}\n\nfunction dashLinksEditor() {\n  return {\n    restrict: 'E',\n    controller: DashLinkEditorCtrl,\n    templateUrl: 'public/app/features/dashlinks/editor.html',\n    bindToController: true,\n    controllerAs: 'ctrl',\n    scope: {\n      dashboard: '=',\n    },\n  };\n}\n\nangular.module('grafana.directives').directive('dashLinksEditor', dashLinksEditor);\n","import angular from 'angular';\nimport _ from 'lodash';\nimport { iconMap } from './editor';\n\nfunction dashLinksContainer() {\n  return {\n    scope: {\n      links: '=',\n    },\n    restrict: 'E',\n    controller: 'DashLinksContainerCtrl',\n    template: '<dash-link ng-repeat=\"link in generatedLinks\" link=\"link\"></dash-link>',\n    link: function() {},\n  };\n}\n\n/** @ngInject */\nfunction dashLink($compile, $sanitize, linkSrv) {\n  return {\n    restrict: 'E',\n    link: function(scope, elem) {\n      const link = scope.link;\n      let template =\n        '<div class=\"gf-form\">' +\n        '<a class=\"pointer gf-form-label\" data-placement=\"bottom\"' +\n        (link.asDropdown ? ' ng-click=\"fillDropdown(link)\" data-toggle=\"dropdown\"' : '') +\n        '>' +\n        '<i></i> <span></span></a>';\n\n      if (link.asDropdown) {\n        template +=\n          '<ul class=\"dropdown-menu\" role=\"menu\">' +\n          '<li ng-repeat=\"dash in link.searchHits\">' +\n          '<a href=\"{{dash.url}}\" target=\"{{dash.target}}\">{{dash.title}}</a>' +\n          '</li>' +\n          '</ul>';\n      }\n\n      template += '</div>';\n\n      elem.html(template);\n      $compile(elem.contents())(scope);\n\n      function update() {\n        const linkInfo = linkSrv.getAnchorInfo(link);\n\n        const anchor = elem.find('a');\n        const span = elem.find('span');\n        span.text(linkInfo.title);\n\n        if (!link.asDropdown) {\n          anchor.attr('href', linkInfo.href);\n          sanitizeAnchor();\n        }\n        anchor.attr('data-placement', 'bottom');\n        // tooltip\n        anchor.tooltip({\n          title: $sanitize(scope.link.tooltip),\n          html: true,\n          container: 'body',\n        });\n      }\n\n      function sanitizeAnchor() {\n        const anchor = elem.find('a');\n        const anchorSanitized = $sanitize(anchor.parent().html());\n        anchor.parent().html(anchorSanitized);\n      }\n\n      elem.find('i').attr('class', 'fa fa-fw ' + scope.link.icon);\n      elem.find('a').attr('target', scope.link.target);\n\n      // fix for menus on the far right\n      if (link.asDropdown && scope.$last) {\n        elem.find('.dropdown-menu').addClass('pull-right');\n      }\n\n      update();\n      scope.$on('refresh', update);\n    },\n  };\n}\n\nexport class DashLinksContainerCtrl {\n  /** @ngInject */\n  constructor($scope, $rootScope, $q, backendSrv, dashboardSrv, linkSrv) {\n    const currentDashId = dashboardSrv.getCurrent().id;\n\n    function buildLinks(linkDef) {\n      if (linkDef.type === 'dashboards') {\n        if (!linkDef.tags) {\n          console.log('Dashboard link missing tag');\n          return $q.when([]);\n        }\n\n        if (linkDef.asDropdown) {\n          return $q.when([\n            {\n              title: linkDef.title,\n              tags: linkDef.tags,\n              keepTime: linkDef.keepTime,\n              includeVars: linkDef.includeVars,\n              target: linkDef.targetBlank ? '_blank' : '_self',\n              icon: 'fa fa-bars',\n              asDropdown: true,\n            },\n          ]);\n        }\n\n        return $scope.searchDashboards(linkDef, 7);\n      }\n\n      if (linkDef.type === 'link') {\n        return $q.when([\n          {\n            url: linkDef.url,\n            title: linkDef.title,\n            icon: iconMap[linkDef.icon],\n            tooltip: linkDef.tooltip,\n            target: linkDef.targetBlank ? '_blank' : '_self',\n            keepTime: linkDef.keepTime,\n            includeVars: linkDef.includeVars,\n          },\n        ]);\n      }\n\n      return $q.when([]);\n    }\n\n    function updateDashLinks() {\n      const promises = _.map($scope.links, buildLinks);\n\n      $q.all(promises).then(function(results) {\n        $scope.generatedLinks = _.flatten(results);\n      });\n    }\n\n    $scope.searchDashboards = function(link, limit) {\n      return backendSrv.search({ tag: link.tags, limit: limit }).then(function(results) {\n        return _.reduce(\n          results,\n          function(memo, dash) {\n            // do not add current dashboard\n            if (dash.id !== currentDashId) {\n              memo.push({\n                title: dash.title,\n                url: dash.url,\n                target: link.target === '_self' ? '' : link.target,\n                icon: 'fa fa-th-large',\n                keepTime: link.keepTime,\n                includeVars: link.includeVars,\n              });\n            }\n            return memo;\n          },\n          []\n        );\n      });\n    };\n\n    $scope.fillDropdown = function(link) {\n      $scope.searchDashboards(link, 100).then(function(results) {\n        _.each(results, function(hit) {\n          hit.url = linkSrv.getLinkUrl(hit);\n        });\n        link.searchHits = results;\n      });\n    };\n\n    updateDashLinks();\n    $rootScope.onAppEvent('dash-links-updated', updateDashLinks, $scope);\n  }\n}\n\nangular.module('grafana.directives').directive('dashLinksContainer', dashLinksContainer);\nangular.module('grafana.directives').directive('dashLink', dashLink);\nangular.module('grafana.directives').controller('DashLinksContainerCtrl', DashLinksContainerCtrl);\n","import angular from 'angular';\nimport _ from 'lodash';\nimport $ from 'jquery';\nimport coreModule from 'app/core/core_module';\n\nexport class AnnotationsEditorCtrl {\n  mode: any;\n  datasources: any;\n  annotations: any;\n  currentAnnotation: any;\n  currentDatasource: any;\n  currentIsNew: any;\n\n  annotationDefaults: any = {\n    name: '',\n    datasource: null,\n    iconColor: 'rgba(255, 96, 96, 1)',\n    enable: true,\n    showIn: 0,\n    hide: false,\n  };\n\n  showOptions: any = [{ text: '所有面板', value: 0 }, { text: '指定面板', value: 1 }];\n\n  /** @ngInject */\n  constructor($scope, private datasourceSrv) {\n    $scope.ctrl = this;\n\n    this.mode = 'list';\n    this.datasources = datasourceSrv.getAnnotationSources();\n    this.annotations = $scope.dashboard.annotations.list;\n    this.reset();\n\n    this.onColorChange = this.onColorChange.bind(this);\n  }\n\n  datasourceChanged() {\n    return this.datasourceSrv.get(this.currentAnnotation.datasource).then(ds => {\n      this.currentDatasource = ds;\n    });\n  }\n\n  edit(annotation) {\n    this.currentAnnotation = annotation;\n    this.currentAnnotation.showIn = this.currentAnnotation.showIn || 0;\n    this.currentIsNew = false;\n    this.datasourceChanged();\n    this.mode = 'edit';\n    $('.tooltip.in').remove();\n  }\n\n  reset() {\n    this.currentAnnotation = angular.copy(this.annotationDefaults);\n    this.currentAnnotation.datasource = this.datasources[0].name;\n    this.currentIsNew = true;\n    this.datasourceChanged();\n  }\n\n  update() {\n    this.reset();\n    this.mode = 'list';\n  }\n\n  setupNew() {\n    this.mode = 'new';\n    this.reset();\n  }\n\n  backToList() {\n    this.mode = 'list';\n  }\n\n  move(index, dir) {\n    _.move(this.annotations, index, index + dir);\n  }\n\n  add() {\n    this.annotations.push(this.currentAnnotation);\n    this.reset();\n    this.mode = 'list';\n  }\n\n  removeAnnotation(annotation) {\n    const index = _.indexOf(this.annotations, annotation);\n    this.annotations.splice(index, 1);\n  }\n\n  onColorChange(newColor) {\n    this.currentAnnotation.iconColor = newColor;\n  }\n}\n\ncoreModule.controller('AnnotationsEditorCtrl', AnnotationsEditorCtrl);\n","import _ from 'lodash';\n\n/**\n * This function converts annotation events into set\n * of single events and regions (event consist of two)\n * @param annotations\n * @param options\n */\nexport function makeRegions(annotations, options) {\n  const [regionEvents, singleEvents] = _.partition(annotations, 'regionId');\n  const regions = getRegions(regionEvents, options.range);\n  annotations = _.concat(regions, singleEvents);\n  return annotations;\n}\n\nfunction getRegions(events, range) {\n  const region_events = _.filter(events, event => {\n    return event.regionId;\n  });\n  let regions = _.groupBy(region_events, 'regionId');\n  regions = _.compact(\n    _.map(regions, region_events => {\n      const region_obj = _.head(region_events);\n      if (region_events && region_events.length > 1) {\n        region_obj.timeEnd = region_events[1].time;\n        region_obj.isRegion = true;\n        return region_obj;\n      } else {\n        if (region_events && region_events.length) {\n          // Don't change proper region object\n          if (!region_obj.time || !region_obj.timeEnd) {\n            // This is cut region\n            if (isStartOfRegion(region_obj)) {\n              region_obj.timeEnd = range.to.valueOf() - 1;\n            } else {\n              // Start time = null\n              region_obj.timeEnd = region_obj.time;\n              region_obj.time = range.from.valueOf() + 1;\n            }\n            region_obj.isRegion = true;\n          }\n\n          return region_obj;\n        }\n      }\n    })\n  );\n\n  return regions;\n}\n\nfunction isStartOfRegion(event): boolean {\n  return event.id && event.id === event.regionId;\n}\n\nexport function dedupAnnotations(annotations) {\n  let dedup = [];\n\n  // Split events by annotationId property existence\n  const events = _.partition(annotations, 'id');\n\n  const eventsById = _.groupBy(events[0], 'id');\n  dedup = _.map(eventsById, eventGroup => {\n    if (eventGroup.length > 1 && !_.every(eventGroup, isPanelAlert)) {\n      // Get first non-panel alert\n      return _.find(eventGroup, event => {\n        return event.eventType !== 'panel-alert';\n      });\n    } else {\n      return _.head(eventGroup);\n    }\n  });\n\n  dedup = _.concat(dedup, events[1]);\n  return dedup;\n}\n\nfunction isPanelAlert(event) {\n  return event.eventType === 'panel-alert';\n}\n","import './editor_ctrl';\n\nimport angular from 'angular';\nimport _ from 'lodash';\nimport coreModule from 'app/core/core_module';\nimport { makeRegions, dedupAnnotations } from './events_processing';\n\nexport class AnnotationsSrv {\n  globalAnnotationsPromise: any;\n  alertStatesPromise: any;\n\n  /** @ngInject */\n  constructor(private $rootScope, private $q, private datasourceSrv, private backendSrv, private timeSrv) {\n    $rootScope.onAppEvent('refresh', this.clearCache.bind(this), $rootScope);\n    $rootScope.onAppEvent('dashboard-initialized', this.clearCache.bind(this), $rootScope);\n  }\n\n  clearCache() {\n    this.globalAnnotationsPromise = null;\n    this.alertStatesPromise = null;\n  }\n\n  getAnnotations(options) {\n    return this.$q\n      .all([this.getGlobalAnnotations(options), this.getAlertStates(options)])\n      .then(results => {\n        // combine the annotations and flatten results\n        let annotations = _.flattenDeep(results[0]);\n\n        // filter out annotations that do not belong to requesting panel\n        annotations = _.filter(annotations, item => {\n          // if event has panel id and query is of type dashboard then panel and requesting panel id must match\n          if (item.panelId && item.source.type === 'dashboard') {\n            return item.panelId === options.panel.id;\n          }\n          return true;\n        });\n\n        annotations = dedupAnnotations(annotations);\n        annotations = makeRegions(annotations, options);\n\n        // look for alert state for this panel\n        const alertState = _.find(results[1], { panelId: options.panel.id });\n\n        return {\n          annotations: annotations,\n          alertState: alertState,\n        };\n      })\n      .catch(err => {\n        if (!err.message && err.data && err.data.message) {\n          err.message = err.data.message;\n        }\n        console.log('AnnotationSrv.query error', err);\n        this.$rootScope.appEvent('alert-error', ['注释查询失败', err.message || err]);\n        return [];\n      });\n  }\n\n  getAlertStates(options) {\n    if (!options.dashboard.id) {\n      return this.$q.when([]);\n    }\n\n    // ignore if no alerts\n    if (options.panel && !options.panel.alert) {\n      return this.$q.when([]);\n    }\n\n    if (options.range.raw.to !== 'now') {\n      return this.$q.when([]);\n    }\n\n    if (this.alertStatesPromise) {\n      return this.alertStatesPromise;\n    }\n\n    this.alertStatesPromise = this.backendSrv.get('/api/alerts/states-for-dashboard', {\n      dashboardId: options.dashboard.id,\n    });\n    return this.alertStatesPromise;\n  }\n\n  getGlobalAnnotations(options) {\n    const dashboard = options.dashboard;\n\n    if (this.globalAnnotationsPromise) {\n      return this.globalAnnotationsPromise;\n    }\n\n    const range = this.timeSrv.timeRange();\n    const promises = [];\n\n    for (const annotation of dashboard.annotations.list) {\n      if (!annotation.enable) {\n        continue;\n      }\n\n      if (annotation.snapshotData) {\n        return this.translateQueryResult(annotation, annotation.snapshotData);\n      }\n\n      promises.push(\n        this.datasourceSrv\n          .get(annotation.datasource)\n          .then(datasource => {\n            // issue query against data source\n            return datasource.annotationQuery({\n              range: range,\n              rangeRaw: range.raw,\n              annotation: annotation,\n              dashboard: dashboard,\n            });\n          })\n          .then(results => {\n            // store response in annotation object if this is a snapshot call\n            if (dashboard.snapshot) {\n              annotation.snapshotData = angular.copy(results);\n            }\n            // translate result\n            return this.translateQueryResult(annotation, results);\n          })\n      );\n    }\n\n    this.globalAnnotationsPromise = this.$q.all(promises);\n    return this.globalAnnotationsPromise;\n  }\n\n  saveAnnotationEvent(annotation) {\n    this.globalAnnotationsPromise = null;\n    return this.backendSrv.post('/api/annotations', annotation);\n  }\n\n  updateAnnotationEvent(annotation) {\n    this.globalAnnotationsPromise = null;\n    return this.backendSrv.put(`/api/annotations/${annotation.id}`, annotation);\n  }\n\n  deleteAnnotationEvent(annotation) {\n    this.globalAnnotationsPromise = null;\n    let deleteUrl = `/api/annotations/${annotation.id}`;\n    if (annotation.isRegion) {\n      deleteUrl = `/api/annotations/region/${annotation.regionId}`;\n    }\n\n    return this.backendSrv.delete(deleteUrl);\n  }\n\n  translateQueryResult(annotation, results) {\n    // if annotation has snapshotData\n    // make clone and remove it\n    if (annotation.snapshotData) {\n      annotation = angular.copy(annotation);\n      delete annotation.snapshotData;\n    }\n\n    for (const item of results) {\n      item.source = annotation;\n    }\n    return results;\n  }\n}\n\ncoreModule.service('annotationsSrv', AnnotationsSrv);\n","import _ from 'lodash';\nimport moment from 'moment';\nimport { coreModule } from 'app/core/core';\nimport { MetricsPanelCtrl } from 'app/plugins/sdk';\nimport { AnnotationEvent } from './event';\n\nexport class EventEditorCtrl {\n  panelCtrl: MetricsPanelCtrl;\n  event: AnnotationEvent;\n  timeRange: { from: number; to: number };\n  form: any;\n  close: any;\n  timeFormated: string;\n\n  /** @ngInject */\n  constructor(private annotationsSrv) {\n    this.event.panelId = this.panelCtrl.panel.id;\n    this.event.dashboardId = this.panelCtrl.dashboard.id;\n\n    // Annotations query returns time as Unix timestamp in milliseconds\n    this.event.time = tryEpochToMoment(this.event.time);\n    if (this.event.isRegion) {\n      this.event.timeEnd = tryEpochToMoment(this.event.timeEnd);\n    }\n\n    this.timeFormated = this.panelCtrl.dashboard.formatDate(this.event.time);\n  }\n\n  save() {\n    if (!this.form.$valid) {\n      return;\n    }\n\n    const saveModel = _.cloneDeep(this.event);\n    saveModel.time = saveModel.time.valueOf();\n    saveModel.timeEnd = 0;\n\n    if (saveModel.isRegion) {\n      saveModel.timeEnd = this.event.timeEnd.valueOf();\n\n      if (saveModel.timeEnd < saveModel.time) {\n        console.log('invalid time');\n        return;\n      }\n    }\n\n    if (saveModel.id) {\n      this.annotationsSrv\n        .updateAnnotationEvent(saveModel)\n        .then(() => {\n          this.panelCtrl.refresh();\n          this.close();\n        })\n        .catch(() => {\n          this.panelCtrl.refresh();\n          this.close();\n        });\n    } else {\n      this.annotationsSrv\n        .saveAnnotationEvent(saveModel)\n        .then(() => {\n          this.panelCtrl.refresh();\n          this.close();\n        })\n        .catch(() => {\n          this.panelCtrl.refresh();\n          this.close();\n        });\n    }\n  }\n\n  delete() {\n    return this.annotationsSrv\n      .deleteAnnotationEvent(this.event)\n      .then(() => {\n        this.panelCtrl.refresh();\n        this.close();\n      })\n      .catch(() => {\n        this.panelCtrl.refresh();\n        this.close();\n      });\n  }\n}\n\nfunction tryEpochToMoment(timestamp) {\n  if (timestamp && _.isNumber(timestamp)) {\n    const epoch = Number(timestamp);\n    return moment(epoch);\n  } else {\n    return timestamp;\n  }\n}\n\nexport function eventEditor() {\n  return {\n    restrict: 'E',\n    controller: EventEditorCtrl,\n    bindToController: true,\n    controllerAs: 'ctrl',\n    templateUrl: 'public/app/features/annotations/partials/event_editor.html',\n    scope: {\n      panelCtrl: '=',\n      event: '=',\n      close: '&',\n    },\n  };\n}\n\ncoreModule.directive('eventEditor', eventEditor);\n","export class AnnotationEvent {\n  dashboardId: number;\n  panelId: number;\n  userId: number;\n  time: any;\n  timeEnd: any;\n  isRegion: boolean;\n  text: string;\n  type: string;\n  tags: string;\n}\n","import _ from 'lodash';\nimport moment from 'moment';\nimport tinycolor from 'tinycolor2';\nimport { MetricsPanelCtrl } from 'app/plugins/sdk';\nimport { AnnotationEvent } from './event';\nimport {\n  OK_COLOR,\n  ALERTING_COLOR,\n  NO_DATA_COLOR,\n  DEFAULT_ANNOTATION_COLOR,\n  REGION_FILL_ALPHA,\n} from 'app/core/utils/colors';\n\nexport class EventManager {\n  event: AnnotationEvent;\n  editorOpen: boolean;\n\n  constructor(private panelCtrl: MetricsPanelCtrl) {}\n\n  editorClosed() {\n    this.event = null;\n    this.editorOpen = false;\n    this.panelCtrl.render();\n  }\n\n  editorOpened() {\n    this.editorOpen = true;\n  }\n\n  updateTime(range) {\n    if (!this.event) {\n      this.event = new AnnotationEvent();\n      this.event.dashboardId = this.panelCtrl.dashboard.id;\n      this.event.panelId = this.panelCtrl.panel.id;\n    }\n\n    // update time\n    this.event.time = moment(range.from);\n    this.event.isRegion = false;\n    if (range.to) {\n      this.event.timeEnd = moment(range.to);\n      this.event.isRegion = true;\n    }\n\n    this.panelCtrl.render();\n  }\n\n  editEvent(event, elem?) {\n    this.event = event;\n    this.panelCtrl.render();\n  }\n\n  addFlotEvents(annotations, flotOptions) {\n    if (!this.event && annotations.length === 0) {\n      return;\n    }\n\n    const types = {\n      $__alerting: {\n        color: ALERTING_COLOR,\n        position: 'BOTTOM',\n        markerSize: 5,\n      },\n      $__ok: {\n        color: OK_COLOR,\n        position: 'BOTTOM',\n        markerSize: 5,\n      },\n      $__no_data: {\n        color: NO_DATA_COLOR,\n        position: 'BOTTOM',\n        markerSize: 5,\n      },\n      $__editing: {\n        color: DEFAULT_ANNOTATION_COLOR,\n        position: 'BOTTOM',\n        markerSize: 5,\n      },\n    };\n\n    if (this.event) {\n      if (this.event.isRegion) {\n        annotations = [\n          {\n            isRegion: true,\n            min: this.event.time.valueOf(),\n            timeEnd: this.event.timeEnd.valueOf(),\n            text: this.event.text,\n            eventType: '$__editing',\n            editModel: this.event,\n          },\n        ];\n      } else {\n        annotations = [\n          {\n            min: this.event.time.valueOf(),\n            text: this.event.text,\n            editModel: this.event,\n            eventType: '$__editing',\n          },\n        ];\n      }\n    } else {\n      // annotations from query\n      for (let i = 0; i < annotations.length; i++) {\n        const item = annotations[i];\n\n        // add properties used by jquery flot events\n        item.min = item.time;\n        item.max = item.time;\n        item.eventType = item.source.name;\n\n        if (item.newState) {\n          item.eventType = '$__' + item.newState;\n          continue;\n        }\n\n        if (!types[item.source.name]) {\n          types[item.source.name] = {\n            color: item.source.iconColor,\n            position: 'BOTTOM',\n            markerSize: 5,\n          };\n        }\n      }\n    }\n\n    const regions = getRegions(annotations);\n    addRegionMarking(regions, flotOptions);\n\n    const eventSectionHeight = 20;\n    const eventSectionMargin = 7;\n    flotOptions.grid.eventSectionHeight = eventSectionMargin;\n    flotOptions.xaxis.eventSectionHeight = eventSectionHeight;\n\n    flotOptions.events = {\n      levels: _.keys(types).length + 1,\n      data: annotations,\n      types: types,\n      manager: this,\n    };\n  }\n}\n\nfunction getRegions(events) {\n  return _.filter(events, 'isRegion');\n}\n\nfunction addRegionMarking(regions, flotOptions) {\n  const markings = flotOptions.grid.markings;\n  const defaultColor = DEFAULT_ANNOTATION_COLOR;\n  let fillColor;\n\n  _.each(regions, region => {\n    if (region.source) {\n      fillColor = region.source.iconColor || defaultColor;\n    } else {\n      fillColor = defaultColor;\n    }\n\n    fillColor = addAlphaToRGB(fillColor, REGION_FILL_ALPHA);\n    markings.push({\n      xaxis: { from: region.min, to: region.timeEnd },\n      color: fillColor,\n    });\n  });\n}\n\nfunction addAlphaToRGB(colorString: string, alpha: number): string {\n  const color = tinycolor(colorString);\n  if (color.isValid()) {\n    color.setAlpha(alpha);\n    return color.toRgbString();\n  } else {\n    return colorString;\n  }\n}\n","import _ from 'lodash';\nimport $ from 'jquery';\nimport coreModule from 'app/core/core_module';\nimport alertDef from '../alerting/alert_def';\n\n/** @ngInject */\nexport function annotationTooltipDirective($sanitize, dashboardSrv, contextSrv, $compile) {\n  function sanitizeString(str) {\n    try {\n      return $sanitize(str);\n    } catch (err) {\n      console.log('Could not sanitize annotation string, html escaping instead');\n      return _.escape(str);\n    }\n  }\n\n  return {\n    restrict: 'E',\n    scope: {\n      event: '=',\n      onEdit: '&',\n    },\n    link: function(scope, element) {\n      const event = scope.event;\n      let title = event.title;\n      let text = event.text;\n      const dashboard = dashboardSrv.getCurrent();\n\n      let tooltip = '<div class=\"graph-annotation\">';\n      let titleStateClass = '';\n\n      if (event.alertId) {\n        const stateModel = alertDef.getStateDisplayModel(event.newState);\n        titleStateClass = stateModel.stateClass;\n        title = `<i class=\"icon-gf ${stateModel.iconClass}\"></i> ${stateModel.text}`;\n        text = alertDef.getAlertAnnotationInfo(event);\n        if (event.text) {\n          text = text + '<br />' + event.text;\n        }\n      } else if (title) {\n        text = title + '<br />' + (_.isString(text) ? text : '');\n        title = '';\n      }\n\n      let header = `<div class=\"graph-annotation__header\">`;\n      if (event.login) {\n        header += `<div class=\"graph-annotation__user\" bs-tooltip=\"'由${event.login}创建'\"><img src=\"${\n          event.avatarUrl\n        }\" /></div>`;\n      }\n      header += `\n          <span class=\"graph-annotation__title ${titleStateClass}\">${sanitizeString(title)}</span>\n          <span class=\"graph-annotation__time\">${dashboard.formatDate(event.min)}</span>\n      `;\n\n      // Show edit icon only for users with at least Editor role\n      if (event.id && dashboard.meta.canEdit) {\n        header += `\n          <span class=\"pointer graph-annotation__edit-icon\" ng-click=\"onEdit()\">\n            <i class=\"fa fa-pencil-square\"></i>\n          </span>\n        `;\n      }\n\n      header += `</div>`;\n      tooltip += header;\n      tooltip += '<div class=\"graph-annotation__body\">';\n\n      if (text) {\n        tooltip += '<div>' + sanitizeString(text.replace(/\\n/g, '<br>')) + '</div>';\n      }\n\n      const tags = event.tags;\n\n      if (tags && tags.length) {\n        scope.tags = tags;\n        tooltip +=\n          '<span class=\"label label-tag small\" ng-repeat=\"tag in tags\" tag-color-from-name=\"tag\">{{tag}}</span><br/>';\n      }\n\n      tooltip += '</div>';\n      tooltip += '</div>';\n\n      const $tooltip = $(tooltip);\n      $tooltip.appendTo(element);\n\n      $compile(element.contents())(scope);\n    },\n  };\n}\n\ncoreModule.directive('annotationTooltip', annotationTooltipDirective);\n","import { AnnotationsSrv } from './annotations_srv';\nimport { eventEditor } from './event_editor';\nimport { EventManager } from './event_manager';\nimport { AnnotationEvent } from './event';\nimport { annotationTooltipDirective } from './annotation_tooltip';\n\nexport { AnnotationsSrv, eventEditor, EventManager, AnnotationEvent, annotationTooltipDirective };\n","import kbn from 'app/core/utils/kbn';\nimport { assignModelProperties } from 'app/core/utils/model_utils';\n\nexport interface Variable {\n  setValue(option);\n  updateOptions();\n  dependsOn(variable);\n  setValueFromUrl(urlValue);\n  getValueForUrl();\n  getSaveModel();\n}\n\nexport let variableTypes = {};\nexport { assignModelProperties };\n\nexport function containsVariable(...args: any[]) {\n  let variableName = args[args.length - 1];\n  let str = args[0] || '';\n\n  for (let i = 1; i < args.length - 1; i++) {\n    str += ' ' + args[i] || '';\n  }\n\n  variableName = kbn.regexEscape(variableName);\n  const findVarRegex = new RegExp('\\\\$(' + variableName + ')(?:\\\\W|$)|\\\\[\\\\[(' + variableName + ')\\\\]\\\\]', 'g');\n  const match = findVarRegex.exec(str);\n  return match !== null;\n}\n","import _ from 'lodash';\nimport coreModule from 'app/core/core_module';\nimport { variableTypes } from './variable';\nimport appEvents from 'app/core/app_events';\n\nexport class VariableEditorCtrl {\n  /** @ngInject */\n  constructor($scope, datasourceSrv, variableSrv, templateSrv) {\n    $scope.variableTypes = variableTypes;\n    $scope.ctrl = {};\n    $scope.namePattern = /^(?!__).*$/;\n    $scope._ = _;\n    $scope.optionsLimit = 20;\n\n    $scope.refreshOptions = [\n      { value: 0, text: '从不' },\n      { value: 1, text: '仪表板加载时' },\n      { value: 2, text: '时间区间改变时' },\n    ];\n\n    $scope.sortOptions = [\n      { value: 0, text: '关闭' },\n      { value: 1, text: '按字母顺序排列(升序)' },\n      { value: 2, text: '按字母顺序排列(降序)' },\n      { value: 3, text: '按数值排列(升序)' },\n      { value: 4, text: '按数值排列(降序)' },\n      { value: 5, text: '按字母顺序排列(不区分大小写, 升序)' },\n      { value: 6, text: '按字母顺序排列(不区分大小写, 降序)' },\n    ];\n\n    $scope.hideOptions = [{ value: 0, text: '' }, { value: 1, text: '标签' }, { value: 2, text: '变量' }];\n\n    $scope.init = function() {\n      $scope.mode = 'list';\n\n      $scope.variables = variableSrv.variables;\n      $scope.reset();\n\n      $scope.$watch('mode', function(val) {\n        if (val === 'new') {\n          $scope.reset();\n        }\n      });\n    };\n\n    $scope.setMode = function(mode) {\n      $scope.mode = mode;\n    };\n\n    $scope.add = function() {\n      if ($scope.isValid()) {\n        variableSrv.addVariable($scope.current);\n        $scope.update();\n      }\n    };\n\n    $scope.isValid = function() {\n      if (!$scope.ctrl.form.$valid) {\n        return false;\n      }\n\n      if (!$scope.current.name.match(/^\\w+$/)) {\n        appEvents.emit('alert-warning', ['Validation', '变量名中只允许使用单词和数字字符']);\n        return false;\n      }\n\n      const sameName = _.find($scope.variables, { name: $scope.current.name });\n      if (sameName && sameName !== $scope.current) {\n        appEvents.emit('alert-warning', ['Validation', '已存在同名的变量']);\n        return false;\n      }\n\n      if (\n        $scope.current.type === 'query' &&\n        $scope.current.query.match(new RegExp('\\\\$' + $scope.current.name + '(/| |$)'))\n      ) {\n        appEvents.emit('alert-warning', [\n          'Validation',\n          '查询不能包含对自身的引用。 变量: $' + $scope.current.name,\n        ]);\n        return false;\n      }\n\n      return true;\n    };\n\n    $scope.validate = function() {\n      $scope.infoText = '';\n      if ($scope.current.type === 'adhoc' && $scope.current.datasource !== null) {\n        $scope.infoText = 'Adhoc过滤器会自动应用于所有以此数据源为目标的查询';\n        datasourceSrv.get($scope.current.datasource).then(ds => {\n          if (!ds.getTagKeys) {\n            $scope.infoText = '此数据源尚不支持adhoc过滤器。';\n          }\n        });\n      }\n    };\n\n    $scope.runQuery = function() {\n      $scope.optionsLimit = 20;\n      return variableSrv.updateOptions($scope.current).catch(err => {\n        if (err.data && err.data.message) {\n          err.message = err.data.message;\n        }\n        appEvents.emit('alert-error', ['Templating', '无法初始化模板变量: ' + err.message]);\n      });\n    };\n\n    $scope.edit = function(variable) {\n      $scope.current = variable;\n      $scope.currentIsNew = false;\n      $scope.mode = 'edit';\n      $scope.validate();\n    };\n\n    $scope.duplicate = function(variable) {\n      const clone = _.cloneDeep(variable.getSaveModel());\n      $scope.current = variableSrv.createVariableFromModel(clone);\n      $scope.current.name = 'copy_of_' + variable.name;\n      variableSrv.addVariable($scope.current);\n    };\n\n    $scope.update = function() {\n      if ($scope.isValid()) {\n        $scope.runQuery().then(function() {\n          $scope.reset();\n          $scope.mode = 'list';\n          templateSrv.updateTemplateData();\n        });\n      }\n    };\n\n    $scope.reset = function() {\n      $scope.currentIsNew = true;\n      $scope.current = variableSrv.createVariableFromModel({ type: 'query' });\n\n      // this is done here in case a new data source type variable was added\n      $scope.datasources = _.filter(datasourceSrv.getMetricSources(), function(ds) {\n        return !ds.meta.mixed && ds.value !== null;\n      });\n\n      $scope.datasourceTypes = _($scope.datasources)\n        .uniqBy('meta.id')\n        .map(function(ds) {\n          return { text: ds.meta.name, value: ds.meta.id };\n        })\n        .value();\n    };\n\n    $scope.typeChanged = function() {\n      const old = $scope.current;\n      $scope.current = variableSrv.createVariableFromModel({\n        type: $scope.current.type,\n      });\n      $scope.current.name = old.name;\n      $scope.current.hide = old.hide;\n      $scope.current.label = old.label;\n\n      const oldIndex = _.indexOf(this.variables, old);\n      if (oldIndex !== -1) {\n        this.variables[oldIndex] = $scope.current;\n      }\n\n      $scope.validate();\n    };\n\n    $scope.removeVariable = function(variable) {\n      variableSrv.removeVariable(variable);\n    };\n\n    $scope.showMoreOptions = function() {\n      $scope.optionsLimit += 20;\n    };\n  }\n}\n\ncoreModule.controller('VariableEditorCtrl', VariableEditorCtrl);\n","import kbn from 'app/core/utils/kbn';\nimport _ from 'lodash';\n\nfunction luceneEscape(value) {\n  return value.replace(/([\\!\\*\\+\\-\\=<>\\s\\&\\|\\(\\)\\[\\]\\{\\}\\^\\~\\?\\:\\\\/\"])/g, '\\\\$1');\n}\n\nexport class TemplateSrv {\n  variables: any[];\n\n  /*\n   * This regex matches 3 types of variable reference with an optional format specifier\n   * \\$(\\w+)                          $var1\n   * \\[\\[([\\s\\S]+?)(?::(\\w+))?\\]\\]    [[var2]] or [[var2:fmt2]]\n   * \\${(\\w+)(?::(\\w+))?}             ${var3} or ${var3:fmt3}\n   */\n  private regex = /\\$(\\w+)|\\[\\[([\\s\\S]+?)(?::(\\w+))?\\]\\]|\\${(\\w+)(?::(\\w+))?}/g;\n  private index = {};\n  private grafanaVariables = {};\n  private builtIns = {};\n\n  constructor() {\n    this.builtIns['__interval'] = { text: '1s', value: '1s' };\n    this.builtIns['__interval_ms'] = { text: '100', value: '100' };\n  }\n\n  init(variables) {\n    this.variables = variables;\n    this.updateTemplateData();\n  }\n\n  updateTemplateData() {\n    this.index = {};\n\n    for (let i = 0; i < this.variables.length; i++) {\n      const variable = this.variables[i];\n\n      if (!variable.current || (!variable.current.isNone && !variable.current.value)) {\n        continue;\n      }\n\n      this.index[variable.name] = variable;\n    }\n  }\n\n  variableInitialized(variable) {\n    this.index[variable.name] = variable;\n  }\n\n  getAdhocFilters(datasourceName) {\n    let filters = [];\n\n    for (let i = 0; i < this.variables.length; i++) {\n      const variable = this.variables[i];\n      if (variable.type !== 'adhoc') {\n        continue;\n      }\n\n      if (variable.datasource === datasourceName) {\n        filters = filters.concat(variable.filters);\n      }\n\n      if (variable.datasource.indexOf('$') === 0) {\n        if (this.replace(variable.datasource) === datasourceName) {\n          filters = filters.concat(variable.filters);\n        }\n      }\n    }\n\n    return filters;\n  }\n\n  luceneFormat(value) {\n    if (typeof value === 'string') {\n      return luceneEscape(value);\n    }\n    if (value instanceof Array && value.length === 0) {\n      return '__empty__';\n    }\n    const quotedValues = _.map(value, function(val) {\n      return '\"' + luceneEscape(val) + '\"';\n    });\n    return '(' + quotedValues.join(' OR ') + ')';\n  }\n\n  formatValue(value, format, variable) {\n    // for some scopedVars there is no variable\n    variable = variable || {};\n\n    if (typeof format === 'function') {\n      return format(value, variable, this.formatValue);\n    }\n\n    switch (format) {\n      case 'regex': {\n        if (typeof value === 'string') {\n          return kbn.regexEscape(value);\n        }\n\n        const escapedValues = _.map(value, kbn.regexEscape);\n        if (escapedValues.length === 1) {\n          return escapedValues[0];\n        }\n        return '(' + escapedValues.join('|') + ')';\n      }\n      case 'lucene': {\n        return this.luceneFormat(value);\n      }\n      case 'pipe': {\n        if (typeof value === 'string') {\n          return value;\n        }\n        return value.join('|');\n      }\n      case 'distributed': {\n        if (typeof value === 'string') {\n          return value;\n        }\n        return this.distributeVariable(value, variable.name);\n      }\n      case 'csv': {\n        if (_.isArray(value)) {\n          return value.join(',');\n        }\n        return value;\n      }\n      default: {\n        if (_.isArray(value)) {\n          return '{' + value.join(',') + '}';\n        }\n        return value;\n      }\n    }\n  }\n\n  setGrafanaVariable(name, value) {\n    this.grafanaVariables[name] = value;\n  }\n\n  getVariableName(expression) {\n    this.regex.lastIndex = 0;\n    const match = this.regex.exec(expression);\n    if (!match) {\n      return null;\n    }\n    return match[1] || match[2];\n  }\n\n  variableExists(expression) {\n    const name = this.getVariableName(expression);\n    return name && this.index[name] !== void 0;\n  }\n\n  highlightVariablesAsHtml(str) {\n    if (!str || !_.isString(str)) {\n      return str;\n    }\n\n    str = _.escape(str);\n    this.regex.lastIndex = 0;\n    return str.replace(this.regex, (match, var1, var2, fmt2, var3) => {\n      if (this.index[var1 || var2 || var3] || this.builtIns[var1 || var2 || var3]) {\n        return '<span class=\"template-variable\">' + match + '</span>';\n      }\n      return match;\n    });\n  }\n\n  getAllValue(variable) {\n    if (variable.allValue) {\n      return variable.allValue;\n    }\n    const values = [];\n    for (let i = 1; i < variable.options.length; i++) {\n      values.push(variable.options[i].value);\n    }\n    return values;\n  }\n\n  replace(target, scopedVars?, format?) {\n    if (!target) {\n      return target;\n    }\n\n    let variable, systemValue, value, fmt;\n    this.regex.lastIndex = 0;\n\n    return target.replace(this.regex, (match, var1, var2, fmt2, var3, fmt3) => {\n      variable = this.index[var1 || var2 || var3];\n      fmt = fmt2 || fmt3 || format;\n      if (scopedVars) {\n        value = scopedVars[var1 || var2 || var3];\n        if (value) {\n          return this.formatValue(value.value, fmt, variable);\n        }\n      }\n\n      if (!variable) {\n        return match;\n      }\n\n      systemValue = this.grafanaVariables[variable.current.value];\n      if (systemValue) {\n        return this.formatValue(systemValue, fmt, variable);\n      }\n\n      value = variable.current.value;\n      if (this.isAllValue(value)) {\n        value = this.getAllValue(variable);\n        // skip formatting of custom all values\n        if (variable.allValue) {\n          return this.replace(value);\n        }\n      }\n\n      const res = this.formatValue(value, fmt, variable);\n      return res;\n    });\n  }\n\n  isAllValue(value) {\n    return value === '$__all' || (Array.isArray(value) && value[0] === '$__all');\n  }\n\n  replaceWithText(target, scopedVars) {\n    if (!target) {\n      return target;\n    }\n\n    let variable;\n    this.regex.lastIndex = 0;\n\n    return target.replace(this.regex, (match, var1, var2, fmt2, var3) => {\n      if (scopedVars) {\n        const option = scopedVars[var1 || var2 || var3];\n        if (option) {\n          return option.text;\n        }\n      }\n\n      variable = this.index[var1 || var2 || var3];\n      if (!variable) {\n        return match;\n      }\n\n      return this.grafanaVariables[variable.current.value] || variable.current.text;\n    });\n  }\n\n  fillVariableValuesForUrl(params, scopedVars) {\n    _.each(this.variables, function(variable) {\n      if (scopedVars && scopedVars[variable.name] !== void 0) {\n        if (scopedVars[variable.name].skipUrlSync) {\n          return;\n        }\n        params['var-' + variable.name] = scopedVars[variable.name].value;\n      } else {\n        if (variable.skipUrlSync) {\n          return;\n        }\n        params['var-' + variable.name] = variable.getValueForUrl();\n      }\n    });\n  }\n\n  distributeVariable(value, variable) {\n    value = _.map(value, function(val, index) {\n      if (index !== 0) {\n        return variable + '=' + val;\n      } else {\n        return val;\n      }\n    });\n    return value.join(',');\n  }\n}\n\nexport default new TemplateSrv();\n","export class Edge {\n  inputNode: Node;\n  outputNode: Node;\n\n  _linkTo(node, direction) {\n    if (direction <= 0) {\n      node.inputEdges.push(this);\n    }\n\n    if (direction >= 0) {\n      node.outputEdges.push(this);\n    }\n\n    node.edges.push(this);\n  }\n\n  link(inputNode: Node, outputNode: Node) {\n    this.unlink();\n    this.inputNode = inputNode;\n    this.outputNode = outputNode;\n\n    this._linkTo(inputNode, 1);\n    this._linkTo(outputNode, -1);\n    return this;\n  }\n\n  unlink() {\n    let pos;\n    const inode = this.inputNode;\n    const onode = this.outputNode;\n\n    if (!(inode && onode)) {\n      return;\n    }\n\n    pos = inode.edges.indexOf(this);\n    if (pos > -1) {\n      inode.edges.splice(pos, 1);\n    }\n\n    pos = onode.edges.indexOf(this);\n    if (pos > -1) {\n      onode.edges.splice(pos, 1);\n    }\n\n    pos = inode.outputEdges.indexOf(this);\n    if (pos > -1) {\n      inode.outputEdges.splice(pos, 1);\n    }\n\n    pos = onode.inputEdges.indexOf(this);\n    if (pos > -1) {\n      onode.inputEdges.splice(pos, 1);\n    }\n\n    this.inputNode = null;\n    this.outputNode = null;\n  }\n}\n\nexport class Node {\n  name: string;\n  edges: Edge[];\n  inputEdges: Edge[];\n  outputEdges: Edge[];\n\n  constructor(name: string) {\n    this.name = name;\n    this.edges = [];\n    this.inputEdges = [];\n    this.outputEdges = [];\n  }\n\n  getEdgeFrom(from: string | Node): Edge {\n    if (!from) {\n      return null;\n    }\n\n    if (typeof from === 'object') {\n      return this.inputEdges.find(e => e.inputNode.name === from.name);\n    }\n\n    return this.inputEdges.find(e => e.inputNode.name === from);\n  }\n\n  getEdgeTo(to: string | Node): Edge {\n    if (!to) {\n      return null;\n    }\n\n    if (typeof to === 'object') {\n      return this.outputEdges.find(e => e.outputNode.name === to.name);\n    }\n\n    return this.outputEdges.find(e => e.outputNode.name === to);\n  }\n\n  getOptimizedInputEdges(): Edge[] {\n    const toBeRemoved = [];\n    this.inputEdges.forEach(e => {\n      const inputEdgesNodes = e.inputNode.inputEdges.map(e => e.inputNode);\n\n      inputEdgesNodes.forEach(n => {\n        const edgeToRemove = n.getEdgeTo(this.name);\n        if (edgeToRemove) {\n          toBeRemoved.push(edgeToRemove);\n        }\n      });\n    });\n\n    return this.inputEdges.filter(e => toBeRemoved.indexOf(e) === -1);\n  }\n}\n\nexport class Graph {\n  nodes = {};\n\n  constructor() {}\n\n  createNode(name: string): Node {\n    const n = new Node(name);\n    this.nodes[name] = n;\n    return n;\n  }\n\n  createNodes(names: string[]): Node[] {\n    const nodes = [];\n    names.forEach(name => {\n      nodes.push(this.createNode(name));\n    });\n    return nodes;\n  }\n\n  link(input: string | string[] | Node | Node[], output: string | string[] | Node | Node[]): Edge[] {\n    let inputArr = [];\n    let outputArr = [];\n    const inputNodes = [];\n    const outputNodes = [];\n\n    if (input instanceof Array) {\n      inputArr = input;\n    } else {\n      inputArr = [input];\n    }\n\n    if (output instanceof Array) {\n      outputArr = output;\n    } else {\n      outputArr = [output];\n    }\n\n    for (let n = 0; n < inputArr.length; n++) {\n      const i = inputArr[n];\n      if (typeof i === 'string') {\n        inputNodes.push(this.getNode(i));\n      } else {\n        inputNodes.push(i);\n      }\n    }\n\n    for (let n = 0; n < outputArr.length; n++) {\n      const i = outputArr[n];\n      if (typeof i === 'string') {\n        outputNodes.push(this.getNode(i));\n      } else {\n        outputNodes.push(i);\n      }\n    }\n\n    const edges = [];\n    inputNodes.forEach(input => {\n      outputNodes.forEach(output => {\n        edges.push(this.createEdge().link(input, output));\n      });\n    });\n    return edges;\n  }\n\n  createEdge(): Edge {\n    return new Edge();\n  }\n\n  getNode(name: string): Node {\n    return this.nodes[name];\n  }\n}\n\nexport const printGraph = (g: Graph) => {\n  Object.keys(g.nodes).forEach(name => {\n    const n = g.nodes[name];\n    let outputEdges = n.outputEdges.map(e => e.outputNode.name).join(', ');\n    if (!outputEdges) {\n      outputEdges = '<none>';\n    }\n    let inputEdges = n.inputEdges.map(e => e.inputNode.name).join(', ');\n    if (!inputEdges) {\n      inputEdges = '<none>';\n    }\n    console.log(`${n.name}:\\n - links to:   ${outputEdges}\\n - links from: ${inputEdges}`);\n  });\n};\n","import angular from 'angular';\nimport _ from 'lodash';\nimport coreModule from 'app/core/core_module';\nimport { variableTypes } from './variable';\nimport { Graph } from 'app/core/utils/dag';\n\nexport class VariableSrv {\n  dashboard: any;\n  variables: any;\n\n  /** @ngInject */\n  constructor(private $rootScope, private $q, private $location, private $injector, private templateSrv) {\n    // update time variant variables\n    $rootScope.$on('refresh', this.onDashboardRefresh.bind(this), $rootScope);\n    $rootScope.$on('template-variable-value-updated', this.updateUrlParamsWithCurrentVariables.bind(this), $rootScope);\n  }\n\n  init(dashboard) {\n    this.dashboard = dashboard;\n\n    // create working class models representing variables\n    this.variables = dashboard.templating.list = dashboard.templating.list.map(this.createVariableFromModel.bind(this));\n    this.templateSrv.init(this.variables);\n\n    // init variables\n    for (const variable of this.variables) {\n      variable.initLock = this.$q.defer();\n    }\n\n    const queryParams = this.$location.search();\n    return this.$q\n      .all(\n        this.variables.map(variable => {\n          return this.processVariable(variable, queryParams);\n        })\n      )\n      .then(() => {\n        this.templateSrv.updateTemplateData();\n      });\n  }\n\n  onDashboardRefresh(evt, payload) {\n    if (payload && payload.fromVariableValueUpdated) {\n      return Promise.resolve({});\n    }\n\n    const promises = this.variables.filter(variable => variable.refresh === 2).map(variable => {\n      const previousOptions = variable.options.slice();\n\n      return variable.updateOptions().then(() => {\n        if (angular.toJson(previousOptions) !== angular.toJson(variable.options)) {\n          this.$rootScope.$emit('template-variable-value-updated');\n        }\n      });\n    });\n\n    return this.$q.all(promises);\n  }\n\n  processVariable(variable, queryParams) {\n    const dependencies = [];\n\n    for (const otherVariable of this.variables) {\n      if (variable.dependsOn(otherVariable)) {\n        dependencies.push(otherVariable.initLock.promise);\n      }\n    }\n\n    return this.$q\n      .all(dependencies)\n      .then(() => {\n        const urlValue = queryParams['var-' + variable.name];\n        if (urlValue !== void 0) {\n          return variable.setValueFromUrl(urlValue).then(variable.initLock.resolve);\n        }\n\n        if (variable.refresh === 1 || variable.refresh === 2) {\n          return variable.updateOptions().then(variable.initLock.resolve);\n        }\n\n        variable.initLock.resolve();\n      })\n      .finally(() => {\n        this.templateSrv.variableInitialized(variable);\n        delete variable.initLock;\n      });\n  }\n\n  createVariableFromModel(model) {\n    const ctor = variableTypes[model.type].ctor;\n    if (!ctor) {\n      throw {\n        message: '无法找到变量构造函数 ' + model.type,\n      };\n    }\n\n    const variable = this.$injector.instantiate(ctor, { model: model });\n    return variable;\n  }\n\n  addVariable(variable) {\n    this.variables.push(variable);\n    this.templateSrv.updateTemplateData();\n    this.dashboard.updateSubmenuVisibility();\n  }\n\n  removeVariable(variable) {\n    const index = _.indexOf(this.variables, variable);\n    this.variables.splice(index, 1);\n    this.templateSrv.updateTemplateData();\n    this.dashboard.updateSubmenuVisibility();\n  }\n\n  updateOptions(variable) {\n    return variable.updateOptions();\n  }\n\n  variableUpdated(variable, emitChangeEvents?) {\n    // if there is a variable lock ignore cascading update because we are in a boot up scenario\n    if (variable.initLock) {\n      return this.$q.when();\n    }\n\n    const g = this.createGraph();\n    const promises = g\n      .getNode(variable.name)\n      .getOptimizedInputEdges()\n      .map(e => {\n        return this.updateOptions(this.variables.find(v => v.name === e.inputNode.name));\n      });\n\n    return this.$q.all(promises).then(() => {\n      if (emitChangeEvents) {\n        this.$rootScope.$emit('template-variable-value-updated');\n        this.$rootScope.$broadcast('refresh', { fromVariableValueUpdated: true });\n      }\n    });\n  }\n\n  selectOptionsForCurrentValue(variable) {\n    let i, y, value, option;\n    const selected: any = [];\n\n    for (i = 0; i < variable.options.length; i++) {\n      option = variable.options[i];\n      option.selected = false;\n      if (_.isArray(variable.current.value)) {\n        for (y = 0; y < variable.current.value.length; y++) {\n          value = variable.current.value[y];\n          if (option.value === value) {\n            option.selected = true;\n            selected.push(option);\n          }\n        }\n      } else if (option.value === variable.current.value) {\n        option.selected = true;\n        selected.push(option);\n      }\n    }\n\n    return selected;\n  }\n\n  validateVariableSelectionState(variable) {\n    if (!variable.current) {\n      variable.current = {};\n    }\n\n    if (_.isArray(variable.current.value)) {\n      let selected = this.selectOptionsForCurrentValue(variable);\n\n      // if none pick first\n      if (selected.length === 0) {\n        selected = variable.options[0];\n      } else {\n        selected = {\n          value: _.map(selected, function(val) {\n            return val.value;\n          }),\n          text: _.map(selected, function(val) {\n            return val.text;\n          }).join(' + '),\n        };\n      }\n\n      return variable.setValue(selected);\n    } else {\n      const currentOption = _.find(variable.options, {\n        text: variable.current.text,\n      });\n      if (currentOption) {\n        return variable.setValue(currentOption);\n      } else {\n        if (!variable.options.length) {\n          return Promise.resolve();\n        }\n        return variable.setValue(variable.options[0]);\n      }\n    }\n  }\n\n  setOptionFromUrl(variable, urlValue) {\n    let promise = this.$q.when();\n\n    if (variable.refresh) {\n      promise = variable.updateOptions();\n    }\n\n    return promise.then(() => {\n      let option = _.find(variable.options, op => {\n        return op.text === urlValue || op.value === urlValue;\n      });\n\n      let defaultText = urlValue;\n      const defaultValue = urlValue;\n\n      if (!option && _.isArray(urlValue)) {\n        defaultText = [];\n\n        for (let n = 0; n < urlValue.length; n++) {\n          const t = _.find(variable.options, op => {\n            return op.value === urlValue[n];\n          });\n\n          if (t) {\n            defaultText.push(t.text);\n          }\n        }\n      }\n\n      option = option || { text: defaultText, value: defaultValue };\n      return variable.setValue(option);\n    });\n  }\n\n  setOptionAsCurrent(variable, option) {\n    variable.current = _.cloneDeep(option);\n\n    if (_.isArray(variable.current.text)) {\n      variable.current.text = variable.current.text.join(' + ');\n    }\n\n    this.selectOptionsForCurrentValue(variable);\n    return this.variableUpdated(variable);\n  }\n\n  updateUrlParamsWithCurrentVariables() {\n    // update url\n    const params = this.$location.search();\n\n    // remove variable params\n    _.each(params, function(value, key) {\n      if (key.indexOf('var-') === 0) {\n        delete params[key];\n      }\n    });\n\n    // add new values\n    this.templateSrv.fillVariableValuesForUrl(params);\n    // update url\n    this.$location.search(params);\n  }\n\n  setAdhocFilter(options) {\n    let variable = _.find(this.variables, {\n      type: 'adhoc',\n      datasource: options.datasource,\n    });\n    if (!variable) {\n      variable = this.createVariableFromModel({\n        name: 'Filters',\n        type: 'adhoc',\n        datasource: options.datasource,\n      });\n      this.addVariable(variable);\n    }\n\n    const filters = variable.filters;\n    let filter = _.find(filters, { key: options.key, value: options.value });\n\n    if (!filter) {\n      filter = { key: options.key, value: options.value };\n      filters.push(filter);\n    }\n\n    filter.operator = options.operator;\n    this.variableUpdated(variable, true);\n  }\n\n  createGraph() {\n    const g = new Graph();\n\n    this.variables.forEach(v1 => {\n      g.createNode(v1.name);\n\n      this.variables.forEach(v2 => {\n        if (v1 === v2) {\n          return;\n        }\n\n        if (v1.dependsOn(v2)) {\n          g.link(v1.name, v2.name);\n        }\n      });\n    });\n\n    return g;\n  }\n}\n\ncoreModule.service('variableSrv', VariableSrv);\n","import _ from 'lodash';\nimport kbn from 'app/core/utils/kbn';\nimport { Variable, assignModelProperties, variableTypes } from './variable';\n\nexport class IntervalVariable implements Variable {\n  name: string;\n  auto_count: number;\n  auto_min: number;\n  options: any;\n  auto: boolean;\n  query: string;\n  refresh: number;\n  current: any;\n  skipUrlSync: boolean;\n\n  defaults = {\n    type: 'interval',\n    name: '',\n    hide: 0,\n    label: '',\n    refresh: 2,\n    options: [],\n    current: {},\n    query: '1m,10m,30m,1h,6h,12h,1d,7d,14d,30d',\n    auto: false,\n    auto_min: '10s',\n    auto_count: 30,\n    skipUrlSync: false,\n  };\n\n  /** @ngInject */\n  constructor(private model, private timeSrv, private templateSrv, private variableSrv) {\n    assignModelProperties(this, model, this.defaults);\n    this.refresh = 2;\n  }\n\n  getSaveModel() {\n    assignModelProperties(this.model, this, this.defaults);\n    return this.model;\n  }\n\n  setValue(option) {\n    this.updateAutoValue();\n    return this.variableSrv.setOptionAsCurrent(this, option);\n  }\n\n  updateAutoValue() {\n    if (!this.auto) {\n      return;\n    }\n\n    // add auto option if missing\n    if (this.options.length && this.options[0].text !== 'auto') {\n      this.options.unshift({\n        text: 'auto',\n        value: '$__auto_interval_' + this.name,\n      });\n    }\n\n    const res = kbn.calculateInterval(this.timeSrv.timeRange(), this.auto_count, this.auto_min);\n    this.templateSrv.setGrafanaVariable('$__auto_interval_' + this.name, res.interval);\n    // for backward compatibility, to be removed eventually\n    this.templateSrv.setGrafanaVariable('$__auto_interval', res.interval);\n  }\n\n  updateOptions() {\n    // extract options between quotes and/or comma\n    this.options = _.map(this.query.match(/([\"'])(.*?)\\1|\\w+/g), function(text) {\n      text = text.replace(/[\"']+/g, '');\n      return { text: text.trim(), value: text.trim() };\n    });\n\n    this.updateAutoValue();\n    return this.variableSrv.validateVariableSelectionState(this);\n  }\n\n  dependsOn(variable) {\n    return false;\n  }\n\n  setValueFromUrl(urlValue) {\n    this.updateAutoValue();\n    return this.variableSrv.setOptionFromUrl(this, urlValue);\n  }\n\n  getValueForUrl() {\n    return this.current.value;\n  }\n}\n\nvariableTypes['interval'] = {\n  name: 'Interval',\n  ctor: IntervalVariable,\n  description: '定义时间间隔 (如 1m, 1h, 1d)',\n};\n","import _ from 'lodash';\nimport kbn from 'app/core/utils/kbn';\nimport { Variable, containsVariable, assignModelProperties, variableTypes } from './variable';\n\nfunction getNoneOption() {\n  return { text: 'None', value: '', isNone: true };\n}\n\nexport class QueryVariable implements Variable {\n  datasource: any;\n  query: any;\n  regex: any;\n  sort: any;\n  options: any;\n  current: any;\n  refresh: number;\n  hide: number;\n  name: string;\n  multi: boolean;\n  includeAll: boolean;\n  useTags: boolean;\n  tagsQuery: string;\n  tagValuesQuery: string;\n  tags: any[];\n  skipUrlSync: boolean;\n\n  defaults = {\n    type: 'query',\n    label: null,\n    query: '',\n    regex: '',\n    sort: 0,\n    datasource: null,\n    refresh: 0,\n    hide: 0,\n    name: '',\n    multi: false,\n    includeAll: false,\n    allValue: null,\n    options: [],\n    current: {},\n    tags: [],\n    useTags: false,\n    tagsQuery: '',\n    tagValuesQuery: '',\n    skipUrlSync: false,\n  };\n\n  /** @ngInject */\n  constructor(private model, private datasourceSrv, private templateSrv, private variableSrv, private timeSrv) {\n    // copy model properties to this instance\n    assignModelProperties(this, model, this.defaults);\n  }\n\n  getSaveModel() {\n    // copy back model properties to model\n    assignModelProperties(this.model, this, this.defaults);\n\n    // remove options\n    if (this.refresh !== 0) {\n      this.model.options = [];\n    }\n\n    return this.model;\n  }\n\n  setValue(option) {\n    return this.variableSrv.setOptionAsCurrent(this, option);\n  }\n\n  setValueFromUrl(urlValue) {\n    return this.variableSrv.setOptionFromUrl(this, urlValue);\n  }\n\n  getValueForUrl() {\n    if (this.current.text === 'All') {\n      return 'All';\n    }\n    return this.current.value;\n  }\n\n  updateOptions() {\n    return this.datasourceSrv\n      .get(this.datasource)\n      .then(this.updateOptionsFromMetricFindQuery.bind(this))\n      .then(this.updateTags.bind(this))\n      .then(this.variableSrv.validateVariableSelectionState.bind(this.variableSrv, this));\n  }\n\n  updateTags(datasource) {\n    if (this.useTags) {\n      return this.metricFindQuery(datasource, this.tagsQuery).then(results => {\n        this.tags = [];\n        for (let i = 0; i < results.length; i++) {\n          this.tags.push(results[i].text);\n        }\n        return datasource;\n      });\n    } else {\n      delete this.tags;\n    }\n\n    return datasource;\n  }\n\n  getValuesForTag(tagKey) {\n    return this.datasourceSrv.get(this.datasource).then(datasource => {\n      const query = this.tagValuesQuery.replace('$tag', tagKey);\n      return this.metricFindQuery(datasource, query).then(function(results) {\n        return _.map(results, function(value) {\n          return value.text;\n        });\n      });\n    });\n  }\n\n  updateOptionsFromMetricFindQuery(datasource) {\n    return this.metricFindQuery(datasource, this.query).then(results => {\n      this.options = this.metricNamesToVariableValues(results);\n      if (this.includeAll) {\n        this.addAllOption();\n      }\n      if (!this.options.length) {\n        this.options.push(getNoneOption());\n      }\n      return datasource;\n    });\n  }\n\n  metricFindQuery(datasource, query) {\n    const options = { range: undefined, variable: this };\n\n    if (this.refresh === 2) {\n      options.range = this.timeSrv.timeRange();\n    }\n\n    return datasource.metricFindQuery(query, options);\n  }\n\n  addAllOption() {\n    this.options.unshift({ text: 'All', value: '$__all' });\n  }\n\n  metricNamesToVariableValues(metricNames) {\n    let regex, options, i, matches;\n    options = [];\n\n    if (this.regex) {\n      regex = kbn.stringToJsRegex(this.templateSrv.replace(this.regex, {}, 'regex'));\n    }\n    for (i = 0; i < metricNames.length; i++) {\n      const item = metricNames[i];\n      let text = item.text === undefined || item.text === null ? item.value : item.text;\n\n      let value = item.value === undefined || item.value === null ? item.text : item.value;\n\n      if (_.isNumber(value)) {\n        value = value.toString();\n      }\n\n      if (_.isNumber(text)) {\n        text = text.toString();\n      }\n\n      if (regex) {\n        matches = regex.exec(value);\n        if (!matches) {\n          continue;\n        }\n        if (matches.length > 1) {\n          value = matches[1];\n          text = matches[1];\n        }\n      }\n\n      options.push({ text: text, value: value });\n    }\n\n    options = _.uniqBy(options, 'value');\n    return this.sortVariableValues(options, this.sort);\n  }\n\n  sortVariableValues(options, sortOrder) {\n    if (sortOrder === 0) {\n      return options;\n    }\n\n    const sortType = Math.ceil(sortOrder / 2);\n    const reverseSort = sortOrder % 2 === 0;\n\n    if (sortType === 1) {\n      options = _.sortBy(options, 'text');\n    } else if (sortType === 2) {\n      options = _.sortBy(options, opt => {\n        const matches = opt.text.match(/.*?(\\d+).*/);\n        if (!matches || matches.length < 2) {\n          return -1;\n        } else {\n          return parseInt(matches[1], 10);\n        }\n      });\n    } else if (sortType === 3) {\n      options = _.sortBy(options, opt => {\n        return _.toLower(opt.text);\n      });\n    }\n\n    if (reverseSort) {\n      options = options.reverse();\n    }\n\n    return options;\n  }\n\n  dependsOn(variable) {\n    return containsVariable(this.query, this.datasource, this.regex, variable.name);\n  }\n}\n\nvariableTypes['query'] = {\n  name: 'Query',\n  ctor: QueryVariable,\n  description: '从数据源查询中获取变量值',\n  supportsMulti: true,\n};\n","import kbn from 'app/core/utils/kbn';\nimport { Variable, containsVariable, assignModelProperties, variableTypes } from './variable';\n\nexport class DatasourceVariable implements Variable {\n  regex: any;\n  query: string;\n  options: any;\n  current: any;\n  refresh: any;\n  skipUrlSync: boolean;\n\n  defaults = {\n    type: 'datasource',\n    name: '',\n    hide: 0,\n    label: '',\n    current: {},\n    regex: '',\n    options: [],\n    query: '',\n    refresh: 1,\n    skipUrlSync: false,\n  };\n\n  /** @ngInject */\n  constructor(private model, private datasourceSrv, private variableSrv, private templateSrv) {\n    assignModelProperties(this, model, this.defaults);\n    this.refresh = 1;\n  }\n\n  getSaveModel() {\n    assignModelProperties(this.model, this, this.defaults);\n\n    // don't persist options\n    this.model.options = [];\n    return this.model;\n  }\n\n  setValue(option) {\n    return this.variableSrv.setOptionAsCurrent(this, option);\n  }\n\n  updateOptions() {\n    const options = [];\n    const sources = this.datasourceSrv.getMetricSources({ skipVariables: true });\n    let regex;\n\n    if (this.regex) {\n      regex = this.templateSrv.replace(this.regex, null, 'regex');\n      regex = kbn.stringToJsRegex(regex);\n    }\n\n    for (let i = 0; i < sources.length; i++) {\n      const source = sources[i];\n      // must match on type\n      if (source.meta.id !== this.query) {\n        continue;\n      }\n\n      if (regex && !regex.exec(source.name)) {\n        continue;\n      }\n\n      options.push({ text: source.name, value: source.name });\n    }\n\n    if (options.length === 0) {\n      options.push({ text: '未找到任何数据源', value: '' });\n    }\n\n    this.options = options;\n    return this.variableSrv.validateVariableSelectionState(this);\n  }\n\n  dependsOn(variable) {\n    if (this.regex) {\n      return containsVariable(this.regex, variable.name);\n    }\n    return false;\n  }\n\n  setValueFromUrl(urlValue) {\n    return this.variableSrv.setOptionFromUrl(this, urlValue);\n  }\n\n  getValueForUrl() {\n    return this.current.value;\n  }\n}\n\nvariableTypes['datasource'] = {\n  name: 'Datasource',\n  ctor: DatasourceVariable,\n  description: '使您能够动态切换多个面板的数据源',\n};\n","import _ from 'lodash';\nimport { Variable, assignModelProperties, variableTypes } from './variable';\n\nexport class CustomVariable implements Variable {\n  query: string;\n  options: any;\n  includeAll: boolean;\n  multi: boolean;\n  current: any;\n  skipUrlSync: boolean;\n\n  defaults = {\n    type: 'custom',\n    name: '',\n    label: '',\n    hide: 0,\n    options: [],\n    current: {},\n    query: '',\n    includeAll: false,\n    multi: false,\n    allValue: null,\n    skipUrlSync: false,\n  };\n\n  /** @ngInject */\n  constructor(private model, private variableSrv) {\n    assignModelProperties(this, model, this.defaults);\n  }\n\n  setValue(option) {\n    return this.variableSrv.setOptionAsCurrent(this, option);\n  }\n\n  getSaveModel() {\n    assignModelProperties(this.model, this, this.defaults);\n    return this.model;\n  }\n\n  updateOptions() {\n    // extract options in comma separated string\n    this.options = _.map(this.query.split(/[,]+/), function(text) {\n      return { text: text.trim(), value: text.trim() };\n    });\n\n    if (this.includeAll) {\n      this.addAllOption();\n    }\n\n    return this.variableSrv.validateVariableSelectionState(this);\n  }\n\n  addAllOption() {\n    this.options.unshift({ text: 'All', value: '$__all' });\n  }\n\n  dependsOn(variable) {\n    return false;\n  }\n\n  setValueFromUrl(urlValue) {\n    return this.variableSrv.setOptionFromUrl(this, urlValue);\n  }\n\n  getValueForUrl() {\n    if (this.current.text === 'All') {\n      return 'All';\n    }\n    return this.current.value;\n  }\n}\n\nvariableTypes['custom'] = {\n  name: 'Custom',\n  ctor: CustomVariable,\n  description: '手动定义变量值',\n  supportsMulti: true,\n};\n","import { Variable, assignModelProperties, variableTypes } from './variable';\n\nexport class ConstantVariable implements Variable {\n  query: string;\n  options: any[];\n  current: any;\n  skipUrlSync: boolean;\n\n  defaults = {\n    type: 'constant',\n    name: '',\n    hide: 2,\n    label: '',\n    query: '',\n    current: {},\n    options: [],\n    skipUrlSync: false,\n  };\n\n  /** @ngInject */\n  constructor(private model, private variableSrv) {\n    assignModelProperties(this, model, this.defaults);\n  }\n\n  getSaveModel() {\n    assignModelProperties(this.model, this, this.defaults);\n    return this.model;\n  }\n\n  setValue(option) {\n    this.variableSrv.setOptionAsCurrent(this, option);\n  }\n\n  updateOptions() {\n    this.options = [{ text: this.query.trim(), value: this.query.trim() }];\n    this.setValue(this.options[0]);\n    return Promise.resolve();\n  }\n\n  dependsOn(variable) {\n    return false;\n  }\n\n  setValueFromUrl(urlValue) {\n    return this.variableSrv.setOptionFromUrl(this, urlValue);\n  }\n\n  getValueForUrl() {\n    return this.current.value;\n  }\n}\n\nvariableTypes['constant'] = {\n  name: 'Constant',\n  ctor: ConstantVariable,\n  description: '使用一个因此的常, 用于定义你共享的仪表盘的指标前缀',\n};\n","import _ from 'lodash';\nimport { Variable, assignModelProperties, variableTypes } from './variable';\n\nexport class AdhocVariable implements Variable {\n  filters: any[];\n  skipUrlSync: boolean;\n\n  defaults = {\n    type: 'adhoc',\n    name: '',\n    label: '',\n    hide: 0,\n    datasource: null,\n    filters: [],\n    skipUrlSync: false,\n  };\n\n  /** @ngInject */\n  constructor(private model) {\n    assignModelProperties(this, model, this.defaults);\n  }\n\n  setValue(option) {\n    return Promise.resolve();\n  }\n\n  getSaveModel() {\n    assignModelProperties(this.model, this, this.defaults);\n    return this.model;\n  }\n\n  updateOptions() {\n    return Promise.resolve();\n  }\n\n  dependsOn(variable) {\n    return false;\n  }\n\n  setValueFromUrl(urlValue) {\n    if (!_.isArray(urlValue)) {\n      urlValue = [urlValue];\n    }\n\n    this.filters = urlValue.map(item => {\n      const values = item.split('|').map(value => {\n        return this.unescapeDelimiter(value);\n      });\n      return {\n        key: values[0],\n        operator: values[1],\n        value: values[2],\n      };\n    });\n\n    return Promise.resolve();\n  }\n\n  getValueForUrl() {\n    return this.filters.map(filter => {\n      return [filter.key, filter.operator, filter.value]\n        .map(value => {\n          return this.escapeDelimiter(value);\n        })\n        .join('|');\n    });\n  }\n\n  escapeDelimiter(value) {\n    return value.replace(/\\|/g, '__gfp__');\n  }\n\n  unescapeDelimiter(value) {\n    return value.replace(/__gfp__/g, '|');\n  }\n\n  setFilters(filters: any[]) {\n    this.filters = filters;\n  }\n}\n\nvariableTypes['adhoc'] = {\n  name: 'Ad hoc filters',\n  ctor: AdhocVariable,\n  description: '添加键/值对过滤器',\n};\n","import './editor_ctrl';\nimport coreModule from 'app/core/core_module';\n\nimport templateSrv from './template_srv';\nimport { VariableSrv } from './variable_srv';\nimport { IntervalVariable } from './interval_variable';\nimport { QueryVariable } from './query_variable';\nimport { DatasourceVariable } from './datasource_variable';\nimport { CustomVariable } from './custom_variable';\nimport { ConstantVariable } from './constant_variable';\nimport { AdhocVariable } from './adhoc_variable';\n\ncoreModule.factory('templateSrv', function() {\n  return templateSrv;\n});\n\nexport {\n  VariableSrv,\n  IntervalVariable,\n  QueryVariable,\n  DatasourceVariable,\n  CustomVariable,\n  ConstantVariable,\n  AdhocVariable,\n};\n","import angular from 'angular';\nimport _ from 'lodash';\nimport Remarkable from 'remarkable';\n\nexport class PluginEditCtrl {\n  model: any;\n  pluginIcon: string;\n  pluginId: any;\n  includes: any;\n  readmeHtml: any;\n  includedDatasources: any;\n  tab: string;\n  navModel: any;\n  hasDashboards: any;\n  preUpdateHook: () => any;\n  postUpdateHook: () => any;\n\n  /** @ngInject */\n  constructor(private $scope, private $rootScope, private backendSrv, private $sce, private $routeParams, navModelSrv) {\n    this.pluginId = $routeParams.pluginId;\n    this.preUpdateHook = () => Promise.resolve();\n    this.postUpdateHook = () => Promise.resolve();\n\n    this.init();\n  }\n\n  setNavModel(model) {\n    let defaultTab = 'readme';\n\n    this.navModel = {\n      main: {\n        img: model.info.logos.large,\n        subTitle: model.info.author.name,\n        url: '',\n        text: model.name,\n        breadcrumbs: [{ title: '插件', url: 'plugins' }],\n        children: [\n          {\n            icon: 'fa fa-fw fa-file-text-o',\n            id: 'readme',\n            text: 'Readme',\n            url: `plugins/${this.model.id}/edit?tab=readme`,\n          },\n        ],\n      },\n    };\n\n    if (model.type === 'app') {\n      this.navModel.main.children.push({\n        icon: 'gicon gicon-cog',\n        id: 'config',\n        text: '配置',\n        url: `plugins/${this.model.id}/edit?tab=config`,\n      });\n\n      const hasDashboards = _.find(model.includes, { type: 'dashboard' });\n\n      if (hasDashboards) {\n        this.navModel.main.children.push({\n          icon: 'gicon gicon-dashboard',\n          id: 'dashboards',\n          text: '仪表盘',\n          url: `plugins/${this.model.id}/edit?tab=dashboards`,\n        });\n      }\n\n      defaultTab = 'config';\n    }\n\n    this.tab = this.$routeParams.tab || defaultTab;\n\n    for (const tab of this.navModel.main.children) {\n      if (tab.id === this.tab) {\n        tab.active = true;\n      }\n    }\n  }\n\n  init() {\n    return this.backendSrv.get(`/api/plugins/${this.pluginId}/settings`).then(result => {\n      this.model = result;\n      this.pluginIcon = this.getPluginIcon(this.model.type);\n\n      this.model.dependencies.plugins.forEach(plug => {\n        plug.icon = this.getPluginIcon(plug.type);\n      });\n\n      this.includes = _.map(result.includes, plug => {\n        plug.icon = this.getPluginIcon(plug.type);\n        return plug;\n      });\n\n      this.setNavModel(this.model);\n      return this.initReadme();\n    });\n  }\n\n  initReadme() {\n    return this.backendSrv.get(`/api/plugins/${this.pluginId}/markdown/readme`).then(res => {\n      const md = new Remarkable({\n        linkify: true,\n      });\n      this.readmeHtml = this.$sce.trustAsHtml(md.render(res));\n    });\n  }\n\n  getPluginIcon(type) {\n    switch (type) {\n      case 'datasource':\n        return 'icon-gf icon-gf-datasources';\n      case 'panel':\n        return 'icon-gf icon-gf-panel';\n      case 'app':\n        return 'icon-gf icon-gf-apps';\n      case 'page':\n        return 'icon-gf icon-gf-endpoint-tiny';\n      case 'dashboard':\n        return 'icon-gf icon-gf-dashboard';\n      default:\n        return 'icon-gf icon-gf-apps';\n    }\n  }\n\n  update() {\n    this.preUpdateHook()\n      .then(() => {\n        const updateCmd = _.extend(\n          {\n            enabled: this.model.enabled,\n            pinned: this.model.pinned,\n            jsonData: this.model.jsonData,\n            secureJsonData: this.model.secureJsonData,\n          },\n          {}\n        );\n        return this.backendSrv.post(`/api/plugins/${this.pluginId}/settings`, updateCmd);\n      })\n      .then(this.postUpdateHook)\n      .then(res => {\n        window.location.href = window.location.href;\n      });\n  }\n\n  importDashboards() {\n    return Promise.resolve();\n  }\n\n  setPreUpdateHook(callback: () => any) {\n    this.preUpdateHook = callback;\n  }\n\n  setPostUpdateHook(callback: () => any) {\n    this.postUpdateHook = callback;\n  }\n\n  updateAvailable() {\n    const modalScope = this.$scope.$new(true);\n    modalScope.plugin = this.model;\n\n    this.$rootScope.appEvent('show-modal', {\n      src: 'public/app/features/plugins/partials/update_instructions.html',\n      scope: modalScope,\n    });\n  }\n\n  enable() {\n    this.model.enabled = true;\n    this.model.pinned = true;\n    this.update();\n  }\n\n  disable() {\n    this.model.enabled = false;\n    this.model.pinned = false;\n    this.update();\n  }\n}\n\nangular.module('grafana.controllers').controller('PluginEditCtrl', PluginEditCtrl);\n","import angular from 'angular';\nimport _ from 'lodash';\n\nconst pluginInfoCache = {};\n\nexport class AppPageCtrl {\n  page: any;\n  pluginId: any;\n  appModel: any;\n  navModel: any;\n\n  /** @ngInject */\n  constructor(private backendSrv, private $routeParams: any, private $rootScope, private navModelSrv) {\n    this.pluginId = $routeParams.pluginId;\n\n    if (pluginInfoCache[this.pluginId]) {\n      this.initPage(pluginInfoCache[this.pluginId]);\n    } else {\n      this.loadPluginInfo();\n    }\n  }\n\n  initPage(app) {\n    this.appModel = app;\n    this.page = _.find(app.includes, { slug: this.$routeParams.slug });\n\n    pluginInfoCache[this.pluginId] = app;\n\n    if (!this.page) {\n      this.$rootScope.appEvent('alert-error', ['App Page Not Found', '']);\n\n      this.navModel = this.navModelSrv.getNotFoundNav();\n      return;\n    }\n\n    const pluginNav = this.navModelSrv.getNav('plugin-page-' + app.id);\n\n    this.navModel = {\n      main: {\n        img: app.info.logos.large,\n        subTitle: app.name,\n        url: '',\n        text: this.page.name,\n        breadcrumbs: [{ title: app.name, url: pluginNav.main.url }],\n      },\n    };\n  }\n\n  loadPluginInfo() {\n    this.backendSrv.get(`/api/plugins/${this.pluginId}/settings`).then(app => {\n      this.initPage(app);\n    });\n  }\n}\n\nangular.module('grafana.controllers').controller('AppPageCtrl', AppPageCtrl);\n","import angular from 'angular';\nimport _ from 'lodash';\n\nexport class PluginListCtrl {\n  plugins: any[];\n  tabIndex: number;\n  navModel: any;\n  searchQuery: string;\n  allPlugins: any[];\n\n  /** @ngInject */\n  constructor(private backendSrv: any, $location, navModelSrv) {\n    this.tabIndex = 0;\n    this.navModel = navModelSrv.getNav('cfg', 'plugins', 0);\n\n    this.backendSrv.get('api/plugins', { embedded: 0 }).then(plugins => {\n      this.plugins = plugins;\n      this.allPlugins = plugins;\n    });\n  }\n\n  onQueryUpdated() {\n    const regex = new RegExp(this.searchQuery, 'ig');\n    this.plugins = _.filter(this.allPlugins, item => {\n      return regex.test(item.name) || regex.test(item.type);\n    });\n  }\n}\n\nangular.module('grafana.controllers').controller('PluginListCtrl', PluginListCtrl);\n","import _ from 'lodash';\nimport coreModule from 'app/core/core_module';\nimport appEvents from 'app/core/app_events';\n\nexport class DashImportListCtrl {\n  dashboards: any[];\n  plugin: any;\n  datasource: any;\n\n  /** @ngInject */\n  constructor($scope, private backendSrv, private $rootScope) {\n    this.dashboards = [];\n\n    backendSrv.get(`/api/plugins/${this.plugin.id}/dashboards`).then(dashboards => {\n      this.dashboards = dashboards;\n    });\n\n    appEvents.on('dashboard-list-import-all', this.importAll.bind(this), $scope);\n  }\n\n  importAll(payload) {\n    return this.importNext(0)\n      .then(() => {\n        payload.resolve('All dashboards imported');\n      })\n      .catch(err => {\n        payload.reject(err);\n      });\n  }\n\n  importNext(index) {\n    return this.import(this.dashboards[index], true).then(() => {\n      if (index + 1 < this.dashboards.length) {\n        return new Promise(resolve => {\n          setTimeout(() => {\n            this.importNext(index + 1).then(() => {\n              resolve();\n            });\n          }, 500);\n        });\n      } else {\n        return Promise.resolve();\n      }\n    });\n  }\n\n  import(dash, overwrite) {\n    const installCmd = {\n      pluginId: this.plugin.id,\n      path: dash.path,\n      overwrite: overwrite,\n      inputs: [],\n    };\n\n    if (this.datasource) {\n      installCmd.inputs.push({\n        name: '*',\n        type: 'datasource',\n        pluginId: this.datasource.type,\n        value: this.datasource.name,\n      });\n    }\n\n    return this.backendSrv.post(`/api/dashboards/import`, installCmd).then(res => {\n      this.$rootScope.appEvent('alert-success', ['仪表盘已导入', dash.title]);\n      _.extend(dash, res);\n    });\n  }\n\n  remove(dash) {\n    this.backendSrv.delete('/api/dashboards/' + dash.importedUri).then(() => {\n      this.$rootScope.appEvent('alert-success', ['仪表盘已删除', dash.title]);\n      dash.imported = false;\n    });\n  }\n}\n\nexport function dashboardImportList() {\n  return {\n    restrict: 'E',\n    templateUrl: 'public/app/features/plugins/import_list/import_list.html',\n    controller: DashImportListCtrl,\n    bindToController: true,\n    controllerAs: 'ctrl',\n    scope: {\n      plugin: '=',\n      datasource: '=',\n    },\n  };\n}\n\ncoreModule.directive('dashboardImportList', dashboardImportList);\n","import _ from 'lodash';\nimport { toJS } from 'mobx';\nimport config from 'app/core/config';\nimport { coreModule, appEvents } from 'app/core/core';\nimport { store } from 'app/stores/store';\n\nlet datasourceTypes = [];\n\nconst defaults = {\n  name: '',\n  type: 'graphite',\n  url: '',\n  access: 'proxy',\n  jsonData: {},\n  secureJsonFields: {},\n  secureJsonData: {},\n};\n\nlet datasourceCreated = false;\n\nexport class DataSourceEditCtrl {\n  isNew: boolean;\n  datasources: any[];\n  current: any;\n  types: any;\n  testing: any;\n  datasourceMeta: any;\n  editForm: any;\n  gettingStarted: boolean;\n  navModel: any;\n\n  /** @ngInject */\n  constructor(private $q, private backendSrv, private $routeParams, private $location, private datasourceSrv) {\n    if (store.nav.main === null) {\n      store.nav.load('cfg', 'datasources');\n    }\n\n    this.navModel = toJS(store.nav);\n    this.datasources = [];\n\n    this.loadDatasourceTypes().then(() => {\n      if (this.$routeParams.id) {\n        this.getDatasourceById(this.$routeParams.id);\n      } else {\n        this.initNewDatasourceModel();\n      }\n    });\n  }\n\n  initNewDatasourceModel() {\n    this.isNew = true;\n    this.current = _.cloneDeep(defaults);\n\n    // We are coming from getting started\n    if (this.$location.search().gettingstarted) {\n      this.gettingStarted = true;\n      this.current.isDefault = true;\n    }\n\n    this.typeChanged();\n  }\n\n  loadDatasourceTypes() {\n    if (datasourceTypes.length > 0) {\n      this.types = datasourceTypes;\n      return this.$q.when(null);\n    }\n\n    return this.backendSrv.get('/api/plugins', { enabled: 1, type: 'datasource' }).then(plugins => {\n      datasourceTypes = plugins;\n      this.types = plugins;\n    });\n  }\n\n  getDatasourceById(id) {\n    this.backendSrv.get('/api/datasources/' + id).then(ds => {\n      this.isNew = false;\n      this.current = ds;\n\n      if (datasourceCreated) {\n        datasourceCreated = false;\n        this.testDatasource();\n      }\n\n      return this.typeChanged();\n    });\n  }\n\n  userChangedType() {\n    // reset model but keep name & default flag\n    this.current = _.defaults(\n      {\n        id: this.current.id,\n        name: this.current.name,\n        isDefault: this.current.isDefault,\n        type: this.current.type,\n      },\n      _.cloneDeep(defaults)\n    );\n    this.typeChanged();\n  }\n\n  updateNav() {\n    store.nav.initDatasourceEditNav(this.current, this.datasourceMeta, 'datasource-settings');\n    this.navModel = toJS(store.nav);\n  }\n\n  typeChanged() {\n    return this.backendSrv.get('/api/plugins/' + this.current.type + '/settings').then(pluginInfo => {\n      this.datasourceMeta = pluginInfo;\n      this.updateNav();\n    });\n  }\n\n  updateFrontendSettings() {\n    return this.backendSrv.get('/api/frontend/settings').then(settings => {\n      config.datasources = settings.datasources;\n      config.defaultDatasource = settings.defaultDatasource;\n      this.datasourceSrv.init();\n    });\n  }\n\n  testDatasource() {\n    this.datasourceSrv.get(this.current.name).then(datasource => {\n      if (!datasource.testDatasource) {\n        return;\n      }\n\n      this.testing = { done: false, status: 'error' };\n\n      // make test call in no backend cache context\n      this.backendSrv\n        .withNoBackendCache(() => {\n          return datasource\n            .testDatasource()\n            .then(result => {\n              this.testing.message = result.message;\n              this.testing.status = result.status;\n            })\n            .catch(err => {\n              if (err.statusText) {\n                this.testing.message = 'HTTP Error ' + err.statusText;\n              } else {\n                this.testing.message = err.message;\n              }\n            });\n        })\n        .finally(() => {\n          this.testing.done = true;\n        });\n    });\n  }\n\n  saveChanges() {\n    if (!this.editForm.$valid) {\n      return;\n    }\n\n    if (this.current.readOnly) {\n      return;\n    }\n\n    if (this.current.id) {\n      return this.backendSrv.put('/api/datasources/' + this.current.id, this.current).then(result => {\n        this.current = result.datasource;\n        this.updateNav();\n        this.updateFrontendSettings().then(() => {\n          this.testDatasource();\n        });\n      });\n    } else {\n      return this.backendSrv.post('/api/datasources', this.current).then(result => {\n        this.current = result.datasource;\n        this.updateFrontendSettings();\n\n        datasourceCreated = true;\n        this.$location.path('datasources/edit/' + result.id);\n      });\n    }\n  }\n\n  confirmDelete() {\n    this.backendSrv.delete('/api/datasources/' + this.current.id).then(() => {\n      this.$location.path('datasources');\n    });\n  }\n\n  delete(s) {\n    appEvents.emit('confirm-modal', {\n      title: '删除',\n      text: '您确定要删除此数据源吗?',\n      yesText: '删除',\n      icon: 'fa-trash',\n      onConfirm: () => {\n        this.confirmDelete();\n      },\n    });\n  }\n}\n\ncoreModule.controller('DataSourceEditCtrl', DataSourceEditCtrl);\n\ncoreModule.directive('datasourceHttpSettings', function() {\n  return {\n    scope: {\n      current: '=',\n      suggestUrl: '@',\n      noDirectAccess: '@',\n    },\n    templateUrl: 'public/app/features/plugins/partials/ds_http_settings.html',\n    link: {\n      pre: function($scope, elem, attrs) {\n        // do not show access option if direct access is disabled\n        $scope.showAccessOption = $scope.noDirectAccess !== 'true';\n        $scope.showAccessHelp = false;\n        $scope.toggleAccessHelp = function() {\n          $scope.showAccessHelp = !$scope.showAccessHelp;\n        };\n\n        $scope.getSuggestUrls = function() {\n          return [$scope.suggestUrl];\n        };\n      },\n    },\n  };\n});\n","import { toJS } from 'mobx';\nimport { coreModule } from 'app/core/core';\nimport { store } from 'app/stores/store';\n\nexport class DataSourceDashboardsCtrl {\n  datasourceMeta: any;\n  navModel: any;\n  current: any;\n\n  /** @ngInject */\n  constructor(private backendSrv, private $routeParams) {\n    if (store.nav.main === null) {\n      store.nav.load('cfg', 'datasources');\n    }\n\n    this.navModel = toJS(store.nav);\n\n    if (this.$routeParams.id) {\n      this.getDatasourceById(this.$routeParams.id);\n    }\n  }\n\n  getDatasourceById(id) {\n    this.backendSrv\n      .get('/api/datasources/' + id)\n      .then(ds => {\n        this.current = ds;\n      })\n      .then(this.getPluginInfo.bind(this));\n  }\n\n  updateNav() {\n    store.nav.initDatasourceEditNav(this.current, this.datasourceMeta, 'datasource-dashboards');\n    this.navModel = toJS(store.nav);\n  }\n\n  getPluginInfo() {\n    return this.backendSrv.get('/api/plugins/' + this.current.type + '/settings').then(pluginInfo => {\n      this.datasourceMeta = pluginInfo;\n      this.updateNav();\n    });\n  }\n}\n\ncoreModule.controller('DataSourceDashboardsCtrl', DataSourceDashboardsCtrl);\n","import coreModule from '../../core/core_module';\nimport _ from 'lodash';\n\nexport class DataSourcesCtrl {\n  datasources: any;\n  unfiltered: any;\n  navModel: any;\n  searchQuery: string;\n\n  /** @ngInject */\n  constructor(private $scope, private backendSrv, private datasourceSrv, private navModelSrv) {\n    this.navModel = this.navModelSrv.getNav('cfg', 'datasources', 0);\n    backendSrv.get('/api/datasources').then(result => {\n      this.datasources = result;\n      this.unfiltered = result;\n    });\n  }\n\n  onQueryUpdated() {\n    const regex = new RegExp(this.searchQuery, 'ig');\n    this.datasources = _.filter(this.unfiltered, item => {\n      regex.lastIndex = 0;\n      return regex.test(item.name) || regex.test(item.type);\n    });\n  }\n\n  removeDataSourceConfirmed(ds) {\n    this.backendSrv\n      .delete('/api/datasources/' + ds.id)\n      .then(\n        () => {\n          this.$scope.appEvent('alert-success', ['Datasource deleted', '']);\n        },\n        () => {\n          this.$scope.appEvent('alert-error', ['Unable to delete datasource', '']);\n        }\n      )\n      .then(() => {\n        this.backendSrv.get('/api/datasources').then(result => {\n          this.datasources = result;\n        });\n        this.backendSrv.get('/api/frontend/settings').then(settings => {\n          this.datasourceSrv.init(settings.datasources);\n        });\n      });\n  }\n\n  removeDataSource(ds) {\n    this.$scope.appEvent('confirm-modal', {\n      title: '删除',\n      text: '确定要删除数据源: ' + ds.name + '?',\n      yesText: '删除',\n      icon: 'fa-trash',\n      onConfirm: () => {\n        this.removeDataSourceConfirmed(ds);\n      },\n    });\n  }\n}\n\ncoreModule.controller('DataSourcesCtrl', DataSourcesCtrl);\n","import config from 'app/core/config';\nimport _ from 'lodash';\nimport $ from 'jquery';\nimport { appEvents, profiler } from 'app/core/core';\nimport { PanelModel } from 'app/features/dashboard/panel_model';\nimport Remarkable from 'remarkable';\nimport { GRID_CELL_HEIGHT, GRID_CELL_VMARGIN, LS_PANEL_COPY_KEY } from 'app/core/constants';\nimport store from 'app/core/store';\n\nconst TITLE_HEIGHT = 27;\nconst PANEL_BORDER = 2;\n\nimport { Emitter } from 'app/core/core';\n\nexport class PanelCtrl {\n  panel: any;\n  error: any;\n  dashboard: any;\n  editorTabIndex: number;\n  pluginName: string;\n  pluginId: string;\n  editorTabs: any;\n  $scope: any;\n  $injector: any;\n  $location: any;\n  $timeout: any;\n  fullscreen: boolean;\n  inspector: any;\n  editModeInitiated: boolean;\n  editMode: any;\n  height: any;\n  containerHeight: any;\n  events: Emitter;\n  timing: any;\n  loading: boolean;\n\n  constructor($scope, $injector) {\n    this.$injector = $injector;\n    this.$location = $injector.get('$location');\n    this.$scope = $scope;\n    this.$timeout = $injector.get('$timeout');\n    this.editorTabIndex = 0;\n    this.events = this.panel.events;\n    this.timing = {};\n\n    const plugin = config.panels[this.panel.type];\n    if (plugin) {\n      this.pluginId = plugin.id;\n      this.pluginName = plugin.name;\n    }\n\n    $scope.$on('refresh', () => this.refresh());\n    $scope.$on('component-did-mount', () => this.panelDidMount());\n\n    $scope.$on('$destroy', () => {\n      this.events.emit('panel-teardown');\n      this.events.removeAllListeners();\n    });\n  }\n\n  init() {\n    this.events.emit('panel-initialized');\n    this.publishAppEvent('panel-initialized', { scope: this.$scope });\n  }\n\n  panelDidMount() {\n    this.events.emit('component-did-mount');\n  }\n\n  renderingCompleted() {\n    profiler.renderingCompleted(this.panel.id, this.timing);\n  }\n\n  refresh() {\n    this.events.emit('refresh', null);\n  }\n\n  publishAppEvent(evtName, evt) {\n    this.$scope.$root.appEvent(evtName, evt);\n  }\n\n  changeView(fullscreen, edit) {\n    this.publishAppEvent('panel-change-view', {\n      fullscreen: fullscreen,\n      edit: edit,\n      panelId: this.panel.id,\n    });\n  }\n\n  viewPanel() {\n    this.changeView(true, false);\n  }\n\n  editPanel() {\n    this.changeView(true, true);\n  }\n\n  exitFullscreen() {\n    this.changeView(false, false);\n  }\n\n  initEditMode() {\n    this.editorTabs = [];\n    this.addEditorTab('通用', 'public/app/partials/panelgeneral.html');\n    this.editModeInitiated = true;\n    this.events.emit('init-edit-mode', null);\n\n    const urlTab = (this.$injector.get('$routeParams').tab || '').toLowerCase();\n    if (urlTab) {\n      this.editorTabs.forEach((tab, i) => {\n        if (tab.title.toLowerCase() === urlTab) {\n          this.editorTabIndex = i;\n        }\n      });\n    }\n  }\n\n  changeTab(newIndex) {\n    this.editorTabIndex = newIndex;\n    const route = this.$injector.get('$route');\n    route.current.params.tab = this.editorTabs[newIndex].title.toLowerCase();\n    route.updateParams();\n  }\n\n  addEditorTab(title, directiveFn, index?) {\n    const editorTab = { title, directiveFn };\n\n    if (_.isString(directiveFn)) {\n      editorTab.directiveFn = function() {\n        return { templateUrl: directiveFn };\n      };\n    }\n    if (index) {\n      this.editorTabs.splice(index, 0, editorTab);\n    } else {\n      this.editorTabs.push(editorTab);\n    }\n  }\n\n  getMenu() {\n    const menu = [];\n    menu.push({\n      text: '查看',\n      click: 'ctrl.viewPanel();',\n      icon: 'fa fa-fw fa-eye',\n      shortcut: 'v',\n    });\n\n    if (this.dashboard.meta.canEdit) {\n      menu.push({\n        text: '编辑',\n        click: 'ctrl.editPanel();',\n        role: 'Editor',\n        icon: 'fa fa-fw fa-edit',\n        shortcut: 'e',\n      });\n    }\n\n    menu.push({\n      text: '分享',\n      click: 'ctrl.sharePanel();',\n      icon: 'fa fa-fw fa-share',\n      shortcut: 'p s',\n    });\n\n    // Additional items from sub-class\n    menu.push(...this.getAdditionalMenuItems());\n\n    const extendedMenu = this.getExtendedMenu();\n    menu.push({\n      text: '更多 ...',\n      click: '',\n      icon: 'fa fa-fw fa-cube',\n      submenu: extendedMenu,\n    });\n\n    if (this.dashboard.meta.canEdit) {\n      menu.push({ divider: true, role: 'Editor' });\n      menu.push({\n        text: '移除',\n        click: 'ctrl.removePanel();',\n        role: 'Editor',\n        icon: 'fa fa-fw fa-trash',\n        shortcut: 'p r',\n      });\n    }\n\n    return menu;\n  }\n\n  getExtendedMenu() {\n    const menu = [];\n    if (!this.fullscreen && this.dashboard.meta.canEdit) {\n      menu.push({\n        text: '创建副本',\n        click: 'ctrl.duplicate()',\n        role: 'Editor',\n        shortcut: 'p d',\n      });\n\n      menu.push({\n        text: '复制',\n        click: 'ctrl.copyPanel()',\n        role: 'Editor',\n      });\n    }\n\n    menu.push({\n      text: '面板 JSON',\n      click: 'ctrl.editPanelJson(); dismiss();',\n    });\n\n    this.events.emit('init-panel-actions', menu);\n    return menu;\n  }\n\n  // Override in sub-class to add items before extended menu\n  getAdditionalMenuItems() {\n    return [];\n  }\n\n  otherPanelInFullscreenMode() {\n    return this.dashboard.meta.fullscreen && !this.fullscreen;\n  }\n\n  calculatePanelHeight() {\n    if (this.fullscreen) {\n      const docHeight = $(window).height();\n      const editHeight = Math.floor(docHeight * 0.4);\n      const fullscreenHeight = Math.floor(docHeight * 0.8);\n      this.containerHeight = this.editMode ? editHeight : fullscreenHeight;\n    } else {\n      this.containerHeight = this.panel.gridPos.h * GRID_CELL_HEIGHT + (this.panel.gridPos.h - 1) * GRID_CELL_VMARGIN;\n    }\n\n    if (this.panel.soloMode) {\n      this.containerHeight = $(window).height();\n    }\n\n    this.height = this.containerHeight - (PANEL_BORDER + TITLE_HEIGHT);\n  }\n\n  render(payload?) {\n    this.timing.renderStart = new Date().getTime();\n    this.events.emit('render', payload);\n  }\n\n  duplicate() {\n    this.dashboard.duplicatePanel(this.panel);\n    this.$timeout(() => {\n      this.$scope.$root.$broadcast('render');\n    });\n  }\n\n  removePanel() {\n    this.publishAppEvent('panel-remove', {\n      panelId: this.panel.id,\n    });\n  }\n\n  editPanelJson() {\n    const editScope = this.$scope.$root.$new();\n    editScope.object = this.panel.getSaveModel();\n    editScope.updateHandler = this.replacePanel.bind(this);\n    editScope.enableCopy = true;\n\n    this.publishAppEvent('show-modal', {\n      src: 'public/app/partials/edit_json.html',\n      scope: editScope,\n    });\n  }\n\n  copyPanel() {\n    store.set(LS_PANEL_COPY_KEY, JSON.stringify(this.panel.getSaveModel()));\n    appEvents.emit('alert-success', ['面板已复制。 打开添加面板进行粘贴']);\n  }\n\n  replacePanel(newPanel, oldPanel) {\n    const dashboard = this.dashboard;\n    const index = _.findIndex(dashboard.panels, panel => {\n      return panel.id === oldPanel.id;\n    });\n\n    const deletedPanel = dashboard.panels.splice(index, 1);\n    this.dashboard.events.emit('panel-removed', deletedPanel);\n\n    newPanel = new PanelModel(newPanel);\n    newPanel.id = oldPanel.id;\n\n    dashboard.panels.splice(index, 0, newPanel);\n    dashboard.sortPanelsByGridPos();\n    dashboard.events.emit('panel-added', newPanel);\n  }\n\n  sharePanel() {\n    const shareScope = this.$scope.$new();\n    shareScope.panel = this.panel;\n    shareScope.dashboard = this.dashboard;\n\n    this.publishAppEvent('show-modal', {\n      src: 'public/app/features/dashboard/partials/shareModal.html',\n      scope: shareScope,\n    });\n  }\n\n  getInfoMode() {\n    if (this.error) {\n      return 'error';\n    }\n    if (!!this.panel.description) {\n      return 'info';\n    }\n    if (this.panel.links && this.panel.links.length) {\n      return 'links';\n    }\n    return '';\n  }\n\n  getInfoContent(options) {\n    let markdown = this.panel.description;\n\n    if (options.mode === 'tooltip') {\n      markdown = this.error || this.panel.description;\n    }\n\n    const linkSrv = this.$injector.get('linkSrv');\n    const sanitize = this.$injector.get('$sanitize');\n    const templateSrv = this.$injector.get('templateSrv');\n    const interpolatedMarkdown = templateSrv.replace(markdown, this.panel.scopedVars);\n    let html = '<div class=\"markdown-html\">';\n\n    html += new Remarkable().render(interpolatedMarkdown);\n\n    if (this.panel.links && this.panel.links.length > 0) {\n      html += '<ul>';\n      for (const link of this.panel.links) {\n        const info = linkSrv.getPanelLinkAnchorInfo(link, this.panel.scopedVars);\n        html +=\n          '<li><a class=\"panel-menu-link\" href=\"' +\n          info.href +\n          '\" target=\"' +\n          info.target +\n          '\">' +\n          info.title +\n          '</a></li>';\n      }\n      html += '</ul>';\n    }\n\n    html += '</div>';\n    return sanitize(html);\n  }\n\n  openInspector() {\n    const modalScope = this.$scope.$new();\n    modalScope.panel = this.panel;\n    modalScope.dashboard = this.dashboard;\n    modalScope.panelInfoHtml = this.getInfoContent({ mode: 'inspector' });\n\n    modalScope.inspector = $.extend(true, {}, this.inspector);\n    this.publishAppEvent('show-modal', {\n      src: 'public/app/features/dashboard/partials/inspector.html',\n      scope: modalScope,\n    });\n  }\n}\n","import { DashboardModel } from '../dashboard/dashboard_model';\nimport Remarkable from 'remarkable';\n\nexport class MetricsTabCtrl {\n  dsName: string;\n  panel: any;\n  panelCtrl: any;\n  datasources: any[];\n  datasourceInstance: any;\n  nextRefId: string;\n  dashboard: DashboardModel;\n  panelDsValue: any;\n  addQueryDropdown: any;\n  queryTroubleshooterOpen: boolean;\n  helpOpen: boolean;\n  optionsOpen: boolean;\n  hasQueryHelp: boolean;\n  helpHtml: string;\n  queryOptions: any;\n\n  /** @ngInject */\n  constructor($scope, private $sce, datasourceSrv, private backendSrv) {\n    this.panelCtrl = $scope.ctrl;\n    $scope.ctrl = this;\n\n    this.panel = this.panelCtrl.panel;\n    this.dashboard = this.panelCtrl.dashboard;\n    this.datasources = datasourceSrv.getMetricSources();\n    this.panelDsValue = this.panelCtrl.panel.datasource;\n\n    for (const ds of this.datasources) {\n      if (ds.value === this.panelDsValue) {\n        this.datasourceInstance = ds;\n      }\n    }\n\n    this.addQueryDropdown = { text: '添加查询', value: null, fake: true };\n\n    // update next ref id\n    this.panelCtrl.nextRefId = this.dashboard.getNextQueryLetter(this.panel);\n    this.updateDatasourceOptions();\n  }\n\n  updateDatasourceOptions() {\n    if (this.datasourceInstance) {\n      this.hasQueryHelp = this.datasourceInstance.meta.hasQueryHelp;\n      this.queryOptions = this.datasourceInstance.meta.queryOptions;\n    }\n  }\n\n  getOptions(includeBuiltin) {\n    return Promise.resolve(\n      this.datasources\n        .filter(value => {\n          return includeBuiltin || !value.meta.builtIn;\n        })\n        .map(ds => {\n          return { value: ds.value, text: ds.name, datasource: ds };\n        })\n    );\n  }\n\n  datasourceChanged(option) {\n    if (!option) {\n      return;\n    }\n\n    this.datasourceInstance = option.datasource;\n    this.panelCtrl.setDatasource(option.datasource);\n    this.updateDatasourceOptions();\n  }\n\n  addMixedQuery(option) {\n    if (!option) {\n      return;\n    }\n\n    this.panelCtrl.addQuery({\n      isNew: true,\n      datasource: option.datasource.name,\n    });\n    this.addQueryDropdown = { text: '添加查询', value: null, fake: true };\n  }\n\n  addQuery() {\n    this.panelCtrl.addQuery({ isNew: true });\n  }\n\n  toggleHelp() {\n    this.optionsOpen = false;\n    this.queryTroubleshooterOpen = false;\n    this.helpOpen = !this.helpOpen;\n\n    this.backendSrv.get(`/api/plugins/${this.datasourceInstance.meta.id}/markdown/query_help`).then(res => {\n      const md = new Remarkable();\n      this.helpHtml = this.$sce.trustAsHtml(md.render(res));\n    });\n  }\n\n  toggleOptions() {\n    this.helpOpen = false;\n    this.queryTroubleshooterOpen = false;\n    this.optionsOpen = !this.optionsOpen;\n  }\n\n  toggleQueryTroubleshooter() {\n    this.helpOpen = false;\n    this.optionsOpen = false;\n    this.queryTroubleshooterOpen = !this.queryTroubleshooterOpen;\n  }\n}\n\n/** @ngInject */\nexport function metricsTabDirective() {\n  'use strict';\n  return {\n    restrict: 'E',\n    scope: true,\n    templateUrl: 'public/app/features/panel/partials/metrics_tab.html',\n    controller: MetricsTabCtrl,\n  };\n}\n","import $ from 'jquery';\nimport _ from 'lodash';\n\nimport config from 'app/core/config';\nimport kbn from 'app/core/utils/kbn';\nimport { PanelCtrl } from 'app/features/panel/panel_ctrl';\nimport * as rangeUtil from 'app/core/utils/rangeutil';\nimport * as dateMath from 'app/core/utils/datemath';\nimport { encodePathComponent } from 'app/core/utils/location_util';\n\nimport { metricsTabDirective } from './metrics_tab';\n\nclass MetricsPanelCtrl extends PanelCtrl {\n  scope: any;\n  datasource: any;\n  datasourceName: any;\n  $q: any;\n  $timeout: any;\n  contextSrv: any;\n  datasourceSrv: any;\n  timeSrv: any;\n  templateSrv: any;\n  timing: any;\n  range: any;\n  interval: any;\n  intervalMs: any;\n  resolution: any;\n  timeInfo: any;\n  skipDataOnInit: boolean;\n  dataStream: any;\n  dataSubscription: any;\n  dataList: any;\n  nextRefId: string;\n\n  constructor($scope, $injector) {\n    super($scope, $injector);\n\n    // make metrics tab the default\n    this.editorTabIndex = 1;\n    this.$q = $injector.get('$q');\n    this.contextSrv = $injector.get('contextSrv');\n    this.datasourceSrv = $injector.get('datasourceSrv');\n    this.timeSrv = $injector.get('timeSrv');\n    this.templateSrv = $injector.get('templateSrv');\n    this.scope = $scope;\n    this.panel.datasource = this.panel.datasource || null;\n\n    if (!this.panel.targets) {\n      this.panel.targets = [{}];\n    }\n\n    this.events.on('refresh', this.onMetricsPanelRefresh.bind(this));\n    this.events.on('init-edit-mode', this.onInitMetricsPanelEditMode.bind(this));\n    this.events.on('panel-teardown', this.onPanelTearDown.bind(this));\n  }\n\n  private onPanelTearDown() {\n    if (this.dataSubscription) {\n      this.dataSubscription.unsubscribe();\n      this.dataSubscription = null;\n    }\n  }\n\n  private onInitMetricsPanelEditMode() {\n    this.addEditorTab('度量指标', metricsTabDirective);\n    this.addEditorTab('时间范围', 'public/app/features/panel/partials/panelTime.html');\n  }\n\n  private onMetricsPanelRefresh() {\n    // ignore fetching data if another panel is in fullscreen\n    if (this.otherPanelInFullscreenMode()) {\n      return;\n    }\n\n    // if we have snapshot data use that\n    if (this.panel.snapshotData) {\n      this.updateTimeRange();\n      let data = this.panel.snapshotData;\n      // backward compatibility\n      if (!_.isArray(data)) {\n        data = data.data;\n      }\n\n      // Defer panel rendering till the next digest cycle.\n      // For some reason snapshot panels don't init at this time, so this helps to avoid rendering issues.\n      return this.$timeout(() => {\n        this.events.emit('data-snapshot-load', data);\n      });\n    }\n\n    // // ignore if we have data stream\n    if (this.dataStream) {\n      return;\n    }\n\n    // clear loading/error state\n    delete this.error;\n    this.loading = true;\n\n    // load datasource service\n    this.setTimeQueryStart();\n    this.datasourceSrv\n      .get(this.panel.datasource)\n      .then(this.updateTimeRange.bind(this))\n      .then(this.issueQueries.bind(this))\n      .then(this.handleQueryResult.bind(this))\n      .catch(err => {\n        // if cancelled  keep loading set to true\n        if (err.cancelled) {\n          console.log('Panel request cancelled', err);\n          return;\n        }\n\n        this.loading = false;\n        this.error = err.message || 'Request Error';\n        this.inspector = { error: err };\n\n        if (err.data) {\n          if (err.data.message) {\n            this.error = err.data.message;\n          }\n          if (err.data.error) {\n            this.error = err.data.error;\n          }\n        }\n\n        this.events.emit('data-error', err);\n        console.log('Panel data error:', err);\n      });\n  }\n\n  setTimeQueryStart() {\n    this.timing.queryStart = new Date().getTime();\n  }\n\n  setTimeQueryEnd() {\n    this.timing.queryEnd = new Date().getTime();\n  }\n\n  updateTimeRange(datasource?) {\n    this.datasource = datasource || this.datasource;\n    this.range = this.timeSrv.timeRange();\n\n    this.applyPanelTimeOverrides();\n\n    if (this.panel.maxDataPoints) {\n      this.resolution = this.panel.maxDataPoints;\n    } else {\n      this.resolution = Math.ceil($(window).width() * (this.panel.gridPos.w / 24));\n    }\n\n    this.calculateInterval();\n\n    return this.datasource;\n  }\n\n  calculateInterval() {\n    let intervalOverride = this.panel.interval;\n\n    // if no panel interval check datasource\n    if (intervalOverride) {\n      intervalOverride = this.templateSrv.replace(intervalOverride, this.panel.scopedVars);\n    } else if (this.datasource && this.datasource.interval) {\n      intervalOverride = this.datasource.interval;\n    }\n\n    const res = kbn.calculateInterval(this.range, this.resolution, intervalOverride);\n    this.interval = res.interval;\n    this.intervalMs = res.intervalMs;\n  }\n\n  applyPanelTimeOverrides() {\n    this.timeInfo = '';\n\n    // check panel time overrrides\n    if (this.panel.timeFrom) {\n      const timeFromInterpolated = this.templateSrv.replace(this.panel.timeFrom, this.panel.scopedVars);\n      const timeFromInfo = rangeUtil.describeTextRange(timeFromInterpolated);\n      if (timeFromInfo.invalid) {\n        this.timeInfo = 'invalid time override';\n        return;\n      }\n\n      if (_.isString(this.range.raw.from)) {\n        const timeFromDate = dateMath.parse(timeFromInfo.from);\n        this.timeInfo = timeFromInfo.display;\n        this.range.from = timeFromDate;\n        this.range.to = dateMath.parse(timeFromInfo.to);\n        this.range.raw.from = timeFromInfo.from;\n        this.range.raw.to = timeFromInfo.to;\n      }\n    }\n\n    if (this.panel.timeShift) {\n      const timeShiftInterpolated = this.templateSrv.replace(this.panel.timeShift, this.panel.scopedVars);\n      const timeShiftInfo = rangeUtil.describeTextRange(timeShiftInterpolated);\n      if (timeShiftInfo.invalid) {\n        this.timeInfo = 'invalid timeshift';\n        return;\n      }\n\n      const timeShift = '-' + timeShiftInterpolated;\n      this.timeInfo += ' timeshift ' + timeShift;\n      this.range.from = dateMath.parseDateMath(timeShift, this.range.from, false);\n      this.range.to = dateMath.parseDateMath(timeShift, this.range.to, true);\n      this.range.raw = { from: this.range.from, to: this.range.to };\n    }\n\n    if (this.panel.hideTimeOverride) {\n      this.timeInfo = '';\n    }\n  }\n\n  issueQueries(datasource) {\n    this.datasource = datasource;\n\n    if (!this.panel.targets || this.panel.targets.length === 0) {\n      return this.$q.when([]);\n    }\n\n    // make shallow copy of scoped vars,\n    // and add built in variables interval and interval_ms\n    const scopedVars = Object.assign({}, this.panel.scopedVars, {\n      __interval: { text: this.interval, value: this.interval },\n      __interval_ms: { text: this.intervalMs, value: this.intervalMs },\n    });\n\n    const metricsQuery = {\n      timezone: this.dashboard.getTimezone(),\n      panelId: this.panel.id,\n      dashboardId: this.dashboard.id,\n      range: this.range,\n      rangeRaw: this.range.raw,\n      interval: this.interval,\n      intervalMs: this.intervalMs,\n      targets: this.panel.targets,\n      maxDataPoints: this.resolution,\n      scopedVars: scopedVars,\n      cacheTimeout: this.panel.cacheTimeout,\n    };\n\n    return datasource.query(metricsQuery);\n  }\n\n  handleQueryResult(result) {\n    this.setTimeQueryEnd();\n    this.loading = false;\n\n    // check for if data source returns subject\n    if (result && result.subscribe) {\n      this.handleDataStream(result);\n      return;\n    }\n\n    if (this.dashboard.snapshot) {\n      this.panel.snapshotData = result.data;\n    }\n\n    if (!result || !result.data) {\n      console.log('Data source query result invalid, missing data field:', result);\n      result = { data: [] };\n    }\n\n    this.events.emit('data-received', result.data);\n  }\n\n  handleDataStream(stream) {\n    // if we already have a connection\n    if (this.dataStream) {\n      console.log('two stream observables!');\n      return;\n    }\n\n    this.dataStream = stream;\n    this.dataSubscription = stream.subscribe({\n      next: data => {\n        console.log('dataSubject next!');\n        if (data.range) {\n          this.range = data.range;\n        }\n        this.events.emit('data-received', data.data);\n      },\n      error: error => {\n        this.events.emit('data-error', error);\n        console.log('panel: observer got error');\n      },\n      complete: () => {\n        console.log('panel: observer got complete');\n        this.dataStream = null;\n      },\n    });\n  }\n\n  setDatasource(datasource) {\n    // switching to mixed\n    if (datasource.meta.mixed) {\n      _.each(this.panel.targets, target => {\n        target.datasource = this.panel.datasource;\n        if (!target.datasource) {\n          target.datasource = config.defaultDatasource;\n        }\n      });\n    } else if (this.datasource && this.datasource.meta.mixed) {\n      _.each(this.panel.targets, target => {\n        delete target.datasource;\n      });\n    }\n\n    this.panel.datasource = datasource.value;\n    this.datasourceName = datasource.name;\n    this.datasource = null;\n    this.refresh();\n  }\n\n  getAdditionalMenuItems() {\n    const items = [];\n    if (config.exploreEnabled && this.contextSrv.isEditor && this.datasource && this.datasource.supportsExplore) {\n      items.push({\n        text: 'Explore',\n        click: 'ctrl.explore();',\n        icon: 'fa fa-fw fa-rocket',\n        shortcut: 'x',\n      });\n    }\n    return items;\n  }\n\n  explore() {\n    const range = this.timeSrv.timeRangeForUrl();\n    const state = {\n      ...this.datasource.getExploreState(this.panel),\n      range,\n    };\n    const exploreState = encodePathComponent(JSON.stringify(state));\n    this.$location.url(`/explore?state=${exploreState}`);\n  }\n\n  addQuery(target) {\n    target.refId = this.dashboard.getNextQueryLetter(this.panel);\n\n    this.panel.targets.push(target);\n    this.nextRefId = this.dashboard.getNextQueryLetter(this.panel);\n  }\n\n  removeQuery(target) {\n    const index = _.indexOf(this.panel.targets, target);\n    this.panel.targets.splice(index, 1);\n    this.nextRefId = this.dashboard.getNextQueryLetter(this.panel);\n    this.refresh();\n  }\n\n  moveQuery(target, direction) {\n    const index = _.indexOf(this.panel.targets, target);\n    _.move(this.panel.targets, index, index + direction);\n  }\n}\n\nexport { MetricsPanelCtrl };\n","import _ from 'lodash';\n\nexport class QueryCtrl {\n  target: any;\n  datasource: any;\n  panelCtrl: any;\n  panel: any;\n  hasRawMode: boolean;\n  error: string;\n  isLastQuery: boolean;\n\n  constructor(public $scope, public $injector) {\n    this.panel = this.panelCtrl.panel;\n    this.isLastQuery = _.indexOf(this.panel.targets, this.target) === this.panel.targets.length - 1;\n  }\n\n  refresh() {\n    this.panelCtrl.refresh();\n  }\n}\n","export class ThresholdMapper {\n  static alertToGraphThresholds(panel) {\n    for (let i = 0; i < panel.alert.conditions.length; i++) {\n      const condition = panel.alert.conditions[i];\n      if (condition.type !== 'query') {\n        continue;\n      }\n\n      const evaluator = condition.evaluator;\n      const thresholds = (panel.thresholds = []);\n\n      switch (evaluator.type) {\n        case 'gt': {\n          const value = evaluator.params[0];\n          thresholds.push({ value: value, op: 'gt' });\n          break;\n        }\n        case 'lt': {\n          const value = evaluator.params[0];\n          thresholds.push({ value: value, op: 'lt' });\n          break;\n        }\n        case 'outside_range': {\n          const value1 = evaluator.params[0];\n          const value2 = evaluator.params[1];\n\n          if (value1 > value2) {\n            thresholds.push({ value: value1, op: 'gt' });\n            thresholds.push({ value: value2, op: 'lt' });\n          } else {\n            thresholds.push({ value: value1, op: 'lt' });\n            thresholds.push({ value: value2, op: 'gt' });\n          }\n\n          break;\n        }\n        case 'within_range': {\n          const value1 = evaluator.params[0];\n          const value2 = evaluator.params[1];\n\n          if (value1 > value2) {\n            thresholds.push({ value: value1, op: 'lt' });\n            thresholds.push({ value: value2, op: 'gt' });\n          } else {\n            thresholds.push({ value: value1, op: 'gt' });\n            thresholds.push({ value: value2, op: 'lt' });\n          }\n          break;\n        }\n      }\n      break;\n    }\n\n    for (const t of panel.thresholds) {\n      t.fill = true;\n      t.line = true;\n      t.colorMode = 'critical';\n    }\n\n    const updated = true;\n    return updated;\n  }\n}\n","import _ from 'lodash';\nimport { ThresholdMapper } from './threshold_mapper';\nimport { QueryPart } from 'app/core/components/query_part/query_part';\nimport alertDef from './alert_def';\nimport config from 'app/core/config';\nimport appEvents from 'app/core/app_events';\n\nexport class AlertTabCtrl {\n  panel: any;\n  panelCtrl: any;\n  testing: boolean;\n  testResult: any;\n  subTabIndex: number;\n  conditionTypes: any;\n  alert: any;\n  conditionModels: any;\n  evalFunctions: any;\n  evalOperators: any;\n  noDataModes: any;\n  executionErrorModes: any;\n  addNotificationSegment;\n  notifications;\n  alertNotifications;\n  error: string;\n  appSubUrl: string;\n  alertHistory: any;\n\n  /** @ngInject */\n  constructor(\n    private $scope,\n    private backendSrv,\n    private dashboardSrv,\n    private uiSegmentSrv,\n    private $q,\n    private datasourceSrv\n  ) {\n    this.panelCtrl = $scope.ctrl;\n    this.panel = this.panelCtrl.panel;\n    this.$scope.ctrl = this;\n    this.subTabIndex = 0;\n    this.evalFunctions = alertDef.evalFunctions;\n    this.evalOperators = alertDef.evalOperators;\n    this.conditionTypes = alertDef.conditionTypes;\n    this.noDataModes = alertDef.noDataModes;\n    this.executionErrorModes = alertDef.executionErrorModes;\n    this.appSubUrl = config.appSubUrl;\n  }\n\n  $onInit() {\n    this.addNotificationSegment = this.uiSegmentSrv.newPlusButton();\n\n    // subscribe to graph threshold handle changes\n    const thresholdChangedEventHandler = this.graphThresholdChanged.bind(this);\n    this.panelCtrl.events.on('threshold-changed', thresholdChangedEventHandler);\n\n    // set panel alert edit mode\n    this.$scope.$on('$destroy', () => {\n      this.panelCtrl.events.off('threshold-changed', thresholdChangedEventHandler);\n      this.panelCtrl.editingThresholds = false;\n      this.panelCtrl.render();\n    });\n\n    // build notification model\n    this.notifications = [];\n    this.alertNotifications = [];\n    this.alertHistory = [];\n\n    return this.backendSrv.get('/api/alert-notifications').then(res => {\n      this.notifications = res;\n\n      this.initModel();\n      this.validateModel();\n    });\n  }\n\n  getAlertHistory() {\n    this.backendSrv\n      .get(`/api/annotations?dashboardId=${this.panelCtrl.dashboard.id}&panelId=${this.panel.id}&limit=50&type=alert`)\n      .then(res => {\n        this.alertHistory = _.map(res, ah => {\n          ah.time = this.dashboardSrv.getCurrent().formatDate(ah.time, 'MMM D, YYYY HH:mm:ss');\n          ah.stateModel = alertDef.getStateDisplayModel(ah.newState);\n          ah.info = alertDef.getAlertAnnotationInfo(ah);\n          return ah;\n        });\n      });\n  }\n\n  getNotificationIcon(type): string {\n    switch (type) {\n      case 'email':\n        return 'fa fa-envelope';\n      case 'slack':\n        return 'fa fa-slack';\n      case 'victorops':\n        return 'fa fa-pagelines';\n      case 'webhook':\n        return 'fa fa-cubes';\n      case 'pagerduty':\n        return 'fa fa-bullhorn';\n      case 'opsgenie':\n        return 'fa fa-bell';\n      case 'hipchat':\n        return 'fa fa-mail-forward';\n      case 'pushover':\n        return 'fa fa-mobile';\n      case 'kafka':\n        return 'fa fa-random';\n      case 'teams':\n        return 'fa fa-windows';\n    }\n    return 'fa fa-bell';\n  }\n\n  getNotifications() {\n    return Promise.resolve(\n      this.notifications.map(item => {\n        return this.uiSegmentSrv.newSegment(item.name);\n      })\n    );\n  }\n\n  changeTabIndex(newTabIndex) {\n    this.subTabIndex = newTabIndex;\n\n    if (this.subTabIndex === 2) {\n      this.getAlertHistory();\n    }\n  }\n\n  notificationAdded() {\n    const model = _.find(this.notifications, {\n      name: this.addNotificationSegment.value,\n    });\n    if (!model) {\n      return;\n    }\n\n    this.alertNotifications.push({\n      name: model.name,\n      iconClass: this.getNotificationIcon(model.type),\n      isDefault: false,\n    });\n    this.alert.notifications.push({ id: model.id });\n\n    // reset plus button\n    this.addNotificationSegment.value = this.uiSegmentSrv.newPlusButton().value;\n    this.addNotificationSegment.html = this.uiSegmentSrv.newPlusButton().html;\n  }\n\n  removeNotification(index) {\n    this.alert.notifications.splice(index, 1);\n    this.alertNotifications.splice(index, 1);\n  }\n\n  initModel() {\n    const alert = (this.alert = this.panel.alert);\n    if (!alert) {\n      return;\n    }\n\n    alert.conditions = alert.conditions || [];\n    if (alert.conditions.length === 0) {\n      alert.conditions.push(this.buildDefaultCondition());\n    }\n\n    alert.noDataState = alert.noDataState || 'no_data';\n    alert.executionErrorState = alert.executionErrorState || 'alerting';\n    alert.frequency = alert.frequency || '60s';\n    alert.handler = alert.handler || 1;\n    alert.notifications = alert.notifications || [];\n\n    const defaultName = this.panel.title + ' 报警';\n    alert.name = alert.name || defaultName;\n\n    this.conditionModels = _.reduce(\n      alert.conditions,\n      (memo, value) => {\n        memo.push(this.buildConditionModel(value));\n        return memo;\n      },\n      []\n    );\n\n    ThresholdMapper.alertToGraphThresholds(this.panel);\n\n    for (const addedNotification of alert.notifications) {\n      const model = _.find(this.notifications, { id: addedNotification.id });\n      if (model && model.isDefault === false) {\n        model.iconClass = this.getNotificationIcon(model.type);\n        this.alertNotifications.push(model);\n      }\n    }\n\n    for (const notification of this.notifications) {\n      if (notification.isDefault) {\n        notification.iconClass = this.getNotificationIcon(notification.type);\n        notification.bgColor = '#00678b';\n        this.alertNotifications.push(notification);\n      }\n    }\n\n    this.panelCtrl.editingThresholds = true;\n    this.panelCtrl.render();\n  }\n\n  graphThresholdChanged(evt) {\n    for (const condition of this.alert.conditions) {\n      if (condition.type === 'query') {\n        condition.evaluator.params[evt.handleIndex] = evt.threshold.value;\n        this.evaluatorParamsChanged();\n        break;\n      }\n    }\n  }\n\n  buildDefaultCondition() {\n    return {\n      type: 'query',\n      query: { params: ['A', '5m', 'now'] },\n      reducer: { type: 'avg', params: [] },\n      evaluator: { type: 'gt', params: [null] },\n      operator: { type: 'and' },\n    };\n  }\n\n  validateModel() {\n    if (!this.alert) {\n      return;\n    }\n\n    let firstTarget;\n    let foundTarget = null;\n\n    for (const condition of this.alert.conditions) {\n      if (condition.type !== 'query') {\n        continue;\n      }\n\n      for (const target of this.panel.targets) {\n        if (!firstTarget) {\n          firstTarget = target;\n        }\n        if (condition.query.params[0] === target.refId) {\n          foundTarget = target;\n          break;\n        }\n      }\n\n      if (!foundTarget) {\n        if (firstTarget) {\n          condition.query.params[0] = firstTarget.refId;\n          foundTarget = firstTarget;\n        } else {\n          this.error = 'Could not find any metric queries';\n        }\n      }\n\n      const datasourceName = foundTarget.datasource || this.panel.datasource;\n      this.datasourceSrv.get(datasourceName).then(ds => {\n        if (!ds.meta.alerting) {\n          this.error = 'The datasource does not support alerting queries';\n        } else if (ds.targetContainsTemplate(foundTarget)) {\n          this.error = 'Template variables are not supported in alert queries';\n        } else {\n          this.error = '';\n        }\n      });\n    }\n  }\n\n  buildConditionModel(source) {\n    const cm: any = { source: source, type: source.type };\n\n    cm.queryPart = new QueryPart(source.query, alertDef.alertQueryDef);\n    cm.reducerPart = alertDef.createReducerPart(source.reducer);\n    cm.evaluator = source.evaluator;\n    cm.operator = source.operator;\n\n    return cm;\n  }\n\n  handleQueryPartEvent(conditionModel, evt) {\n    switch (evt.name) {\n      case 'action-remove-part': {\n        break;\n      }\n      case 'get-part-actions': {\n        return this.$q.when([]);\n      }\n      case 'part-param-changed': {\n        this.validateModel();\n      }\n      case 'get-param-options': {\n        const result = this.panel.targets.map(target => {\n          return this.uiSegmentSrv.newSegment({ value: target.refId });\n        });\n\n        return this.$q.when(result);\n      }\n    }\n  }\n\n  handleReducerPartEvent(conditionModel, evt) {\n    switch (evt.name) {\n      case 'action': {\n        conditionModel.source.reducer.type = evt.action.value;\n        conditionModel.reducerPart = alertDef.createReducerPart(conditionModel.source.reducer);\n        break;\n      }\n      case 'get-part-actions': {\n        const result = [];\n        for (const type of alertDef.reducerTypes) {\n          if (type.value !== conditionModel.source.reducer.type) {\n            result.push(type);\n          }\n        }\n        return this.$q.when(result);\n      }\n    }\n  }\n\n  addCondition(type) {\n    const condition = this.buildDefaultCondition();\n    // add to persited model\n    this.alert.conditions.push(condition);\n    // add to view model\n    this.conditionModels.push(this.buildConditionModel(condition));\n  }\n\n  removeCondition(index) {\n    this.alert.conditions.splice(index, 1);\n    this.conditionModels.splice(index, 1);\n  }\n\n  delete() {\n    appEvents.emit('confirm-modal', {\n      title: '删除报警',\n      text: '确定希望删除这条报警规则?',\n      text2: '需要保存仪表盘使删除生效',\n      icon: 'fa-trash',\n      yesText: '删除',\n      onConfirm: () => {\n        delete this.panel.alert;\n        this.alert = null;\n        this.panel.thresholds = [];\n        this.conditionModels = [];\n        this.panelCtrl.alertState = null;\n        this.panelCtrl.render();\n      },\n    });\n  }\n\n  enable() {\n    this.panel.alert = {};\n    this.initModel();\n  }\n\n  evaluatorParamsChanged() {\n    ThresholdMapper.alertToGraphThresholds(this.panel);\n    this.panelCtrl.render();\n  }\n\n  evaluatorTypeChanged(evaluator) {\n    // ensure params array is correct length\n    switch (evaluator.type) {\n      case 'lt':\n      case 'gt': {\n        evaluator.params = [evaluator.params[0]];\n        break;\n      }\n      case 'within_range':\n      case 'outside_range': {\n        evaluator.params = [evaluator.params[0], evaluator.params[1]];\n        break;\n      }\n      case 'no_value': {\n        evaluator.params = [];\n      }\n    }\n\n    this.evaluatorParamsChanged();\n  }\n\n  clearHistory() {\n    appEvents.emit('confirm-modal', {\n      title: '删除历史状态',\n      text: '您确定要删除此警报的所有历史状态和注释吗?',\n      icon: 'fa-trash',\n      yesText: '是',\n      onConfirm: () => {\n        this.backendSrv\n          .post('/api/annotations/mass-delete', {\n            dashboardId: this.panelCtrl.dashboard.id,\n            panelId: this.panel.id,\n          })\n          .then(res => {\n            this.alertHistory = [];\n            this.panelCtrl.refresh();\n          });\n      },\n    });\n  }\n\n  test() {\n    this.testing = true;\n    this.testResult = false;\n\n    const payload = {\n      dashboard: this.dashboardSrv.getCurrent().getSaveModelClone(),\n      panelId: this.panelCtrl.panel.id,\n    };\n\n    return this.backendSrv.post('/api/alerts/test', payload).then(res => {\n      this.testResult = res;\n      this.testing = false;\n    });\n  }\n}\n\n/** @ngInject */\nexport function alertTab() {\n  'use strict';\n  return {\n    restrict: 'E',\n    scope: true,\n    templateUrl: 'public/app/features/alerting/partials/alert_tab.html',\n    controller: AlertTabCtrl,\n  };\n}\n","import { PanelCtrl } from 'app/features/panel/panel_ctrl';\nimport { MetricsPanelCtrl } from 'app/features/panel/metrics_panel_ctrl';\nimport { QueryCtrl } from 'app/features/panel/query_ctrl';\nimport { alertTab } from 'app/features/alerting/alert_tab_ctrl';\nimport { loadPluginCss } from 'app/features/plugins/plugin_loader';\n\nexport { PanelCtrl, MetricsPanelCtrl, QueryCtrl, alertTab, loadPluginCss };\n","import { isBoolean, isNumber, sortedUniq, sortedIndexOf, unescape as htmlUnescaped } from 'lodash';\nimport moment from 'moment';\nimport { saveAs } from 'file-saver';\nimport { isNullOrUndefined } from 'util';\n\nconst DEFAULT_DATETIME_FORMAT = 'YYYY-MM-DDTHH:mm:ssZ';\nconst POINT_TIME_INDEX = 1;\nconst POINT_VALUE_INDEX = 0;\n\nconst END_COLUMN = ';';\nconst END_ROW = '\\r\\n';\nconst QUOTE = '\"';\nconst EXPORT_FILENAME = 'grafana_data_export.csv';\n\nfunction csvEscaped(text) {\n  if (!text) {\n    return text;\n  }\n\n  return text.split(QUOTE).join(QUOTE + QUOTE);\n}\n\nconst domParser = new DOMParser();\nfunction htmlDecoded(text) {\n  if (!text) {\n    return text;\n  }\n\n  const regexp = /&[^;]+;/g;\n  function htmlDecoded(value) {\n    const parsedDom = domParser.parseFromString(value, 'text/html');\n    return parsedDom.body.textContent;\n  }\n  return text.replace(regexp, htmlDecoded).replace(regexp, htmlDecoded);\n}\n\nfunction formatSpecialHeader(useExcelHeader) {\n  return useExcelHeader ? `sep=${END_COLUMN}${END_ROW}` : '';\n}\n\nfunction formatRow(row, addEndRowDelimiter = true) {\n  let text = '';\n  for (let i = 0; i < row.length; i += 1) {\n    if (isBoolean(row[i]) || isNullOrUndefined(row[i])) {\n      text += row[i];\n    } else if (isNumber(row[i])) {\n      text += row[i].toLocaleString();\n    } else {\n      text += `${QUOTE}${csvEscaped(htmlUnescaped(htmlDecoded(row[i])))}${QUOTE}`;\n    }\n\n    if (i < row.length - 1) {\n      text += END_COLUMN;\n    }\n  }\n  return addEndRowDelimiter ? text + END_ROW : text;\n}\n\nexport function convertSeriesListToCsv(seriesList, dateTimeFormat = DEFAULT_DATETIME_FORMAT, excel = false) {\n  let text = formatSpecialHeader(excel) + formatRow(['Series', 'Time', 'Value']);\n  for (let seriesIndex = 0; seriesIndex < seriesList.length; seriesIndex += 1) {\n    for (let i = 0; i < seriesList[seriesIndex].datapoints.length; i += 1) {\n      text += formatRow(\n        [\n          seriesList[seriesIndex].alias,\n          moment(seriesList[seriesIndex].datapoints[i][POINT_TIME_INDEX]).format(dateTimeFormat),\n          seriesList[seriesIndex].datapoints[i][POINT_VALUE_INDEX],\n        ],\n        i < seriesList[seriesIndex].datapoints.length - 1 || seriesIndex < seriesList.length - 1\n      );\n    }\n  }\n  return text;\n}\n\nexport function exportSeriesListToCsv(seriesList, dateTimeFormat = DEFAULT_DATETIME_FORMAT, excel = false) {\n  const text = convertSeriesListToCsv(seriesList, dateTimeFormat, excel);\n  saveSaveBlob(text, EXPORT_FILENAME);\n}\n\nexport function convertSeriesListToCsvColumns(seriesList, dateTimeFormat = DEFAULT_DATETIME_FORMAT, excel = false) {\n  // add header\n  let text =\n    formatSpecialHeader(excel) +\n    formatRow(\n      ['Time'].concat(\n        seriesList.map(function(val) {\n          return val.alias;\n        })\n      )\n    );\n  // process data\n  seriesList = mergeSeriesByTime(seriesList);\n\n  // make text\n  for (let i = 0; i < seriesList[0].datapoints.length; i += 1) {\n    const timestamp = moment(seriesList[0].datapoints[i][POINT_TIME_INDEX]).format(dateTimeFormat);\n    text += formatRow(\n      [timestamp].concat(\n        seriesList.map(function(series) {\n          return series.datapoints[i][POINT_VALUE_INDEX];\n        })\n      ),\n      i < seriesList[0].datapoints.length - 1\n    );\n  }\n\n  return text;\n}\n\n/**\n * Collect all unique timestamps from series list and use it to fill\n * missing points by null.\n */\nfunction mergeSeriesByTime(seriesList) {\n  let timestamps = [];\n  for (let i = 0; i < seriesList.length; i++) {\n    const seriesPoints = seriesList[i].datapoints;\n    for (let j = 0; j < seriesPoints.length; j++) {\n      timestamps.push(seriesPoints[j][POINT_TIME_INDEX]);\n    }\n  }\n  timestamps = sortedUniq(timestamps.sort());\n\n  for (let i = 0; i < seriesList.length; i++) {\n    const seriesPoints = seriesList[i].datapoints;\n    const seriesTimestamps = seriesPoints.map(p => p[POINT_TIME_INDEX]);\n    const extendedSeries = [];\n    let pointIndex;\n    for (let j = 0; j < timestamps.length; j++) {\n      pointIndex = sortedIndexOf(seriesTimestamps, timestamps[j]);\n      if (pointIndex !== -1) {\n        extendedSeries.push(seriesPoints[pointIndex]);\n      } else {\n        extendedSeries.push([null, timestamps[j]]);\n      }\n    }\n    seriesList[i].datapoints = extendedSeries;\n  }\n  return seriesList;\n}\n\nexport function exportSeriesListToCsvColumns(seriesList, dateTimeFormat = DEFAULT_DATETIME_FORMAT, excel = false) {\n  const text = convertSeriesListToCsvColumns(seriesList, dateTimeFormat, excel);\n  saveSaveBlob(text, EXPORT_FILENAME);\n}\n\nexport function convertTableDataToCsv(table, excel = false) {\n  let text = formatSpecialHeader(excel);\n  // add headline\n  text += formatRow(table.columns.map(val => val.title || val.text));\n  // process data\n  for (let i = 0; i < table.rows.length; i += 1) {\n    text += formatRow(table.rows[i], i < table.rows.length - 1);\n  }\n  return text;\n}\n\nexport function exportTableDataToCsv(table, excel = false) {\n  const text = convertTableDataToCsv(table, excel);\n  saveSaveBlob(text, EXPORT_FILENAME);\n}\n\nexport function saveSaveBlob(payload, fname) {\n  const blob = new Blob([payload], { type: 'text/csv;charset=utf-8;header=present;' });\n  saveAs(blob, fname);\n}\n","// Copyright (c) 2014, Hugh Kennedy\n// Based on code from https://github.com/hughsk/flat/blob/master/index.js\n//\nexport default function flatten(target, opts): any {\n  opts = opts || {};\n\n  const delimiter = opts.delimiter || '.';\n  let maxDepth = opts.maxDepth || 3;\n  let currentDepth = 1;\n  const output = {};\n\n  function step(object, prev) {\n    Object.keys(object).forEach(function(key) {\n      const value = object[key];\n      const isarray = opts.safe && Array.isArray(value);\n      const type = Object.prototype.toString.call(value);\n      const isobject = type === '[object Object]';\n\n      const newKey = prev ? prev + delimiter + key : key;\n\n      if (!opts.maxDepth) {\n        maxDepth = currentDepth + 1;\n      }\n\n      if (!isarray && isobject && Object.keys(value).length && currentDepth < maxDepth) {\n        ++currentDepth;\n        return step(value, newKey);\n      }\n\n      output[newKey] = value;\n    });\n  }\n\n  step(target, null);\n\n  return output;\n}\n","import _ from 'lodash';\n\nconst versionPattern = /^(\\d+)(?:\\.(\\d+))?(?:\\.(\\d+))?(?:-([0-9A-Za-z\\.]+))?/;\n\nexport class SemVersion {\n  major: number;\n  minor: number;\n  patch: number;\n  meta: string;\n\n  constructor(version: string) {\n    const match = versionPattern.exec(version);\n    if (match) {\n      this.major = Number(match[1]);\n      this.minor = Number(match[2] || 0);\n      this.patch = Number(match[3] || 0);\n      this.meta = match[4];\n    }\n  }\n\n  isGtOrEq(version: string): boolean {\n    const compared = new SemVersion(version);\n    return !(this.major < compared.major || this.minor < compared.minor || this.patch < compared.patch);\n  }\n\n  isValid(): boolean {\n    return _.isNumber(this.major);\n  }\n}\n\nexport function isVersionGtOrEq(a: string, b: string): boolean {\n  const a_semver = new SemVersion(a);\n  return a_semver.isGtOrEq(b);\n}\n","import _ from 'lodash';\nimport { isVersionGtOrEq } from 'app/core/utils/version';\n\nconst index = {};\n\nfunction addFuncDef(funcDef) {\n  funcDef.params = funcDef.params || [];\n  funcDef.defaultParams = funcDef.defaultParams || [];\n\n  index[funcDef.name] = funcDef;\n  if (funcDef.shortName) {\n    index[funcDef.shortName] = funcDef;\n  }\n}\n\nconst optionalSeriesRefArgs = [{ name: 'other', type: 'value_or_series', optional: true, multiple: true }];\n\naddFuncDef({\n  name: 'scaleToSeconds',\n  category: 'Transform',\n  params: [{ name: 'seconds', type: 'int' }],\n  defaultParams: [1],\n});\n\naddFuncDef({\n  name: 'perSecond',\n  category: 'Transform',\n  params: [{ name: 'max value', type: 'int', optional: true }],\n  defaultParams: [],\n});\n\naddFuncDef({\n  name: 'holtWintersForecast',\n  category: 'Calculate',\n});\n\naddFuncDef({\n  name: 'holtWintersConfidenceBands',\n  category: 'Calculate',\n  params: [{ name: 'delta', type: 'int' }],\n  defaultParams: [3],\n});\n\naddFuncDef({\n  name: 'holtWintersAberration',\n  category: 'Calculate',\n  params: [{ name: 'delta', type: 'int' }],\n  defaultParams: [3],\n});\n\naddFuncDef({\n  name: 'nPercentile',\n  category: 'Calculate',\n  params: [{ name: 'Nth percentile', type: 'int' }],\n  defaultParams: [95],\n});\n\naddFuncDef({\n  name: 'diffSeries',\n  params: optionalSeriesRefArgs,\n  defaultParams: ['#A'],\n  category: 'Combine',\n});\n\naddFuncDef({\n  name: 'stddevSeries',\n  params: optionalSeriesRefArgs,\n  defaultParams: [''],\n  category: 'Combine',\n});\n\naddFuncDef({\n  name: 'divideSeries',\n  params: optionalSeriesRefArgs,\n  defaultParams: ['#A'],\n  category: 'Combine',\n});\n\naddFuncDef({\n  name: 'multiplySeries',\n  params: optionalSeriesRefArgs,\n  defaultParams: ['#A'],\n  category: 'Combine',\n});\n\naddFuncDef({\n  name: 'asPercent',\n  params: optionalSeriesRefArgs,\n  defaultParams: ['#A'],\n  category: 'Combine',\n});\n\naddFuncDef({\n  name: 'group',\n  params: optionalSeriesRefArgs,\n  defaultParams: ['#A', '#B'],\n  category: 'Combine',\n});\n\naddFuncDef({\n  name: 'sumSeries',\n  shortName: 'sum',\n  category: 'Combine',\n  params: optionalSeriesRefArgs,\n  defaultParams: [''],\n});\n\naddFuncDef({\n  name: 'averageSeries',\n  shortName: 'avg',\n  category: 'Combine',\n  params: optionalSeriesRefArgs,\n  defaultParams: [''],\n});\n\naddFuncDef({\n  name: 'rangeOfSeries',\n  category: 'Combine',\n});\n\naddFuncDef({\n  name: 'percentileOfSeries',\n  category: 'Combine',\n  params: [{ name: 'n', type: 'int' }, { name: 'interpolate', type: 'boolean', options: ['true', 'false'] }],\n  defaultParams: [95, 'false'],\n});\n\naddFuncDef({\n  name: 'sumSeriesWithWildcards',\n  category: 'Combine',\n  params: [{ name: 'node', type: 'int', multiple: true }],\n  defaultParams: [3],\n});\n\naddFuncDef({\n  name: 'maxSeries',\n  shortName: 'max',\n  category: 'Combine',\n});\n\naddFuncDef({\n  name: 'minSeries',\n  shortName: 'min',\n  category: 'Combine',\n});\n\naddFuncDef({\n  name: 'averageSeriesWithWildcards',\n  category: 'Combine',\n  params: [{ name: 'node', type: 'int', multiple: true }],\n  defaultParams: [3],\n});\n\naddFuncDef({\n  name: 'alias',\n  category: 'Alias',\n  params: [{ name: 'alias', type: 'string' }],\n  defaultParams: ['alias'],\n});\n\naddFuncDef({\n  name: 'aliasSub',\n  category: 'Alias',\n  params: [{ name: 'search', type: 'string' }, { name: 'replace', type: 'string' }],\n  defaultParams: ['', '\\\\1'],\n});\n\naddFuncDef({\n  name: 'consolidateBy',\n  category: 'Special',\n  params: [\n    {\n      name: 'function',\n      type: 'string',\n      options: ['sum', 'average', 'min', 'max'],\n    },\n  ],\n  defaultParams: ['max'],\n});\n\naddFuncDef({\n  name: 'cumulative',\n  category: 'Special',\n  params: [],\n  defaultParams: [],\n});\n\naddFuncDef({\n  name: 'groupByNode',\n  category: 'Combine',\n  params: [\n    {\n      name: 'node',\n      type: 'int',\n      options: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12],\n    },\n    {\n      name: 'function',\n      type: 'string',\n      options: ['sum', 'avg', 'maxSeries'],\n    },\n  ],\n  defaultParams: [3, 'sum'],\n});\n\naddFuncDef({\n  name: 'aliasByNode',\n  category: 'Alias',\n  params: [\n    {\n      name: 'node',\n      type: 'int',\n      options: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12],\n      multiple: true,\n    },\n  ],\n  defaultParams: [3],\n});\n\naddFuncDef({\n  name: 'substr',\n  category: 'Special',\n  params: [\n    {\n      name: 'start',\n      type: 'int',\n      options: [-6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12],\n    },\n    {\n      name: 'stop',\n      type: 'int',\n      options: [-6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12],\n    },\n  ],\n  defaultParams: [0, 0],\n});\n\naddFuncDef({\n  name: 'sortByName',\n  category: 'Sorting',\n  params: [\n    {\n      name: 'natural',\n      type: 'boolean',\n      options: ['true', 'false'],\n      optional: true,\n    },\n  ],\n  defaultParams: ['false'],\n});\n\naddFuncDef({\n  name: 'sortByMaxima',\n  category: 'Sorting',\n});\n\naddFuncDef({\n  name: 'sortByMinima',\n  category: 'Sorting',\n});\n\naddFuncDef({\n  name: 'sortByTotal',\n  category: 'Sorting',\n});\n\naddFuncDef({\n  name: 'aliasByMetric',\n  category: 'Alias',\n});\n\naddFuncDef({\n  name: 'randomWalk',\n  fake: true,\n  category: 'Special',\n  params: [{ name: 'name', type: 'string' }],\n  defaultParams: ['randomWalk'],\n});\n\naddFuncDef({\n  name: 'countSeries',\n  category: 'Combine',\n});\n\naddFuncDef({\n  name: 'constantLine',\n  category: 'Special',\n  params: [{ name: 'value', type: 'int' }],\n  defaultParams: [10],\n});\n\naddFuncDef({\n  name: 'cactiStyle',\n  category: 'Special',\n});\n\naddFuncDef({\n  name: 'keepLastValue',\n  category: 'Transform',\n  params: [{ name: 'n', type: 'int' }],\n  defaultParams: [100],\n});\n\naddFuncDef({\n  name: 'changed',\n  category: 'Special',\n  params: [],\n  defaultParams: [],\n});\n\naddFuncDef({\n  name: 'scale',\n  category: 'Transform',\n  params: [{ name: 'factor', type: 'int' }],\n  defaultParams: [1],\n});\n\naddFuncDef({\n  name: 'offset',\n  category: 'Transform',\n  params: [{ name: 'amount', type: 'int' }],\n  defaultParams: [10],\n});\n\naddFuncDef({\n  name: 'transformNull',\n  category: 'Transform',\n  params: [{ name: 'amount', type: 'int' }],\n  defaultParams: [0],\n});\n\naddFuncDef({\n  name: 'integral',\n  category: 'Transform',\n});\n\naddFuncDef({\n  name: 'derivative',\n  category: 'Transform',\n});\n\naddFuncDef({\n  name: 'nonNegativeDerivative',\n  category: 'Transform',\n  params: [{ name: 'max value or 0', type: 'int', optional: true }],\n  defaultParams: [''],\n});\n\naddFuncDef({\n  name: 'timeShift',\n  category: 'Transform',\n  params: [\n    {\n      name: 'amount',\n      type: 'select',\n      options: ['1h', '6h', '12h', '1d', '2d', '7d', '14d', '30d'],\n    },\n  ],\n  defaultParams: ['1d'],\n});\n\naddFuncDef({\n  name: 'timeStack',\n  category: 'Transform',\n  params: [\n    {\n      name: 'timeShiftUnit',\n      type: 'select',\n      options: ['1h', '6h', '12h', '1d', '2d', '7d', '14d', '30d'],\n    },\n    { name: 'timeShiftStart', type: 'int' },\n    { name: 'timeShiftEnd', type: 'int' },\n  ],\n  defaultParams: ['1d', 0, 7],\n});\n\naddFuncDef({\n  name: 'summarize',\n  category: 'Transform',\n  params: [\n    { name: 'interval', type: 'string' },\n    {\n      name: 'func',\n      type: 'select',\n      options: ['sum', 'avg', 'min', 'max', 'last'],\n    },\n    {\n      name: 'alignToFrom',\n      type: 'boolean',\n      optional: true,\n      options: ['false', 'true'],\n    },\n  ],\n  defaultParams: ['1h', 'sum', 'false'],\n});\n\naddFuncDef({\n  name: 'smartSummarize',\n  category: 'Transform',\n  params: [\n    { name: 'interval', type: 'string' },\n    {\n      name: 'func',\n      type: 'select',\n      options: ['sum', 'avg', 'min', 'max', 'last'],\n    },\n  ],\n  defaultParams: ['1h', 'sum'],\n});\n\naddFuncDef({\n  name: 'absolute',\n  category: 'Transform',\n});\n\naddFuncDef({\n  name: 'hitcount',\n  category: 'Transform',\n  params: [{ name: 'interval', type: 'string' }],\n  defaultParams: ['10s'],\n});\n\naddFuncDef({\n  name: 'log',\n  category: 'Transform',\n  params: [{ name: 'base', type: 'int' }],\n  defaultParams: ['10'],\n});\n\naddFuncDef({\n  name: 'averageAbove',\n  category: 'Filter Series',\n  params: [{ name: 'n', type: 'int' }],\n  defaultParams: [25],\n});\n\naddFuncDef({\n  name: 'averageBelow',\n  category: 'Filter Series',\n  params: [{ name: 'n', type: 'int' }],\n  defaultParams: [25],\n});\n\naddFuncDef({\n  name: 'currentAbove',\n  category: 'Filter Series',\n  params: [{ name: 'n', type: 'int' }],\n  defaultParams: [25],\n});\n\naddFuncDef({\n  name: 'currentBelow',\n  category: 'Filter Series',\n  params: [{ name: 'n', type: 'int' }],\n  defaultParams: [25],\n});\n\naddFuncDef({\n  name: 'maximumAbove',\n  category: 'Filter Series',\n  params: [{ name: 'value', type: 'int' }],\n  defaultParams: [0],\n});\n\naddFuncDef({\n  name: 'maximumBelow',\n  category: 'Filter Series',\n  params: [{ name: 'value', type: 'int' }],\n  defaultParams: [0],\n});\n\naddFuncDef({\n  name: 'minimumAbove',\n  category: 'Filter Series',\n  params: [{ name: 'value', type: 'int' }],\n  defaultParams: [0],\n});\n\naddFuncDef({\n  name: 'minimumBelow',\n  category: 'Filter Series',\n  params: [{ name: 'value', type: 'int' }],\n  defaultParams: [0],\n});\n\naddFuncDef({\n  name: 'limit',\n  category: 'Filter Series',\n  params: [{ name: 'n', type: 'int' }],\n  defaultParams: [5],\n});\n\naddFuncDef({\n  name: 'mostDeviant',\n  category: 'Filter Series',\n  params: [{ name: 'n', type: 'int' }],\n  defaultParams: [10],\n});\n\naddFuncDef({\n  name: 'exclude',\n  category: 'Filter Series',\n  params: [{ name: 'exclude', type: 'string' }],\n  defaultParams: ['exclude'],\n});\n\naddFuncDef({\n  name: 'highestCurrent',\n  category: 'Filter Series',\n  params: [{ name: 'count', type: 'int' }],\n  defaultParams: [5],\n});\n\naddFuncDef({\n  name: 'highestMax',\n  category: 'Filter Series',\n  params: [{ name: 'count', type: 'int' }],\n  defaultParams: [5],\n});\n\naddFuncDef({\n  name: 'lowestCurrent',\n  category: 'Filter Series',\n  params: [{ name: 'count', type: 'int' }],\n  defaultParams: [5],\n});\n\naddFuncDef({\n  name: 'movingAverage',\n  category: 'Calculate',\n  params: [\n    {\n      name: 'windowSize',\n      type: 'int_or_interval',\n      options: ['5', '7', '10', '5min', '10min', '30min', '1hour'],\n    },\n  ],\n  defaultParams: [10],\n});\n\naddFuncDef({\n  name: 'movingMedian',\n  category: 'Calculate',\n  params: [\n    {\n      name: 'windowSize',\n      type: 'int_or_interval',\n      options: ['5', '7', '10', '5min', '10min', '30min', '1hour'],\n    },\n  ],\n  defaultParams: ['5'],\n});\n\naddFuncDef({\n  name: 'stdev',\n  category: 'Calculate',\n  params: [{ name: 'n', type: 'int' }, { name: 'tolerance', type: 'int' }],\n  defaultParams: [5, 0.1],\n});\n\naddFuncDef({\n  name: 'highestAverage',\n  category: 'Filter Series',\n  params: [{ name: 'count', type: 'int' }],\n  defaultParams: [5],\n});\n\naddFuncDef({\n  name: 'lowestAverage',\n  category: 'Filter Series',\n  params: [{ name: 'count', type: 'int' }],\n  defaultParams: [5],\n});\n\naddFuncDef({\n  name: 'removeAbovePercentile',\n  category: 'Filter Data',\n  params: [{ name: 'n', type: 'int' }],\n  defaultParams: [5],\n});\n\naddFuncDef({\n  name: 'removeAboveValue',\n  category: 'Filter Data',\n  params: [{ name: 'n', type: 'int' }],\n  defaultParams: [5],\n});\n\naddFuncDef({\n  name: 'removeBelowPercentile',\n  category: 'Filter Data',\n  params: [{ name: 'n', type: 'int' }],\n  defaultParams: [5],\n});\n\naddFuncDef({\n  name: 'removeBelowValue',\n  category: 'Filter Data',\n  params: [{ name: 'n', type: 'int' }],\n  defaultParams: [5],\n});\n\naddFuncDef({\n  name: 'useSeriesAbove',\n  category: 'Filter Series',\n  params: [{ name: 'value', type: 'int' }, { name: 'search', type: 'string' }, { name: 'replace', type: 'string' }],\n  defaultParams: [0, 'search', 'replace'],\n});\n\n////////////////////\n// Graphite 1.0.x //\n////////////////////\n\naddFuncDef({\n  name: 'aggregateLine',\n  category: 'Calculate',\n  params: [\n    {\n      name: 'func',\n      type: 'select',\n      options: ['sum', 'avg', 'min', 'max', 'last'],\n    },\n  ],\n  defaultParams: ['avg'],\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'averageOutsidePercentile',\n  category: 'Filter Series',\n  params: [{ name: 'n', type: 'int' }],\n  defaultParams: [95],\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'delay',\n  category: 'Transform',\n  params: [{ name: 'steps', type: 'int' }],\n  defaultParams: [1],\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'exponentialMovingAverage',\n  category: 'Calculate',\n  params: [\n    {\n      name: 'windowSize',\n      type: 'int_or_interval',\n      options: ['5', '7', '10', '5min', '10min', '30min', '1hour'],\n    },\n  ],\n  defaultParams: [10],\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'fallbackSeries',\n  category: 'Special',\n  params: [{ name: 'fallback', type: 'string' }],\n  defaultParams: ['constantLine(0)'],\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'grep',\n  category: 'Filter Series',\n  params: [{ name: 'grep', type: 'string' }],\n  defaultParams: ['grep'],\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'groupByNodes',\n  category: 'Combine',\n  params: [\n    {\n      name: 'function',\n      type: 'string',\n      options: ['sum', 'avg', 'maxSeries'],\n    },\n    {\n      name: 'node',\n      type: 'int',\n      options: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12],\n      multiple: true,\n    },\n  ],\n  defaultParams: ['sum', 3],\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'integralByInterval',\n  category: 'Transform',\n  params: [\n    {\n      name: 'intervalUnit',\n      type: 'select',\n      options: ['1h', '6h', '12h', '1d', '2d', '7d', '14d', '30d'],\n    },\n  ],\n  defaultParams: ['1d'],\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'interpolate',\n  category: 'Transform',\n  params: [{ name: 'limit', type: 'int', optional: true }],\n  defaultParams: [],\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'invert',\n  category: 'Transform',\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'isNonNull',\n  category: 'Combine',\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'linearRegression',\n  category: 'Calculate',\n  params: [\n    {\n      name: 'startSourceAt',\n      type: 'select',\n      options: ['-1h', '-6h', '-12h', '-1d', '-2d', '-7d', '-14d', '-30d'],\n      optional: true,\n    },\n    {\n      name: 'endSourceAt',\n      type: 'select',\n      options: ['-1h', '-6h', '-12h', '-1d', '-2d', '-7d', '-14d', '-30d'],\n      optional: true,\n    },\n  ],\n  defaultParams: [],\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'mapSeries',\n  shortName: 'map',\n  params: [{ name: 'node', type: 'int' }],\n  defaultParams: [3],\n  category: 'Combine',\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'movingMin',\n  category: 'Calculate',\n  params: [\n    {\n      name: 'windowSize',\n      type: 'int_or_interval',\n      options: ['5', '7', '10', '5min', '10min', '30min', '1hour'],\n    },\n  ],\n  defaultParams: [10],\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'movingMax',\n  category: 'Calculate',\n  params: [\n    {\n      name: 'windowSize',\n      type: 'int_or_interval',\n      options: ['5', '7', '10', '5min', '10min', '30min', '1hour'],\n    },\n  ],\n  defaultParams: [10],\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'movingSum',\n  category: 'Calculate',\n  params: [\n    {\n      name: 'windowSize',\n      type: 'int_or_interval',\n      options: ['5', '7', '10', '5min', '10min', '30min', '1hour'],\n    },\n  ],\n  defaultParams: [10],\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'multiplySeriesWithWildcards',\n  category: 'Combine',\n  params: [\n    {\n      name: 'position',\n      type: 'int',\n      options: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12],\n      multiple: true,\n    },\n  ],\n  defaultParams: [2],\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'offsetToZero',\n  category: 'Transform',\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'pow',\n  category: 'Transform',\n  params: [{ name: 'factor', type: 'int' }],\n  defaultParams: [10],\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'powSeries',\n  category: 'Transform',\n  params: optionalSeriesRefArgs,\n  defaultParams: [''],\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'reduceSeries',\n  shortName: 'reduce',\n  params: [\n    {\n      name: 'function',\n      type: 'string',\n      options: ['asPercent', 'diffSeries', 'divideSeries'],\n    },\n    {\n      name: 'reduceNode',\n      type: 'int',\n      options: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],\n    },\n    { name: 'reduceMatchers', type: 'string', multiple: true },\n  ],\n  defaultParams: ['asPercent', 2, 'used_bytes'],\n  category: 'Combine',\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'removeBetweenPercentile',\n  category: 'Filter Series',\n  params: [{ name: 'n', type: 'int' }],\n  defaultParams: [95],\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'removeEmptySeries',\n  category: 'Filter Series',\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'squareRoot',\n  category: 'Transform',\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'timeSlice',\n  category: 'Transform',\n  params: [\n    {\n      name: 'startSliceAt',\n      type: 'select',\n      options: ['-1h', '-6h', '-12h', '-1d', '-2d', '-7d', '-14d', '-30d'],\n    },\n    {\n      name: 'endSliceAt',\n      type: 'select',\n      options: ['-1h', '-6h', '-12h', '-1d', '-2d', '-7d', '-14d', '-30d'],\n      optional: true,\n    },\n  ],\n  defaultParams: ['-1h'],\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'weightedAverage',\n  category: 'Combine',\n  params: [\n    { name: 'other', type: 'value_or_series', optional: true },\n    {\n      name: 'node',\n      type: 'int',\n      options: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12],\n    },\n  ],\n  defaultParams: ['#A', 4],\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'seriesByTag',\n  category: 'Special',\n  params: [{ name: 'tagExpression', type: 'string', multiple: true }],\n  version: '1.1',\n});\n\naddFuncDef({\n  name: 'groupByTags',\n  category: 'Combine',\n  params: [\n    {\n      name: 'function',\n      type: 'string',\n      options: ['sum', 'avg', 'maxSeries'],\n    },\n    { name: 'tag', type: 'string', multiple: true },\n  ],\n  defaultParams: ['sum', 'tag'],\n  version: '1.1',\n});\n\naddFuncDef({\n  name: 'aliasByTags',\n  category: 'Alias',\n  params: [{ name: 'tag', type: 'string', multiple: true }],\n  defaultParams: ['tag'],\n  version: '1.1',\n});\n\nfunction isVersionRelatedFunction(obj, graphiteVersion) {\n  return !obj.version || isVersionGtOrEq(graphiteVersion, obj.version);\n}\n\nexport class FuncInstance {\n  def: any;\n  params: any;\n  text: any;\n  added: boolean;\n\n  constructor(funcDef, options) {\n    this.def = funcDef;\n    this.params = [];\n\n    if (options && options.withDefaultParams) {\n      this.params = funcDef.defaultParams.slice(0);\n    }\n\n    this.updateText();\n  }\n\n  render(metricExp) {\n    const str = this.def.name + '(';\n\n    const parameters = _.map(this.params, (value, index) => {\n      let paramType;\n      if (index < this.def.params.length) {\n        paramType = this.def.params[index].type;\n      } else if (_.get(_.last(this.def.params), 'multiple')) {\n        paramType = _.get(_.last(this.def.params), 'type');\n      }\n      // param types that should never be quoted\n      if (_.includes(['value_or_series', 'boolean', 'int', 'float', 'node'], paramType)) {\n        return value;\n      }\n      // param types that might be quoted\n      if (_.includes(['int_or_interval', 'node_or_tag'], paramType) && _.isFinite(+value)) {\n        return _.toString(+value);\n      }\n      return \"'\" + value + \"'\";\n    });\n\n    // don't send any blank parameters to graphite\n    while (parameters[parameters.length - 1] === '') {\n      parameters.pop();\n    }\n\n    if (metricExp) {\n      parameters.unshift(metricExp);\n    }\n\n    return str + parameters.join(', ') + ')';\n  }\n\n  _hasMultipleParamsInString(strValue, index) {\n    if (strValue.indexOf(',') === -1) {\n      return false;\n    }\n\n    if (this.def.params[index + 1] && this.def.params[index + 1].optional) {\n      return true;\n    }\n\n    if (index + 1 >= this.def.params.length && _.get(_.last(this.def.params), 'multiple')) {\n      return true;\n    }\n\n    return false;\n  }\n\n  updateParam(strValue, index) {\n    // handle optional parameters\n    // if string contains ',' and next param is optional, split and update both\n    if (this._hasMultipleParamsInString(strValue, index)) {\n      _.each(strValue.split(','), (partVal, idx) => {\n        this.updateParam(partVal.trim(), index + idx);\n      });\n      return;\n    }\n\n    if (strValue === '' && (index >= this.def.params.length || this.def.params[index].optional)) {\n      this.params.splice(index, 1);\n    } else {\n      this.params[index] = strValue;\n    }\n\n    this.updateText();\n  }\n\n  updateText() {\n    if (this.params.length === 0) {\n      this.text = this.def.name + '()';\n      return;\n    }\n\n    let text = this.def.name + '(';\n    text += this.params.join(', ');\n    text += ')';\n    this.text = text;\n  }\n}\n\nfunction createFuncInstance(funcDef, options?, idx?) {\n  if (_.isString(funcDef)) {\n    funcDef = getFuncDef(funcDef, idx);\n  }\n  return new FuncInstance(funcDef, options);\n}\n\nfunction getFuncDef(name, idx?) {\n  if (!(idx || index)[name]) {\n    throw { message: 'Method not found ' + name };\n  }\n  return (idx || index)[name];\n}\n\nfunction getFuncDefs(graphiteVersion, idx?) {\n  const funcs = {};\n  _.forEach(idx || index, function(funcDef) {\n    if (isVersionRelatedFunction(funcDef, graphiteVersion)) {\n      funcs[funcDef.name] = _.assign({}, funcDef, {\n        params: _.filter(funcDef.params, function(param) {\n          return isVersionRelatedFunction(param, graphiteVersion);\n        }),\n      });\n    }\n  });\n  return funcs;\n}\n\n// parse response from graphite /functions endpoint into internal format\nfunction parseFuncDefs(rawDefs) {\n  const funcDefs = {};\n\n  _.forEach(rawDefs || {}, (funcDef, funcName) => {\n    // skip graphite graph functions\n    if (funcDef.group === 'Graph') {\n      return;\n    }\n\n    let description = funcDef.description;\n    if (description) {\n      // tidy up some pydoc syntax that rst2html can't handle\n      description = description\n        .replace(/:py:func:`(.+)( <[^>]*>)?`/g, '``$1``')\n        .replace(/.. seealso:: /g, 'See also: ')\n        .replace(/.. code-block *:: *none/g, '.. code-block::');\n    }\n\n    const func = {\n      name: funcDef.name,\n      description: description,\n      category: funcDef.group,\n      params: [],\n      defaultParams: [],\n      fake: false,\n    };\n\n    // get rid of the first \"seriesList\" param\n    if (/^seriesLists?$/.test(_.get(funcDef, 'params[0].type', ''))) {\n      // handle functions that accept multiple seriesLists\n      // we leave the param in place but mark it optional, so users can add more series if they wish\n      if (funcDef.params[0].multiple) {\n        funcDef.params[0].required = false;\n        // otherwise chop off the first param, it'll be handled separately\n      } else {\n        funcDef.params.shift();\n      }\n      // tag function as fake\n    } else {\n      func.fake = true;\n    }\n\n    _.forEach(funcDef.params, rawParam => {\n      const param = {\n        name: rawParam.name,\n        type: 'string',\n        optional: !rawParam.required,\n        multiple: !!rawParam.multiple,\n        options: undefined,\n      };\n\n      if (rawParam.default !== undefined) {\n        func.defaultParams.push(_.toString(rawParam.default));\n      } else if (rawParam.suggestions) {\n        func.defaultParams.push(_.toString(rawParam.suggestions[0]));\n      } else {\n        func.defaultParams.push('');\n      }\n\n      if (rawParam.type === 'boolean') {\n        param.type = 'boolean';\n        param.options = ['true', 'false'];\n      } else if (rawParam.type === 'integer') {\n        param.type = 'int';\n      } else if (rawParam.type === 'float') {\n        param.type = 'float';\n      } else if (rawParam.type === 'node') {\n        param.type = 'node';\n        param.options = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12'];\n      } else if (rawParam.type === 'nodeOrTag') {\n        param.type = 'node_or_tag';\n        param.options = ['name', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12'];\n      } else if (rawParam.type === 'intOrInterval') {\n        param.type = 'int_or_interval';\n      } else if (rawParam.type === 'seriesList') {\n        param.type = 'value_or_series';\n      }\n\n      if (rawParam.options) {\n        param.options = _.map(rawParam.options, _.toString);\n      } else if (rawParam.suggestions) {\n        param.options = _.map(rawParam.suggestions, _.toString);\n      }\n\n      func.params.push(param);\n    });\n\n    funcDefs[funcName] = func;\n  });\n\n  return funcDefs;\n}\n\nexport default {\n  createFuncInstance: createFuncInstance,\n  getFuncDef: getFuncDef,\n  getFuncDefs: getFuncDefs,\n  parseFuncDefs: parseFuncDefs,\n};\n","import _ from 'lodash';\nimport * as dateMath from 'app/core/utils/datemath';\nimport { isVersionGtOrEq, SemVersion } from 'app/core/utils/version';\nimport gfunc from './gfunc';\n\n/** @ngInject */\nexport function GraphiteDatasource(this: any, instanceSettings, $q, backendSrv, templateSrv) {\n  this.basicAuth = instanceSettings.basicAuth;\n  this.url = instanceSettings.url;\n  this.name = instanceSettings.name;\n  this.graphiteVersion = instanceSettings.jsonData.graphiteVersion || '0.9';\n  this.supportsTags = supportsTags(this.graphiteVersion);\n  this.cacheTimeout = instanceSettings.cacheTimeout;\n  this.withCredentials = instanceSettings.withCredentials;\n  this.render_method = instanceSettings.render_method || 'POST';\n  this.funcDefs = null;\n  this.funcDefsPromise = null;\n\n  this.getQueryOptionsInfo = function() {\n    return {\n      maxDataPoints: true,\n      cacheTimeout: true,\n      links: [\n        {\n          text: '帮助',\n          url: 'http://docs.grafana.org/features/datasources/graphite/#using-graphite-in-grafana',\n        },\n      ],\n    };\n  };\n\n  this.query = function(options) {\n    const graphOptions = {\n      from: this.translateTime(options.rangeRaw.from, false),\n      until: this.translateTime(options.rangeRaw.to, true),\n      targets: options.targets,\n      format: options.format,\n      cacheTimeout: options.cacheTimeout || this.cacheTimeout,\n      maxDataPoints: options.maxDataPoints,\n    };\n\n    const params = this.buildGraphiteParams(graphOptions, options.scopedVars);\n    if (params.length === 0) {\n      return $q.when({ data: [] });\n    }\n\n    const httpOptions: any = {\n      method: 'POST',\n      url: '/render',\n      data: params.join('&'),\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n      },\n    };\n\n    this.addTracingHeaders(httpOptions, options);\n\n    if (options.panelId) {\n      httpOptions.requestId = this.name + '.panelId.' + options.panelId;\n    }\n\n    return this.doGraphiteRequest(httpOptions).then(this.convertDataPointsToMs);\n  };\n\n  this.addTracingHeaders = function(httpOptions, options) {\n    const proxyMode = !this.url.match(/^http/);\n    if (proxyMode) {\n      httpOptions.headers['X-Dashboard-Id'] = options.dashboardId;\n      httpOptions.headers['X-Panel-Id'] = options.panelId;\n    }\n  };\n\n  this.convertDataPointsToMs = function(result) {\n    if (!result || !result.data) {\n      return [];\n    }\n    for (let i = 0; i < result.data.length; i++) {\n      const series = result.data[i];\n      for (let y = 0; y < series.datapoints.length; y++) {\n        series.datapoints[y][1] *= 1000;\n      }\n    }\n    return result;\n  };\n\n  this.parseTags = function(tagString) {\n    let tags = [];\n    tags = tagString.split(',');\n    if (tags.length === 1) {\n      tags = tagString.split(' ');\n      if (tags[0] === '') {\n        tags = [];\n      }\n    }\n    return tags;\n  };\n\n  this.annotationQuery = function(options) {\n    // Graphite metric as annotation\n    if (options.annotation.target) {\n      const target = templateSrv.replace(options.annotation.target, {}, 'glob');\n      const graphiteQuery = {\n        rangeRaw: options.rangeRaw,\n        targets: [{ target: target }],\n        format: 'json',\n        maxDataPoints: 100,\n      };\n\n      return this.query(graphiteQuery).then(function(result) {\n        const list = [];\n\n        for (let i = 0; i < result.data.length; i++) {\n          const target = result.data[i];\n\n          for (let y = 0; y < target.datapoints.length; y++) {\n            const datapoint = target.datapoints[y];\n            if (!datapoint[0]) {\n              continue;\n            }\n\n            list.push({\n              annotation: options.annotation,\n              time: datapoint[1],\n              title: target.target,\n            });\n          }\n        }\n\n        return list;\n      });\n    } else {\n      // Graphite event as annotation\n      const tags = templateSrv.replace(options.annotation.tags);\n      return this.events({ range: options.rangeRaw, tags: tags }).then(results => {\n        const list = [];\n        for (let i = 0; i < results.data.length; i++) {\n          const e = results.data[i];\n\n          let tags = e.tags;\n          if (_.isString(e.tags)) {\n            tags = this.parseTags(e.tags);\n          }\n\n          list.push({\n            annotation: options.annotation,\n            time: e.when * 1000,\n            title: e.what,\n            tags: tags,\n            text: e.data,\n          });\n        }\n\n        return list;\n      });\n    }\n  };\n\n  this.events = function(options) {\n    try {\n      let tags = '';\n      if (options.tags) {\n        tags = '&tags=' + options.tags;\n      }\n      return this.doGraphiteRequest({\n        method: 'GET',\n        url:\n          '/events/get_data?from=' +\n          this.translateTime(options.range.from, false) +\n          '&until=' +\n          this.translateTime(options.range.to, true) +\n          tags,\n      });\n    } catch (err) {\n      return $q.reject(err);\n    }\n  };\n\n  this.targetContainsTemplate = function(target) {\n    return templateSrv.variableExists(target.target);\n  };\n\n  this.translateTime = function(date, roundUp) {\n    if (_.isString(date)) {\n      if (date === 'now') {\n        return 'now';\n      } else if (date.indexOf('now-') >= 0 && date.indexOf('/') === -1) {\n        date = date.substring(3);\n        date = date.replace('m', 'min');\n        date = date.replace('M', 'mon');\n        return date;\n      }\n      date = dateMath.parse(date, roundUp);\n    }\n\n    // graphite' s from filter is exclusive\n    // here we step back one minute in order\n    // to guarantee that we get all the data that\n    // exists for the specified range\n    if (roundUp) {\n      if (date.get('s')) {\n        date.add(1, 'm');\n      }\n    } else if (roundUp === false) {\n      if (date.get('s')) {\n        date.subtract(1, 'm');\n      }\n    }\n\n    return date.unix();\n  };\n\n  this.metricFindQuery = function(query, optionalOptions) {\n    const options = optionalOptions || {};\n    const interpolatedQuery = templateSrv.replace(query);\n\n    // special handling for tag_values(<tag>[,<expression>]*), this is used for template variables\n    let matches = interpolatedQuery.match(/^tag_values\\(([^,]+)((, *[^,]+)*)\\)$/);\n    if (matches) {\n      const expressions = [];\n      const exprRegex = /, *([^,]+)/g;\n      let match;\n      while ((match = exprRegex.exec(matches[2])) !== null) {\n        expressions.push(match[1]);\n      }\n      options.limit = 10000;\n      return this.getTagValuesAutoComplete(expressions, matches[1], undefined, options);\n    }\n\n    // special handling for tags(<expression>[,<expression>]*), this is used for template variables\n    matches = interpolatedQuery.match(/^tags\\(([^,]*)((, *[^,]+)*)\\)$/);\n    if (matches) {\n      const expressions = [];\n      if (matches[1]) {\n        expressions.push(matches[1]);\n        const exprRegex = /, *([^,]+)/g;\n        let match;\n        while ((match = exprRegex.exec(matches[2])) !== null) {\n          expressions.push(match[1]);\n        }\n      }\n      options.limit = 10000;\n      return this.getTagsAutoComplete(expressions, undefined, options);\n    }\n\n    const httpOptions: any = {\n      method: 'GET',\n      url: '/metrics/find',\n      params: {\n        query: interpolatedQuery,\n      },\n      // for cancellations\n      requestId: options.requestId,\n    };\n\n    if (options.range) {\n      httpOptions.params.from = this.translateTime(options.range.from, false);\n      httpOptions.params.until = this.translateTime(options.range.to, true);\n    }\n\n    return this.doGraphiteRequest(httpOptions).then(results => {\n      return _.map(results.data, metric => {\n        return {\n          text: metric.text,\n          expandable: metric.expandable ? true : false,\n        };\n      });\n    });\n  };\n\n  this.getTags = function(optionalOptions) {\n    const options = optionalOptions || {};\n\n    const httpOptions: any = {\n      method: 'GET',\n      url: '/tags',\n      // for cancellations\n      requestId: options.requestId,\n    };\n\n    if (options.range) {\n      httpOptions.params.from = this.translateTime(options.range.from, false);\n      httpOptions.params.until = this.translateTime(options.range.to, true);\n    }\n\n    return this.doGraphiteRequest(httpOptions).then(results => {\n      return _.map(results.data, tag => {\n        return {\n          text: tag.tag,\n          id: tag.id,\n        };\n      });\n    });\n  };\n\n  this.getTagValues = function(tag, optionalOptions) {\n    const options = optionalOptions || {};\n\n    const httpOptions: any = {\n      method: 'GET',\n      url: '/tags/' + templateSrv.replace(tag),\n      // for cancellations\n      requestId: options.requestId,\n    };\n\n    if (options.range) {\n      httpOptions.params.from = this.translateTime(options.range.from, false);\n      httpOptions.params.until = this.translateTime(options.range.to, true);\n    }\n\n    return this.doGraphiteRequest(httpOptions).then(results => {\n      if (results.data && results.data.values) {\n        return _.map(results.data.values, value => {\n          return {\n            text: value.value,\n            id: value.id,\n          };\n        });\n      } else {\n        return [];\n      }\n    });\n  };\n\n  this.getTagsAutoComplete = (expressions, tagPrefix, optionalOptions) => {\n    const options = optionalOptions || {};\n\n    const httpOptions: any = {\n      method: 'GET',\n      url: '/tags/autoComplete/tags',\n      params: {\n        expr: _.map(expressions, expression => templateSrv.replace((expression || '').trim())),\n      },\n      // for cancellations\n      requestId: options.requestId,\n    };\n\n    if (tagPrefix) {\n      httpOptions.params.tagPrefix = tagPrefix;\n    }\n    if (options.limit) {\n      httpOptions.params.limit = options.limit;\n    }\n    if (options.range) {\n      httpOptions.params.from = this.translateTime(options.range.from, false);\n      httpOptions.params.until = this.translateTime(options.range.to, true);\n    }\n\n    return this.doGraphiteRequest(httpOptions).then(results => {\n      if (results.data) {\n        return _.map(results.data, tag => {\n          return { text: tag };\n        });\n      } else {\n        return [];\n      }\n    });\n  };\n\n  this.getTagValuesAutoComplete = (expressions, tag, valuePrefix, optionalOptions) => {\n    const options = optionalOptions || {};\n\n    const httpOptions: any = {\n      method: 'GET',\n      url: '/tags/autoComplete/values',\n      params: {\n        expr: _.map(expressions, expression => templateSrv.replace((expression || '').trim())),\n        tag: templateSrv.replace((tag || '').trim()),\n      },\n      // for cancellations\n      requestId: options.requestId,\n    };\n\n    if (valuePrefix) {\n      httpOptions.params.valuePrefix = valuePrefix;\n    }\n    if (options.limit) {\n      httpOptions.params.limit = options.limit;\n    }\n    if (options.range) {\n      httpOptions.params.from = this.translateTime(options.range.from, false);\n      httpOptions.params.until = this.translateTime(options.range.to, true);\n    }\n\n    return this.doGraphiteRequest(httpOptions).then(results => {\n      if (results.data) {\n        return _.map(results.data, value => {\n          return { text: value };\n        });\n      } else {\n        return [];\n      }\n    });\n  };\n\n  this.getVersion = function(optionalOptions) {\n    const options = optionalOptions || {};\n\n    const httpOptions = {\n      method: 'GET',\n      url: '/version',\n      requestId: options.requestId,\n    };\n\n    return this.doGraphiteRequest(httpOptions)\n      .then(results => {\n        if (results.data) {\n          const semver = new SemVersion(results.data);\n          return semver.isValid() ? results.data : '';\n        }\n        return '';\n      })\n      .catch(() => {\n        return '';\n      });\n  };\n\n  this.createFuncInstance = function(funcDef, options?) {\n    return gfunc.createFuncInstance(funcDef, options, this.funcDefs);\n  };\n\n  this.getFuncDef = function(name) {\n    return gfunc.getFuncDef(name, this.funcDefs);\n  };\n\n  this.waitForFuncDefsLoaded = function() {\n    return this.getFuncDefs();\n  };\n\n  this.getFuncDefs = function() {\n    if (this.funcDefsPromise !== null) {\n      return this.funcDefsPromise;\n    }\n\n    if (!supportsFunctionIndex(this.graphiteVersion)) {\n      this.funcDefs = gfunc.getFuncDefs(this.graphiteVersion);\n      this.funcDefsPromise = Promise.resolve(this.funcDefs);\n      return this.funcDefsPromise;\n    }\n\n    const httpOptions = {\n      method: 'GET',\n      url: '/functions',\n    };\n\n    this.funcDefsPromise = this.doGraphiteRequest(httpOptions)\n      .then(results => {\n        if (results.status !== 200 || typeof results.data !== 'object') {\n          this.funcDefs = gfunc.getFuncDefs(this.graphiteVersion);\n        } else {\n          this.funcDefs = gfunc.parseFuncDefs(results.data);\n        }\n        return this.funcDefs;\n      })\n      .catch(err => {\n        console.log('Fetching graphite functions error', err);\n        this.funcDefs = gfunc.getFuncDefs(this.graphiteVersion);\n        return this.funcDefs;\n      });\n\n    return this.funcDefsPromise;\n  };\n\n  this.testDatasource = function() {\n    const query = {\n      panelId: 3,\n      rangeRaw: { from: 'now-1h', to: 'now' },\n      targets: [{ target: 'constantLine(100)' }],\n      maxDataPoints: 300,\n    };\n    return this.query(query).then(function() {\n      return { status: 'success', message: 'Data source is working' };\n    });\n  };\n\n  this.doGraphiteRequest = function(options) {\n    if (this.basicAuth || this.withCredentials) {\n      options.withCredentials = true;\n    }\n    if (this.basicAuth) {\n      options.headers = options.headers || {};\n      options.headers.Authorization = this.basicAuth;\n    }\n\n    options.url = this.url + options.url;\n    options.inspect = { type: 'graphite' };\n\n    return backendSrv.datasourceRequest(options);\n  };\n\n  this._seriesRefLetters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\n  this.buildGraphiteParams = function(options, scopedVars) {\n    const graphite_options = ['from', 'until', 'rawData', 'format', 'maxDataPoints', 'cacheTimeout'];\n    const clean_options = [],\n      targets = {};\n    let target, targetValue, i;\n    const regex = /\\#([A-Z])/g;\n    const intervalFormatFixRegex = /'(\\d+)m'/gi;\n    let hasTargets = false;\n\n    options['format'] = 'json';\n\n    function fixIntervalFormat(match) {\n      return match.replace('m', 'min').replace('M', 'mon');\n    }\n\n    for (i = 0; i < options.targets.length; i++) {\n      target = options.targets[i];\n      if (!target.target) {\n        continue;\n      }\n\n      if (!target.refId) {\n        target.refId = this._seriesRefLetters[i];\n      }\n\n      targetValue = templateSrv.replace(target.target, scopedVars);\n      targetValue = targetValue.replace(intervalFormatFixRegex, fixIntervalFormat);\n      targets[target.refId] = targetValue;\n    }\n\n    function nestedSeriesRegexReplacer(match, g1) {\n      return targets[g1] || match;\n    }\n\n    for (i = 0; i < options.targets.length; i++) {\n      target = options.targets[i];\n      if (!target.target) {\n        continue;\n      }\n\n      targetValue = targets[target.refId];\n      targetValue = targetValue.replace(regex, nestedSeriesRegexReplacer);\n      targets[target.refId] = targetValue;\n\n      if (!target.hide) {\n        hasTargets = true;\n        clean_options.push('target=' + encodeURIComponent(targetValue));\n      }\n    }\n\n    _.each(options, function(value, key) {\n      if (_.indexOf(graphite_options, key) === -1) {\n        return;\n      }\n      if (value) {\n        clean_options.push(key + '=' + encodeURIComponent(value));\n      }\n    });\n\n    if (!hasTargets) {\n      return [];\n    }\n\n    return clean_options;\n  };\n}\n\nfunction supportsTags(version: string): boolean {\n  return isVersionGtOrEq(version, '1.1');\n}\n\nfunction supportsFunctionIndex(version: string): boolean {\n  return isVersionGtOrEq(version, '1.1');\n}\n","import angular from 'angular';\nimport _ from 'lodash';\nimport $ from 'jquery';\nimport rst2html from 'rst2html';\nimport Drop from 'tether-drop';\n\n/** @ngInject */\nexport function graphiteAddFunc($compile) {\n  const inputTemplate =\n    '<input type=\"text\"' + ' class=\"gf-form-input\"' + ' spellcheck=\"false\" style=\"display:none\"></input>';\n\n  const buttonTemplate =\n    '<a class=\"gf-form-label query-part dropdown-toggle\"' +\n    ' tabindex=\"1\" gf-dropdown=\"functionMenu\" data-toggle=\"dropdown\">' +\n    '<i class=\"fa fa-plus\"></i></a>';\n\n  return {\n    link: function($scope, elem) {\n      const ctrl = $scope.ctrl;\n\n      const $input = $(inputTemplate);\n      const $button = $(buttonTemplate);\n\n      $input.appendTo(elem);\n      $button.appendTo(elem);\n\n      ctrl.datasource.getFuncDefs().then(function(funcDefs) {\n        const allFunctions = _.map(funcDefs, 'name').sort();\n\n        $scope.functionMenu = createFunctionDropDownMenu(funcDefs);\n\n        $input.attr('data-provide', 'typeahead');\n        $input.typeahead({\n          source: allFunctions,\n          minLength: 1,\n          items: 10,\n          updater: function(value) {\n            let funcDef = ctrl.datasource.getFuncDef(value);\n            if (!funcDef) {\n              // try find close match\n              value = value.toLowerCase();\n              funcDef = _.find(allFunctions, function(funcName) {\n                return funcName.toLowerCase().indexOf(value) === 0;\n              });\n\n              if (!funcDef) {\n                return '';\n              }\n            }\n\n            $scope.$apply(function() {\n              ctrl.addFunction(funcDef);\n            });\n\n            $input.trigger('blur');\n            return '';\n          },\n        });\n\n        $button.click(function() {\n          $button.hide();\n          $input.show();\n          $input.focus();\n        });\n\n        $input.keyup(function() {\n          elem.toggleClass('open', $input.val() === '');\n        });\n\n        $input.blur(function() {\n          // clicking the function dropdown menu won't\n          // work if you remove class at once\n          setTimeout(function() {\n            $input.val('');\n            $input.hide();\n            $button.show();\n            elem.removeClass('open');\n          }, 200);\n        });\n\n        $compile(elem.contents())($scope);\n      });\n\n      let drop;\n      const cleanUpDrop = function() {\n        if (drop) {\n          drop.destroy();\n          drop = null;\n        }\n      };\n\n      $(elem)\n        .on('mouseenter', 'ul.dropdown-menu li', () => {\n          cleanUpDrop();\n\n          let funcDef;\n          try {\n            funcDef = ctrl.datasource.getFuncDef($('a', this).text());\n          } catch (e) {\n            // ignore\n          }\n\n          if (funcDef && funcDef.description) {\n            let shortDesc = funcDef.description;\n            if (shortDesc.length > 500) {\n              shortDesc = shortDesc.substring(0, 497) + '...';\n            }\n\n            const contentElement = document.createElement('div');\n            contentElement.innerHTML = '<h4>' + funcDef.name + '</h4>' + rst2html(shortDesc);\n\n            drop = new Drop({\n              target: this,\n              content: contentElement,\n              classes: 'drop-popover',\n              openOn: 'always',\n              tetherOptions: {\n                attachment: 'bottom left',\n                targetAttachment: 'bottom right',\n              },\n            });\n          }\n        })\n        .on('mouseout', 'ul.dropdown-menu li', function() {\n          cleanUpDrop();\n        });\n\n      $scope.$on('$destroy', cleanUpDrop);\n    },\n  };\n}\n\nangular.module('grafana.directives').directive('graphiteAddFunc', graphiteAddFunc);\n\nfunction createFunctionDropDownMenu(funcDefs) {\n  const categories = {};\n\n  _.forEach(funcDefs, function(funcDef) {\n    if (!funcDef.category) {\n      return;\n    }\n    if (!categories[funcDef.category]) {\n      categories[funcDef.category] = [];\n    }\n    categories[funcDef.category].push({\n      text: funcDef.name,\n      click: \"ctrl.addFunction('\" + funcDef.name + \"')\",\n    });\n  });\n\n  return _.sortBy(\n    _.map(categories, function(submenu, category) {\n      return {\n        text: category,\n        submenu: _.sortBy(submenu, 'text'),\n      };\n    }),\n    'text'\n  );\n}\n","import angular from 'angular';\nimport _ from 'lodash';\nimport $ from 'jquery';\nimport rst2html from 'rst2html';\n\n/** @ngInject */\nexport function graphiteFuncEditor($compile, templateSrv, popoverSrv) {\n  const funcSpanTemplate = '<a ng-click=\"\">{{func.def.name}}</a><span>(</span>';\n  const paramTemplate =\n    '<input type=\"text\" style=\"display:none\"' + ' class=\"input-small tight-form-func-param\"></input>';\n\n  const funcControlsTemplate = `\n    <div class=\"tight-form-func-controls\">\n      <span class=\"pointer fa fa-arrow-left\"></span>\n      <span class=\"pointer fa fa-question-circle\"></span>\n      <span class=\"pointer fa fa-remove\" ></span>\n      <span class=\"pointer fa fa-arrow-right\"></span>\n    </div>`;\n\n  return {\n    restrict: 'A',\n    link: function postLink($scope, elem) {\n      const $funcLink = $(funcSpanTemplate);\n      const $funcControls = $(funcControlsTemplate);\n      const ctrl = $scope.ctrl;\n      const func = $scope.func;\n      let scheduledRelink = false;\n      let paramCountAtLink = 0;\n      let cancelBlur = null;\n\n      function clickFuncParam(this: any, paramIndex) {\n        /*jshint validthis:true */\n\n        const $link = $(this);\n        const $comma = $link.prev('.comma');\n        const $input = $link.next();\n\n        $input.val(func.params[paramIndex]);\n\n        $comma.removeClass('query-part__last');\n        $link.hide();\n        $input.show();\n        $input.focus();\n        $input.select();\n\n        const typeahead = $input.data('typeahead');\n        if (typeahead) {\n          $input.val('');\n          typeahead.lookup();\n        }\n      }\n\n      function scheduledRelinkIfNeeded() {\n        if (paramCountAtLink === func.params.length) {\n          return;\n        }\n\n        if (!scheduledRelink) {\n          scheduledRelink = true;\n          setTimeout(function() {\n            relink();\n            scheduledRelink = false;\n          }, 200);\n        }\n      }\n\n      function paramDef(index) {\n        if (index < func.def.params.length) {\n          return func.def.params[index];\n        }\n        if (_.last(func.def.params).multiple) {\n          return _.assign({}, _.last(func.def.params), { optional: true });\n        }\n        return {};\n      }\n\n      function switchToLink(inputElem, paramIndex) {\n        /*jshint validthis:true */\n        const $input = $(inputElem);\n\n        clearTimeout(cancelBlur);\n        cancelBlur = null;\n\n        const $link = $input.prev();\n        const $comma = $link.prev('.comma');\n        const newValue = $input.val();\n\n        // remove optional empty params\n        if (newValue !== '' || paramDef(paramIndex).optional) {\n          func.updateParam(newValue, paramIndex);\n          $link.html(newValue ? templateSrv.highlightVariablesAsHtml(newValue) : '&nbsp;');\n        }\n\n        scheduledRelinkIfNeeded();\n\n        $scope.$apply(function() {\n          ctrl.targetChanged();\n        });\n\n        if ($link.hasClass('query-part__last') && newValue === '') {\n          $comma.addClass('query-part__last');\n        } else {\n          $link.removeClass('query-part__last');\n        }\n\n        $input.hide();\n        $link.show();\n      }\n\n      // this = input element\n      function inputBlur(this: any, paramIndex) {\n        /*jshint validthis:true */\n        const inputElem = this;\n        // happens long before the click event on the typeahead options\n        // need to have long delay because the blur\n        cancelBlur = setTimeout(function() {\n          switchToLink(inputElem, paramIndex);\n        }, 200);\n      }\n\n      function inputKeyPress(this: any, paramIndex, e) {\n        /*jshint validthis:true */\n        if (e.which === 13) {\n          $(this).blur();\n        }\n      }\n\n      function inputKeyDown(this: any) {\n        /*jshint validthis:true */\n        this.style.width = (3 + this.value.length) * 8 + 'px';\n      }\n\n      function addTypeahead($input, paramIndex) {\n        $input.attr('data-provide', 'typeahead');\n\n        let options = paramDef(paramIndex).options;\n        if (paramDef(paramIndex).type === 'int') {\n          options = _.map(options, function(val) {\n            return val.toString();\n          });\n        }\n\n        $input.typeahead({\n          source: options,\n          minLength: 0,\n          items: 20,\n          updater: function(value) {\n            $input.val(value);\n            switchToLink($input[0], paramIndex);\n            return value;\n          },\n        });\n\n        const typeahead = $input.data('typeahead');\n        typeahead.lookup = function() {\n          this.query = this.$element.val() || '';\n          return this.process(this.source);\n        };\n      }\n\n      function toggleFuncControls() {\n        const targetDiv = elem.closest('.tight-form');\n\n        if (elem.hasClass('show-function-controls')) {\n          elem.removeClass('show-function-controls');\n          targetDiv.removeClass('has-open-function');\n          $funcControls.hide();\n          return;\n        }\n\n        elem.addClass('show-function-controls');\n        targetDiv.addClass('has-open-function');\n\n        $funcControls.show();\n      }\n\n      function addElementsAndCompile() {\n        $funcControls.appendTo(elem);\n        $funcLink.appendTo(elem);\n\n        const defParams = _.clone(func.def.params);\n        const lastParam = _.last(func.def.params);\n\n        while (func.params.length >= defParams.length && lastParam && lastParam.multiple) {\n          defParams.push(_.assign({}, lastParam, { optional: true }));\n        }\n\n        _.each(defParams, function(param, index) {\n          if (param.optional && func.params.length < index) {\n            return false;\n          }\n\n          let paramValue = templateSrv.highlightVariablesAsHtml(func.params[index]);\n\n          const last = index >= func.params.length - 1 && param.optional && !paramValue;\n          if (last && param.multiple) {\n            paramValue = '+';\n          }\n\n          if (index > 0) {\n            $('<span class=\"comma' + (last ? ' query-part__last' : '') + '\">, </span>').appendTo(elem);\n          }\n\n          const $paramLink = $(\n            '<a ng-click=\"\" class=\"graphite-func-param-link' +\n              (last ? ' query-part__last' : '') +\n              '\">' +\n              (paramValue || '&nbsp;') +\n              '</a>'\n          );\n          const $input = $(paramTemplate);\n          $input.attr('placeholder', param.name);\n\n          paramCountAtLink++;\n\n          $paramLink.appendTo(elem);\n          $input.appendTo(elem);\n\n          $input.blur(_.partial(inputBlur, index));\n          $input.keyup(inputKeyDown);\n          $input.keypress(_.partial(inputKeyPress, index));\n          $paramLink.click(_.partial(clickFuncParam, index));\n\n          if (param.options) {\n            addTypeahead($input, index);\n          }\n\n          return true;\n        });\n\n        $('<span>)</span>').appendTo(elem);\n\n        $compile(elem.contents())($scope);\n      }\n\n      function ifJustAddedFocusFirstParam() {\n        if ($scope.func.added) {\n          $scope.func.added = false;\n          setTimeout(function() {\n            elem\n              .find('.graphite-func-param-link')\n              .first()\n              .click();\n          }, 10);\n        }\n      }\n\n      function registerFuncControlsToggle() {\n        $funcLink.click(toggleFuncControls);\n      }\n\n      function registerFuncControlsActions() {\n        $funcControls.click(function(e) {\n          const $target = $(e.target);\n          if ($target.hasClass('fa-remove')) {\n            toggleFuncControls();\n            $scope.$apply(function() {\n              ctrl.removeFunction($scope.func);\n            });\n            return;\n          }\n\n          if ($target.hasClass('fa-arrow-left')) {\n            $scope.$apply(function() {\n              _.move(ctrl.queryModel.functions, $scope.$index, $scope.$index - 1);\n              ctrl.targetChanged();\n            });\n            return;\n          }\n\n          if ($target.hasClass('fa-arrow-right')) {\n            $scope.$apply(function() {\n              _.move(ctrl.queryModel.functions, $scope.$index, $scope.$index + 1);\n              ctrl.targetChanged();\n            });\n            return;\n          }\n\n          if ($target.hasClass('fa-question-circle')) {\n            const funcDef = ctrl.datasource.getFuncDef(func.def.name);\n            if (funcDef && funcDef.description) {\n              popoverSrv.show({\n                element: e.target,\n                position: 'bottom left',\n                classNames: 'drop-popover drop-function-def',\n                template: `\n                  <div style=\"overflow:auto;max-height:30rem;\">\n                    <h4> ${funcDef.name} </h4>\n                    ${rst2html(funcDef.description)}\n                  </div>`,\n                openOn: 'click',\n              });\n            } else {\n              window.open(\n                'http://graphite.readthedocs.org/en/latest/functions.html#graphite.render.functions.' + func.def.name,\n                '_blank'\n              );\n            }\n            return;\n          }\n        });\n      }\n\n      function relink() {\n        elem.children().remove();\n\n        addElementsAndCompile();\n        ifJustAddedFocusFirstParam();\n        registerFuncControlsToggle();\n        registerFuncControlsActions();\n      }\n\n      relink();\n    },\n  };\n}\n\nangular.module('grafana.directives').directive('graphiteFuncEditor', graphiteFuncEditor);\n","import _ from 'lodash';\n\n// This is auto generated from the unicode tables.\n// The tables are at:\n// http://www.fileformat.info/info/unicode/category/Lu/list.htm\n// http://www.fileformat.info/info/unicode/category/Ll/list.htm\n// http://www.fileformat.info/info/unicode/category/Lt/list.htm\n// http://www.fileformat.info/info/unicode/category/Lm/list.htm\n// http://www.fileformat.info/info/unicode/category/Lo/list.htm\n// http://www.fileformat.info/info/unicode/category/Nl/list.htm\n\nconst unicodeLetterTable = [\n  170,\n  170,\n  181,\n  181,\n  186,\n  186,\n  192,\n  214,\n  216,\n  246,\n  248,\n  705,\n  710,\n  721,\n  736,\n  740,\n  748,\n  748,\n  750,\n  750,\n  880,\n  884,\n  886,\n  887,\n  890,\n  893,\n  902,\n  902,\n  904,\n  906,\n  908,\n  908,\n  910,\n  929,\n  931,\n  1013,\n  1015,\n  1153,\n  1162,\n  1319,\n  1329,\n  1366,\n  1369,\n  1369,\n  1377,\n  1415,\n  1488,\n  1514,\n  1520,\n  1522,\n  1568,\n  1610,\n  1646,\n  1647,\n  1649,\n  1747,\n  1749,\n  1749,\n  1765,\n  1766,\n  1774,\n  1775,\n  1786,\n  1788,\n  1791,\n  1791,\n  1808,\n  1808,\n  1810,\n  1839,\n  1869,\n  1957,\n  1969,\n  1969,\n  1994,\n  2026,\n  2036,\n  2037,\n  2042,\n  2042,\n  2048,\n  2069,\n  2074,\n  2074,\n  2084,\n  2084,\n  2088,\n  2088,\n  2112,\n  2136,\n  2308,\n  2361,\n  2365,\n  2365,\n  2384,\n  2384,\n  2392,\n  2401,\n  2417,\n  2423,\n  2425,\n  2431,\n  2437,\n  2444,\n  2447,\n  2448,\n  2451,\n  2472,\n  2474,\n  2480,\n  2482,\n  2482,\n  2486,\n  2489,\n  2493,\n  2493,\n  2510,\n  2510,\n  2524,\n  2525,\n  2527,\n  2529,\n  2544,\n  2545,\n  2565,\n  2570,\n  2575,\n  2576,\n  2579,\n  2600,\n  2602,\n  2608,\n  2610,\n  2611,\n  2613,\n  2614,\n  2616,\n  2617,\n  2649,\n  2652,\n  2654,\n  2654,\n  2674,\n  2676,\n  2693,\n  2701,\n  2703,\n  2705,\n  2707,\n  2728,\n  2730,\n  2736,\n  2738,\n  2739,\n  2741,\n  2745,\n  2749,\n  2749,\n  2768,\n  2768,\n  2784,\n  2785,\n  2821,\n  2828,\n  2831,\n  2832,\n  2835,\n  2856,\n  2858,\n  2864,\n  2866,\n  2867,\n  2869,\n  2873,\n  2877,\n  2877,\n  2908,\n  2909,\n  2911,\n  2913,\n  2929,\n  2929,\n  2947,\n  2947,\n  2949,\n  2954,\n  2958,\n  2960,\n  2962,\n  2965,\n  2969,\n  2970,\n  2972,\n  2972,\n  2974,\n  2975,\n  2979,\n  2980,\n  2984,\n  2986,\n  2990,\n  3001,\n  3024,\n  3024,\n  3077,\n  3084,\n  3086,\n  3088,\n  3090,\n  3112,\n  3114,\n  3123,\n  3125,\n  3129,\n  3133,\n  3133,\n  3160,\n  3161,\n  3168,\n  3169,\n  3205,\n  3212,\n  3214,\n  3216,\n  3218,\n  3240,\n  3242,\n  3251,\n  3253,\n  3257,\n  3261,\n  3261,\n  3294,\n  3294,\n  3296,\n  3297,\n  3313,\n  3314,\n  3333,\n  3340,\n  3342,\n  3344,\n  3346,\n  3386,\n  3389,\n  3389,\n  3406,\n  3406,\n  3424,\n  3425,\n  3450,\n  3455,\n  3461,\n  3478,\n  3482,\n  3505,\n  3507,\n  3515,\n  3517,\n  3517,\n  3520,\n  3526,\n  3585,\n  3632,\n  3634,\n  3635,\n  3648,\n  3654,\n  3713,\n  3714,\n  3716,\n  3716,\n  3719,\n  3720,\n  3722,\n  3722,\n  3725,\n  3725,\n  3732,\n  3735,\n  3737,\n  3743,\n  3745,\n  3747,\n  3749,\n  3749,\n  3751,\n  3751,\n  3754,\n  3755,\n  3757,\n  3760,\n  3762,\n  3763,\n  3773,\n  3773,\n  3776,\n  3780,\n  3782,\n  3782,\n  3804,\n  3805,\n  3840,\n  3840,\n  3904,\n  3911,\n  3913,\n  3948,\n  3976,\n  3980,\n  4096,\n  4138,\n  4159,\n  4159,\n  4176,\n  4181,\n  4186,\n  4189,\n  4193,\n  4193,\n  4197,\n  4198,\n  4206,\n  4208,\n  4213,\n  4225,\n  4238,\n  4238,\n  4256,\n  4293,\n  4304,\n  4346,\n  4348,\n  4348,\n  4352,\n  4680,\n  4682,\n  4685,\n  4688,\n  4694,\n  4696,\n  4696,\n  4698,\n  4701,\n  4704,\n  4744,\n  4746,\n  4749,\n  4752,\n  4784,\n  4786,\n  4789,\n  4792,\n  4798,\n  4800,\n  4800,\n  4802,\n  4805,\n  4808,\n  4822,\n  4824,\n  4880,\n  4882,\n  4885,\n  4888,\n  4954,\n  4992,\n  5007,\n  5024,\n  5108,\n  5121,\n  5740,\n  5743,\n  5759,\n  5761,\n  5786,\n  5792,\n  5866,\n  5870,\n  5872,\n  5888,\n  5900,\n  5902,\n  5905,\n  5920,\n  5937,\n  5952,\n  5969,\n  5984,\n  5996,\n  5998,\n  6000,\n  6016,\n  6067,\n  6103,\n  6103,\n  6108,\n  6108,\n  6176,\n  6263,\n  6272,\n  6312,\n  6314,\n  6314,\n  6320,\n  6389,\n  6400,\n  6428,\n  6480,\n  6509,\n  6512,\n  6516,\n  6528,\n  6571,\n  6593,\n  6599,\n  6656,\n  6678,\n  6688,\n  6740,\n  6823,\n  6823,\n  6917,\n  6963,\n  6981,\n  6987,\n  7043,\n  7072,\n  7086,\n  7087,\n  7104,\n  7141,\n  7168,\n  7203,\n  7245,\n  7247,\n  7258,\n  7293,\n  7401,\n  7404,\n  7406,\n  7409,\n  7424,\n  7615,\n  7680,\n  7957,\n  7960,\n  7965,\n  7968,\n  8005,\n  8008,\n  8013,\n  8016,\n  8023,\n  8025,\n  8025,\n  8027,\n  8027,\n  8029,\n  8029,\n  8031,\n  8061,\n  8064,\n  8116,\n  8118,\n  8124,\n  8126,\n  8126,\n  8130,\n  8132,\n  8134,\n  8140,\n  8144,\n  8147,\n  8150,\n  8155,\n  8160,\n  8172,\n  8178,\n  8180,\n  8182,\n  8188,\n  8305,\n  8305,\n  8319,\n  8319,\n  8336,\n  8348,\n  8450,\n  8450,\n  8455,\n  8455,\n  8458,\n  8467,\n  8469,\n  8469,\n  8473,\n  8477,\n  8484,\n  8484,\n  8486,\n  8486,\n  8488,\n  8488,\n  8490,\n  8493,\n  8495,\n  8505,\n  8508,\n  8511,\n  8517,\n  8521,\n  8526,\n  8526,\n  8544,\n  8584,\n  11264,\n  11310,\n  11312,\n  11358,\n  11360,\n  11492,\n  11499,\n  11502,\n  11520,\n  11557,\n  11568,\n  11621,\n  11631,\n  11631,\n  11648,\n  11670,\n  11680,\n  11686,\n  11688,\n  11694,\n  11696,\n  11702,\n  11704,\n  11710,\n  11712,\n  11718,\n  11720,\n  11726,\n  11728,\n  11734,\n  11736,\n  11742,\n  11823,\n  11823,\n  12293,\n  12295,\n  12321,\n  12329,\n  12337,\n  12341,\n  12344,\n  12348,\n  12353,\n  12438,\n  12445,\n  12447,\n  12449,\n  12538,\n  12540,\n  12543,\n  12549,\n  12589,\n  12593,\n  12686,\n  12704,\n  12730,\n  12784,\n  12799,\n  13312,\n  13312,\n  19893,\n  19893,\n  19968,\n  19968,\n  40907,\n  40907,\n  40960,\n  42124,\n  42192,\n  42237,\n  42240,\n  42508,\n  42512,\n  42527,\n  42538,\n  42539,\n  42560,\n  42606,\n  42623,\n  42647,\n  42656,\n  42735,\n  42775,\n  42783,\n  42786,\n  42888,\n  42891,\n  42894,\n  42896,\n  42897,\n  42912,\n  42921,\n  43002,\n  43009,\n  43011,\n  43013,\n  43015,\n  43018,\n  43020,\n  43042,\n  43072,\n  43123,\n  43138,\n  43187,\n  43250,\n  43255,\n  43259,\n  43259,\n  43274,\n  43301,\n  43312,\n  43334,\n  43360,\n  43388,\n  43396,\n  43442,\n  43471,\n  43471,\n  43520,\n  43560,\n  43584,\n  43586,\n  43588,\n  43595,\n  43616,\n  43638,\n  43642,\n  43642,\n  43648,\n  43695,\n  43697,\n  43697,\n  43701,\n  43702,\n  43705,\n  43709,\n  43712,\n  43712,\n  43714,\n  43714,\n  43739,\n  43741,\n  43777,\n  43782,\n  43785,\n  43790,\n  43793,\n  43798,\n  43808,\n  43814,\n  43816,\n  43822,\n  43968,\n  44002,\n  44032,\n  44032,\n  55203,\n  55203,\n  55216,\n  55238,\n  55243,\n  55291,\n  63744,\n  64045,\n  64048,\n  64109,\n  64112,\n  64217,\n  64256,\n  64262,\n  64275,\n  64279,\n  64285,\n  64285,\n  64287,\n  64296,\n  64298,\n  64310,\n  64312,\n  64316,\n  64318,\n  64318,\n  64320,\n  64321,\n  64323,\n  64324,\n  64326,\n  64433,\n  64467,\n  64829,\n  64848,\n  64911,\n  64914,\n  64967,\n  65008,\n  65019,\n  65136,\n  65140,\n  65142,\n  65276,\n  65313,\n  65338,\n  65345,\n  65370,\n  65382,\n  65470,\n  65474,\n  65479,\n  65482,\n  65487,\n  65490,\n  65495,\n  65498,\n  65500,\n  65536,\n  65547,\n  65549,\n  65574,\n  65576,\n  65594,\n  65596,\n  65597,\n  65599,\n  65613,\n  65616,\n  65629,\n  65664,\n  65786,\n  65856,\n  65908,\n  66176,\n  66204,\n  66208,\n  66256,\n  66304,\n  66334,\n  66352,\n  66378,\n  66432,\n  66461,\n  66464,\n  66499,\n  66504,\n  66511,\n  66513,\n  66517,\n  66560,\n  66717,\n  67584,\n  67589,\n  67592,\n  67592,\n  67594,\n  67637,\n  67639,\n  67640,\n  67644,\n  67644,\n  67647,\n  67669,\n  67840,\n  67861,\n  67872,\n  67897,\n  68096,\n  68096,\n  68112,\n  68115,\n  68117,\n  68119,\n  68121,\n  68147,\n  68192,\n  68220,\n  68352,\n  68405,\n  68416,\n  68437,\n  68448,\n  68466,\n  68608,\n  68680,\n  69635,\n  69687,\n  69763,\n  69807,\n  73728,\n  74606,\n  74752,\n  74850,\n  77824,\n  78894,\n  92160,\n  92728,\n  110592,\n  110593,\n  119808,\n  119892,\n  119894,\n  119964,\n  119966,\n  119967,\n  119970,\n  119970,\n  119973,\n  119974,\n  119977,\n  119980,\n  119982,\n  119993,\n  119995,\n  119995,\n  119997,\n  120003,\n  120005,\n  120069,\n  120071,\n  120074,\n  120077,\n  120084,\n  120086,\n  120092,\n  120094,\n  120121,\n  120123,\n  120126,\n  120128,\n  120132,\n  120134,\n  120134,\n  120138,\n  120144,\n  120146,\n  120485,\n  120488,\n  120512,\n  120514,\n  120538,\n  120540,\n  120570,\n  120572,\n  120596,\n  120598,\n  120628,\n  120630,\n  120654,\n  120656,\n  120686,\n  120688,\n  120712,\n  120714,\n  120744,\n  120746,\n  120770,\n  120772,\n  120779,\n  131072,\n  131072,\n  173782,\n  173782,\n  173824,\n  173824,\n  177972,\n  177972,\n  177984,\n  177984,\n  178205,\n  178205,\n  194560,\n  195101,\n];\n\nconst identifierStartTable = [];\n\nfor (let i = 0; i < 128; i++) {\n  identifierStartTable[i] =\n    (i >= 48 && i <= 57) || // 0-9\n    i === 36 || // $\n    i === 126 || // ~\n    i === 124 || // |\n    (i >= 65 && i <= 90) || // A-Z\n    i === 95 || // _\n    i === 45 || // -\n    i === 42 || // *\n    i === 58 || // :\n    i === 91 || // templateStart [\n    i === 93 || // templateEnd ]\n    i === 63 || // ?\n    i === 37 || // %\n    i === 35 || // #\n    i === 61 || // =\n    (i >= 97 && i <= 122); // a-z\n}\n\nconst identifierPartTable = identifierStartTable;\n\nexport function Lexer(this: any, expression) {\n  this.input = expression;\n  this.char = 1;\n  this.from = 1;\n}\n\nLexer.prototype = {\n  peek: function(i) {\n    return this.input.charAt(i || 0);\n  },\n\n  skip: function(i) {\n    i = i || 1;\n    this.char += i;\n    this.input = this.input.slice(i);\n  },\n\n  tokenize: function() {\n    const list = [];\n    let token;\n    while ((token = this.next())) {\n      list.push(token);\n    }\n    return list;\n  },\n\n  next: function() {\n    this.from = this.char;\n\n    // Move to the next non-space character.\n    if (/\\s/.test(this.peek())) {\n      while (/\\s/.test(this.peek())) {\n        this.from += 1;\n        this.skip();\n      }\n\n      if (this.peek() === '') {\n        // EOL\n        return null;\n      }\n    }\n\n    let match = this.scanStringLiteral();\n    if (match) {\n      return match;\n    }\n\n    match = this.scanPunctuator() || this.scanNumericLiteral() || this.scanIdentifier() || this.scanTemplateSequence();\n\n    if (match) {\n      this.skip(match.value.length);\n      return match;\n    }\n\n    // No token could be matched, give up.\n    return null;\n  },\n\n  scanTemplateSequence: function() {\n    if (this.peek() === '[' && this.peek(1) === '[') {\n      return {\n        type: 'templateStart',\n        value: '[[',\n        pos: this.char,\n      };\n    }\n\n    if (this.peek() === ']' && this.peek(1) === ']') {\n      return {\n        type: 'templateEnd',\n        value: '[[',\n        pos: this.char,\n      };\n    }\n\n    return null;\n  },\n\n  /*\n   * Extract a JavaScript identifier out of the next sequence of\n   * characters or return 'null' if its not possible. In addition,\n   * to Identifier this method can also produce BooleanLiteral\n   * (true/false) and NullLiteral (null).\n   */\n  scanIdentifier: function() {\n    let id = '';\n    let index = 0;\n    let type, char;\n\n    // Detects any character in the Unicode categories \"Uppercase\n    // letter (Lu)\", \"Lowercase letter (Ll)\", \"Titlecase letter\n    // (Lt)\", \"Modifier letter (Lm)\", \"Other letter (Lo)\", or\n    // \"Letter number (Nl)\".\n    //\n    // Both approach and unicodeLetterTable were borrowed from\n    // Google's Traceur.\n\n    function isUnicodeLetter(code) {\n      for (let i = 0; i < unicodeLetterTable.length; ) {\n        if (code < unicodeLetterTable[i++]) {\n          return false;\n        }\n\n        if (code <= unicodeLetterTable[i++]) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n\n    function isHexDigit(str) {\n      return /^[0-9a-fA-F]$/.test(str);\n    }\n\n    const readUnicodeEscapeSequence = _.bind(function(this: any) {\n      /*jshint validthis:true */\n      index += 1;\n\n      if (this.peek(index) !== 'u') {\n        return null;\n      }\n\n      const ch1 = this.peek(index + 1);\n      const ch2 = this.peek(index + 2);\n      const ch3 = this.peek(index + 3);\n      const ch4 = this.peek(index + 4);\n      let code;\n\n      if (isHexDigit(ch1) && isHexDigit(ch2) && isHexDigit(ch3) && isHexDigit(ch4)) {\n        code = parseInt(ch1 + ch2 + ch3 + ch4, 16);\n\n        if (isUnicodeLetter(code)) {\n          index += 5;\n          return '\\\\u' + ch1 + ch2 + ch3 + ch4;\n        }\n\n        return null;\n      }\n\n      return null;\n    }, this);\n\n    const getIdentifierStart = _.bind(function(this: any) {\n      /*jshint validthis:true */\n      const chr = this.peek(index);\n      const code = chr.charCodeAt(0);\n\n      if (chr === '*') {\n        index += 1;\n        return chr;\n      }\n\n      if (code === 92) {\n        return readUnicodeEscapeSequence();\n      }\n\n      if (code < 128) {\n        if (identifierStartTable[code]) {\n          index += 1;\n          return chr;\n        }\n\n        return null;\n      }\n\n      if (isUnicodeLetter(code)) {\n        index += 1;\n        return chr;\n      }\n\n      return null;\n    }, this);\n\n    const getIdentifierPart = _.bind(function(this: any) {\n      /*jshint validthis:true */\n      const chr = this.peek(index);\n      const code = chr.charCodeAt(0);\n\n      if (code === 92) {\n        return readUnicodeEscapeSequence();\n      }\n\n      if (code < 128) {\n        if (identifierPartTable[code]) {\n          index += 1;\n          return chr;\n        }\n\n        return null;\n      }\n\n      if (isUnicodeLetter(code)) {\n        index += 1;\n        return chr;\n      }\n\n      return null;\n    }, this);\n\n    char = getIdentifierStart();\n    if (char === null) {\n      return null;\n    }\n\n    id = char;\n    for (;;) {\n      char = getIdentifierPart();\n\n      if (char === null) {\n        break;\n      }\n\n      id += char;\n    }\n\n    switch (id) {\n      case 'true': {\n        type = 'bool';\n        break;\n      }\n      case 'false': {\n        type = 'bool';\n        break;\n      }\n      default:\n        type = 'identifier';\n    }\n\n    return {\n      type: type,\n      value: id,\n      pos: this.char,\n    };\n  },\n\n  /*\n   * Extract a numeric literal out of the next sequence of\n   * characters or return 'null' if its not possible. This method\n   * supports all numeric literals described in section 7.8.3\n   * of the EcmaScript 5 specification.\n   *\n   * This method's implementation was heavily influenced by the\n   * scanNumericLiteral function in the Esprima parser's source code.\n   */\n  scanNumericLiteral: function(): any {\n    let index = 0;\n    let value = '';\n    const length = this.input.length;\n    let char = this.peek(index);\n    let bad;\n\n    function isDecimalDigit(str) {\n      return /^[0-9]$/.test(str);\n    }\n\n    function isOctalDigit(str) {\n      return /^[0-7]$/.test(str);\n    }\n\n    function isHexDigit(str) {\n      return /^[0-9a-fA-F]$/.test(str);\n    }\n\n    function isIdentifierStart(ch) {\n      return ch === '$' || ch === '_' || ch === '\\\\' || (ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z');\n    }\n\n    // handle negative num literals\n    if (char === '-') {\n      value += char;\n      index += 1;\n      char = this.peek(index);\n    }\n\n    // Numbers must start either with a decimal digit or a point.\n    if (char !== '.' && !isDecimalDigit(char)) {\n      return null;\n    }\n\n    if (char !== '.') {\n      value += this.peek(index);\n      index += 1;\n      char = this.peek(index);\n\n      if (value === '0') {\n        // Base-16 numbers.\n        if (char === 'x' || char === 'X') {\n          index += 1;\n          value += char;\n\n          while (index < length) {\n            char = this.peek(index);\n            if (!isHexDigit(char)) {\n              break;\n            }\n            value += char;\n            index += 1;\n          }\n\n          if (value.length <= 2) {\n            // 0x\n            return {\n              type: 'number',\n              value: value,\n              isMalformed: true,\n              pos: this.char,\n            };\n          }\n\n          if (index < length) {\n            char = this.peek(index);\n            if (isIdentifierStart(char)) {\n              return null;\n            }\n          }\n\n          return {\n            type: 'number',\n            value: value,\n            base: 16,\n            isMalformed: false,\n            pos: this.char,\n          };\n        }\n\n        // Base-8 numbers.\n        if (isOctalDigit(char)) {\n          index += 1;\n          value += char;\n          bad = false;\n\n          while (index < length) {\n            char = this.peek(index);\n\n            // Numbers like '019' (note the 9) are not valid octals\n            // but we still parse them and mark as malformed.\n\n            if (isDecimalDigit(char)) {\n              bad = true;\n            }\n            if (!isOctalDigit(char)) {\n              // if the char is a non punctuator then its not a valid number\n              if (!this.isPunctuator(char)) {\n                return null;\n              }\n              break;\n            }\n            value += char;\n            index += 1;\n          }\n\n          if (index < length) {\n            char = this.peek(index);\n            if (isIdentifierStart(char)) {\n              return null;\n            }\n          }\n\n          return {\n            type: 'number',\n            value: value,\n            base: 8,\n            isMalformed: bad,\n          };\n        }\n\n        // Decimal numbers that start with '0' such as '09' are illegal\n        // but we still parse them and return as malformed.\n\n        if (isDecimalDigit(char)) {\n          index += 1;\n          value += char;\n        }\n      }\n\n      while (index < length) {\n        char = this.peek(index);\n        if (!isDecimalDigit(char)) {\n          break;\n        }\n        value += char;\n        index += 1;\n      }\n    }\n\n    // Decimal digits.\n\n    if (char === '.') {\n      value += char;\n      index += 1;\n\n      while (index < length) {\n        char = this.peek(index);\n        if (!isDecimalDigit(char)) {\n          break;\n        }\n        value += char;\n        index += 1;\n      }\n    }\n\n    // Exponent part.\n\n    if (char === 'e' || char === 'E') {\n      value += char;\n      index += 1;\n      char = this.peek(index);\n\n      if (char === '+' || char === '-') {\n        value += this.peek(index);\n        index += 1;\n      }\n\n      char = this.peek(index);\n      if (isDecimalDigit(char)) {\n        value += char;\n        index += 1;\n\n        while (index < length) {\n          char = this.peek(index);\n          if (!isDecimalDigit(char)) {\n            break;\n          }\n          value += char;\n          index += 1;\n        }\n      } else {\n        return null;\n      }\n    }\n\n    if (index < length) {\n      char = this.peek(index);\n      if (!this.isPunctuator(char)) {\n        return null;\n      }\n    }\n\n    return {\n      type: 'number',\n      value: value,\n      base: 10,\n      pos: this.char,\n      isMalformed: !isFinite(+value),\n    };\n  },\n\n  isPunctuator: function(ch1) {\n    switch (ch1) {\n      case '.':\n      case '(':\n      case ')':\n      case ',':\n      case '{':\n      case '}':\n        return true;\n    }\n\n    return false;\n  },\n\n  scanPunctuator: function() {\n    const ch1 = this.peek();\n\n    if (this.isPunctuator(ch1)) {\n      return {\n        type: ch1,\n        value: ch1,\n        pos: this.char,\n      };\n    }\n\n    return null;\n  },\n\n  /*\n   * Extract a string out of the next sequence of characters and/or\n   * lines or return 'null' if its not possible. Since strings can\n   * span across multiple lines this method has to move the char\n   * pointer.\n   *\n   * This method recognizes pseudo-multiline JavaScript strings:\n   *\n   *   var str = \"hello\\\n   *   world\";\n   */\n  scanStringLiteral: function() {\n    /*jshint loopfunc:true */\n    const quote = this.peek();\n\n    // String must start with a quote.\n    if (quote !== '\"' && quote !== \"'\") {\n      return null;\n    }\n\n    let value = '';\n\n    this.skip();\n\n    while (this.peek() !== quote) {\n      if (this.peek() === '') {\n        // End Of Line\n        return {\n          type: 'string',\n          value: value,\n          isUnclosed: true,\n          quote: quote,\n          pos: this.char,\n        };\n      }\n\n      const char = this.peek();\n      const jump = 1; // A length of a jump, after we're done\n      // parsing this character.\n\n      value += char;\n      this.skip(jump);\n    }\n\n    this.skip();\n    return {\n      type: 'string',\n      value: value,\n      isUnclosed: false,\n      quote: quote,\n      pos: this.char,\n    };\n  },\n};\n","import { Lexer } from './lexer';\n\nexport function Parser(this: any, expression) {\n  this.expression = expression;\n  this.lexer = new Lexer(expression);\n  this.tokens = this.lexer.tokenize();\n  this.index = 0;\n}\n\nParser.prototype = {\n  getAst: function() {\n    return this.start();\n  },\n\n  start: function() {\n    try {\n      return this.functionCall() || this.metricExpression();\n    } catch (e) {\n      return {\n        type: 'error',\n        message: e.message,\n        pos: e.pos,\n      };\n    }\n  },\n\n  curlyBraceSegment: function() {\n    if (this.match('identifier', '{') || this.match('{')) {\n      let curlySegment = '';\n\n      while (!this.match('') && !this.match('}')) {\n        curlySegment += this.consumeToken().value;\n      }\n\n      if (!this.match('}')) {\n        this.errorMark(\"Expected closing '}'\");\n      }\n\n      curlySegment += this.consumeToken().value;\n\n      // if curly segment is directly followed by identifier\n      // include it in the segment\n      if (this.match('identifier')) {\n        curlySegment += this.consumeToken().value;\n      }\n\n      return {\n        type: 'segment',\n        value: curlySegment,\n      };\n    } else {\n      return null;\n    }\n  },\n\n  metricSegment: function() {\n    const curly = this.curlyBraceSegment();\n    if (curly) {\n      return curly;\n    }\n\n    if (this.match('identifier') || this.match('number')) {\n      // hack to handle float numbers in metric segments\n      const parts = this.consumeToken().value.split('.');\n      if (parts.length === 2) {\n        this.tokens.splice(this.index, 0, { type: '.' });\n        this.tokens.splice(this.index + 1, 0, {\n          type: 'number',\n          value: parts[1],\n        });\n      }\n\n      return {\n        type: 'segment',\n        value: parts[0],\n      };\n    }\n\n    if (!this.match('templateStart')) {\n      this.errorMark('Expected metric identifier');\n    }\n\n    this.consumeToken();\n\n    if (!this.match('identifier')) {\n      this.errorMark('Expected identifier after templateStart');\n    }\n\n    const node = {\n      type: 'template',\n      value: this.consumeToken().value,\n    };\n\n    if (!this.match('templateEnd')) {\n      this.errorMark('Expected templateEnd');\n    }\n\n    this.consumeToken();\n    return node;\n  },\n\n  metricExpression: function() {\n    if (!this.match('templateStart') && !this.match('identifier') && !this.match('number') && !this.match('{')) {\n      return null;\n    }\n\n    const node = {\n      type: 'metric',\n      segments: [],\n    };\n\n    node.segments.push(this.metricSegment());\n\n    while (this.match('.')) {\n      this.consumeToken();\n\n      const segment = this.metricSegment();\n      if (!segment) {\n        this.errorMark('Expected metric identifier');\n      }\n\n      node.segments.push(segment);\n    }\n\n    return node;\n  },\n\n  functionCall: function() {\n    if (!this.match('identifier', '(')) {\n      return null;\n    }\n\n    const node: any = {\n      type: 'function',\n      name: this.consumeToken().value,\n    };\n\n    // consume left parenthesis\n    this.consumeToken();\n\n    node.params = this.functionParameters();\n\n    if (!this.match(')')) {\n      this.errorMark('Expected closing parenthesis');\n    }\n\n    this.consumeToken();\n\n    return node;\n  },\n\n  boolExpression: function() {\n    if (!this.match('bool')) {\n      return null;\n    }\n\n    return {\n      type: 'bool',\n      value: this.consumeToken().value === 'true',\n    };\n  },\n\n  functionParameters: function() {\n    if (this.match(')') || this.match('')) {\n      return [];\n    }\n\n    const param =\n      this.functionCall() ||\n      this.numericLiteral() ||\n      this.seriesRefExpression() ||\n      this.boolExpression() ||\n      this.metricExpression() ||\n      this.stringLiteral();\n\n    if (!this.match(',')) {\n      return [param];\n    }\n\n    this.consumeToken();\n    return [param].concat(this.functionParameters());\n  },\n\n  seriesRefExpression: function() {\n    if (!this.match('identifier')) {\n      return null;\n    }\n\n    const value = this.tokens[this.index].value;\n    if (!value.match(/\\#[A-Z]/)) {\n      return null;\n    }\n\n    const token = this.consumeToken();\n\n    return {\n      type: 'series-ref',\n      value: token.value,\n    };\n  },\n\n  numericLiteral: function() {\n    if (!this.match('number')) {\n      return null;\n    }\n\n    return {\n      type: 'number',\n      value: parseFloat(this.consumeToken().value),\n    };\n  },\n\n  stringLiteral: function() {\n    if (!this.match('string')) {\n      return null;\n    }\n\n    const token = this.consumeToken();\n    if (token.isUnclosed) {\n      throw { message: 'Unclosed string parameter', pos: token.pos };\n    }\n\n    return {\n      type: 'string',\n      value: token.value,\n    };\n  },\n\n  errorMark: function(text) {\n    const currentToken = this.tokens[this.index];\n    const type = currentToken ? currentToken.type : 'end of string';\n    throw {\n      message: text + ' instead found ' + type,\n      pos: currentToken ? currentToken.pos : this.lexer.char,\n    };\n  },\n\n  // returns token value and incre\n  consumeToken: function() {\n    this.index++;\n    return this.tokens[this.index - 1];\n  },\n\n  matchToken: function(type, index) {\n    const token = this.tokens[this.index + index];\n    return (token === undefined && type === '') || (token && token.type === type);\n  },\n\n  match: function(token1, token2) {\n    return this.matchToken(token1, 0) && (!token2 || this.matchToken(token2, 1));\n  },\n};\n","import _ from 'lodash';\nimport { Parser } from './parser';\n\nexport default class GraphiteQuery {\n  datasource: any;\n  target: any;\n  functions: any[];\n  segments: any[];\n  tags: any[];\n  error: any;\n  seriesByTagUsed: boolean;\n  checkOtherSegmentsIndex: number;\n  removeTagValue: string;\n  templateSrv: any;\n  scopedVars: any;\n\n  /** @ngInject */\n  constructor(datasource, target, templateSrv?, scopedVars?) {\n    this.datasource = datasource;\n    this.target = target;\n    this.parseTarget();\n\n    this.removeTagValue = '-- remove tag --';\n  }\n\n  parseTarget() {\n    this.functions = [];\n    this.segments = [];\n    this.tags = [];\n    this.error = null;\n\n    if (this.target.textEditor) {\n      return;\n    }\n\n    const parser = new Parser(this.target.target);\n    const astNode = parser.getAst();\n    if (astNode === null) {\n      this.checkOtherSegmentsIndex = 0;\n      return;\n    }\n\n    if (astNode.type === 'error') {\n      this.error = astNode.message + ' at position: ' + astNode.pos;\n      this.target.textEditor = true;\n      return;\n    }\n\n    try {\n      this.parseTargetRecursive(astNode, null);\n    } catch (err) {\n      console.log('error parsing target:', err.message);\n      this.error = err.message;\n      this.target.textEditor = true;\n    }\n\n    this.checkOtherSegmentsIndex = this.segments.length - 1;\n    this.checkForSeriesByTag();\n  }\n\n  checkForSeriesByTag() {\n    const seriesByTagFunc = _.find(this.functions, func => func.def.name === 'seriesByTag');\n    if (seriesByTagFunc) {\n      this.seriesByTagUsed = true;\n      seriesByTagFunc.hidden = true;\n      const tags = this.splitSeriesByTagParams(seriesByTagFunc);\n      this.tags = tags;\n    }\n  }\n\n  getSegmentPathUpTo(index) {\n    const arr = this.segments.slice(0, index);\n\n    return _.reduce(\n      arr,\n      function(result, segment) {\n        return result ? result + '.' + segment.value : segment.value;\n      },\n      ''\n    );\n  }\n\n  parseTargetRecursive(astNode, func) {\n    if (astNode === null) {\n      return null;\n    }\n\n    switch (astNode.type) {\n      case 'function':\n        const innerFunc = this.datasource.createFuncInstance(astNode.name, {\n          withDefaultParams: false,\n        });\n        _.each(astNode.params, param => {\n          this.parseTargetRecursive(param, innerFunc);\n        });\n\n        innerFunc.updateText();\n        this.functions.push(innerFunc);\n        break;\n      case 'series-ref':\n        if (this.segments.length > 0) {\n          this.addFunctionParameter(func, astNode.value);\n        } else {\n          this.segments.push(astNode);\n        }\n        break;\n      case 'bool':\n      case 'string':\n      case 'number':\n        this.addFunctionParameter(func, astNode.value);\n        break;\n      case 'metric':\n        if (this.segments.length > 0) {\n          this.addFunctionParameter(func, _.join(_.map(astNode.segments, 'value'), '.'));\n        } else {\n          this.segments = astNode.segments;\n        }\n        break;\n    }\n  }\n\n  updateSegmentValue(segment, index) {\n    this.segments[index].value = segment.value;\n  }\n\n  addSelectMetricSegment() {\n    this.segments.push({ value: 'select metric' });\n  }\n\n  addFunction(newFunc) {\n    this.functions.push(newFunc);\n    this.moveAliasFuncLast();\n  }\n\n  moveAliasFuncLast() {\n    const aliasFunc = _.find(this.functions, function(func) {\n      return func.def.name.startsWith('alias');\n    });\n\n    if (aliasFunc) {\n      this.functions = _.without(this.functions, aliasFunc);\n      this.functions.push(aliasFunc);\n    }\n  }\n\n  addFunctionParameter(func, value) {\n    if (func.params.length >= func.def.params.length && !_.get(_.last(func.def.params), 'multiple', false)) {\n      throw { message: 'too many parameters for function ' + func.def.name };\n    }\n    func.params.push(value);\n  }\n\n  removeFunction(func) {\n    this.functions = _.without(this.functions, func);\n  }\n\n  updateModelTarget(targets) {\n    // render query\n    if (!this.target.textEditor) {\n      const metricPath = this.getSegmentPathUpTo(this.segments.length).replace(/\\.select metric$/, '');\n      this.target.target = _.reduce(this.functions, wrapFunction, metricPath);\n    }\n\n    this.updateRenderedTarget(this.target, targets);\n\n    // loop through other queries and update targetFull as needed\n    for (const target of targets || []) {\n      if (target.refId !== this.target.refId) {\n        this.updateRenderedTarget(target, targets);\n      }\n    }\n  }\n\n  updateRenderedTarget(target, targets) {\n    // render nested query\n    const targetsByRefId = _.keyBy(targets, 'refId');\n\n    // no references to self\n    delete targetsByRefId[target.refId];\n\n    const nestedSeriesRefRegex = /\\#([A-Z])/g;\n    let targetWithNestedQueries = target.target;\n\n    // Use ref count to track circular references\n    function countTargetRefs(targetsByRefId, refId) {\n      let refCount = 0;\n      _.each(targetsByRefId, (t, id) => {\n        if (id !== refId) {\n          const match = nestedSeriesRefRegex.exec(t.target);\n          const count = match && match.length ? match.length - 1 : 0;\n          refCount += count;\n        }\n      });\n      targetsByRefId[refId].refCount = refCount;\n    }\n    _.each(targetsByRefId, (t, id) => {\n      countTargetRefs(targetsByRefId, id);\n    });\n\n    // Keep interpolating until there are no query references\n    // The reason for the loop is that the referenced query might contain another reference to another query\n    while (targetWithNestedQueries.match(nestedSeriesRefRegex)) {\n      const updated = targetWithNestedQueries.replace(nestedSeriesRefRegex, (match, g1) => {\n        const t = targetsByRefId[g1];\n        if (!t) {\n          return match;\n        }\n\n        // no circular references\n        if (t.refCount === 0) {\n          delete targetsByRefId[g1];\n        }\n        t.refCount--;\n\n        return t.target;\n      });\n\n      if (updated === targetWithNestedQueries) {\n        break;\n      }\n\n      targetWithNestedQueries = updated;\n    }\n\n    delete target.targetFull;\n    if (target.target !== targetWithNestedQueries) {\n      target.targetFull = targetWithNestedQueries;\n    }\n  }\n\n  splitSeriesByTagParams(func) {\n    const tagPattern = /([^\\!=~]+)(\\!?=~?)(.*)/;\n    return _.flatten(\n      _.map(func.params, (param: string) => {\n        const matches = tagPattern.exec(param);\n        if (matches) {\n          const tag = matches.slice(1);\n          if (tag.length === 3) {\n            return {\n              key: tag[0],\n              operator: tag[1],\n              value: tag[2],\n            };\n          }\n        }\n        return [];\n      })\n    );\n  }\n\n  getSeriesByTagFuncIndex() {\n    return _.findIndex(this.functions, func => func.def.name === 'seriesByTag');\n  }\n\n  getSeriesByTagFunc() {\n    const seriesByTagFuncIndex = this.getSeriesByTagFuncIndex();\n    if (seriesByTagFuncIndex >= 0) {\n      return this.functions[seriesByTagFuncIndex];\n    } else {\n      return undefined;\n    }\n  }\n\n  addTag(tag) {\n    const newTagParam = renderTagString(tag);\n    this.getSeriesByTagFunc().params.push(newTagParam);\n    this.tags.push(tag);\n  }\n\n  removeTag(index) {\n    this.getSeriesByTagFunc().params.splice(index, 1);\n    this.tags.splice(index, 1);\n  }\n\n  updateTag(tag, tagIndex) {\n    this.error = null;\n\n    if (tag.key === this.removeTagValue) {\n      this.removeTag(tagIndex);\n      return;\n    }\n\n    const newTagParam = renderTagString(tag);\n    this.getSeriesByTagFunc().params[tagIndex] = newTagParam;\n    this.tags[tagIndex] = tag;\n  }\n\n  renderTagExpressions(excludeIndex = -1) {\n    return _.compact(\n      _.map(this.tags, (tagExpr, index) => {\n        // Don't render tag that we want to lookup\n        if (index !== excludeIndex) {\n          return tagExpr.key + tagExpr.operator + tagExpr.value;\n        }\n      })\n    );\n  }\n}\n\nfunction wrapFunction(target, func) {\n  return func.render(target);\n}\n\nfunction renderTagString(tag) {\n  return tag.key + tag.operator + tag.value;\n}\n","import './add_graphite_func';\nimport './func_editor';\n\nimport _ from 'lodash';\nimport GraphiteQuery from './graphite_query';\nimport { QueryCtrl } from 'app/plugins/sdk';\nimport appEvents from 'app/core/app_events';\n\nconst GRAPHITE_TAG_OPERATORS = ['=', '!=', '=~', '!=~'];\nconst TAG_PREFIX = 'tag: ';\n\nexport class GraphiteQueryCtrl extends QueryCtrl {\n  static templateUrl = 'partials/query.editor.html';\n\n  queryModel: GraphiteQuery;\n  segments: any[];\n  addTagSegments: any[];\n  removeTagValue: string;\n  supportsTags: boolean;\n  paused: boolean;\n\n  /** @ngInject */\n  constructor($scope, $injector, private uiSegmentSrv, private templateSrv, $timeout) {\n    super($scope, $injector);\n    this.supportsTags = this.datasource.supportsTags;\n    this.paused = false;\n    this.target.target = this.target.target || '';\n\n    this.datasource.waitForFuncDefsLoaded().then(() => {\n      this.queryModel = new GraphiteQuery(this.datasource, this.target, templateSrv);\n      this.buildSegments();\n    });\n\n    this.removeTagValue = '-- remove tag --';\n  }\n\n  parseTarget() {\n    this.queryModel.parseTarget();\n    this.buildSegments();\n  }\n\n  toggleEditorMode() {\n    this.target.textEditor = !this.target.textEditor;\n    this.parseTarget();\n  }\n\n  buildSegments() {\n    this.segments = _.map(this.queryModel.segments, segment => {\n      return this.uiSegmentSrv.newSegment(segment);\n    });\n\n    const checkOtherSegmentsIndex = this.queryModel.checkOtherSegmentsIndex || 0;\n    this.checkOtherSegments(checkOtherSegmentsIndex);\n\n    if (this.queryModel.seriesByTagUsed) {\n      this.fixTagSegments();\n    }\n  }\n\n  addSelectMetricSegment() {\n    this.queryModel.addSelectMetricSegment();\n    this.segments.push(this.uiSegmentSrv.newSelectMetric());\n  }\n\n  checkOtherSegments(fromIndex) {\n    if (this.queryModel.segments.length === 1 && this.queryModel.segments[0].type === 'series-ref') {\n      return;\n    }\n\n    if (fromIndex === 0) {\n      this.addSelectMetricSegment();\n      return;\n    }\n\n    const path = this.queryModel.getSegmentPathUpTo(fromIndex + 1);\n    if (path === '') {\n      return Promise.resolve();\n    }\n\n    return this.datasource\n      .metricFindQuery(path)\n      .then(segments => {\n        if (segments.length === 0) {\n          if (path !== '') {\n            this.queryModel.segments = this.queryModel.segments.splice(0, fromIndex);\n            this.segments = this.segments.splice(0, fromIndex);\n            this.addSelectMetricSegment();\n          }\n        } else if (segments[0].expandable) {\n          if (this.segments.length === fromIndex) {\n            this.addSelectMetricSegment();\n          } else {\n            return this.checkOtherSegments(fromIndex + 1);\n          }\n        }\n      })\n      .catch(err => {\n        appEvents.emit('alert-error', ['Error', err]);\n      });\n  }\n\n  setSegmentFocus(segmentIndex) {\n    _.each(this.segments, (segment, index) => {\n      segment.focus = segmentIndex === index;\n    });\n  }\n\n  getAltSegments(index, prefix) {\n    let query = prefix && prefix.length > 0 ? '*' + prefix + '*' : '*';\n    if (index > 0) {\n      query = this.queryModel.getSegmentPathUpTo(index) + '.' + query;\n    }\n    const options = {\n      range: this.panelCtrl.range,\n      requestId: 'get-alt-segments',\n    };\n\n    return this.datasource\n      .metricFindQuery(query, options)\n      .then(segments => {\n        const altSegments = _.map(segments, segment => {\n          return this.uiSegmentSrv.newSegment({\n            value: segment.text,\n            expandable: segment.expandable,\n          });\n        });\n\n        if (index > 0 && altSegments.length === 0) {\n          return altSegments;\n        }\n\n        // add query references\n        if (index === 0) {\n          _.eachRight(this.panelCtrl.panel.targets, target => {\n            if (target.refId === this.queryModel.target.refId) {\n              return;\n            }\n\n            altSegments.unshift(\n              this.uiSegmentSrv.newSegment({\n                type: 'series-ref',\n                value: '#' + target.refId,\n                expandable: false,\n              })\n            );\n          });\n        }\n\n        // add template variables\n        _.eachRight(this.templateSrv.variables, variable => {\n          altSegments.unshift(\n            this.uiSegmentSrv.newSegment({\n              type: 'template',\n              value: '$' + variable.name,\n              expandable: true,\n            })\n          );\n        });\n\n        // add wildcard option\n        altSegments.unshift(this.uiSegmentSrv.newSegment('*'));\n\n        if (this.supportsTags && index === 0) {\n          this.removeTaggedEntry(altSegments);\n          return this.addAltTagSegments(prefix, altSegments);\n        } else {\n          return altSegments;\n        }\n      })\n      .catch(err => {\n        return [];\n      });\n  }\n\n  addAltTagSegments(prefix, altSegments) {\n    return this.getTagsAsSegments(prefix).then(tagSegments => {\n      tagSegments = _.map(tagSegments, segment => {\n        segment.value = TAG_PREFIX + segment.value;\n        return segment;\n      });\n      return altSegments.concat(...tagSegments);\n    });\n  }\n\n  removeTaggedEntry(altSegments) {\n    altSegments = _.remove(altSegments, s => s.value === '_tagged');\n  }\n\n  segmentValueChanged(segment, segmentIndex) {\n    this.error = null;\n    this.queryModel.updateSegmentValue(segment, segmentIndex);\n\n    if (this.queryModel.functions.length > 0 && this.queryModel.functions[0].def.fake) {\n      this.queryModel.functions = [];\n    }\n\n    if (segment.type === 'tag') {\n      const tag = removeTagPrefix(segment.value);\n      this.pause();\n      this.addSeriesByTagFunc(tag);\n      return;\n    }\n\n    if (segment.expandable) {\n      return this.checkOtherSegments(segmentIndex + 1).then(() => {\n        this.setSegmentFocus(segmentIndex + 1);\n        this.targetChanged();\n      });\n    } else {\n      this.spliceSegments(segmentIndex + 1);\n    }\n\n    this.setSegmentFocus(segmentIndex + 1);\n    this.targetChanged();\n  }\n\n  spliceSegments(index) {\n    this.segments = this.segments.splice(0, index);\n    this.queryModel.segments = this.queryModel.segments.splice(0, index);\n  }\n\n  emptySegments() {\n    this.queryModel.segments = [];\n    this.segments = [];\n  }\n\n  targetTextChanged() {\n    this.updateModelTarget();\n    this.refresh();\n  }\n\n  updateModelTarget() {\n    this.queryModel.updateModelTarget(this.panelCtrl.panel.targets);\n  }\n\n  targetChanged() {\n    if (this.queryModel.error) {\n      return;\n    }\n\n    const oldTarget = this.queryModel.target.target;\n    this.updateModelTarget();\n\n    if (this.queryModel.target !== oldTarget && !this.paused) {\n      this.panelCtrl.refresh();\n    }\n  }\n\n  addFunction(funcDef) {\n    const newFunc = this.datasource.createFuncInstance(funcDef, {\n      withDefaultParams: true,\n    });\n    newFunc.added = true;\n    this.queryModel.addFunction(newFunc);\n    this.smartlyHandleNewAliasByNode(newFunc);\n\n    if (this.segments.length === 1 && this.segments[0].fake) {\n      this.emptySegments();\n    }\n\n    if (!newFunc.params.length && newFunc.added) {\n      this.targetChanged();\n    }\n\n    if (newFunc.def.name === 'seriesByTag') {\n      this.parseTarget();\n    }\n  }\n\n  removeFunction(func) {\n    this.queryModel.removeFunction(func);\n    this.targetChanged();\n  }\n\n  addSeriesByTagFunc(tag) {\n    const newFunc = this.datasource.createFuncInstance('seriesByTag', {\n      withDefaultParams: false,\n    });\n    const tagParam = `${tag}=`;\n    newFunc.params = [tagParam];\n    this.queryModel.addFunction(newFunc);\n    newFunc.added = true;\n\n    this.emptySegments();\n    this.targetChanged();\n    this.parseTarget();\n  }\n\n  smartlyHandleNewAliasByNode(func) {\n    if (func.def.name !== 'aliasByNode') {\n      return;\n    }\n\n    for (let i = 0; i < this.segments.length; i++) {\n      if (this.segments[i].value.indexOf('*') >= 0) {\n        func.params[0] = i;\n        func.added = false;\n        this.targetChanged();\n        return;\n      }\n    }\n  }\n\n  getAllTags() {\n    return this.datasource.getTags().then(values => {\n      const altTags = _.map(values, 'text');\n      altTags.splice(0, 0, this.removeTagValue);\n      return mapToDropdownOptions(altTags);\n    });\n  }\n\n  getTags(index, tagPrefix) {\n    const tagExpressions = this.queryModel.renderTagExpressions(index);\n    return this.datasource.getTagsAutoComplete(tagExpressions, tagPrefix).then(values => {\n      const altTags = _.map(values, 'text');\n      altTags.splice(0, 0, this.removeTagValue);\n      return mapToDropdownOptions(altTags);\n    });\n  }\n\n  getTagsAsSegments(tagPrefix) {\n    const tagExpressions = this.queryModel.renderTagExpressions();\n    return this.datasource.getTagsAutoComplete(tagExpressions, tagPrefix).then(values => {\n      return _.map(values, val => {\n        return this.uiSegmentSrv.newSegment({\n          value: val.text,\n          type: 'tag',\n          expandable: false,\n        });\n      });\n    });\n  }\n\n  getTagOperators() {\n    return mapToDropdownOptions(GRAPHITE_TAG_OPERATORS);\n  }\n\n  getAllTagValues(tag) {\n    const tagKey = tag.key;\n    return this.datasource.getTagValues(tagKey).then(values => {\n      const altValues = _.map(values, 'text');\n      return mapToDropdownOptions(altValues);\n    });\n  }\n\n  getTagValues(tag, index, valuePrefix) {\n    const tagExpressions = this.queryModel.renderTagExpressions(index);\n    const tagKey = tag.key;\n    return this.datasource.getTagValuesAutoComplete(tagExpressions, tagKey, valuePrefix).then(values => {\n      const altValues = _.map(values, 'text');\n      // Add template variables as additional values\n      _.eachRight(this.templateSrv.variables, variable => {\n        altValues.push('${' + variable.name + ':regex}');\n      });\n      return mapToDropdownOptions(altValues);\n    });\n  }\n\n  tagChanged(tag, tagIndex) {\n    this.queryModel.updateTag(tag, tagIndex);\n    this.targetChanged();\n  }\n\n  addNewTag(segment) {\n    const newTagKey = segment.value;\n    const newTag = { key: newTagKey, operator: '=', value: '' };\n    this.queryModel.addTag(newTag);\n    this.targetChanged();\n    this.fixTagSegments();\n  }\n\n  removeTag(index) {\n    this.queryModel.removeTag(index);\n    this.targetChanged();\n  }\n\n  fixTagSegments() {\n    // Adding tag with the same name as just removed works incorrectly if single segment is used (instead of array)\n    this.addTagSegments = [this.uiSegmentSrv.newPlusButton()];\n  }\n\n  showDelimiter(index) {\n    return index !== this.queryModel.tags.length - 1;\n  }\n\n  pause() {\n    this.paused = true;\n  }\n\n  unpause() {\n    this.paused = false;\n    this.panelCtrl.refresh();\n  }\n}\n\nfunction mapToDropdownOptions(results) {\n  return _.map(results, value => {\n    return { text: value, value: value };\n  });\n}\n\nfunction removeTagPrefix(value: string): string {\n  return value.replace(TAG_PREFIX, '');\n}\n","import { GraphiteDatasource } from './datasource';\nimport { GraphiteQueryCtrl } from './query_ctrl';\nimport { GraphiteConfigCtrl } from './config_ctrl';\n\nclass AnnotationsQueryCtrl {\n  static templateUrl = 'partials/annotations.editor.html';\n}\n\nexport {\n  GraphiteDatasource as Datasource,\n  GraphiteQueryCtrl as QueryCtrl,\n  GraphiteConfigCtrl as ConfigCtrl,\n  AnnotationsQueryCtrl,\n};\n","export class GraphiteConfigCtrl {\n  static templateUrl = 'public/app/plugins/datasource/graphite/partials/config.html';\n  datasourceSrv: any;\n  current: any;\n\n  /** @ngInject */\n  constructor($scope, datasourceSrv) {\n    this.datasourceSrv = datasourceSrv;\n    this.current.jsonData = this.current.jsonData || {};\n    this.current.jsonData.graphiteVersion = this.current.jsonData.graphiteVersion || '0.9';\n    this.autoDetectGraphiteVersion();\n  }\n\n  autoDetectGraphiteVersion() {\n    if (!this.current.id) {\n      return;\n    }\n\n    this.datasourceSrv\n      .loadDatasource(this.current.name)\n      .then(ds => {\n        return ds.getVersion();\n      })\n      .then(version => {\n        this.graphiteVersions.push({ name: version, value: version });\n        this.current.jsonData.graphiteVersion = version;\n      });\n  }\n\n  graphiteVersions = [\n    { name: '0.9.x', value: '0.9' },\n    { name: '1.0.x', value: '1.0' },\n    { name: '1.1.x', value: '1.1' },\n  ];\n}\n","import angular from 'angular';\nimport _ from 'lodash';\n\nexport class CloudWatchQueryParameter {\n  constructor() {\n    return {\n      templateUrl: 'public/app/plugins/datasource/cloudwatch/partials/query.parameter.html',\n      controller: 'CloudWatchQueryParameterCtrl',\n      restrict: 'E',\n      scope: {\n        target: '=',\n        datasource: '=',\n        onChange: '&',\n      },\n    };\n  }\n}\n\nexport class CloudWatchQueryParameterCtrl {\n  /** @ngInject */\n  constructor($scope, templateSrv, uiSegmentSrv, datasourceSrv, $q) {\n    $scope.init = function() {\n      const target = $scope.target;\n      target.namespace = target.namespace || '';\n      target.metricName = target.metricName || '';\n      target.statistics = target.statistics || ['Average'];\n      target.dimensions = target.dimensions || {};\n      target.period = target.period || '';\n      target.region = target.region || 'default';\n      target.id = target.id || '';\n      target.expression = target.expression || '';\n      target.returnData = target.returnData || false;\n      target.highResolution = target.highResolution || false;\n\n      $scope.regionSegment = uiSegmentSrv.getSegmentForValue($scope.target.region, 'select region');\n      $scope.namespaceSegment = uiSegmentSrv.getSegmentForValue($scope.target.namespace, 'select namespace');\n      $scope.metricSegment = uiSegmentSrv.getSegmentForValue($scope.target.metricName, 'select metric');\n\n      $scope.dimSegments = _.reduce(\n        $scope.target.dimensions,\n        function(memo, value, key) {\n          memo.push(uiSegmentSrv.newKey(key));\n          memo.push(uiSegmentSrv.newOperator('='));\n          memo.push(uiSegmentSrv.newKeyValue(value));\n          return memo;\n        },\n        []\n      );\n\n      $scope.statSegments = _.map($scope.target.statistics, function(stat) {\n        return uiSegmentSrv.getSegmentForValue(stat);\n      });\n\n      $scope.ensurePlusButton($scope.statSegments);\n      $scope.ensurePlusButton($scope.dimSegments);\n      $scope.removeDimSegment = uiSegmentSrv.newSegment({\n        fake: true,\n        value: '-- remove dimension --',\n      });\n      $scope.removeStatSegment = uiSegmentSrv.newSegment({\n        fake: true,\n        value: '-- remove stat --',\n      });\n\n      if (_.isEmpty($scope.target.region)) {\n        $scope.target.region = 'default';\n      }\n\n      if (!$scope.onChange) {\n        $scope.onChange = function() {};\n      }\n    };\n\n    $scope.getStatSegments = function() {\n      return $q.when(\n        _.flatten([\n          angular.copy($scope.removeStatSegment),\n          _.map($scope.datasource.standardStatistics, function(s) {\n            return uiSegmentSrv.getSegmentForValue(s);\n          }),\n          uiSegmentSrv.getSegmentForValue('pNN.NN'),\n        ])\n      );\n    };\n\n    $scope.statSegmentChanged = function(segment, index) {\n      if (segment.value === $scope.removeStatSegment.value) {\n        $scope.statSegments.splice(index, 1);\n      } else {\n        segment.type = 'value';\n      }\n\n      $scope.target.statistics = _.reduce(\n        $scope.statSegments,\n        function(memo, seg) {\n          if (!seg.fake) {\n            memo.push(seg.value);\n          }\n          return memo;\n        },\n        []\n      );\n\n      $scope.ensurePlusButton($scope.statSegments);\n      $scope.onChange();\n    };\n\n    $scope.ensurePlusButton = function(segments) {\n      const count = segments.length;\n      const lastSegment = segments[Math.max(count - 1, 0)];\n\n      if (!lastSegment || lastSegment.type !== 'plus-button') {\n        segments.push(uiSegmentSrv.newPlusButton());\n      }\n    };\n\n    $scope.getDimSegments = function(segment, $index) {\n      if (segment.type === 'operator') {\n        return $q.when([]);\n      }\n\n      const target = $scope.target;\n      let query = $q.when([]);\n\n      if (segment.type === 'key' || segment.type === 'plus-button') {\n        query = $scope.datasource.getDimensionKeys($scope.target.namespace, $scope.target.region);\n      } else if (segment.type === 'value') {\n        const dimensionKey = $scope.dimSegments[$index - 2].value;\n        query = $scope.datasource.getDimensionValues(\n          target.region,\n          target.namespace,\n          target.metricName,\n          dimensionKey,\n          target.dimensions\n        );\n      }\n\n      return query.then($scope.transformToSegments(true)).then(function(results) {\n        if (segment.type === 'key') {\n          results.splice(0, 0, angular.copy($scope.removeDimSegment));\n        }\n        return results;\n      });\n    };\n\n    $scope.dimSegmentChanged = function(segment, index) {\n      $scope.dimSegments[index] = segment;\n\n      if (segment.value === $scope.removeDimSegment.value) {\n        $scope.dimSegments.splice(index, 3);\n      } else if (segment.type === 'plus-button') {\n        $scope.dimSegments.push(uiSegmentSrv.newOperator('='));\n        $scope.dimSegments.push(uiSegmentSrv.newFake('select dimension value', 'value', 'query-segment-value'));\n        segment.type = 'key';\n        segment.cssClass = 'query-segment-key';\n      }\n\n      $scope.syncDimSegmentsWithModel();\n      $scope.ensurePlusButton($scope.dimSegments);\n      $scope.onChange();\n    };\n\n    $scope.syncDimSegmentsWithModel = function() {\n      const dims = {};\n      const length = $scope.dimSegments.length;\n\n      for (let i = 0; i < length - 2; i += 3) {\n        const keySegment = $scope.dimSegments[i];\n        const valueSegment = $scope.dimSegments[i + 2];\n        if (!valueSegment.fake) {\n          dims[keySegment.value] = valueSegment.value;\n        }\n      }\n\n      $scope.target.dimensions = dims;\n    };\n\n    $scope.getRegions = function() {\n      return $scope.datasource\n        .metricFindQuery('regions()')\n        .then(function(results) {\n          results.unshift({ text: 'default' });\n          return results;\n        })\n        .then($scope.transformToSegments(true));\n    };\n\n    $scope.getNamespaces = function() {\n      return $scope.datasource.metricFindQuery('namespaces()').then($scope.transformToSegments(true));\n    };\n\n    $scope.getMetrics = function() {\n      return $scope.datasource\n        .metricFindQuery('metrics(' + $scope.target.namespace + ',' + $scope.target.region + ')')\n        .then($scope.transformToSegments(true));\n    };\n\n    $scope.regionChanged = function() {\n      $scope.target.region = $scope.regionSegment.value;\n      $scope.onChange();\n    };\n\n    $scope.namespaceChanged = function() {\n      $scope.target.namespace = $scope.namespaceSegment.value;\n      $scope.onChange();\n    };\n\n    $scope.metricChanged = function() {\n      $scope.target.metricName = $scope.metricSegment.value;\n      $scope.onChange();\n    };\n\n    $scope.transformToSegments = function(addTemplateVars) {\n      return function(results) {\n        const segments = _.map(results, function(segment) {\n          return uiSegmentSrv.newSegment({\n            value: segment.text,\n            expandable: segment.expandable,\n          });\n        });\n\n        if (addTemplateVars) {\n          _.each(templateSrv.variables, function(variable) {\n            segments.unshift(\n              uiSegmentSrv.newSegment({\n                type: 'template',\n                value: '$' + variable.name,\n                expandable: true,\n              })\n            );\n          });\n        }\n\n        return segments;\n      };\n    };\n\n    $scope.init();\n  }\n}\n\nangular.module('grafana.controllers').directive('cloudwatchQueryParameter', CloudWatchQueryParameter);\nangular.module('grafana.controllers').controller('CloudWatchQueryParameterCtrl', CloudWatchQueryParameterCtrl);\n","import angular from 'angular';\nimport _ from 'lodash';\nimport * as dateMath from 'app/core/utils/datemath';\nimport kbn from 'app/core/utils/kbn';\nimport * as templatingVariable from 'app/features/templating/variable';\n// import * as moment from 'moment';\n\nexport default class CloudWatchDatasource {\n  type: any;\n  name: any;\n  supportMetrics: any;\n  proxyUrl: any;\n  defaultRegion: any;\n  instanceSettings: any;\n  standardStatistics: any;\n  /** @ngInject */\n  constructor(instanceSettings, private $q, private backendSrv, private templateSrv, private timeSrv) {\n    this.type = 'cloudwatch';\n    this.name = instanceSettings.name;\n    this.supportMetrics = true;\n    this.proxyUrl = instanceSettings.url;\n    this.defaultRegion = instanceSettings.jsonData.defaultRegion;\n    this.instanceSettings = instanceSettings;\n    this.standardStatistics = ['Average', 'Maximum', 'Minimum', 'Sum', 'SampleCount'];\n  }\n\n  query(options) {\n    options = angular.copy(options);\n    options.targets = this.expandTemplateVariable(options.targets, options.scopedVars, this.templateSrv);\n\n    const queries = _.filter(options.targets, item => {\n      return (\n        (item.id !== '' || item.hide !== true) &&\n        ((!!item.region && !!item.namespace && !!item.metricName && !_.isEmpty(item.statistics)) ||\n          item.expression.length > 0)\n      );\n    }).map(item => {\n      item.region = this.templateSrv.replace(this.getActualRegion(item.region), options.scopedVars);\n      item.namespace = this.templateSrv.replace(item.namespace, options.scopedVars);\n      item.metricName = this.templateSrv.replace(item.metricName, options.scopedVars);\n      item.dimensions = this.convertDimensionFormat(item.dimensions, options.scopedVars);\n      item.period = String(this.getPeriod(item, options)); // use string format for period in graph query, and alerting\n      item.id = this.templateSrv.replace(item.id, options.scopedVars);\n      item.expression = this.templateSrv.replace(item.expression, options.scopedVars);\n      item.returnData = typeof item.hide === 'undefined' ? true : !item.hide;\n\n      // valid ExtendedStatistics is like p90.00, check the pattern\n      const hasInvalidStatistics = item.statistics.some(s => {\n        return s.indexOf('p') === 0 && !/p\\d{2}\\.\\d{2}/.test(s);\n      });\n      if (hasInvalidStatistics) {\n        throw { message: 'Invalid extended statistics' };\n      }\n\n      return _.extend(\n        {\n          refId: item.refId,\n          intervalMs: options.intervalMs,\n          maxDataPoints: options.maxDataPoints,\n          datasourceId: this.instanceSettings.id,\n          type: 'timeSeriesQuery',\n        },\n        item\n      );\n    });\n\n    // No valid targets, return the empty result to save a round trip.\n    if (_.isEmpty(queries)) {\n      const d = this.$q.defer();\n      d.resolve({ data: [] });\n      return d.promise;\n    }\n\n    const request = {\n      from: options.range.from.valueOf().toString(),\n      to: options.range.to.valueOf().toString(),\n      queries: queries,\n    };\n\n    return this.performTimeSeriesQuery(request);\n  }\n\n  getPeriod(target, options, now?) {\n    const start = this.convertToCloudWatchTime(options.range.from, false);\n    const end = this.convertToCloudWatchTime(options.range.to, true);\n    now = Math.round((now || Date.now()) / 1000);\n\n    let period;\n    const range = end - start;\n\n    const hourSec = 60 * 60;\n    const daySec = hourSec * 24;\n    let periodUnit = 60;\n    if (!target.period) {\n      if (now - start <= daySec * 15) {\n        // until 15 days ago\n        if (target.namespace === 'AWS/EC2') {\n          periodUnit = period = 300;\n        } else {\n          periodUnit = period = 60;\n        }\n      } else if (now - start <= daySec * 63) {\n        // until 63 days ago\n        periodUnit = period = 60 * 5;\n      } else if (now - start <= daySec * 455) {\n        // until 455 days ago\n        periodUnit = period = 60 * 60;\n      } else {\n        // over 455 days, should return error, but try to long period\n        periodUnit = period = 60 * 60;\n      }\n    } else {\n      if (/^\\d+$/.test(target.period)) {\n        period = parseInt(target.period, 10);\n      } else {\n        period = kbn.interval_to_seconds(this.templateSrv.replace(target.period, options.scopedVars));\n      }\n    }\n    if (period < 1) {\n      period = 1;\n    }\n    if (!target.highResolution && range / period >= 1440) {\n      period = Math.ceil(range / 1440 / periodUnit) * periodUnit;\n    }\n\n    return period;\n  }\n\n  performTimeSeriesQuery(request) {\n    return this.awsRequest('/api/tsdb/query', request).then(res => {\n      const data = [];\n\n      if (res.results) {\n        _.forEach(res.results, queryRes => {\n          _.forEach(queryRes.series, series => {\n            data.push({ target: series.name, datapoints: series.points });\n          });\n        });\n      }\n\n      return { data: data };\n    });\n  }\n\n  transformSuggestDataFromTable(suggestData) {\n    return _.map(suggestData.results['metricFindQuery'].tables[0].rows, v => {\n      return {\n        text: v[0],\n        value: v[1],\n      };\n    });\n  }\n\n  doMetricQueryRequest(subtype, parameters) {\n    const range = this.timeSrv.timeRange();\n    return this.awsRequest('/api/tsdb/query', {\n      from: range.from.valueOf().toString(),\n      to: range.to.valueOf().toString(),\n      queries: [\n        _.extend(\n          {\n            refId: 'metricFindQuery',\n            intervalMs: 1, // dummy\n            maxDataPoints: 1, // dummy\n            datasourceId: this.instanceSettings.id,\n            type: 'metricFindQuery',\n            subtype: subtype,\n          },\n          parameters\n        ),\n      ],\n    }).then(r => {\n      return this.transformSuggestDataFromTable(r);\n    });\n  }\n\n  getRegions() {\n    return this.doMetricQueryRequest('regions', null);\n  }\n\n  getNamespaces() {\n    return this.doMetricQueryRequest('namespaces', null);\n  }\n\n  getMetrics(namespace, region) {\n    return this.doMetricQueryRequest('metrics', {\n      region: this.templateSrv.replace(this.getActualRegion(region)),\n      namespace: this.templateSrv.replace(namespace),\n    });\n  }\n\n  getDimensionKeys(namespace, region) {\n    return this.doMetricQueryRequest('dimension_keys', {\n      region: this.templateSrv.replace(this.getActualRegion(region)),\n      namespace: this.templateSrv.replace(namespace),\n    });\n  }\n\n  getDimensionValues(region, namespace, metricName, dimensionKey, filterDimensions) {\n    return this.doMetricQueryRequest('dimension_values', {\n      region: this.templateSrv.replace(this.getActualRegion(region)),\n      namespace: this.templateSrv.replace(namespace),\n      metricName: this.templateSrv.replace(metricName),\n      dimensionKey: this.templateSrv.replace(dimensionKey),\n      dimensions: this.convertDimensionFormat(filterDimensions, {}),\n    });\n  }\n\n  getEbsVolumeIds(region, instanceId) {\n    return this.doMetricQueryRequest('ebs_volume_ids', {\n      region: this.templateSrv.replace(this.getActualRegion(region)),\n      instanceId: this.templateSrv.replace(instanceId),\n    });\n  }\n\n  getEc2InstanceAttribute(region, attributeName, filters) {\n    return this.doMetricQueryRequest('ec2_instance_attribute', {\n      region: this.templateSrv.replace(this.getActualRegion(region)),\n      attributeName: this.templateSrv.replace(attributeName),\n      filters: filters,\n    });\n  }\n\n  metricFindQuery(query) {\n    let region;\n    let namespace;\n    let metricName;\n    let filterJson;\n\n    const regionQuery = query.match(/^regions\\(\\)/);\n    if (regionQuery) {\n      return this.getRegions();\n    }\n\n    const namespaceQuery = query.match(/^namespaces\\(\\)/);\n    if (namespaceQuery) {\n      return this.getNamespaces();\n    }\n\n    const metricNameQuery = query.match(/^metrics\\(([^\\)]+?)(,\\s?([^,]+?))?\\)/);\n    if (metricNameQuery) {\n      namespace = metricNameQuery[1];\n      region = metricNameQuery[3];\n      return this.getMetrics(namespace, region);\n    }\n\n    const dimensionKeysQuery = query.match(/^dimension_keys\\(([^\\)]+?)(,\\s?([^,]+?))?\\)/);\n    if (dimensionKeysQuery) {\n      namespace = dimensionKeysQuery[1];\n      region = dimensionKeysQuery[3];\n      return this.getDimensionKeys(namespace, region);\n    }\n\n    const dimensionValuesQuery = query.match(\n      /^dimension_values\\(([^,]+?),\\s?([^,]+?),\\s?([^,]+?),\\s?([^,]+?)(,\\s?(.+))?\\)/\n    );\n    if (dimensionValuesQuery) {\n      region = dimensionValuesQuery[1];\n      namespace = dimensionValuesQuery[2];\n      metricName = dimensionValuesQuery[3];\n      const dimensionKey = dimensionValuesQuery[4];\n      filterJson = {};\n      if (dimensionValuesQuery[6]) {\n        filterJson = JSON.parse(this.templateSrv.replace(dimensionValuesQuery[6]));\n      }\n\n      return this.getDimensionValues(region, namespace, metricName, dimensionKey, filterJson);\n    }\n\n    const ebsVolumeIdsQuery = query.match(/^ebs_volume_ids\\(([^,]+?),\\s?([^,]+?)\\)/);\n    if (ebsVolumeIdsQuery) {\n      region = ebsVolumeIdsQuery[1];\n      const instanceId = ebsVolumeIdsQuery[2];\n      return this.getEbsVolumeIds(region, instanceId);\n    }\n\n    const ec2InstanceAttributeQuery = query.match(/^ec2_instance_attribute\\(([^,]+?),\\s?([^,]+?),\\s?(.+?)\\)/);\n    if (ec2InstanceAttributeQuery) {\n      region = ec2InstanceAttributeQuery[1];\n      const targetAttributeName = ec2InstanceAttributeQuery[2];\n      filterJson = JSON.parse(this.templateSrv.replace(ec2InstanceAttributeQuery[3]));\n      return this.getEc2InstanceAttribute(region, targetAttributeName, filterJson);\n    }\n\n    return this.$q.when([]);\n  }\n\n  annotationQuery(options) {\n    const annotation = options.annotation;\n    const statistics = _.map(annotation.statistics, s => {\n      return this.templateSrv.replace(s);\n    });\n    const defaultPeriod = annotation.prefixMatching ? '' : '300';\n    let period = annotation.period || defaultPeriod;\n    period = parseInt(period, 10);\n    const parameters = {\n      prefixMatching: annotation.prefixMatching,\n      region: this.templateSrv.replace(this.getActualRegion(annotation.region)),\n      namespace: this.templateSrv.replace(annotation.namespace),\n      metricName: this.templateSrv.replace(annotation.metricName),\n      dimensions: this.convertDimensionFormat(annotation.dimensions, {}),\n      statistics: statistics,\n      period: period,\n      actionPrefix: annotation.actionPrefix || '',\n      alarmNamePrefix: annotation.alarmNamePrefix || '',\n    };\n\n    return this.awsRequest('/api/tsdb/query', {\n      from: options.range.from.valueOf().toString(),\n      to: options.range.to.valueOf().toString(),\n      queries: [\n        _.extend(\n          {\n            refId: 'annotationQuery',\n            intervalMs: 1, // dummy\n            maxDataPoints: 1, // dummy\n            datasourceId: this.instanceSettings.id,\n            type: 'annotationQuery',\n          },\n          parameters\n        ),\n      ],\n    }).then(r => {\n      return _.map(r.results['annotationQuery'].tables[0].rows, v => {\n        return {\n          annotation: annotation,\n          time: Date.parse(v[0]),\n          title: v[1],\n          tags: [v[2]],\n          text: v[3],\n        };\n      });\n    });\n  }\n\n  targetContainsTemplate(target) {\n    return (\n      this.templateSrv.variableExists(target.region) ||\n      this.templateSrv.variableExists(target.namespace) ||\n      this.templateSrv.variableExists(target.metricName) ||\n      _.find(target.dimensions, (v, k) => {\n        return this.templateSrv.variableExists(k) || this.templateSrv.variableExists(v);\n      })\n    );\n  }\n\n  testDatasource() {\n    /* use billing metrics for test */\n    const region = this.defaultRegion;\n    const namespace = 'AWS/Billing';\n    const metricName = 'EstimatedCharges';\n    const dimensions = {};\n\n    return this.getDimensionValues(region, namespace, metricName, 'ServiceName', dimensions).then(\n      () => {\n        return { status: 'success', message: 'Data source is working' };\n      },\n      err => {\n        return { status: 'error', message: err.message };\n      }\n    );\n  }\n\n  awsRequest(url, data) {\n    const options = {\n      method: 'POST',\n      url: url,\n      data: data,\n    };\n\n    return this.backendSrv.datasourceRequest(options).then(result => {\n      return result.data;\n    });\n  }\n\n  getDefaultRegion() {\n    return this.defaultRegion;\n  }\n\n  getActualRegion(region) {\n    if (region === 'default' || _.isEmpty(region)) {\n      return this.getDefaultRegion();\n    }\n    return region;\n  }\n\n  getExpandedVariables(target, dimensionKey, variable, templateSrv) {\n    /* if the all checkbox is marked we should add all values to the targets */\n    const allSelected = _.find(variable.options, { selected: true, text: 'All' });\n    const selectedVariables = _.filter(variable.options, v => {\n      if (allSelected) {\n        return v.text !== 'All';\n      } else {\n        return v.selected;\n      }\n    });\n    const currentVariables = !_.isArray(variable.current.value)\n      ? [variable.current]\n      : variable.current.value.map(v => {\n          return {\n            text: v,\n            value: v,\n          };\n        });\n    const useSelectedVariables =\n      selectedVariables.some(s => {\n        return s.value === currentVariables[0].value;\n      }) || currentVariables[0].value === '$__all';\n    return (useSelectedVariables ? selectedVariables : currentVariables).map(v => {\n      const t = angular.copy(target);\n      const scopedVar = {};\n      scopedVar[variable.name] = v;\n      t.refId = target.refId + '_' + v.value;\n      t.dimensions[dimensionKey] = templateSrv.replace(t.dimensions[dimensionKey], scopedVar);\n      if (variable.multi && target.id) {\n        t.id = target.id + window.btoa(v.value).replace(/=/g, '0'); // generate unique id\n      } else {\n        t.id = target.id;\n      }\n      return t;\n    });\n  }\n\n  expandTemplateVariable(targets, scopedVars, templateSrv) {\n    // Datasource and template srv logic uber-complected. This should be cleaned up.\n    return _.chain(targets)\n      .map(target => {\n        const dimensionKey = _.findKey(target.dimensions, v => {\n          return templateSrv.variableExists(v) && !_.has(scopedVars, templateSrv.getVariableName(v));\n        });\n\n        if (dimensionKey) {\n          const multiVariable = _.find(templateSrv.variables, variable => {\n            return (\n              templatingVariable.containsVariable(target.dimensions[dimensionKey], variable.name) && variable.multi\n            );\n          });\n          const variable = _.find(templateSrv.variables, variable => {\n            return templatingVariable.containsVariable(target.dimensions[dimensionKey], variable.name);\n          });\n          return this.getExpandedVariables(target, dimensionKey, multiVariable || variable, templateSrv);\n        } else {\n          return [target];\n        }\n      })\n      .flatten()\n      .value();\n  }\n\n  convertToCloudWatchTime(date, roundUp) {\n    if (_.isString(date)) {\n      date = dateMath.parse(date, roundUp);\n    }\n    return Math.round(date.valueOf() / 1000);\n  }\n\n  convertDimensionFormat(dimensions, scopedVars) {\n    const convertedDimensions = {};\n    _.each(dimensions, (value, key) => {\n      convertedDimensions[this.templateSrv.replace(key, scopedVars)] = this.templateSrv.replace(value, scopedVars);\n    });\n    return convertedDimensions;\n  }\n}\n","export class CloudWatchConfigCtrl {\n  static templateUrl = 'partials/config.html';\n  current: any;\n\n  accessKeyExist = false;\n  secretKeyExist = false;\n\n  /** @ngInject */\n  constructor($scope) {\n    this.current.jsonData.timeField = this.current.jsonData.timeField || '@timestamp';\n    this.current.jsonData.authType = this.current.jsonData.authType || 'credentials';\n\n    this.accessKeyExist = this.current.secureJsonFields.accessKey;\n    this.secretKeyExist = this.current.secureJsonFields.secretKey;\n  }\n\n  resetAccessKey() {\n    this.accessKeyExist = false;\n  }\n\n  resetSecretKey() {\n    this.secretKeyExist = false;\n  }\n\n  authTypes = [\n    { name: 'Access & secret key', value: 'keys' },\n    { name: 'Credentials file', value: 'credentials' },\n    { name: 'ARN', value: 'arn' },\n  ];\n\n  indexPatternTypes = [\n    { name: 'No pattern', value: undefined },\n    { name: 'Hourly', value: 'Hourly', example: '[logstash-]YYYY.MM.DD.HH' },\n    { name: 'Daily', value: 'Daily', example: '[logstash-]YYYY.MM.DD' },\n    { name: 'Weekly', value: 'Weekly', example: '[logstash-]GGGG.WW' },\n    { name: 'Monthly', value: 'Monthly', example: '[logstash-]YYYY.MM' },\n    { name: 'Yearly', value: 'Yearly', example: '[logstash-]YYYY' },\n  ];\n}\n","import './query_parameter_ctrl';\nimport { QueryCtrl } from 'app/plugins/sdk';\n\nexport class CloudWatchQueryCtrl extends QueryCtrl {\n  static templateUrl = 'partials/query.editor.html';\n\n  aliasSyntax: string;\n\n  /** @ngInject */\n  constructor($scope, $injector) {\n    super($scope, $injector);\n    this.aliasSyntax = '{{metric}} {{stat}} {{namespace}} {{region}} {{<dimension name>}}';\n  }\n}\n","import './query_parameter_ctrl';\n\nimport CloudWatchDatasource from './datasource';\nimport { CloudWatchQueryCtrl } from './query_ctrl';\nimport { CloudWatchConfigCtrl } from './config_ctrl';\n\nclass CloudWatchAnnotationsQueryCtrl {\n  static templateUrl = 'partials/annotations.editor.html';\n}\n\nexport {\n  CloudWatchDatasource as Datasource,\n  CloudWatchQueryCtrl as QueryCtrl,\n  CloudWatchConfigCtrl as ConfigCtrl,\n  CloudWatchAnnotationsQueryCtrl as AnnotationsQueryCtrl,\n};\n","import _ from 'lodash';\n\nexport const metricAggTypes = [\n  { text: 'Count', value: 'count', requiresField: false },\n  {\n    text: 'Average',\n    value: 'avg',\n    requiresField: true,\n    supportsInlineScript: true,\n    supportsMissing: true,\n  },\n  {\n    text: 'Sum',\n    value: 'sum',\n    requiresField: true,\n    supportsInlineScript: true,\n    supportsMissing: true,\n  },\n  {\n    text: 'Max',\n    value: 'max',\n    requiresField: true,\n    supportsInlineScript: true,\n    supportsMissing: true,\n  },\n  {\n    text: 'Min',\n    value: 'min',\n    requiresField: true,\n    supportsInlineScript: true,\n    supportsMissing: true,\n  },\n  {\n    text: 'Extended Stats',\n    value: 'extended_stats',\n    requiresField: true,\n    supportsMissing: true,\n    supportsInlineScript: true,\n  },\n  {\n    text: 'Percentiles',\n    value: 'percentiles',\n    requiresField: true,\n    supportsMissing: true,\n    supportsInlineScript: true,\n  },\n  {\n    text: 'Unique Count',\n    value: 'cardinality',\n    requiresField: true,\n    supportsMissing: true,\n  },\n  {\n    text: 'Moving Average',\n    value: 'moving_avg',\n    requiresField: false,\n    isPipelineAgg: true,\n    minVersion: 2,\n  },\n  {\n    text: 'Derivative',\n    value: 'derivative',\n    requiresField: false,\n    isPipelineAgg: true,\n    minVersion: 2,\n  },\n  { text: 'Raw Document', value: 'raw_document', requiresField: false },\n];\n\nexport const bucketAggTypes = [\n  { text: 'Terms', value: 'terms', requiresField: true },\n  { text: 'Filters', value: 'filters' },\n  { text: 'Geo Hash Grid', value: 'geohash_grid', requiresField: true },\n  { text: 'Date Histogram', value: 'date_histogram', requiresField: true },\n  { text: 'Histogram', value: 'histogram', requiresField: true },\n];\n\nexport const orderByOptions = [{ text: 'Doc Count', value: '_count' }, { text: 'Term value', value: '_term' }];\n\nexport const orderOptions = [{ text: 'Top', value: 'desc' }, { text: 'Bottom', value: 'asc' }];\n\nexport const sizeOptions = [\n  { text: 'No limit', value: '0' },\n  { text: '1', value: '1' },\n  { text: '2', value: '2' },\n  { text: '3', value: '3' },\n  { text: '5', value: '5' },\n  { text: '10', value: '10' },\n  { text: '15', value: '15' },\n  { text: '20', value: '20' },\n];\n\nexport const extendedStats = [\n  { text: 'Avg', value: 'avg' },\n  { text: 'Min', value: 'min' },\n  { text: 'Max', value: 'max' },\n  { text: 'Sum', value: 'sum' },\n  { text: 'Count', value: 'count' },\n  { text: 'Std Dev', value: 'std_deviation' },\n  { text: 'Std Dev Upper', value: 'std_deviation_bounds_upper' },\n  { text: 'Std Dev Lower', value: 'std_deviation_bounds_lower' },\n];\n\nexport const intervalOptions = [\n  { text: 'auto', value: 'auto' },\n  { text: '10s', value: '10s' },\n  { text: '1m', value: '1m' },\n  { text: '5m', value: '5m' },\n  { text: '10m', value: '10m' },\n  { text: '20m', value: '20m' },\n  { text: '1h', value: '1h' },\n  { text: '1d', value: '1d' },\n];\n\nexport const movingAvgModelOptions = [\n  { text: 'Simple', value: 'simple' },\n  { text: 'Linear', value: 'linear' },\n  { text: 'Exponentially Weighted', value: 'ewma' },\n  { text: 'Holt Linear', value: 'holt' },\n  { text: 'Holt Winters', value: 'holt_winters' },\n];\n\nexport const pipelineOptions = {\n  moving_avg: [\n    { text: 'window', default: 5 },\n    { text: 'model', default: 'simple' },\n    { text: 'predict', default: undefined },\n    { text: 'minimize', default: false },\n  ],\n  derivative: [{ text: 'unit', default: undefined }],\n};\n\nexport const movingAvgModelSettings = {\n  simple: [],\n  linear: [],\n  ewma: [{ text: 'Alpha', value: 'alpha', default: undefined }],\n  holt: [{ text: 'Alpha', value: 'alpha', default: undefined }, { text: 'Beta', value: 'beta', default: undefined }],\n  holt_winters: [\n    { text: 'Alpha', value: 'alpha', default: undefined },\n    { text: 'Beta', value: 'beta', default: undefined },\n    { text: 'Gamma', value: 'gamma', default: undefined },\n    { text: 'Period', value: 'period', default: undefined },\n    { text: 'Pad', value: 'pad', default: undefined, isCheckbox: true },\n  ],\n};\n\nexport function getMetricAggTypes(esVersion) {\n  return _.filter(metricAggTypes, function(f) {\n    if (f.minVersion) {\n      return f.minVersion <= esVersion;\n    } else {\n      return true;\n    }\n  });\n}\n\nexport function getPipelineOptions(metric) {\n  if (!isPipelineAgg(metric.type)) {\n    return [];\n  }\n\n  return pipelineOptions[metric.type];\n}\n\nexport function isPipelineAgg(metricType) {\n  if (metricType) {\n    const po = pipelineOptions[metricType];\n    return po !== null && po !== undefined;\n  }\n\n  return false;\n}\n\nexport function getPipelineAggOptions(targets) {\n  const result = [];\n  _.each(targets.metrics, function(metric) {\n    if (!isPipelineAgg(metric.type)) {\n      result.push({ text: describeMetric(metric), value: metric.id });\n    }\n  });\n\n  return result;\n}\n\nexport function getMovingAvgSettings(model, filtered) {\n  const filteredResult = [];\n  if (filtered) {\n    _.each(movingAvgModelSettings[model], function(setting) {\n      if (!setting.isCheckbox) {\n        filteredResult.push(setting);\n      }\n    });\n    return filteredResult;\n  }\n  return movingAvgModelSettings[model];\n}\n\nexport function getOrderByOptions(target) {\n  const metricRefs = [];\n  _.each(target.metrics, function(metric) {\n    if (metric.type !== 'count') {\n      metricRefs.push({ text: describeMetric(metric), value: metric.id });\n    }\n  });\n\n  return orderByOptions.concat(metricRefs);\n}\n\nexport function describeOrder(order) {\n  const def = _.find(orderOptions, { value: order });\n  return def.text;\n}\n\nexport function describeMetric(metric) {\n  const def = _.find(metricAggTypes, { value: metric.type });\n  return def.text + ' ' + metric.field;\n}\n\nexport function describeOrderBy(orderBy, target) {\n  const def = _.find(orderByOptions, { value: orderBy });\n  if (def) {\n    return def.text;\n  }\n  const metric = _.find(target.metrics, { id: orderBy });\n  if (metric) {\n    return describeMetric(metric);\n  } else {\n    return 'metric not found';\n  }\n}\n","import * as queryDef from './query_def';\n\nexport class ElasticQueryBuilder {\n  timeField: string;\n  esVersion: number;\n\n  constructor(options) {\n    this.timeField = options.timeField;\n    this.esVersion = options.esVersion;\n  }\n\n  getRangeFilter() {\n    const filter = {};\n    filter[this.timeField] = {\n      gte: '$timeFrom',\n      lte: '$timeTo',\n      format: 'epoch_millis',\n    };\n\n    return filter;\n  }\n\n  buildTermsAgg(aggDef, queryNode, target) {\n    let metricRef, metric, y;\n    queryNode.terms = { field: aggDef.field };\n\n    if (!aggDef.settings) {\n      return queryNode;\n    }\n\n    queryNode.terms.size = parseInt(aggDef.settings.size, 10) === 0 ? 500 : parseInt(aggDef.settings.size, 10);\n    if (aggDef.settings.orderBy !== void 0) {\n      queryNode.terms.order = {};\n      queryNode.terms.order[aggDef.settings.orderBy] = aggDef.settings.order;\n\n      // if metric ref, look it up and add it to this agg level\n      metricRef = parseInt(aggDef.settings.orderBy, 10);\n      if (!isNaN(metricRef)) {\n        for (y = 0; y < target.metrics.length; y++) {\n          metric = target.metrics[y];\n          if (metric.id === aggDef.settings.orderBy) {\n            queryNode.aggs = {};\n            queryNode.aggs[metric.id] = {};\n            queryNode.aggs[metric.id][metric.type] = { field: metric.field };\n            break;\n          }\n        }\n      }\n    }\n\n    if (aggDef.settings.min_doc_count !== void 0) {\n      queryNode.terms.min_doc_count = parseInt(aggDef.settings.min_doc_count, 10);\n    }\n\n    if (aggDef.settings.missing) {\n      queryNode.terms.missing = aggDef.settings.missing;\n    }\n\n    return queryNode;\n  }\n\n  getDateHistogramAgg(aggDef) {\n    const esAgg: any = {};\n    const settings = aggDef.settings || {};\n    esAgg.interval = settings.interval;\n    esAgg.field = this.timeField;\n    esAgg.min_doc_count = settings.min_doc_count || 0;\n    esAgg.extended_bounds = { min: '$timeFrom', max: '$timeTo' };\n    esAgg.format = 'epoch_millis';\n\n    if (esAgg.interval === 'auto') {\n      esAgg.interval = '$__interval';\n    }\n\n    if (settings.missing) {\n      esAgg.missing = settings.missing;\n    }\n\n    return esAgg;\n  }\n\n  getHistogramAgg(aggDef) {\n    const esAgg: any = {};\n    const settings = aggDef.settings || {};\n    esAgg.interval = settings.interval;\n    esAgg.field = aggDef.field;\n    esAgg.min_doc_count = settings.min_doc_count || 0;\n\n    if (settings.missing) {\n      esAgg.missing = settings.missing;\n    }\n    return esAgg;\n  }\n\n  getFiltersAgg(aggDef) {\n    const filterObj = {};\n    for (let i = 0; i < aggDef.settings.filters.length; i++) {\n      const query = aggDef.settings.filters[i].query;\n      let label = aggDef.settings.filters[i].label;\n      label = label === '' || label === undefined ? query : label;\n      filterObj[label] = {\n        query_string: {\n          query: query,\n          analyze_wildcard: true,\n        },\n      };\n    }\n\n    return filterObj;\n  }\n\n  documentQuery(query, size) {\n    query.size = size;\n    query.sort = {};\n    query.sort[this.timeField] = { order: 'desc', unmapped_type: 'boolean' };\n\n    // fields field not supported on ES 5.x\n    if (this.esVersion < 5) {\n      query.fields = ['*', '_source'];\n    }\n\n    query.script_fields = {};\n    if (this.esVersion < 5) {\n      query.fielddata_fields = [this.timeField];\n    } else {\n      query.docvalue_fields = [this.timeField];\n    }\n    return query;\n  }\n\n  addAdhocFilters(query, adhocFilters) {\n    if (!adhocFilters) {\n      return;\n    }\n\n    let i, filter, condition, queryCondition;\n\n    for (i = 0; i < adhocFilters.length; i++) {\n      filter = adhocFilters[i];\n      condition = {};\n      condition[filter.key] = filter.value;\n      queryCondition = {};\n      queryCondition[filter.key] = { query: filter.value };\n\n      switch (filter.operator) {\n        case '=':\n          if (!query.query.bool.must) {\n            query.query.bool.must = [];\n          }\n          query.query.bool.must.push({ match_phrase: queryCondition });\n          break;\n        case '!=':\n          if (!query.query.bool.must_not) {\n            query.query.bool.must_not = [];\n          }\n          query.query.bool.must_not.push({ match_phrase: queryCondition });\n          break;\n        case '<':\n          condition[filter.key] = { lt: filter.value };\n          query.query.bool.filter.push({ range: condition });\n          break;\n        case '>':\n          condition[filter.key] = { gt: filter.value };\n          query.query.bool.filter.push({ range: condition });\n          break;\n        case '=~':\n          query.query.bool.filter.push({ regexp: condition });\n          break;\n        case '!~':\n          query.query.bool.filter.push({\n            bool: { must_not: { regexp: condition } },\n          });\n          break;\n      }\n    }\n  }\n\n  build(target, adhocFilters?, queryString?) {\n    // make sure query has defaults;\n    target.metrics = target.metrics || [{ type: 'count', id: '1' }];\n    target.bucketAggs = target.bucketAggs || [{ type: 'date_histogram', id: '2', settings: { interval: 'auto' } }];\n    target.timeField = this.timeField;\n\n    let i, nestedAggs, metric;\n    const query = {\n      size: 0,\n      query: {\n        bool: {\n          filter: [\n            { range: this.getRangeFilter() },\n            {\n              query_string: {\n                analyze_wildcard: true,\n                query: queryString,\n              },\n            },\n          ],\n        },\n      },\n    };\n\n    this.addAdhocFilters(query, adhocFilters);\n\n    // handle document query\n    if (target.bucketAggs.length === 0) {\n      metric = target.metrics[0];\n      if (!metric || metric.type !== 'raw_document') {\n        throw { message: 'Invalid query' };\n      }\n\n      const size = (metric.settings && metric.settings.size) || 500;\n      return this.documentQuery(query, size);\n    }\n\n    nestedAggs = query;\n\n    for (i = 0; i < target.bucketAggs.length; i++) {\n      const aggDef = target.bucketAggs[i];\n      const esAgg = {};\n\n      switch (aggDef.type) {\n        case 'date_histogram': {\n          esAgg['date_histogram'] = this.getDateHistogramAgg(aggDef);\n          break;\n        }\n        case 'histogram': {\n          esAgg['histogram'] = this.getHistogramAgg(aggDef);\n          break;\n        }\n        case 'filters': {\n          esAgg['filters'] = { filters: this.getFiltersAgg(aggDef) };\n          break;\n        }\n        case 'terms': {\n          this.buildTermsAgg(aggDef, esAgg, target);\n          break;\n        }\n        case 'geohash_grid': {\n          esAgg['geohash_grid'] = {\n            field: aggDef.field,\n            precision: aggDef.settings.precision,\n          };\n          break;\n        }\n      }\n\n      nestedAggs.aggs = nestedAggs.aggs || {};\n      nestedAggs.aggs[aggDef.id] = esAgg;\n      nestedAggs = esAgg;\n    }\n\n    nestedAggs.aggs = {};\n\n    for (i = 0; i < target.metrics.length; i++) {\n      metric = target.metrics[i];\n      if (metric.type === 'count') {\n        continue;\n      }\n\n      const aggField = {};\n      let metricAgg = null;\n\n      if (queryDef.isPipelineAgg(metric.type)) {\n        if (metric.pipelineAgg && /^\\d*$/.test(metric.pipelineAgg)) {\n          metricAgg = { buckets_path: metric.pipelineAgg };\n        } else {\n          continue;\n        }\n      } else {\n        metricAgg = { field: metric.field };\n      }\n\n      for (const prop in metric.settings) {\n        if (metric.settings.hasOwnProperty(prop) && metric.settings[prop] !== null) {\n          metricAgg[prop] = metric.settings[prop];\n        }\n      }\n\n      aggField[metric.type] = metricAgg;\n      nestedAggs.aggs[metric.id] = aggField;\n    }\n\n    return query;\n  }\n\n  getTermsQuery(queryDef) {\n    const query: any = {\n      size: 0,\n      query: {\n        bool: {\n          filter: [{ range: this.getRangeFilter() }],\n        },\n      },\n    };\n\n    if (queryDef.query) {\n      query.query.bool.filter.push({\n        query_string: {\n          analyze_wildcard: true,\n          query: queryDef.query,\n        },\n      });\n    }\n\n    let size = 500;\n    if (queryDef.size) {\n      size = queryDef.size;\n    }\n\n    query.aggs = {\n      '1': {\n        terms: {\n          field: queryDef.field,\n          size: size,\n          order: {\n            _term: 'asc',\n          },\n        },\n      },\n    };\n    return query;\n  }\n}\n","import _ from 'lodash';\nimport * as queryDef from './query_def';\nimport TableModel from 'app/core/table_model';\n\nexport class ElasticResponse {\n  constructor(private targets, private response) {\n    this.targets = targets;\n    this.response = response;\n  }\n\n  processMetrics(esAgg, target, seriesList, props) {\n    let metric, y, i, newSeries, bucket, value;\n\n    for (y = 0; y < target.metrics.length; y++) {\n      metric = target.metrics[y];\n      if (metric.hide) {\n        continue;\n      }\n\n      switch (metric.type) {\n        case 'count': {\n          newSeries = { datapoints: [], metric: 'count', props: props };\n          for (i = 0; i < esAgg.buckets.length; i++) {\n            bucket = esAgg.buckets[i];\n            value = bucket.doc_count;\n            newSeries.datapoints.push([value, bucket.key]);\n          }\n          seriesList.push(newSeries);\n          break;\n        }\n        case 'percentiles': {\n          if (esAgg.buckets.length === 0) {\n            break;\n          }\n\n          const firstBucket = esAgg.buckets[0];\n          const percentiles = firstBucket[metric.id].values;\n\n          for (const percentileName in percentiles) {\n            newSeries = {\n              datapoints: [],\n              metric: 'p' + percentileName,\n              props: props,\n              field: metric.field,\n            };\n\n            for (i = 0; i < esAgg.buckets.length; i++) {\n              bucket = esAgg.buckets[i];\n              const values = bucket[metric.id].values;\n              newSeries.datapoints.push([values[percentileName], bucket.key]);\n            }\n            seriesList.push(newSeries);\n          }\n\n          break;\n        }\n        case 'extended_stats': {\n          for (const statName in metric.meta) {\n            if (!metric.meta[statName]) {\n              continue;\n            }\n\n            newSeries = {\n              datapoints: [],\n              metric: statName,\n              props: props,\n              field: metric.field,\n            };\n\n            for (i = 0; i < esAgg.buckets.length; i++) {\n              bucket = esAgg.buckets[i];\n              const stats = bucket[metric.id];\n\n              // add stats that are in nested obj to top level obj\n              stats.std_deviation_bounds_upper = stats.std_deviation_bounds.upper;\n              stats.std_deviation_bounds_lower = stats.std_deviation_bounds.lower;\n\n              newSeries.datapoints.push([stats[statName], bucket.key]);\n            }\n\n            seriesList.push(newSeries);\n          }\n\n          break;\n        }\n        default: {\n          newSeries = {\n            datapoints: [],\n            metric: metric.type,\n            field: metric.field,\n            props: props,\n          };\n          for (i = 0; i < esAgg.buckets.length; i++) {\n            bucket = esAgg.buckets[i];\n\n            value = bucket[metric.id];\n            if (value !== undefined) {\n              if (value.normalized_value) {\n                newSeries.datapoints.push([value.normalized_value, bucket.key]);\n              } else {\n                newSeries.datapoints.push([value.value, bucket.key]);\n              }\n            }\n          }\n          seriesList.push(newSeries);\n          break;\n        }\n      }\n    }\n  }\n\n  processAggregationDocs(esAgg, aggDef, target, table, props) {\n    // add columns\n    if (table.columns.length === 0) {\n      for (const propKey of _.keys(props)) {\n        table.addColumn({ text: propKey, filterable: true });\n      }\n      table.addColumn({ text: aggDef.field, filterable: true });\n    }\n\n    // helper func to add values to value array\n    const addMetricValue = (values, metricName, value) => {\n      table.addColumn({ text: metricName });\n      values.push(value);\n    };\n\n    for (const bucket of esAgg.buckets) {\n      const values = [];\n\n      for (const propValues of _.values(props)) {\n        values.push(propValues);\n      }\n\n      // add bucket key (value)\n      values.push(bucket.key);\n\n      for (const metric of target.metrics) {\n        switch (metric.type) {\n          case 'count': {\n            addMetricValue(values, this.getMetricName(metric.type), bucket.doc_count);\n            break;\n          }\n          case 'extended_stats': {\n            for (const statName in metric.meta) {\n              if (!metric.meta[statName]) {\n                continue;\n              }\n\n              const stats = bucket[metric.id];\n              // add stats that are in nested obj to top level obj\n              stats.std_deviation_bounds_upper = stats.std_deviation_bounds.upper;\n              stats.std_deviation_bounds_lower = stats.std_deviation_bounds.lower;\n\n              addMetricValue(values, this.getMetricName(statName), stats[statName]);\n            }\n            break;\n          }\n          default: {\n            let metricName = this.getMetricName(metric.type);\n            const otherMetrics = _.filter(target.metrics, { type: metric.type });\n\n            // if more of the same metric type include field field name in property\n            if (otherMetrics.length > 1) {\n              metricName += ' ' + metric.field;\n            }\n\n            addMetricValue(values, metricName, bucket[metric.id].value);\n            break;\n          }\n        }\n      }\n\n      table.rows.push(values);\n    }\n  }\n\n  // This is quite complex\n  // need to recurise down the nested buckets to build series\n  processBuckets(aggs, target, seriesList, table, props, depth) {\n    let bucket, aggDef, esAgg, aggId;\n    const maxDepth = target.bucketAggs.length - 1;\n\n    for (aggId in aggs) {\n      aggDef = _.find(target.bucketAggs, { id: aggId });\n      esAgg = aggs[aggId];\n\n      if (!aggDef) {\n        continue;\n      }\n\n      if (depth === maxDepth) {\n        if (aggDef.type === 'date_histogram') {\n          this.processMetrics(esAgg, target, seriesList, props);\n        } else {\n          this.processAggregationDocs(esAgg, aggDef, target, table, props);\n        }\n      } else {\n        for (const nameIndex in esAgg.buckets) {\n          bucket = esAgg.buckets[nameIndex];\n          props = _.clone(props);\n          if (bucket.key !== void 0) {\n            props[aggDef.field] = bucket.key;\n          } else {\n            props['filter'] = nameIndex;\n          }\n          if (bucket.key_as_string) {\n            props[aggDef.field] = bucket.key_as_string;\n          }\n          this.processBuckets(bucket, target, seriesList, table, props, depth + 1);\n        }\n      }\n    }\n  }\n\n  private getMetricName(metric) {\n    let metricDef = _.find(queryDef.metricAggTypes, { value: metric });\n    if (!metricDef) {\n      metricDef = _.find(queryDef.extendedStats, { value: metric });\n    }\n\n    return metricDef ? metricDef.text : metric;\n  }\n\n  private getSeriesName(series, target, metricTypeCount) {\n    let metricName = this.getMetricName(series.metric);\n\n    if (target.alias) {\n      const regex = /\\{\\{([\\s\\S]+?)\\}\\}/g;\n\n      return target.alias.replace(regex, function(match, g1, g2) {\n        const group = g1 || g2;\n\n        if (group.indexOf('term ') === 0) {\n          return series.props[group.substring(5)];\n        }\n        if (series.props[group] !== void 0) {\n          return series.props[group];\n        }\n        if (group === 'metric') {\n          return metricName;\n        }\n        if (group === 'field') {\n          return series.field;\n        }\n\n        return match;\n      });\n    }\n\n    if (series.field && queryDef.isPipelineAgg(series.metric)) {\n      const appliedAgg = _.find(target.metrics, { id: series.field });\n      if (appliedAgg) {\n        metricName += ' ' + queryDef.describeMetric(appliedAgg);\n      } else {\n        metricName = 'Unset';\n      }\n    } else if (series.field) {\n      metricName += ' ' + series.field;\n    }\n\n    const propKeys = _.keys(series.props);\n    if (propKeys.length === 0) {\n      return metricName;\n    }\n\n    let name = '';\n    for (const propName in series.props) {\n      name += series.props[propName] + ' ';\n    }\n\n    if (metricTypeCount === 1) {\n      return name.trim();\n    }\n\n    return name.trim() + ' ' + metricName;\n  }\n\n  nameSeries(seriesList, target) {\n    const metricTypeCount = _.uniq(_.map(seriesList, 'metric')).length;\n\n    for (let i = 0; i < seriesList.length; i++) {\n      const series = seriesList[i];\n      series.target = this.getSeriesName(series, target, metricTypeCount);\n    }\n  }\n\n  processHits(hits, seriesList) {\n    const series = {\n      target: 'docs',\n      type: 'docs',\n      datapoints: [],\n      total: hits.total,\n      filterable: true,\n    };\n    let propName, hit, doc, i;\n\n    for (i = 0; i < hits.hits.length; i++) {\n      hit = hits.hits[i];\n      doc = {\n        _id: hit._id,\n        _type: hit._type,\n        _index: hit._index,\n      };\n\n      if (hit._source) {\n        for (propName in hit._source) {\n          doc[propName] = hit._source[propName];\n        }\n      }\n\n      for (propName in hit.fields) {\n        doc[propName] = hit.fields[propName];\n      }\n      series.datapoints.push(doc);\n    }\n\n    seriesList.push(series);\n  }\n\n  trimDatapoints(aggregations, target) {\n    const histogram = _.find(target.bucketAggs, { type: 'date_histogram' });\n\n    const shouldDropFirstAndLast = histogram && histogram.settings && histogram.settings.trimEdges;\n    if (shouldDropFirstAndLast) {\n      const trim = histogram.settings.trimEdges;\n      for (const prop in aggregations) {\n        const points = aggregations[prop];\n        if (points.datapoints.length > trim * 2) {\n          points.datapoints = points.datapoints.slice(trim, points.datapoints.length - trim);\n        }\n      }\n    }\n  }\n\n  getErrorFromElasticResponse(response, err) {\n    const result: any = {};\n    result.data = JSON.stringify(err, null, 4);\n    if (err.root_cause && err.root_cause.length > 0 && err.root_cause[0].reason) {\n      result.message = err.root_cause[0].reason;\n    } else {\n      result.message = err.reason || 'Unkown elastic error response';\n    }\n\n    if (response.$$config) {\n      result.config = response.$$config;\n    }\n\n    return result;\n  }\n\n  getTimeSeries() {\n    const seriesList = [];\n\n    for (let i = 0; i < this.response.responses.length; i++) {\n      const response = this.response.responses[i];\n      if (response.error) {\n        throw this.getErrorFromElasticResponse(this.response, response.error);\n      }\n\n      if (response.hits && response.hits.hits.length > 0) {\n        this.processHits(response.hits, seriesList);\n      }\n\n      if (response.aggregations) {\n        const aggregations = response.aggregations;\n        const target = this.targets[i];\n        const tmpSeriesList = [];\n        const table = new TableModel();\n\n        this.processBuckets(aggregations, target, tmpSeriesList, table, {}, 0);\n        this.trimDatapoints(tmpSeriesList, target);\n        this.nameSeries(tmpSeriesList, target);\n\n        for (let y = 0; y < tmpSeriesList.length; y++) {\n          seriesList.push(tmpSeriesList[y]);\n        }\n\n        if (table.rows.length > 0) {\n          seriesList.push(table);\n        }\n      }\n    }\n\n    return { data: seriesList };\n  }\n}\n","import moment from 'moment';\n\nconst intervalMap = {\n  Hourly: { startOf: 'hour', amount: 'hours' },\n  Daily: { startOf: 'day', amount: 'days' },\n  Weekly: { startOf: 'isoWeek', amount: 'weeks' },\n  Monthly: { startOf: 'month', amount: 'months' },\n  Yearly: { startOf: 'year', amount: 'years' },\n};\n\nexport class IndexPattern {\n  constructor(private pattern, private interval: string | null) {}\n\n  getIndexForToday() {\n    if (this.interval) {\n      return moment.utc().format(this.pattern);\n    } else {\n      return this.pattern;\n    }\n  }\n\n  getIndexList(from, to) {\n    if (!this.interval) {\n      return this.pattern;\n    }\n\n    const intervalInfo = intervalMap[this.interval];\n    const start = moment(from)\n      .utc()\n      .startOf(intervalInfo.startOf);\n    const endEpoch = moment(to)\n      .utc()\n      .startOf(intervalInfo.startOf)\n      .valueOf();\n    const indexList = [];\n\n    while (start.valueOf() <= endEpoch) {\n      indexList.push(start.format(this.pattern));\n      start.add(1, intervalInfo.amount);\n    }\n\n    return indexList;\n  }\n}\n","import angular from 'angular';\nimport _ from 'lodash';\nimport moment from 'moment';\nimport { ElasticQueryBuilder } from './query_builder';\nimport { IndexPattern } from './index_pattern';\nimport { ElasticResponse } from './elastic_response';\n\nexport class ElasticDatasource {\n  basicAuth: string;\n  withCredentials: boolean;\n  url: string;\n  name: string;\n  index: string;\n  timeField: string;\n  esVersion: number;\n  interval: string;\n  maxConcurrentShardRequests: number;\n  queryBuilder: ElasticQueryBuilder;\n  indexPattern: IndexPattern;\n\n  /** @ngInject */\n  constructor(instanceSettings, private $q, private backendSrv, private templateSrv, private timeSrv) {\n    this.basicAuth = instanceSettings.basicAuth;\n    this.withCredentials = instanceSettings.withCredentials;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.index = instanceSettings.index;\n    this.timeField = instanceSettings.jsonData.timeField;\n    this.esVersion = instanceSettings.jsonData.esVersion;\n    this.indexPattern = new IndexPattern(instanceSettings.index, instanceSettings.jsonData.interval);\n    this.interval = instanceSettings.jsonData.timeInterval;\n    this.maxConcurrentShardRequests = instanceSettings.jsonData.maxConcurrentShardRequests;\n    this.queryBuilder = new ElasticQueryBuilder({\n      timeField: this.timeField,\n      esVersion: this.esVersion,\n    });\n  }\n\n  private request(method, url, data?) {\n    const options: any = {\n      url: this.url + '/' + url,\n      method: method,\n      data: data,\n    };\n\n    if (this.basicAuth || this.withCredentials) {\n      options.withCredentials = true;\n    }\n    if (this.basicAuth) {\n      options.headers = {\n        Authorization: this.basicAuth,\n      };\n    }\n\n    return this.backendSrv.datasourceRequest(options);\n  }\n\n  private get(url) {\n    const range = this.timeSrv.timeRange();\n    const index_list = this.indexPattern.getIndexList(range.from.valueOf(), range.to.valueOf());\n    if (_.isArray(index_list) && index_list.length) {\n      return this.request('GET', index_list[0] + url).then(function(results) {\n        results.data.$$config = results.config;\n        return results.data;\n      });\n    } else {\n      return this.request('GET', this.indexPattern.getIndexForToday() + url).then(function(results) {\n        results.data.$$config = results.config;\n        return results.data;\n      });\n    }\n  }\n\n  private post(url, data) {\n    return this.request('POST', url, data)\n      .then(function(results) {\n        results.data.$$config = results.config;\n        return results.data;\n      })\n      .catch(err => {\n        if (err.data && err.data.error) {\n          throw {\n            message: 'Elasticsearch error: ' + err.data.error.reason,\n            error: err.data.error,\n          };\n        }\n\n        throw err;\n      });\n  }\n\n  annotationQuery(options) {\n    const annotation = options.annotation;\n    const timeField = annotation.timeField || '@timestamp';\n    const queryString = annotation.query || '*';\n    const tagsField = annotation.tagsField || 'tags';\n    const textField = annotation.textField || null;\n\n    const range = {};\n    range[timeField] = {\n      from: options.range.from.valueOf(),\n      to: options.range.to.valueOf(),\n      format: 'epoch_millis',\n    };\n\n    const queryInterpolated = this.templateSrv.replace(queryString, {}, 'lucene');\n    const query = {\n      bool: {\n        filter: [\n          { range: range },\n          {\n            query_string: {\n              query: queryInterpolated,\n            },\n          },\n        ],\n      },\n    };\n\n    const data = {\n      query: query,\n      size: 10000,\n    };\n\n    // fields field not supported on ES 5.x\n    if (this.esVersion < 5) {\n      data['fields'] = [timeField, '_source'];\n    }\n\n    const header: any = {\n      search_type: 'query_then_fetch',\n      ignore_unavailable: true,\n    };\n\n    // old elastic annotations had index specified on them\n    if (annotation.index) {\n      header.index = annotation.index;\n    } else {\n      header.index = this.indexPattern.getIndexList(options.range.from, options.range.to);\n    }\n\n    const payload = angular.toJson(header) + '\\n' + angular.toJson(data) + '\\n';\n\n    return this.post('_msearch', payload).then(res => {\n      const list = [];\n      const hits = res.responses[0].hits.hits;\n\n      const getFieldFromSource = function(source, fieldName) {\n        if (!fieldName) {\n          return;\n        }\n\n        const fieldNames = fieldName.split('.');\n        let fieldValue = source;\n\n        for (let i = 0; i < fieldNames.length; i++) {\n          fieldValue = fieldValue[fieldNames[i]];\n          if (!fieldValue) {\n            console.log('could not find field in annotation: ', fieldName);\n            return '';\n          }\n        }\n\n        return fieldValue;\n      };\n\n      for (let i = 0; i < hits.length; i++) {\n        const source = hits[i]._source;\n        let time = getFieldFromSource(source, timeField);\n        if (typeof hits[i].fields !== 'undefined') {\n          const fields = hits[i].fields;\n          if (_.isString(fields[timeField]) || _.isNumber(fields[timeField])) {\n            time = fields[timeField];\n          }\n        }\n\n        const event = {\n          annotation: annotation,\n          time: moment.utc(time).valueOf(),\n          text: getFieldFromSource(source, textField),\n          tags: getFieldFromSource(source, tagsField),\n        };\n\n        // legacy support for title tield\n        if (annotation.titleField) {\n          const title = getFieldFromSource(source, annotation.titleField);\n          if (title) {\n            event.text = title + '\\n' + event.text;\n          }\n        }\n\n        if (typeof event.tags === 'string') {\n          event.tags = event.tags.split(',');\n        }\n\n        list.push(event);\n      }\n      return list;\n    });\n  }\n\n  testDatasource() {\n    this.timeSrv.setTime({ from: 'now-1m', to: 'now' }, true);\n    // validate that the index exist and has date field\n    return this.getFields({ type: 'date' }).then(\n      dateFields => {\n        const timeField = _.find(dateFields, { text: this.timeField });\n        if (!timeField) {\n          return {\n            status: 'error',\n            message: 'No date field named ' + this.timeField + ' found',\n          };\n        }\n        return { status: 'success', message: 'Index OK. Time field name OK.' };\n      },\n      function(err) {\n        console.log(err);\n        if (err.data && err.data.error) {\n          let message = angular.toJson(err.data.error);\n          if (err.data.error.reason) {\n            message = err.data.error.reason;\n          }\n          return { status: 'error', message: message };\n        } else {\n          return { status: 'error', message: err.status };\n        }\n      }\n    );\n  }\n\n  getQueryHeader(searchType, timeFrom, timeTo) {\n    const query_header: any = {\n      search_type: searchType,\n      ignore_unavailable: true,\n      index: this.indexPattern.getIndexList(timeFrom, timeTo),\n    };\n    if (this.esVersion >= 56) {\n      query_header['max_concurrent_shard_requests'] = this.maxConcurrentShardRequests;\n    }\n    return angular.toJson(query_header);\n  }\n\n  query(options) {\n    let payload = '';\n    let target;\n    const sentTargets = [];\n\n    // add global adhoc filters to timeFilter\n    const adhocFilters = this.templateSrv.getAdhocFilters(this.name);\n\n    for (let i = 0; i < options.targets.length; i++) {\n      target = options.targets[i];\n      if (target.hide) {\n        continue;\n      }\n\n      const queryString = this.templateSrv.replace(target.query || '*', options.scopedVars, 'lucene');\n      const queryObj = this.queryBuilder.build(target, adhocFilters, queryString);\n      const esQuery = angular.toJson(queryObj);\n\n      const searchType = queryObj.size === 0 && this.esVersion < 5 ? 'count' : 'query_then_fetch';\n      const header = this.getQueryHeader(searchType, options.range.from, options.range.to);\n      payload += header + '\\n';\n\n      payload += esQuery + '\\n';\n      sentTargets.push(target);\n    }\n\n    if (sentTargets.length === 0) {\n      return this.$q.when([]);\n    }\n\n    payload = payload.replace(/\\$timeFrom/g, options.range.from.valueOf());\n    payload = payload.replace(/\\$timeTo/g, options.range.to.valueOf());\n    payload = this.templateSrv.replace(payload, options.scopedVars);\n\n    return this.post('_msearch', payload).then(function(res) {\n      return new ElasticResponse(sentTargets, res).getTimeSeries();\n    });\n  }\n\n  getFields(query) {\n    return this.get('/_mapping').then(function(result) {\n      const typeMap = {\n        float: 'number',\n        double: 'number',\n        integer: 'number',\n        long: 'number',\n        date: 'date',\n        string: 'string',\n        text: 'string',\n        scaled_float: 'number',\n        nested: 'nested',\n      };\n\n      function shouldAddField(obj, key, query) {\n        if (key[0] === '_') {\n          return false;\n        }\n\n        if (!query.type) {\n          return true;\n        }\n\n        // equal query type filter, or via typemap translation\n        return query.type === obj.type || query.type === typeMap[obj.type];\n      }\n\n      // Store subfield names: [system, process, cpu, total] -> system.process.cpu.total\n      const fieldNameParts = [];\n      const fields = {};\n\n      function getFieldsRecursively(obj) {\n        for (const key in obj) {\n          const subObj = obj[key];\n\n          // Check mapping field for nested fields\n          if (_.isObject(subObj.properties)) {\n            fieldNameParts.push(key);\n            getFieldsRecursively(subObj.properties);\n          }\n\n          if (_.isObject(subObj.fields)) {\n            fieldNameParts.push(key);\n            getFieldsRecursively(subObj.fields);\n          }\n\n          if (_.isString(subObj.type)) {\n            const fieldName = fieldNameParts.concat(key).join('.');\n\n            // Hide meta-fields and check field type\n            if (shouldAddField(subObj, key, query)) {\n              fields[fieldName] = {\n                text: fieldName,\n                type: subObj.type,\n              };\n            }\n          }\n        }\n        fieldNameParts.pop();\n      }\n\n      for (const indexName in result) {\n        const index = result[indexName];\n        if (index && index.mappings) {\n          const mappings = index.mappings;\n          for (const typeName in mappings) {\n            const properties = mappings[typeName].properties;\n            getFieldsRecursively(properties);\n          }\n        }\n      }\n\n      // transform to array\n      return _.map(fields, function(value) {\n        return value;\n      });\n    });\n  }\n\n  getTerms(queryDef) {\n    const range = this.timeSrv.timeRange();\n    const searchType = this.esVersion >= 5 ? 'query_then_fetch' : 'count';\n    const header = this.getQueryHeader(searchType, range.from, range.to);\n    let esQuery = angular.toJson(this.queryBuilder.getTermsQuery(queryDef));\n\n    esQuery = esQuery.replace(/\\$timeFrom/g, range.from.valueOf());\n    esQuery = esQuery.replace(/\\$timeTo/g, range.to.valueOf());\n    esQuery = header + '\\n' + esQuery + '\\n';\n\n    return this.post('_msearch?search_type=' + searchType, esQuery).then(function(res) {\n      if (!res.responses[0].aggregations) {\n        return [];\n      }\n\n      const buckets = res.responses[0].aggregations['1'].buckets;\n      return _.map(buckets, function(bucket) {\n        return {\n          text: bucket.key_as_string || bucket.key,\n          value: bucket.key,\n        };\n      });\n    });\n  }\n\n  metricFindQuery(query) {\n    query = angular.fromJson(query);\n    if (!query) {\n      return this.$q.when([]);\n    }\n\n    if (query.find === 'fields') {\n      query.field = this.templateSrv.replace(query.field, {}, 'lucene');\n      return this.getFields(query);\n    }\n\n    if (query.find === 'terms') {\n      query.field = this.templateSrv.replace(query.field, {}, 'lucene');\n      query.query = this.templateSrv.replace(query.query || '*', {}, 'lucene');\n      return this.getTerms(query);\n    }\n  }\n\n  getTagKeys() {\n    return this.getFields({});\n  }\n\n  getTagValues(options) {\n    return this.getTerms({ field: options.key, query: '*' });\n  }\n\n  targetContainsTemplate(target) {\n    if (this.templateSrv.variableExists(target.query) || this.templateSrv.variableExists(target.alias)) {\n      return true;\n    }\n\n    for (const bucketAgg of target.bucketAggs) {\n      if (this.templateSrv.variableExists(bucketAgg.field) || this.objectContainsTemplate(bucketAgg.settings)) {\n        return true;\n      }\n    }\n\n    for (const metric of target.metrics) {\n      if (\n        this.templateSrv.variableExists(metric.field) ||\n        this.objectContainsTemplate(metric.settings) ||\n        this.objectContainsTemplate(metric.meta)\n      ) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  private isPrimitive(obj) {\n    if (obj === null || obj === undefined) {\n      return true;\n    }\n    if (['string', 'number', 'boolean'].some(type => type === typeof true)) {\n      return true;\n    }\n\n    return false;\n  }\n\n  private objectContainsTemplate(obj) {\n    if (!obj) {\n      return false;\n    }\n\n    for (const key of Object.keys(obj)) {\n      if (this.isPrimitive(obj[key])) {\n        if (this.templateSrv.variableExists(obj[key])) {\n          return true;\n        }\n      } else if (Array.isArray(obj[key])) {\n        for (const item of obj[key]) {\n          if (this.objectContainsTemplate(item)) {\n            return true;\n          }\n        }\n      } else {\n        if (this.objectContainsTemplate(obj[key])) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n}\n","import angular from 'angular';\nimport _ from 'lodash';\nimport * as queryDef from './query_def';\n\nexport function elasticBucketAgg() {\n  return {\n    templateUrl: 'public/app/plugins/datasource/elasticsearch/partials/bucket_agg.html',\n    controller: 'ElasticBucketAggCtrl',\n    restrict: 'E',\n    scope: {\n      target: '=',\n      index: '=',\n      onChange: '&',\n      getFields: '&',\n    },\n  };\n}\n\nexport class ElasticBucketAggCtrl {\n  /** @nginject */\n  constructor($scope, uiSegmentSrv, $q, $rootScope) {\n    const bucketAggs = $scope.target.bucketAggs;\n\n    $scope.orderByOptions = [];\n\n    $scope.getBucketAggTypes = function() {\n      return queryDef.bucketAggTypes;\n    };\n\n    $scope.getOrderOptions = function() {\n      return queryDef.orderOptions;\n    };\n\n    $scope.getSizeOptions = function() {\n      return queryDef.sizeOptions;\n    };\n\n    $rootScope.onAppEvent(\n      'elastic-query-updated',\n      function() {\n        $scope.validateModel();\n      },\n      $scope\n    );\n\n    $scope.init = function() {\n      $scope.agg = bucketAggs[$scope.index];\n      $scope.validateModel();\n    };\n\n    $scope.onChangeInternal = function() {\n      $scope.onChange();\n    };\n\n    $scope.onTypeChanged = function() {\n      $scope.agg.settings = {};\n      $scope.showOptions = false;\n\n      switch ($scope.agg.type) {\n        case 'date_histogram':\n        case 'histogram':\n        case 'terms': {\n          delete $scope.agg.query;\n          $scope.agg.field = 'select field';\n          break;\n        }\n        case 'filters': {\n          delete $scope.agg.field;\n          $scope.agg.query = '*';\n          break;\n        }\n        case 'geohash_grid': {\n          $scope.agg.settings.precision = 3;\n          break;\n        }\n      }\n\n      $scope.validateModel();\n      $scope.onChange();\n    };\n\n    $scope.validateModel = function() {\n      $scope.index = _.indexOf(bucketAggs, $scope.agg);\n      $scope.isFirst = $scope.index === 0;\n      $scope.bucketAggCount = bucketAggs.length;\n\n      let settingsLinkText = '';\n      const settings = $scope.agg.settings || {};\n\n      switch ($scope.agg.type) {\n        case 'terms': {\n          settings.order = settings.order || 'desc';\n          settings.size = settings.size || '10';\n          settings.min_doc_count = settings.min_doc_count || 1;\n          settings.orderBy = settings.orderBy || '_term';\n\n          if (settings.size !== '0') {\n            settingsLinkText = queryDef.describeOrder(settings.order) + ' ' + settings.size + ', ';\n          }\n\n          if (settings.min_doc_count > 0) {\n            settingsLinkText += 'Min Doc Count: ' + settings.min_doc_count + ', ';\n          }\n\n          settingsLinkText += 'Order by: ' + queryDef.describeOrderBy(settings.orderBy, $scope.target);\n\n          if (settings.size === '0') {\n            settingsLinkText += ' (' + settings.order + ')';\n          }\n\n          break;\n        }\n        case 'filters': {\n          settings.filters = settings.filters || [{ query: '*' }];\n          settingsLinkText = _.reduce(\n            settings.filters,\n            function(memo, value, index) {\n              memo += 'Q' + (index + 1) + '  = ' + value.query + ' ';\n              return memo;\n            },\n            ''\n          );\n          if (settingsLinkText.length > 50) {\n            settingsLinkText = settingsLinkText.substr(0, 50) + '...';\n          }\n          settingsLinkText = 'Filter Queries (' + settings.filters.length + ')';\n          break;\n        }\n        case 'date_histogram': {\n          settings.interval = settings.interval || 'auto';\n          settings.min_doc_count = settings.min_doc_count || 0;\n          $scope.agg.field = $scope.target.timeField;\n          settingsLinkText = 'Interval: ' + settings.interval;\n\n          if (settings.min_doc_count > 0) {\n            settingsLinkText += ', Min Doc Count: ' + settings.min_doc_count;\n          }\n\n          if (settings.trimEdges === undefined || settings.trimEdges < 0) {\n            settings.trimEdges = 0;\n          }\n\n          if (settings.trimEdges && settings.trimEdges > 0) {\n            settingsLinkText += ', Trim edges: ' + settings.trimEdges;\n          }\n          break;\n        }\n        case 'histogram': {\n          settings.interval = settings.interval || 1000;\n          settings.min_doc_count = _.defaultTo(settings.min_doc_count, 1);\n          settingsLinkText = 'Interval: ' + settings.interval;\n\n          if (settings.min_doc_count > 0) {\n            settingsLinkText += ', Min Doc Count: ' + settings.min_doc_count;\n          }\n          break;\n        }\n        case 'geohash_grid': {\n          // limit precision to 7\n          settings.precision = Math.max(Math.min(settings.precision, 7), 1);\n          settingsLinkText = 'Precision: ' + settings.precision;\n          break;\n        }\n      }\n\n      $scope.settingsLinkText = settingsLinkText;\n      $scope.agg.settings = settings;\n      return true;\n    };\n\n    $scope.addFiltersQuery = function() {\n      $scope.agg.settings.filters.push({ query: '*' });\n    };\n\n    $scope.removeFiltersQuery = function(filter) {\n      $scope.agg.settings.filters = _.without($scope.agg.settings.filters, filter);\n    };\n\n    $scope.toggleOptions = function() {\n      $scope.showOptions = !$scope.showOptions;\n    };\n\n    $scope.getOrderByOptions = function() {\n      return queryDef.getOrderByOptions($scope.target);\n    };\n\n    $scope.getFieldsInternal = function() {\n      if ($scope.agg.type === 'date_histogram') {\n        return $scope.getFields({ $fieldType: 'date' });\n      } else {\n        return $scope.getFields();\n      }\n    };\n\n    $scope.getIntervalOptions = function() {\n      return $q.when(uiSegmentSrv.transformToSegments(true, 'interval')(queryDef.intervalOptions));\n    };\n\n    $scope.addBucketAgg = function() {\n      // if last is date histogram add it before\n      const lastBucket = bucketAggs[bucketAggs.length - 1];\n      let addIndex = bucketAggs.length - 1;\n\n      if (lastBucket && lastBucket.type === 'date_histogram') {\n        addIndex -= 1;\n      }\n\n      const id = _.reduce(\n        $scope.target.bucketAggs.concat($scope.target.metrics),\n        function(max, val) {\n          return parseInt(val.id) > max ? parseInt(val.id) : max;\n        },\n        0\n      );\n\n      bucketAggs.splice(addIndex, 0, { type: 'terms', field: 'select field', id: (id + 1).toString(), fake: true });\n      $scope.onChange();\n    };\n\n    $scope.removeBucketAgg = function() {\n      bucketAggs.splice($scope.index, 1);\n      $scope.onChange();\n    };\n\n    $scope.init();\n  }\n}\n\nconst module = angular.module('grafana.directives');\nmodule.directive('elasticBucketAgg', elasticBucketAgg);\nmodule.controller('ElasticBucketAggCtrl', ElasticBucketAggCtrl);\n","import angular from 'angular';\nimport _ from 'lodash';\nimport * as queryDef from './query_def';\n\nexport function elasticMetricAgg() {\n  return {\n    templateUrl: 'public/app/plugins/datasource/elasticsearch/partials/metric_agg.html',\n    controller: 'ElasticMetricAggCtrl',\n    restrict: 'E',\n    scope: {\n      target: '=',\n      index: '=',\n      onChange: '&',\n      getFields: '&',\n      esVersion: '=',\n    },\n  };\n}\n\nexport class ElasticMetricAggCtrl {\n  constructor($scope, uiSegmentSrv, $q, $rootScope) {\n    const metricAggs = $scope.target.metrics;\n    $scope.metricAggTypes = queryDef.getMetricAggTypes($scope.esVersion);\n    $scope.extendedStats = queryDef.extendedStats;\n    $scope.pipelineAggOptions = [];\n    $scope.modelSettingsValues = {};\n\n    $scope.init = function() {\n      $scope.agg = metricAggs[$scope.index];\n      $scope.validateModel();\n      $scope.updatePipelineAggOptions();\n    };\n\n    $scope.updatePipelineAggOptions = function() {\n      $scope.pipelineAggOptions = queryDef.getPipelineAggOptions($scope.target);\n    };\n\n    $rootScope.onAppEvent(\n      'elastic-query-updated',\n      function() {\n        $scope.index = _.indexOf(metricAggs, $scope.agg);\n        $scope.updatePipelineAggOptions();\n        $scope.validateModel();\n      },\n      $scope\n    );\n\n    $scope.validateModel = function() {\n      $scope.isFirst = $scope.index === 0;\n      $scope.isSingle = metricAggs.length === 1;\n      $scope.settingsLinkText = '';\n      $scope.aggDef = _.find($scope.metricAggTypes, { value: $scope.agg.type });\n\n      if (queryDef.isPipelineAgg($scope.agg.type)) {\n        $scope.agg.pipelineAgg = $scope.agg.pipelineAgg || 'select metric';\n        $scope.agg.field = $scope.agg.pipelineAgg;\n\n        const pipelineOptions = queryDef.getPipelineOptions($scope.agg);\n        if (pipelineOptions.length > 0) {\n          _.each(pipelineOptions, function(opt) {\n            $scope.agg.settings[opt.text] = $scope.agg.settings[opt.text] || opt.default;\n          });\n          $scope.settingsLinkText = 'Options';\n        }\n      } else if (!$scope.agg.field) {\n        $scope.agg.field = 'select field';\n      }\n      switch ($scope.agg.type) {\n        case 'cardinality': {\n          const precision_threshold = $scope.agg.settings.precision_threshold || '';\n          $scope.settingsLinkText = 'Precision threshold: ' + precision_threshold;\n          break;\n        }\n        case 'percentiles': {\n          $scope.agg.settings.percents = $scope.agg.settings.percents || [25, 50, 75, 95, 99];\n          $scope.settingsLinkText = 'Values: ' + $scope.agg.settings.percents.join(',');\n          break;\n        }\n        case 'extended_stats': {\n          if (_.keys($scope.agg.meta).length === 0) {\n            $scope.agg.meta.std_deviation_bounds_lower = true;\n            $scope.agg.meta.std_deviation_bounds_upper = true;\n          }\n\n          const stats = _.reduce(\n            $scope.agg.meta,\n            function(memo, val, key) {\n              if (val) {\n                const def = _.find($scope.extendedStats, { value: key });\n                memo.push(def.text);\n              }\n              return memo;\n            },\n            []\n          );\n\n          $scope.settingsLinkText = 'Stats: ' + stats.join(', ');\n          break;\n        }\n        case 'moving_avg': {\n          $scope.movingAvgModelTypes = queryDef.movingAvgModelOptions;\n          $scope.modelSettings = queryDef.getMovingAvgSettings($scope.agg.settings.model, true);\n          $scope.updateMovingAvgModelSettings();\n          break;\n        }\n        case 'raw_document': {\n          $scope.agg.settings.size = $scope.agg.settings.size || 500;\n          $scope.settingsLinkText = 'Size: ' + $scope.agg.settings.size;\n          $scope.target.metrics.splice(0, $scope.target.metrics.length, $scope.agg);\n\n          $scope.target.bucketAggs = [];\n          break;\n        }\n      }\n      if ($scope.aggDef.supportsInlineScript) {\n        // I know this stores the inline script twice\n        // but having it like this simplifes the query_builder\n        const inlineScript = $scope.agg.inlineScript;\n        if (inlineScript) {\n          $scope.agg.settings.script = { inline: inlineScript };\n        } else {\n          delete $scope.agg.settings.script;\n        }\n\n        if ($scope.settingsLinkText === '') {\n          $scope.settingsLinkText = 'Options';\n        }\n      }\n    };\n\n    $scope.toggleOptions = function() {\n      $scope.showOptions = !$scope.showOptions;\n      $scope.updatePipelineAggOptions();\n    };\n\n    $scope.onChangeInternal = function() {\n      $scope.onChange();\n    };\n\n    $scope.updateMovingAvgModelSettings = function() {\n      const modelSettingsKeys = [];\n      const modelSettings = queryDef.getMovingAvgSettings($scope.agg.settings.model, false);\n      for (let i = 0; i < modelSettings.length; i++) {\n        modelSettingsKeys.push(modelSettings[i].value);\n      }\n\n      for (const key in $scope.agg.settings.settings) {\n        if ($scope.agg.settings.settings[key] === null || modelSettingsKeys.indexOf(key) === -1) {\n          delete $scope.agg.settings.settings[key];\n        }\n      }\n    };\n\n    $scope.onChangeClearInternal = function() {\n      delete $scope.agg.settings.minimize;\n      $scope.onChange();\n    };\n\n    $scope.onTypeChange = function() {\n      $scope.agg.settings = {};\n      $scope.agg.meta = {};\n      $scope.showOptions = false;\n      $scope.updatePipelineAggOptions();\n      $scope.onChange();\n    };\n\n    $scope.getFieldsInternal = function() {\n      if ($scope.agg.type === 'cardinality') {\n        return $scope.getFields();\n      }\n      return $scope.getFields({ $fieldType: 'number' });\n    };\n\n    $scope.addMetricAgg = function() {\n      const addIndex = metricAggs.length;\n\n      const id = _.reduce(\n        $scope.target.bucketAggs.concat($scope.target.metrics),\n        function(max, val) {\n          return parseInt(val.id) > max ? parseInt(val.id) : max;\n        },\n        0\n      );\n\n      metricAggs.splice(addIndex, 0, { type: 'count', field: 'select field', id: (id + 1).toString() });\n      $scope.onChange();\n    };\n\n    $scope.removeMetricAgg = function() {\n      metricAggs.splice($scope.index, 1);\n      $scope.onChange();\n    };\n\n    $scope.toggleShowMetric = function() {\n      $scope.agg.hide = !$scope.agg.hide;\n      if (!$scope.agg.hide) {\n        delete $scope.agg.hide;\n      }\n      $scope.onChange();\n    };\n\n    $scope.init();\n  }\n}\n\nconst module = angular.module('grafana.directives');\nmodule.directive('elasticMetricAgg', elasticMetricAgg);\nmodule.controller('ElasticMetricAggCtrl', ElasticMetricAggCtrl);\n","import './bucket_agg';\nimport './metric_agg';\n\nimport angular from 'angular';\nimport _ from 'lodash';\nimport * as queryDef from './query_def';\nimport { QueryCtrl } from 'app/plugins/sdk';\n\nexport class ElasticQueryCtrl extends QueryCtrl {\n  static templateUrl = 'partials/query.editor.html';\n\n  esVersion: any;\n  rawQueryOld: string;\n\n  /** @ngInject */\n  constructor($scope, $injector, private $rootScope, private uiSegmentSrv) {\n    super($scope, $injector);\n\n    this.esVersion = this.datasource.esVersion;\n    this.queryUpdated();\n  }\n\n  getFields(type) {\n    const jsonStr = angular.toJson({ find: 'fields', type: type });\n    return this.datasource\n      .metricFindQuery(jsonStr)\n      .then(this.uiSegmentSrv.transformToSegments(false))\n      .catch(this.handleQueryError.bind(this));\n  }\n\n  queryUpdated() {\n    const newJson = angular.toJson(this.datasource.queryBuilder.build(this.target), true);\n    if (this.rawQueryOld && newJson !== this.rawQueryOld) {\n      this.refresh();\n    }\n\n    this.rawQueryOld = newJson;\n    this.$rootScope.appEvent('elastic-query-updated');\n  }\n\n  getCollapsedText() {\n    const metricAggs = this.target.metrics;\n    const bucketAggs = this.target.bucketAggs;\n    const metricAggTypes = queryDef.getMetricAggTypes(this.esVersion);\n    const bucketAggTypes = queryDef.bucketAggTypes;\n    let text = '';\n\n    if (this.target.query) {\n      text += 'Query: ' + this.target.query + ', ';\n    }\n\n    text += 'Metrics: ';\n\n    _.each(metricAggs, (metric, index) => {\n      const aggDef = _.find(metricAggTypes, { value: metric.type });\n      text += aggDef.text + '(';\n      if (aggDef.requiresField) {\n        text += metric.field;\n      }\n      text += '), ';\n    });\n\n    _.each(bucketAggs, (bucketAgg, index) => {\n      if (index === 0) {\n        text += ' Group by: ';\n      }\n\n      const aggDef = _.find(bucketAggTypes, { value: bucketAgg.type });\n      text += aggDef.text + '(';\n      if (aggDef.requiresField) {\n        text += bucketAgg.field;\n      }\n      text += '), ';\n    });\n\n    if (this.target.alias) {\n      text += 'Alias: ' + this.target.alias;\n    }\n\n    return text;\n  }\n\n  handleQueryError(err) {\n    this.error = err.message || 'Failed to issue metric query';\n    return [];\n  }\n}\n","import _ from 'lodash';\n\nexport class ElasticConfigCtrl {\n  static templateUrl = 'public/app/plugins/datasource/elasticsearch/partials/config.html';\n  current: any;\n\n  /** @ngInject */\n  constructor($scope) {\n    this.current.jsonData.timeField = this.current.jsonData.timeField || '@timestamp';\n    this.current.jsonData.esVersion = this.current.jsonData.esVersion || 5;\n    this.current.jsonData.maxConcurrentShardRequests = this.current.jsonData.maxConcurrentShardRequests || 256;\n  }\n\n  indexPatternTypes = [\n    { name: 'No pattern', value: undefined },\n    { name: 'Hourly', value: 'Hourly', example: '[logstash-]YYYY.MM.DD.HH' },\n    { name: 'Daily', value: 'Daily', example: '[logstash-]YYYY.MM.DD' },\n    { name: 'Weekly', value: 'Weekly', example: '[logstash-]GGGG.WW' },\n    { name: 'Monthly', value: 'Monthly', example: '[logstash-]YYYY.MM' },\n    { name: 'Yearly', value: 'Yearly', example: '[logstash-]YYYY' },\n  ];\n\n  esVersions = [{ name: '2.x', value: 2 }, { name: '5.x', value: 5 }, { name: '5.6+', value: 56 }];\n\n  indexPatternTypeChanged() {\n    const def = _.find(this.indexPatternTypes, {\n      value: this.current.jsonData.interval,\n    });\n    this.current.database = def.example || 'es-index-name';\n  }\n}\n","import angular from 'angular';\nimport _ from 'lodash';\nimport * as dateMath from 'app/core/utils/datemath';\n\nexport default class OpenTsDatasource {\n  type: any;\n  url: any;\n  name: any;\n  withCredentials: any;\n  basicAuth: any;\n  tsdbVersion: any;\n  tsdbResolution: any;\n  supportMetrics: any;\n  tagKeys: any;\n\n  aggregatorsPromise: any;\n  filterTypesPromise: any;\n\n  /** @ngInject */\n  constructor(instanceSettings, private $q, private backendSrv, private templateSrv) {\n    this.type = 'opentsdb';\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.withCredentials = instanceSettings.withCredentials;\n    this.basicAuth = instanceSettings.basicAuth;\n    instanceSettings.jsonData = instanceSettings.jsonData || {};\n    this.tsdbVersion = instanceSettings.jsonData.tsdbVersion || 1;\n    this.tsdbResolution = instanceSettings.jsonData.tsdbResolution || 1;\n    this.supportMetrics = true;\n    this.tagKeys = {};\n\n    this.aggregatorsPromise = null;\n    this.filterTypesPromise = null;\n  }\n\n  // Called once per panel (graph)\n  query(options) {\n    const start = this.convertToTSDBTime(options.rangeRaw.from, false);\n    const end = this.convertToTSDBTime(options.rangeRaw.to, true);\n    const qs = [];\n\n    _.each(options.targets, target => {\n      if (!target.metric) {\n        return;\n      }\n      qs.push(this.convertTargetToQuery(target, options, this.tsdbVersion));\n    });\n\n    const queries = _.compact(qs);\n\n    // No valid targets, return the empty result to save a round trip.\n    if (_.isEmpty(queries)) {\n      const d = this.$q.defer();\n      d.resolve({ data: [] });\n      return d.promise;\n    }\n\n    const groupByTags = {};\n    _.each(queries, function(query) {\n      if (query.filters && query.filters.length > 0) {\n        _.each(query.filters, function(val) {\n          groupByTags[val.tagk] = true;\n        });\n      } else {\n        _.each(query.tags, function(val, key) {\n          groupByTags[key] = true;\n        });\n      }\n    });\n\n    options.targets = _.filter(options.targets, function(query) {\n      return query.hide !== true;\n    });\n\n    return this.performTimeSeriesQuery(queries, start, end).then(response => {\n      const metricToTargetMapping = this.mapMetricsToTargets(response.data, options, this.tsdbVersion);\n      const result = _.map(response.data, (metricData, index) => {\n        index = metricToTargetMapping[index];\n        if (index === -1) {\n          index = 0;\n        }\n        this._saveTagKeys(metricData);\n\n        return this.transformMetricData(metricData, groupByTags, options.targets[index], options, this.tsdbResolution);\n      });\n      return { data: result };\n    });\n  }\n\n  annotationQuery(options) {\n    const start = this.convertToTSDBTime(options.rangeRaw.from, false);\n    const end = this.convertToTSDBTime(options.rangeRaw.to, true);\n    const qs = [];\n    const eventList = [];\n\n    qs.push({ aggregator: 'sum', metric: options.annotation.target });\n\n    const queries = _.compact(qs);\n\n    return this.performTimeSeriesQuery(queries, start, end).then(\n      function(results) {\n        if (results.data[0]) {\n          let annotationObject = results.data[0].annotations;\n          if (options.annotation.isGlobal) {\n            annotationObject = results.data[0].globalAnnotations;\n          }\n          if (annotationObject) {\n            _.each(annotationObject, function(annotation) {\n              const event = {\n                text: annotation.description,\n                time: Math.floor(annotation.startTime) * 1000,\n                annotation: options.annotation,\n              };\n\n              eventList.push(event);\n            });\n          }\n        }\n        return eventList;\n      }.bind(this)\n    );\n  }\n\n  targetContainsTemplate(target) {\n    if (target.filters && target.filters.length > 0) {\n      for (let i = 0; i < target.filters.length; i++) {\n        if (this.templateSrv.variableExists(target.filters[i].filter)) {\n          return true;\n        }\n      }\n    }\n\n    if (target.tags && Object.keys(target.tags).length > 0) {\n      for (const tagKey in target.tags) {\n        if (this.templateSrv.variableExists(target.tags[tagKey])) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  performTimeSeriesQuery(queries, start, end) {\n    let msResolution = false;\n    if (this.tsdbResolution === 2) {\n      msResolution = true;\n    }\n    const reqBody: any = {\n      start: start,\n      queries: queries,\n      msResolution: msResolution,\n      globalAnnotations: true,\n    };\n    if (this.tsdbVersion === 3) {\n      reqBody.showQuery = true;\n    }\n\n    // Relative queries (e.g. last hour) don't include an end time\n    if (end) {\n      reqBody.end = end;\n    }\n\n    const options = {\n      method: 'POST',\n      url: this.url + '/api/query',\n      data: reqBody,\n    };\n\n    this._addCredentialOptions(options);\n    return this.backendSrv.datasourceRequest(options);\n  }\n\n  suggestTagKeys(metric) {\n    return this.$q.when(this.tagKeys[metric] || []);\n  }\n\n  _saveTagKeys(metricData) {\n    const tagKeys = Object.keys(metricData.tags);\n    _.each(metricData.aggregateTags, function(tag) {\n      tagKeys.push(tag);\n    });\n\n    this.tagKeys[metricData.metric] = tagKeys;\n  }\n\n  _performSuggestQuery(query, type) {\n    return this._get('/api/suggest', { type: type, q: query, max: 1000 }).then(function(result) {\n      return result.data;\n    });\n  }\n\n  _performMetricKeyValueLookup(metric, keys) {\n    if (!metric || !keys) {\n      return this.$q.when([]);\n    }\n\n    const keysArray = keys.split(',').map(function(key) {\n      return key.trim();\n    });\n    const key = keysArray[0];\n    let keysQuery = key + '=*';\n\n    if (keysArray.length > 1) {\n      keysQuery += ',' + keysArray.splice(1).join(',');\n    }\n\n    const m = metric + '{' + keysQuery + '}';\n\n    return this._get('/api/search/lookup', { m: m, limit: 3000 }).then(function(result) {\n      result = result.data.results;\n      const tagvs = [];\n      _.each(result, function(r) {\n        if (tagvs.indexOf(r.tags[key]) === -1) {\n          tagvs.push(r.tags[key]);\n        }\n      });\n      return tagvs;\n    });\n  }\n\n  _performMetricKeyLookup(metric) {\n    if (!metric) {\n      return this.$q.when([]);\n    }\n\n    return this._get('/api/search/lookup', { m: metric, limit: 1000 }).then(function(result) {\n      result = result.data.results;\n      const tagks = [];\n      _.each(result, function(r) {\n        _.each(r.tags, function(tagv, tagk) {\n          if (tagks.indexOf(tagk) === -1) {\n            tagks.push(tagk);\n          }\n        });\n      });\n      return tagks;\n    });\n  }\n\n  _get(relativeUrl, params?) {\n    const options = {\n      method: 'GET',\n      url: this.url + relativeUrl,\n      params: params,\n    };\n\n    this._addCredentialOptions(options);\n\n    return this.backendSrv.datasourceRequest(options);\n  }\n\n  _addCredentialOptions(options) {\n    if (this.basicAuth || this.withCredentials) {\n      options.withCredentials = true;\n    }\n    if (this.basicAuth) {\n      options.headers = { Authorization: this.basicAuth };\n    }\n  }\n\n  metricFindQuery(query) {\n    if (!query) {\n      return this.$q.when([]);\n    }\n\n    let interpolated;\n    try {\n      interpolated = this.templateSrv.replace(query, {}, 'distributed');\n    } catch (err) {\n      return this.$q.reject(err);\n    }\n\n    const responseTransform = function(result) {\n      return _.map(result, function(value) {\n        return { text: value };\n      });\n    };\n\n    const metrics_regex = /metrics\\((.*)\\)/;\n    const tag_names_regex = /tag_names\\((.*)\\)/;\n    const tag_values_regex = /tag_values\\((.*?),\\s?(.*)\\)/;\n    const tag_names_suggest_regex = /suggest_tagk\\((.*)\\)/;\n    const tag_values_suggest_regex = /suggest_tagv\\((.*)\\)/;\n\n    const metrics_query = interpolated.match(metrics_regex);\n    if (metrics_query) {\n      return this._performSuggestQuery(metrics_query[1], 'metrics').then(responseTransform);\n    }\n\n    const tag_names_query = interpolated.match(tag_names_regex);\n    if (tag_names_query) {\n      return this._performMetricKeyLookup(tag_names_query[1]).then(responseTransform);\n    }\n\n    const tag_values_query = interpolated.match(tag_values_regex);\n    if (tag_values_query) {\n      return this._performMetricKeyValueLookup(tag_values_query[1], tag_values_query[2]).then(responseTransform);\n    }\n\n    const tag_names_suggest_query = interpolated.match(tag_names_suggest_regex);\n    if (tag_names_suggest_query) {\n      return this._performSuggestQuery(tag_names_suggest_query[1], 'tagk').then(responseTransform);\n    }\n\n    const tag_values_suggest_query = interpolated.match(tag_values_suggest_regex);\n    if (tag_values_suggest_query) {\n      return this._performSuggestQuery(tag_values_suggest_query[1], 'tagv').then(responseTransform);\n    }\n\n    return this.$q.when([]);\n  }\n\n  testDatasource() {\n    return this._performSuggestQuery('cpu', 'metrics').then(function() {\n      return { status: 'success', message: 'Data source is working' };\n    });\n  }\n\n  getAggregators() {\n    if (this.aggregatorsPromise) {\n      return this.aggregatorsPromise;\n    }\n\n    this.aggregatorsPromise = this._get('/api/aggregators').then(function(result) {\n      if (result.data && _.isArray(result.data)) {\n        return result.data.sort();\n      }\n      return [];\n    });\n    return this.aggregatorsPromise;\n  }\n\n  getFilterTypes() {\n    if (this.filterTypesPromise) {\n      return this.filterTypesPromise;\n    }\n\n    this.filterTypesPromise = this._get('/api/config/filters').then(function(result) {\n      if (result.data) {\n        return Object.keys(result.data).sort();\n      }\n      return [];\n    });\n    return this.filterTypesPromise;\n  }\n\n  transformMetricData(md, groupByTags, target, options, tsdbResolution) {\n    const metricLabel = this.createMetricLabel(md, target, groupByTags, options);\n    const dps = [];\n\n    // TSDB returns datapoints has a hash of ts => value.\n    // Can't use _.pairs(invert()) because it stringifies keys/values\n    _.each(md.dps, function(v, k) {\n      if (tsdbResolution === 2) {\n        dps.push([v, k * 1]);\n      } else {\n        dps.push([v, k * 1000]);\n      }\n    });\n\n    return { target: metricLabel, datapoints: dps };\n  }\n\n  createMetricLabel(md, target, groupByTags, options) {\n    if (target.alias) {\n      const scopedVars = _.clone(options.scopedVars || {});\n      _.each(md.tags, function(value, key) {\n        scopedVars['tag_' + key] = { value: value };\n      });\n      return this.templateSrv.replace(target.alias, scopedVars);\n    }\n\n    let label = md.metric;\n    const tagData = [];\n\n    if (!_.isEmpty(md.tags)) {\n      _.each(_.toPairs(md.tags), function(tag) {\n        if (_.has(groupByTags, tag[0])) {\n          tagData.push(tag[0] + '=' + tag[1]);\n        }\n      });\n    }\n\n    if (!_.isEmpty(tagData)) {\n      label += '{' + tagData.join(', ') + '}';\n    }\n\n    return label;\n  }\n\n  convertTargetToQuery(target, options, tsdbVersion) {\n    if (!target.metric || target.hide) {\n      return null;\n    }\n\n    const query: any = {\n      metric: this.templateSrv.replace(target.metric, options.scopedVars, 'pipe'),\n      aggregator: 'avg',\n    };\n\n    if (target.aggregator) {\n      query.aggregator = this.templateSrv.replace(target.aggregator);\n    }\n\n    if (target.shouldComputeRate) {\n      query.rate = true;\n      query.rateOptions = {\n        counter: !!target.isCounter,\n      };\n\n      if (target.counterMax && target.counterMax.length) {\n        query.rateOptions.counterMax = parseInt(target.counterMax);\n      }\n\n      if (target.counterResetValue && target.counterResetValue.length) {\n        query.rateOptions.resetValue = parseInt(target.counterResetValue);\n      }\n\n      if (tsdbVersion >= 2) {\n        query.rateOptions.dropResets =\n          !query.rateOptions.counterMax && (!query.rateOptions.ResetValue || query.rateOptions.ResetValue === 0);\n      }\n    }\n\n    if (!target.disableDownsampling) {\n      let interval = this.templateSrv.replace(target.downsampleInterval || options.interval);\n\n      if (interval.match(/\\.[0-9]+s/)) {\n        interval = parseFloat(interval) * 1000 + 'ms';\n      }\n\n      query.downsample = interval + '-' + target.downsampleAggregator;\n\n      if (target.downsampleFillPolicy && target.downsampleFillPolicy !== 'none') {\n        query.downsample += '-' + target.downsampleFillPolicy;\n      }\n    }\n\n    if (target.filters && target.filters.length > 0) {\n      query.filters = angular.copy(target.filters);\n      if (query.filters) {\n        for (const filter_key in query.filters) {\n          query.filters[filter_key].filter = this.templateSrv.replace(\n            query.filters[filter_key].filter,\n            options.scopedVars,\n            'pipe'\n          );\n        }\n      }\n    } else {\n      query.tags = angular.copy(target.tags);\n      if (query.tags) {\n        for (const tag_key in query.tags) {\n          query.tags[tag_key] = this.templateSrv.replace(query.tags[tag_key], options.scopedVars, 'pipe');\n        }\n      }\n    }\n\n    if (target.explicitTags) {\n      query.explicitTags = true;\n    }\n\n    return query;\n  }\n\n  mapMetricsToTargets(metrics, options, tsdbVersion) {\n    let interpolatedTagValue, arrTagV;\n    return _.map(metrics, metricData => {\n      if (tsdbVersion === 3) {\n        return metricData.query.index;\n      } else {\n        return _.findIndex(options.targets, target => {\n          if (target.filters && target.filters.length > 0) {\n            return target.metric === metricData.metric;\n          } else {\n            return (\n              target.metric === metricData.metric &&\n              _.every(target.tags, (tagV, tagK) => {\n                interpolatedTagValue = this.templateSrv.replace(tagV, options.scopedVars, 'pipe');\n                arrTagV = interpolatedTagValue.split('|');\n                return _.includes(arrTagV, metricData.tags[tagK]) || interpolatedTagValue === '*';\n              })\n            );\n          }\n        });\n      }\n    });\n  }\n\n  convertToTSDBTime(date, roundUp) {\n    if (date === 'now') {\n      return null;\n    }\n\n    date = dateMath.parse(date, roundUp);\n    return date.valueOf();\n  }\n}\n","import { ElasticDatasource } from './datasource';\nimport { ElasticQueryCtrl } from './query_ctrl';\nimport { ElasticConfigCtrl } from './config_ctrl';\n\nclass ElasticAnnotationsQueryCtrl {\n  static templateUrl = 'partials/annotations.editor.html';\n}\n\nexport {\n  ElasticDatasource as Datasource,\n  ElasticQueryCtrl as QueryCtrl,\n  ElasticConfigCtrl as ConfigCtrl,\n  ElasticAnnotationsQueryCtrl as AnnotationsQueryCtrl,\n};\n","import _ from 'lodash';\nimport kbn from 'app/core/utils/kbn';\nimport { QueryCtrl } from 'app/plugins/sdk';\n\nexport class OpenTsQueryCtrl extends QueryCtrl {\n  static templateUrl = 'partials/query.editor.html';\n  aggregators: any;\n  fillPolicies: any;\n  filterTypes: any;\n  tsdbVersion: any;\n  aggregator: any;\n  downsampleInterval: any;\n  downsampleAggregator: any;\n  downsampleFillPolicy: any;\n  errors: any;\n  suggestMetrics: any;\n  suggestTagKeys: any;\n  suggestTagValues: any;\n  addTagMode: boolean;\n  addFilterMode: boolean;\n\n  /** @ngInject */\n  constructor($scope, $injector) {\n    super($scope, $injector);\n\n    this.errors = this.validateTarget();\n    this.aggregators = ['avg', 'sum', 'min', 'max', 'dev', 'zimsum', 'mimmin', 'mimmax'];\n    this.fillPolicies = ['none', 'nan', 'null', 'zero'];\n    this.filterTypes = [\n      'wildcard',\n      'iliteral_or',\n      'not_iliteral_or',\n      'not_literal_or',\n      'iwildcard',\n      'literal_or',\n      'regexp',\n    ];\n\n    this.tsdbVersion = this.datasource.tsdbVersion;\n\n    if (!this.target.aggregator) {\n      this.target.aggregator = 'sum';\n    }\n\n    if (!this.target.downsampleAggregator) {\n      this.target.downsampleAggregator = 'avg';\n    }\n\n    if (!this.target.downsampleFillPolicy) {\n      this.target.downsampleFillPolicy = 'none';\n    }\n\n    this.datasource.getAggregators().then(aggs => {\n      if (aggs.length !== 0) {\n        this.aggregators = aggs;\n      }\n    });\n\n    this.datasource.getFilterTypes().then(filterTypes => {\n      if (filterTypes.length !== 0) {\n        this.filterTypes = filterTypes;\n      }\n    });\n\n    // needs to be defined here as it is called from typeahead\n    this.suggestMetrics = (query, callback) => {\n      this.datasource\n        .metricFindQuery('metrics(' + query + ')')\n        .then(this.getTextValues)\n        .then(callback);\n    };\n\n    this.suggestTagKeys = (query, callback) => {\n      this.datasource.suggestTagKeys(this.target.metric).then(callback);\n    };\n\n    this.suggestTagValues = (query, callback) => {\n      this.datasource\n        .metricFindQuery('suggest_tagv(' + query + ')')\n        .then(this.getTextValues)\n        .then(callback);\n    };\n  }\n\n  targetBlur() {\n    this.errors = this.validateTarget();\n    this.refresh();\n  }\n\n  getTextValues(metricFindResult) {\n    return _.map(metricFindResult, function(value) {\n      return value.text;\n    });\n  }\n\n  addTag() {\n    if (this.target.filters && this.target.filters.length > 0) {\n      this.errors.tags = 'Please remove filters to use tags, tags and filters are mutually exclusive.';\n    }\n\n    if (!this.addTagMode) {\n      this.addTagMode = true;\n      return;\n    }\n\n    if (!this.target.tags) {\n      this.target.tags = {};\n    }\n\n    this.errors = this.validateTarget();\n\n    if (!this.errors.tags) {\n      this.target.tags[this.target.currentTagKey] = this.target.currentTagValue;\n      this.target.currentTagKey = '';\n      this.target.currentTagValue = '';\n      this.targetBlur();\n    }\n\n    this.addTagMode = false;\n  }\n\n  removeTag(key) {\n    delete this.target.tags[key];\n    this.targetBlur();\n  }\n\n  editTag(key, value) {\n    this.removeTag(key);\n    this.target.currentTagKey = key;\n    this.target.currentTagValue = value;\n    this.addTag();\n  }\n\n  closeAddTagMode() {\n    this.addTagMode = false;\n    return;\n  }\n\n  addFilter() {\n    if (this.target.tags && _.size(this.target.tags) > 0) {\n      this.errors.filters = 'Please remove tags to use filters, tags and filters are mutually exclusive.';\n    }\n\n    if (!this.addFilterMode) {\n      this.addFilterMode = true;\n      return;\n    }\n\n    if (!this.target.filters) {\n      this.target.filters = [];\n    }\n\n    if (!this.target.currentFilterType) {\n      this.target.currentFilterType = 'iliteral_or';\n    }\n\n    if (!this.target.currentFilterGroupBy) {\n      this.target.currentFilterGroupBy = false;\n    }\n\n    this.errors = this.validateTarget();\n\n    if (!this.errors.filters) {\n      const currentFilter = {\n        type: this.target.currentFilterType,\n        tagk: this.target.currentFilterKey,\n        filter: this.target.currentFilterValue,\n        groupBy: this.target.currentFilterGroupBy,\n      };\n      this.target.filters.push(currentFilter);\n      this.target.currentFilterType = 'literal_or';\n      this.target.currentFilterKey = '';\n      this.target.currentFilterValue = '';\n      this.target.currentFilterGroupBy = false;\n      this.targetBlur();\n    }\n\n    this.addFilterMode = false;\n  }\n\n  removeFilter(index) {\n    this.target.filters.splice(index, 1);\n    this.targetBlur();\n  }\n\n  editFilter(fil, index) {\n    this.removeFilter(index);\n    this.target.currentFilterKey = fil.tagk;\n    this.target.currentFilterValue = fil.filter;\n    this.target.currentFilterType = fil.type;\n    this.target.currentFilterGroupBy = fil.groupBy;\n    this.addFilter();\n  }\n\n  closeAddFilterMode() {\n    this.addFilterMode = false;\n    return;\n  }\n\n  validateTarget() {\n    const errs: any = {};\n\n    if (this.target.shouldDownsample) {\n      try {\n        if (this.target.downsampleInterval) {\n          kbn.describe_interval(this.target.downsampleInterval);\n        } else {\n          errs.downsampleInterval = \"You must supply a downsample interval (e.g. '1m' or '1h').\";\n        }\n      } catch (err) {\n        errs.downsampleInterval = err.message;\n      }\n    }\n\n    if (this.target.tags && _.has(this.target.tags, this.target.currentTagKey)) {\n      errs.tags = \"Duplicate tag key '\" + this.target.currentTagKey + \"'.\";\n    }\n\n    return errs;\n  }\n}\n","export class OpenTsConfigCtrl {\n  static templateUrl = 'public/app/plugins/datasource/opentsdb/partials/config.html';\n  current: any;\n\n  /** @ngInject */\n  constructor($scope) {\n    this.current.jsonData = this.current.jsonData || {};\n    this.current.jsonData.tsdbVersion = this.current.jsonData.tsdbVersion || 1;\n    this.current.jsonData.tsdbResolution = this.current.jsonData.tsdbResolution || 1;\n  }\n\n  tsdbVersions = [{ name: '<=2.1', value: 1 }, { name: '==2.2', value: 2 }, { name: '==2.3', value: 3 }];\n\n  tsdbResolutions = [{ name: 'second', value: 1 }, { name: 'millisecond', value: 2 }];\n}\n","import OpenTsDatasource from './datasource';\nimport { OpenTsQueryCtrl } from './query_ctrl';\nimport { OpenTsConfigCtrl } from './config_ctrl';\n\nclass AnnotationsQueryCtrl {\n  static templateUrl = 'partials/annotations.editor.html';\n}\n\nexport {\n  OpenTsDatasource as Datasource,\n  OpenTsQueryCtrl as QueryCtrl,\n  OpenTsConfigCtrl as ConfigCtrl,\n  AnnotationsQueryCtrl,\n};\n","import _ from 'lodash';\n\nclass GrafanaDatasource {\n  /** @ngInject */\n  constructor(private backendSrv, private $q) {}\n\n  query(options) {\n    return this.backendSrv\n      .get('/api/tsdb/testdata/random-walk', {\n        from: options.range.from.valueOf(),\n        to: options.range.to.valueOf(),\n        intervalMs: options.intervalMs,\n        maxDataPoints: options.maxDataPoints,\n      })\n      .then(res => {\n        const data = [];\n\n        if (res.results) {\n          _.forEach(res.results, queryRes => {\n            for (const series of queryRes.series) {\n              data.push({\n                target: series.name,\n                datapoints: series.points,\n              });\n            }\n          });\n        }\n\n        return { data: data };\n      });\n  }\n\n  metricFindQuery(options) {\n    return this.$q.when({ data: [] });\n  }\n\n  annotationQuery(options) {\n    const params: any = {\n      from: options.range.from.valueOf(),\n      to: options.range.to.valueOf(),\n      limit: options.annotation.limit,\n      tags: options.annotation.tags,\n    };\n\n    if (options.annotation.type === 'dashboard') {\n      // if no dashboard id yet return\n      if (!options.dashboard.id) {\n        return this.$q.when([]);\n      }\n      // filter by dashboard id\n      params.dashboardId = options.dashboard.id;\n      // remove tags filter if any\n      delete params.tags;\n    } else {\n      // require at least one tag\n      if (!_.isArray(options.annotation.tags) || options.annotation.tags.length === 0) {\n        return this.$q.when([]);\n      }\n    }\n\n    return this.backendSrv.get('/api/annotations', params);\n  }\n}\n\nexport { GrafanaDatasource };\n","import { GrafanaDatasource } from './datasource';\nimport { QueryCtrl } from 'app/plugins/sdk';\n\nclass GrafanaQueryCtrl extends QueryCtrl {\n  static templateUrl = 'partials/query.editor.html';\n}\n\nclass GrafanaAnnotationsQueryCtrl {\n  annotation: any;\n\n  types = [{ text: '仪表盘', value: 'dashboard' }, { text: '标签', value: 'tags' }];\n\n  constructor() {\n    this.annotation.type = this.annotation.type || 'tags';\n    this.annotation.limit = this.annotation.limit || 100;\n  }\n\n  static templateUrl = 'partials/annotations.editor.html';\n}\n\nexport {\n  GrafanaDatasource,\n  GrafanaDatasource as Datasource,\n  GrafanaQueryCtrl as QueryCtrl,\n  GrafanaAnnotationsQueryCtrl as AnnotationsQueryCtrl,\n};\n","import _ from 'lodash';\nimport TableModel from 'app/core/table_model';\n\nexport default class InfluxSeries {\n  series: any;\n  alias: any;\n  annotation: any;\n\n  constructor(options) {\n    this.series = options.series;\n    this.alias = options.alias;\n    this.annotation = options.annotation;\n  }\n\n  getTimeSeries() {\n    const output = [];\n    let i, j;\n\n    if (this.series.length === 0) {\n      return output;\n    }\n\n    _.each(this.series, series => {\n      const columns = series.columns.length;\n      const tags = _.map(series.tags, function(value, key) {\n        return key + ': ' + value;\n      });\n\n      for (j = 1; j < columns; j++) {\n        let seriesName = series.name;\n        const columnName = series.columns[j];\n        if (columnName !== 'value') {\n          seriesName = seriesName + '.' + columnName;\n        }\n\n        if (this.alias) {\n          seriesName = this._getSeriesName(series, j);\n        } else if (series.tags) {\n          seriesName = seriesName + ' {' + tags.join(', ') + '}';\n        }\n\n        const datapoints = [];\n        if (series.values) {\n          for (i = 0; i < series.values.length; i++) {\n            datapoints[i] = [series.values[i][j], series.values[i][0]];\n          }\n        }\n\n        output.push({ target: seriesName, datapoints: datapoints });\n      }\n    });\n\n    return output;\n  }\n\n  _getSeriesName(series, index) {\n    const regex = /\\$(\\w+)|\\[\\[([\\s\\S]+?)\\]\\]/g;\n    const segments = series.name.split('.');\n\n    return this.alias.replace(regex, function(match, g1, g2) {\n      const group = g1 || g2;\n      const segIndex = parseInt(group, 10);\n\n      if (group === 'm' || group === 'measurement') {\n        return series.name;\n      }\n      if (group === 'col') {\n        return series.columns[index];\n      }\n      if (!isNaN(segIndex)) {\n        return segments[segIndex];\n      }\n      if (group.indexOf('tag_') !== 0) {\n        return match;\n      }\n\n      const tag = group.replace('tag_', '');\n      if (!series.tags) {\n        return match;\n      }\n      return series.tags[tag];\n    });\n  }\n\n  getAnnotations() {\n    const list = [];\n\n    _.each(this.series, series => {\n      let titleCol = null;\n      let timeCol = null;\n      const tagsCol = [];\n      let textCol = null;\n\n      _.each(series.columns, (column, index) => {\n        if (column === 'time') {\n          timeCol = index;\n          return;\n        }\n        if (column === 'sequence_number') {\n          return;\n        }\n        if (!titleCol) {\n          titleCol = index;\n        }\n        if (column === this.annotation.titleColumn) {\n          titleCol = index;\n          return;\n        }\n        if (_.includes((this.annotation.tagsColumn || '').replace(' ', '').split(','), column)) {\n          tagsCol.push(index);\n          return;\n        }\n        if (column === this.annotation.textColumn) {\n          textCol = index;\n          return;\n        }\n      });\n\n      _.each(series.values, value => {\n        const data = {\n          annotation: this.annotation,\n          time: +new Date(value[timeCol]),\n          title: value[titleCol],\n          // Remove empty values, then split in different tags for comma separated values\n          tags: _.flatten(\n            tagsCol\n              .filter(function(t) {\n                return value[t];\n              })\n              .map(function(t) {\n                return value[t].split(',');\n              })\n          ),\n          text: value[textCol],\n        };\n\n        list.push(data);\n      });\n    });\n\n    return list;\n  }\n\n  getTable() {\n    const table = new TableModel();\n    let i, j;\n\n    if (this.series.length === 0) {\n      return table;\n    }\n\n    _.each(this.series, (series, seriesIndex) => {\n      if (seriesIndex === 0) {\n        j = 0;\n        // Check that the first column is indeed 'time'\n        if (series.columns[0] === 'time') {\n          // Push this now before the tags and with the right type\n          table.columns.push({ text: 'Time', type: 'time' });\n          j++;\n        }\n        _.each(_.keys(series.tags), function(key) {\n          table.columns.push({ text: key });\n        });\n        for (; j < series.columns.length; j++) {\n          table.columns.push({ text: series.columns[j] });\n        }\n      }\n\n      if (series.values) {\n        for (i = 0; i < series.values.length; i++) {\n          const values = series.values[i];\n          const reordered = [values[0]];\n          if (series.tags) {\n            for (const key in series.tags) {\n              if (series.tags.hasOwnProperty(key)) {\n                reordered.push(series.tags[key]);\n              }\n            }\n          }\n          for (j = 1; j < values.length; j++) {\n            reordered.push(values[j]);\n          }\n          table.rows.push(reordered);\n        }\n      }\n    });\n\n    return table;\n  }\n}\n","import _ from 'lodash';\nimport { QueryPartDef, QueryPart, functionRenderer, suffixRenderer } from 'app/core/components/query_part/query_part';\n\nconst index = [];\nconst categories = {\n  Aggregations: [],\n  Selectors: [],\n  Transformations: [],\n  Predictors: [],\n  Math: [],\n  Aliasing: [],\n  Fields: [],\n};\n\nfunction createPart(part): any {\n  const def = index[part.type];\n  if (!def) {\n    throw { message: 'Could not find query part ' + part.type };\n  }\n\n  return new QueryPart(part, def);\n}\n\nfunction register(options: any) {\n  index[options.type] = new QueryPartDef(options);\n  options.category.push(index[options.type]);\n}\n\nconst groupByTimeFunctions = [];\n\nfunction aliasRenderer(part, innerExpr) {\n  return innerExpr + ' AS ' + '\"' + part.params[0] + '\"';\n}\n\nfunction fieldRenderer(part, innerExpr) {\n  if (part.params[0] === '*') {\n    return '*';\n  }\n  return '\"' + part.params[0] + '\"';\n}\n\nfunction replaceAggregationAddStrategy(selectParts, partModel) {\n  // look for existing aggregation\n  for (let i = 0; i < selectParts.length; i++) {\n    const part = selectParts[i];\n    if (part.def.category === categories.Aggregations) {\n      if (part.def.type === partModel.def.type) {\n        return;\n      }\n      // count distinct is allowed\n      if (part.def.type === 'count' && partModel.def.type === 'distinct') {\n        break;\n      }\n      // remove next aggregation if distinct was replaced\n      if (part.def.type === 'distinct') {\n        const morePartsAvailable = selectParts.length >= i + 2;\n        if (partModel.def.type !== 'count' && morePartsAvailable) {\n          const nextPart = selectParts[i + 1];\n          if (nextPart.def.category === categories.Aggregations) {\n            selectParts.splice(i + 1, 1);\n          }\n        } else if (partModel.def.type === 'count') {\n          if (!morePartsAvailable || selectParts[i + 1].def.type !== 'count') {\n            selectParts.splice(i + 1, 0, partModel);\n          }\n          return;\n        }\n      }\n      selectParts[i] = partModel;\n      return;\n    }\n    if (part.def.category === categories.Selectors) {\n      selectParts[i] = partModel;\n      return;\n    }\n  }\n\n  selectParts.splice(1, 0, partModel);\n}\n\nfunction addTransformationStrategy(selectParts, partModel) {\n  let i;\n  // look for index to add transformation\n  for (i = 0; i < selectParts.length; i++) {\n    const part = selectParts[i];\n    if (part.def.category === categories.Math || part.def.category === categories.Aliasing) {\n      break;\n    }\n  }\n\n  selectParts.splice(i, 0, partModel);\n}\n\nfunction addMathStrategy(selectParts, partModel) {\n  const partCount = selectParts.length;\n  if (partCount > 0) {\n    // if last is math, replace it\n    if (selectParts[partCount - 1].def.type === 'math') {\n      selectParts[partCount - 1] = partModel;\n      return;\n    }\n    // if next to last is math, replace it\n    if (partCount > 1 && selectParts[partCount - 2].def.type === 'math') {\n      selectParts[partCount - 2] = partModel;\n      return;\n    } else if (selectParts[partCount - 1].def.type === 'alias') {\n      // if last is alias add it before\n      selectParts.splice(partCount - 1, 0, partModel);\n      return;\n    }\n  }\n  selectParts.push(partModel);\n}\n\nfunction addAliasStrategy(selectParts, partModel) {\n  const partCount = selectParts.length;\n  if (partCount > 0) {\n    // if last is alias, replace it\n    if (selectParts[partCount - 1].def.type === 'alias') {\n      selectParts[partCount - 1] = partModel;\n      return;\n    }\n  }\n  selectParts.push(partModel);\n}\n\nfunction addFieldStrategy(selectParts, partModel, query) {\n  // copy all parts\n  const parts = _.map(selectParts, function(part: any) {\n    return createPart({ type: part.def.type, params: _.clone(part.params) });\n  });\n\n  query.selectModels.push(parts);\n}\n\nregister({\n  type: 'field',\n  addStrategy: addFieldStrategy,\n  category: categories.Fields,\n  params: [{ type: 'field', dynamicLookup: true }],\n  defaultParams: ['value'],\n  renderer: fieldRenderer,\n});\n\n// Aggregations\nregister({\n  type: 'count',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Aggregations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'distinct',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Aggregations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'integral',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Aggregations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'mean',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Aggregations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'median',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Aggregations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'mode',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Aggregations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'sum',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Aggregations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\n// transformations\n\nregister({\n  type: 'derivative',\n  addStrategy: addTransformationStrategy,\n  category: categories.Transformations,\n  params: [\n    {\n      name: 'duration',\n      type: 'interval',\n      options: ['1s', '10s', '1m', '5m', '10m', '15m', '1h'],\n    },\n  ],\n  defaultParams: ['10s'],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'spread',\n  addStrategy: addTransformationStrategy,\n  category: categories.Transformations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'non_negative_derivative',\n  addStrategy: addTransformationStrategy,\n  category: categories.Transformations,\n  params: [\n    {\n      name: 'duration',\n      type: 'interval',\n      options: ['1s', '10s', '1m', '5m', '10m', '15m', '1h'],\n    },\n  ],\n  defaultParams: ['10s'],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'difference',\n  addStrategy: addTransformationStrategy,\n  category: categories.Transformations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'non_negative_difference',\n  addStrategy: addTransformationStrategy,\n  category: categories.Transformations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'moving_average',\n  addStrategy: addTransformationStrategy,\n  category: categories.Transformations,\n  params: [{ name: 'window', type: 'int', options: [5, 10, 20, 30, 40] }],\n  defaultParams: [10],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'cumulative_sum',\n  addStrategy: addTransformationStrategy,\n  category: categories.Transformations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'stddev',\n  addStrategy: addTransformationStrategy,\n  category: categories.Transformations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'time',\n  category: groupByTimeFunctions,\n  params: [\n    {\n      name: 'interval',\n      type: 'time',\n      options: ['$__interval', '1s', '10s', '1m', '5m', '10m', '15m', '1h'],\n    },\n  ],\n  defaultParams: ['$__interval'],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'fill',\n  category: groupByTimeFunctions,\n  params: [\n    {\n      name: 'fill',\n      type: 'string',\n      options: ['none', 'null', '0', 'previous', 'linear'],\n    },\n  ],\n  defaultParams: ['null'],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'elapsed',\n  addStrategy: addTransformationStrategy,\n  category: categories.Transformations,\n  params: [\n    {\n      name: 'duration',\n      type: 'interval',\n      options: ['1s', '10s', '1m', '5m', '10m', '15m', '1h'],\n    },\n  ],\n  defaultParams: ['10s'],\n  renderer: functionRenderer,\n});\n\n// predictions\nregister({\n  type: 'holt_winters',\n  addStrategy: addTransformationStrategy,\n  category: categories.Predictors,\n  params: [\n    { name: 'number', type: 'int', options: [5, 10, 20, 30, 40] },\n    { name: 'season', type: 'int', options: [0, 1, 2, 5, 10] },\n  ],\n  defaultParams: [10, 2],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'holt_winters_with_fit',\n  addStrategy: addTransformationStrategy,\n  category: categories.Predictors,\n  params: [\n    { name: 'number', type: 'int', options: [5, 10, 20, 30, 40] },\n    { name: 'season', type: 'int', options: [0, 1, 2, 5, 10] },\n  ],\n  defaultParams: [10, 2],\n  renderer: functionRenderer,\n});\n\n// Selectors\nregister({\n  type: 'bottom',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Selectors,\n  params: [{ name: 'count', type: 'int' }],\n  defaultParams: [3],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'first',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Selectors,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'last',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Selectors,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'max',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Selectors,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'min',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Selectors,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'percentile',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Selectors,\n  params: [{ name: 'nth', type: 'int' }],\n  defaultParams: [95],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'top',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Selectors,\n  params: [{ name: 'count', type: 'int' }],\n  defaultParams: [3],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'tag',\n  category: groupByTimeFunctions,\n  params: [{ name: 'tag', type: 'string', dynamicLookup: true }],\n  defaultParams: ['tag'],\n  renderer: fieldRenderer,\n});\n\nregister({\n  type: 'math',\n  addStrategy: addMathStrategy,\n  category: categories.Math,\n  params: [{ name: 'expr', type: 'string' }],\n  defaultParams: [' / 100'],\n  renderer: suffixRenderer,\n});\n\nregister({\n  type: 'alias',\n  addStrategy: addAliasStrategy,\n  category: categories.Aliasing,\n  params: [{ name: 'name', type: 'string', quote: 'double' }],\n  defaultParams: ['alias'],\n  renderMode: 'suffix',\n  renderer: aliasRenderer,\n});\n\nexport default {\n  create: createPart,\n  getCategories: function() {\n    return categories;\n  },\n  replaceAggregationAdd: replaceAggregationAddStrategy,\n};\n","import _ from 'lodash';\nimport queryPart from './query_part';\nimport kbn from 'app/core/utils/kbn';\n\nexport default class InfluxQuery {\n  target: any;\n  selectModels: any[];\n  queryBuilder: any;\n  groupByParts: any;\n  templateSrv: any;\n  scopedVars: any;\n\n  /** @ngInject */\n  constructor(target, templateSrv?, scopedVars?) {\n    this.target = target;\n    this.templateSrv = templateSrv;\n    this.scopedVars = scopedVars;\n\n    target.policy = target.policy || 'default';\n    target.resultFormat = target.resultFormat || 'time_series';\n    target.orderByTime = target.orderByTime || 'ASC';\n    target.tags = target.tags || [];\n    target.groupBy = target.groupBy || [{ type: 'time', params: ['$__interval'] }, { type: 'fill', params: ['null'] }];\n    target.select = target.select || [[{ type: 'field', params: ['value'] }, { type: 'mean', params: [] }]];\n\n    this.updateProjection();\n  }\n\n  updateProjection() {\n    this.selectModels = _.map(this.target.select, function(parts: any) {\n      return _.map(parts, queryPart.create);\n    });\n    this.groupByParts = _.map(this.target.groupBy, queryPart.create);\n  }\n\n  updatePersistedParts() {\n    this.target.select = _.map(this.selectModels, function(selectParts) {\n      return _.map(selectParts, function(part: any) {\n        return { type: part.def.type, params: part.params };\n      });\n    });\n  }\n\n  hasGroupByTime() {\n    return _.find(this.target.groupBy, (g: any) => g.type === 'time');\n  }\n\n  hasFill() {\n    return _.find(this.target.groupBy, (g: any) => g.type === 'fill');\n  }\n\n  addGroupBy(value) {\n    const stringParts = value.match(/^(\\w+)\\((.*)\\)$/);\n    const typePart = stringParts[1];\n    const arg = stringParts[2];\n    const partModel = queryPart.create({ type: typePart, params: [arg] });\n    const partCount = this.target.groupBy.length;\n\n    if (partCount === 0) {\n      this.target.groupBy.push(partModel.part);\n    } else if (typePart === 'time') {\n      this.target.groupBy.splice(0, 0, partModel.part);\n    } else if (typePart === 'tag') {\n      if (this.target.groupBy[partCount - 1].type === 'fill') {\n        this.target.groupBy.splice(partCount - 1, 0, partModel.part);\n      } else {\n        this.target.groupBy.push(partModel.part);\n      }\n    } else {\n      this.target.groupBy.push(partModel.part);\n    }\n\n    this.updateProjection();\n  }\n\n  removeGroupByPart(part, index) {\n    const categories = queryPart.getCategories();\n\n    if (part.def.type === 'time') {\n      // remove fill\n      this.target.groupBy = _.filter(this.target.groupBy, (g: any) => g.type !== 'fill');\n      // remove aggregations\n      this.target.select = _.map(this.target.select, (s: any) => {\n        return _.filter(s, (part: any) => {\n          const partModel = queryPart.create(part);\n          if (partModel.def.category === categories.Aggregations) {\n            return false;\n          }\n          if (partModel.def.category === categories.Selectors) {\n            return false;\n          }\n          return true;\n        });\n      });\n    }\n\n    this.target.groupBy.splice(index, 1);\n    this.updateProjection();\n  }\n\n  removeSelect(index: number) {\n    this.target.select.splice(index, 1);\n    this.updateProjection();\n  }\n\n  removeSelectPart(selectParts, part) {\n    // if we remove the field remove the whole statement\n    if (part.def.type === 'field') {\n      if (this.selectModels.length > 1) {\n        const modelsIndex = _.indexOf(this.selectModels, selectParts);\n        this.selectModels.splice(modelsIndex, 1);\n      }\n    } else {\n      const partIndex = _.indexOf(selectParts, part);\n      selectParts.splice(partIndex, 1);\n    }\n\n    this.updatePersistedParts();\n  }\n\n  addSelectPart(selectParts, type) {\n    const partModel = queryPart.create({ type: type });\n    partModel.def.addStrategy(selectParts, partModel, this);\n    this.updatePersistedParts();\n  }\n\n  private renderTagCondition(tag, index, interpolate) {\n    let str = '';\n    let operator = tag.operator;\n    let value = tag.value;\n    if (index > 0) {\n      str = (tag.condition || 'AND') + ' ';\n    }\n\n    if (!operator) {\n      if (/^\\/.*\\/$/.test(value)) {\n        operator = '=~';\n      } else {\n        operator = '=';\n      }\n    }\n\n    // quote value unless regex\n    if (operator !== '=~' && operator !== '!~') {\n      if (interpolate) {\n        value = this.templateSrv.replace(value, this.scopedVars);\n      }\n      if (operator !== '>' && operator !== '<') {\n        value = \"'\" + value.replace(/\\\\/g, '\\\\\\\\') + \"'\";\n      }\n    } else if (interpolate) {\n      value = this.templateSrv.replace(value, this.scopedVars, 'regex');\n    }\n\n    return str + '\"' + tag.key + '\" ' + operator + ' ' + value;\n  }\n\n  getMeasurementAndPolicy(interpolate) {\n    let policy = this.target.policy;\n    let measurement = this.target.measurement || 'measurement';\n\n    if (!measurement.match('^/.*/$')) {\n      measurement = '\"' + measurement + '\"';\n    } else if (interpolate) {\n      measurement = this.templateSrv.replace(measurement, this.scopedVars, 'regex');\n    }\n\n    if (policy !== 'default') {\n      policy = '\"' + this.target.policy + '\".';\n    } else {\n      policy = '';\n    }\n\n    return policy + measurement;\n  }\n\n  interpolateQueryStr(value, variable, defaultFormatFn) {\n    // if no multi or include all do not regexEscape\n    if (!variable.multi && !variable.includeAll) {\n      return value;\n    }\n\n    if (typeof value === 'string') {\n      return kbn.regexEscape(value);\n    }\n\n    const escapedValues = _.map(value, kbn.regexEscape);\n    return '(' + escapedValues.join('|') + ')';\n  }\n\n  render(interpolate?) {\n    const target = this.target;\n\n    if (target.rawQuery) {\n      if (interpolate) {\n        return this.templateSrv.replace(target.query, this.scopedVars, this.interpolateQueryStr);\n      } else {\n        return target.query;\n      }\n    }\n\n    let query = 'SELECT ';\n    let i, y;\n    for (i = 0; i < this.selectModels.length; i++) {\n      const parts = this.selectModels[i];\n      let selectText = '';\n      for (y = 0; y < parts.length; y++) {\n        const part = parts[y];\n        selectText = part.render(selectText);\n      }\n\n      if (i > 0) {\n        query += ', ';\n      }\n      query += selectText;\n    }\n\n    query += ' FROM ' + this.getMeasurementAndPolicy(interpolate) + ' WHERE ';\n    const conditions = _.map(target.tags, (tag, index) => {\n      return this.renderTagCondition(tag, index, interpolate);\n    });\n\n    if (conditions.length > 0) {\n      query += '(' + conditions.join(' ') + ') AND ';\n    }\n\n    query += '$timeFilter';\n\n    let groupBySection = '';\n    for (i = 0; i < this.groupByParts.length; i++) {\n      const part = this.groupByParts[i];\n      if (i > 0) {\n        // for some reason fill has no separator\n        groupBySection += part.def.type === 'fill' ? ' ' : ', ';\n      }\n      groupBySection += part.render('');\n    }\n\n    if (groupBySection.length) {\n      query += ' GROUP BY ' + groupBySection;\n    }\n\n    if (target.fill) {\n      query += ' fill(' + target.fill + ')';\n    }\n\n    if (target.orderByTime === 'DESC') {\n      query += ' ORDER BY time DESC';\n    }\n\n    if (target.limit) {\n      query += ' LIMIT ' + target.limit;\n    }\n\n    if (target.slimit) {\n      query += ' SLIMIT ' + target.slimit;\n    }\n\n    return query;\n  }\n\n  renderAdhocFilters(filters) {\n    const conditions = _.map(filters, (tag, index) => {\n      return this.renderTagCondition(tag, index, false);\n    });\n    return conditions.join(' ');\n  }\n}\n","import _ from 'lodash';\n\nfunction renderTagCondition(tag, index) {\n  let str = '';\n  let operator = tag.operator;\n  let value = tag.value;\n  if (index > 0) {\n    str = (tag.condition || 'AND') + ' ';\n  }\n\n  if (!operator) {\n    if (/^\\/.*\\/$/.test(tag.value)) {\n      operator = '=~';\n    } else {\n      operator = '=';\n    }\n  }\n\n  // quote value unless regex or number\n  if (operator !== '=~' && operator !== '!~' && isNaN(+value)) {\n    value = \"'\" + value + \"'\";\n  }\n\n  return str + '\"' + tag.key + '\" ' + operator + ' ' + value;\n}\n\nexport class InfluxQueryBuilder {\n  constructor(private target, private database?) {}\n\n  buildExploreQuery(type: string, withKey?: string, withMeasurementFilter?: string) {\n    let query;\n    let measurement;\n    let policy;\n\n    if (type === 'TAG_KEYS') {\n      query = 'SHOW TAG KEYS';\n      measurement = this.target.measurement;\n      policy = this.target.policy;\n    } else if (type === 'TAG_VALUES') {\n      query = 'SHOW TAG VALUES';\n      measurement = this.target.measurement;\n      policy = this.target.policy;\n    } else if (type === 'MEASUREMENTS') {\n      query = 'SHOW MEASUREMENTS';\n      if (withMeasurementFilter) {\n        query += ' WITH MEASUREMENT =~ /' + withMeasurementFilter + '/';\n      }\n    } else if (type === 'FIELDS') {\n      measurement = this.target.measurement;\n      policy = this.target.policy;\n\n      if (!measurement.match('^/.*/')) {\n        measurement = '\"' + measurement + '\"';\n\n        if (policy && policy !== 'default') {\n          policy = '\"' + policy + '\"';\n          measurement = policy + '.' + measurement;\n        }\n      }\n\n      return 'SHOW FIELD KEYS FROM ' + measurement;\n    } else if (type === 'RETENTION POLICIES') {\n      query = 'SHOW RETENTION POLICIES on \"' + this.database + '\"';\n      return query;\n    }\n\n    if (measurement) {\n      if (!measurement.match('^/.*/') && !measurement.match(/^merge\\(.*\\)/)) {\n        measurement = '\"' + measurement + '\"';\n      }\n\n      if (policy && policy !== 'default') {\n        policy = '\"' + policy + '\"';\n        measurement = policy + '.' + measurement;\n      }\n\n      query += ' FROM ' + measurement;\n    }\n\n    if (withKey) {\n      query += ' WITH KEY = \"' + withKey + '\"';\n    }\n\n    if (this.target.tags && this.target.tags.length > 0) {\n      const whereConditions = _.reduce(\n        this.target.tags,\n        function(memo, tag) {\n          // do not add a condition for the key we want to explore for\n          if (tag.key === withKey) {\n            return memo;\n          }\n          memo.push(renderTagCondition(tag, memo.length));\n          return memo;\n        },\n        []\n      );\n\n      if (whereConditions.length > 0) {\n        query += ' WHERE ' + whereConditions.join(' ');\n      }\n    }\n    if (type === 'MEASUREMENTS') {\n      query += ' LIMIT 100';\n      //Solve issue #2524 by limiting the number of measurements returned\n      //LIMIT must be after WITH MEASUREMENT and WHERE clauses\n      //This also could be used for TAG KEYS and TAG VALUES, if desired\n    }\n    return query;\n  }\n}\n","import _ from 'lodash';\n\nexport default class ResponseParser {\n  parse(query, results) {\n    if (!results || results.results.length === 0) {\n      return [];\n    }\n\n    const influxResults = results.results[0];\n    if (!influxResults.series) {\n      return [];\n    }\n\n    const normalizedQuery = query.toLowerCase();\n    const isValueFirst =\n      normalizedQuery.indexOf('show field keys') >= 0 || normalizedQuery.indexOf('show retention policies') >= 0;\n\n    const res = {};\n    _.each(influxResults.series, serie => {\n      _.each(serie.values, value => {\n        if (_.isArray(value)) {\n          // In general, there are 2 possible shapes for the returned value.\n          // The first one is a two-element array,\n          // where the first element is somewhat a metadata value:\n          // the tag name for SHOW TAG VALUES queries,\n          // the time field for SELECT queries, etc.\n          // The second shape is an one-element array,\n          // that is containing an immediate value.\n          // For example, SHOW FIELD KEYS queries return such shape.\n          // Note, pre-0.11 versions return\n          // the second shape for SHOW TAG VALUES queries\n          // (while the newer versions—first).\n\n          if (isValueFirst) {\n            addUnique(res, value[0]);\n          } else if (value[1] !== undefined) {\n            addUnique(res, value[1]);\n          } else {\n            addUnique(res, value[0]);\n          }\n        } else {\n          addUnique(res, value);\n        }\n      });\n    });\n\n    return _.map(res, value => {\n      return { text: value.toString() };\n    });\n  }\n}\n\nfunction addUnique(arr, value) {\n  arr[value] = value;\n}\n","import _ from 'lodash';\n\nimport * as dateMath from 'app/core/utils/datemath';\nimport InfluxSeries from './influx_series';\nimport InfluxQuery from './influx_query';\nimport ResponseParser from './response_parser';\nimport { InfluxQueryBuilder } from './query_builder';\n\nexport default class InfluxDatasource {\n  type: string;\n  urls: any;\n  username: string;\n  password: string;\n  name: string;\n  database: any;\n  basicAuth: any;\n  withCredentials: any;\n  interval: any;\n  supportAnnotations: boolean;\n  supportMetrics: boolean;\n  responseParser: any;\n\n  /** @ngInject */\n  constructor(instanceSettings, private $q, private backendSrv, private templateSrv) {\n    this.type = 'influxdb';\n    this.urls = _.map(instanceSettings.url.split(','), function(url) {\n      return url.trim();\n    });\n\n    this.username = instanceSettings.username;\n    this.password = instanceSettings.password;\n    this.name = instanceSettings.name;\n    this.database = instanceSettings.database;\n    this.basicAuth = instanceSettings.basicAuth;\n    this.withCredentials = instanceSettings.withCredentials;\n    this.interval = (instanceSettings.jsonData || {}).timeInterval;\n    this.supportAnnotations = true;\n    this.supportMetrics = true;\n    this.responseParser = new ResponseParser();\n  }\n\n  query(options) {\n    let timeFilter = this.getTimeFilter(options);\n    const scopedVars = options.scopedVars;\n    const targets = _.cloneDeep(options.targets);\n    const queryTargets = [];\n    let queryModel;\n    let i, y;\n\n    let allQueries = _.map(targets, target => {\n      if (target.hide) {\n        return '';\n      }\n\n      queryTargets.push(target);\n\n      // backward compatibility\n      scopedVars.interval = scopedVars.__interval;\n\n      queryModel = new InfluxQuery(target, this.templateSrv, scopedVars);\n      return queryModel.render(true);\n    }).reduce((acc, current) => {\n      if (current !== '') {\n        acc += ';' + current;\n      }\n      return acc;\n    });\n\n    if (allQueries === '') {\n      return this.$q.when({ data: [] });\n    }\n\n    // add global adhoc filters to timeFilter\n    const adhocFilters = this.templateSrv.getAdhocFilters(this.name);\n    if (adhocFilters.length > 0) {\n      timeFilter += ' AND ' + queryModel.renderAdhocFilters(adhocFilters);\n    }\n\n    // replace grafana variables\n    scopedVars.timeFilter = { value: timeFilter };\n\n    // replace templated variables\n    allQueries = this.templateSrv.replace(allQueries, scopedVars);\n\n    return this._seriesQuery(allQueries, options).then((data): any => {\n      if (!data || !data.results) {\n        return [];\n      }\n\n      const seriesList = [];\n      for (i = 0; i < data.results.length; i++) {\n        const result = data.results[i];\n        if (!result || !result.series) {\n          continue;\n        }\n\n        const target = queryTargets[i];\n        let alias = target.alias;\n        if (alias) {\n          alias = this.templateSrv.replace(target.alias, options.scopedVars);\n        }\n\n        const influxSeries = new InfluxSeries({\n          series: data.results[i].series,\n          alias: alias,\n        });\n\n        switch (target.resultFormat) {\n          case 'table': {\n            seriesList.push(influxSeries.getTable());\n            break;\n          }\n          default: {\n            const timeSeries = influxSeries.getTimeSeries();\n            for (y = 0; y < timeSeries.length; y++) {\n              seriesList.push(timeSeries[y]);\n            }\n            break;\n          }\n        }\n      }\n\n      return { data: seriesList };\n    });\n  }\n\n  annotationQuery(options) {\n    if (!options.annotation.query) {\n      return this.$q.reject({\n        message: 'Query missing in annotation definition',\n      });\n    }\n\n    const timeFilter = this.getTimeFilter({ rangeRaw: options.rangeRaw });\n    let query = options.annotation.query.replace('$timeFilter', timeFilter);\n    query = this.templateSrv.replace(query, null, 'regex');\n\n    return this._seriesQuery(query, options).then(data => {\n      if (!data || !data.results || !data.results[0]) {\n        throw { message: 'No results in response from InfluxDB' };\n      }\n      return new InfluxSeries({\n        series: data.results[0].series,\n        annotation: options.annotation,\n      }).getAnnotations();\n    });\n  }\n\n  targetContainsTemplate(target) {\n    for (const group of target.groupBy) {\n      for (const param of group.params) {\n        if (this.templateSrv.variableExists(param)) {\n          return true;\n        }\n      }\n    }\n\n    for (const i in target.tags) {\n      if (this.templateSrv.variableExists(target.tags[i].value)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  metricFindQuery(query: string, options?: any) {\n    const interpolated = this.templateSrv.replace(query, null, 'regex');\n\n    return this._seriesQuery(interpolated, options).then(_.curry(this.responseParser.parse)(query));\n  }\n\n  getTagKeys(options) {\n    const queryBuilder = new InfluxQueryBuilder({ measurement: '', tags: [] }, this.database);\n    const query = queryBuilder.buildExploreQuery('TAG_KEYS');\n    return this.metricFindQuery(query, options);\n  }\n\n  getTagValues(options) {\n    const queryBuilder = new InfluxQueryBuilder({ measurement: '', tags: [] }, this.database);\n    const query = queryBuilder.buildExploreQuery('TAG_VALUES', options.key);\n    return this.metricFindQuery(query, options);\n  }\n\n  _seriesQuery(query: string, options?: any) {\n    if (!query) {\n      return this.$q.when({ results: [] });\n    }\n\n    if (options && options.range) {\n      const timeFilter = this.getTimeFilter({ rangeRaw: options.range });\n      query = query.replace('$timeFilter', timeFilter);\n    }\n\n    return this._influxRequest('GET', '/query', { q: query, epoch: 'ms' }, options);\n  }\n\n  serializeParams(params) {\n    if (!params) {\n      return '';\n    }\n\n    return _.reduce(\n      params,\n      (memo, value, key) => {\n        if (value === null || value === undefined) {\n          return memo;\n        }\n        memo.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));\n        return memo;\n      },\n      []\n    ).join('&');\n  }\n\n  testDatasource() {\n    const queryBuilder = new InfluxQueryBuilder({ measurement: '', tags: [] }, this.database);\n    const query = queryBuilder.buildExploreQuery('RETENTION POLICIES');\n\n    return this._seriesQuery(query)\n      .then(res => {\n        const error = _.get(res, 'results[0].error');\n        if (error) {\n          return { status: 'error', message: error };\n        }\n        return { status: 'success', message: 'Data source is working' };\n      })\n      .catch(err => {\n        return { status: 'error', message: err.message };\n      });\n  }\n\n  _influxRequest(method: string, url: string, data: any, options?: any) {\n    const currentUrl = this.urls.shift();\n    this.urls.push(currentUrl);\n\n    const params: any = {};\n\n    if (this.username) {\n      params.u = this.username;\n      params.p = this.password;\n    }\n\n    if (options && options.database) {\n      params.db = options.database;\n    } else if (this.database) {\n      params.db = this.database;\n    }\n\n    if (method === 'GET') {\n      _.extend(params, data);\n      data = null;\n    }\n\n    const req: any = {\n      method: method,\n      url: currentUrl + url,\n      params: params,\n      data: data,\n      precision: 'ms',\n      inspect: { type: 'influxdb' },\n      paramSerializer: this.serializeParams,\n    };\n\n    req.headers = req.headers || {};\n    if (this.basicAuth || this.withCredentials) {\n      req.withCredentials = true;\n    }\n    if (this.basicAuth) {\n      req.headers.Authorization = this.basicAuth;\n    }\n\n    return this.backendSrv.datasourceRequest(req).then(\n      result => {\n        return result.data;\n      },\n      function(err) {\n        if (err.status !== 0 || err.status >= 300) {\n          if (err.data && err.data.error) {\n            throw {\n              message: 'InfluxDB Error: ' + err.data.error,\n              data: err.data,\n              config: err.config,\n            };\n          } else {\n            throw {\n              message: 'Network Error: ' + err.statusText + '(' + err.status + ')',\n              data: err.data,\n              config: err.config,\n            };\n          }\n        }\n      }\n    );\n  }\n\n  getTimeFilter(options) {\n    const from = this.getInfluxTime(options.rangeRaw.from, false);\n    const until = this.getInfluxTime(options.rangeRaw.to, true);\n    const fromIsAbsolute = from[from.length - 1] === 'ms';\n\n    if (until === 'now()' && !fromIsAbsolute) {\n      return 'time >= ' + from;\n    }\n\n    return 'time >= ' + from + ' and time <= ' + until;\n  }\n\n  getInfluxTime(date, roundUp) {\n    if (_.isString(date)) {\n      if (date === 'now') {\n        return 'now()';\n      }\n\n      const parts = /^now-(\\d+)([d|h|m|s])$/.exec(date);\n      if (parts) {\n        const amount = parseInt(parts[1]);\n        const unit = parts[2];\n        return 'now() - ' + amount + unit;\n      }\n      date = dateMath.parse(date, roundUp);\n    }\n\n    return date.valueOf() + 'ms';\n  }\n}\n","import angular from 'angular';\nimport _ from 'lodash';\nimport { InfluxQueryBuilder } from './query_builder';\nimport InfluxQuery from './influx_query';\nimport queryPart from './query_part';\nimport { QueryCtrl } from 'app/plugins/sdk';\n\nexport class InfluxQueryCtrl extends QueryCtrl {\n  static templateUrl = 'partials/query.editor.html';\n\n  queryModel: InfluxQuery;\n  queryBuilder: any;\n  groupBySegment: any;\n  resultFormats: any[];\n  orderByTime: any[];\n  policySegment: any;\n  tagSegments: any[];\n  selectMenu: any;\n  measurementSegment: any;\n  removeTagFilterSegment: any;\n\n  /** @ngInject */\n  constructor($scope, $injector, private templateSrv, private $q, private uiSegmentSrv) {\n    super($scope, $injector);\n    this.target = this.target;\n    this.queryModel = new InfluxQuery(this.target, templateSrv, this.panel.scopedVars);\n    this.queryBuilder = new InfluxQueryBuilder(this.target, this.datasource.database);\n    this.groupBySegment = this.uiSegmentSrv.newPlusButton();\n    this.resultFormats = [{ text: 'Time series', value: 'time_series' }, { text: 'Table', value: 'table' }];\n    this.policySegment = uiSegmentSrv.newSegment(this.target.policy);\n\n    if (!this.target.measurement) {\n      this.measurementSegment = uiSegmentSrv.newSelectMeasurement();\n    } else {\n      this.measurementSegment = uiSegmentSrv.newSegment(this.target.measurement);\n    }\n\n    this.tagSegments = [];\n    for (const tag of this.target.tags) {\n      if (!tag.operator) {\n        if (/^\\/.*\\/$/.test(tag.value)) {\n          tag.operator = '=~';\n        } else {\n          tag.operator = '=';\n        }\n      }\n\n      if (tag.condition) {\n        this.tagSegments.push(uiSegmentSrv.newCondition(tag.condition));\n      }\n\n      this.tagSegments.push(uiSegmentSrv.newKey(tag.key));\n      this.tagSegments.push(uiSegmentSrv.newOperator(tag.operator));\n      this.tagSegments.push(uiSegmentSrv.newKeyValue(tag.value));\n    }\n\n    this.fixTagSegments();\n    this.buildSelectMenu();\n    this.removeTagFilterSegment = uiSegmentSrv.newSegment({\n      fake: true,\n      value: '-- remove tag filter --',\n    });\n  }\n\n  removeOrderByTime() {\n    this.target.orderByTime = 'ASC';\n  }\n\n  buildSelectMenu() {\n    const categories = queryPart.getCategories();\n    this.selectMenu = _.reduce(\n      categories,\n      function(memo, cat, key) {\n        const menu = {\n          text: key,\n          submenu: cat.map(item => {\n            return { text: item.type, value: item.type };\n          }),\n        };\n        memo.push(menu);\n        return memo;\n      },\n      []\n    );\n  }\n\n  getGroupByOptions() {\n    const query = this.queryBuilder.buildExploreQuery('TAG_KEYS');\n\n    return this.datasource\n      .metricFindQuery(query)\n      .then(tags => {\n        const options = [];\n        if (!this.queryModel.hasFill()) {\n          options.push(this.uiSegmentSrv.newSegment({ value: 'fill(null)' }));\n        }\n        if (!this.target.limit) {\n          options.push(this.uiSegmentSrv.newSegment({ value: 'LIMIT' }));\n        }\n        if (!this.target.slimit) {\n          options.push(this.uiSegmentSrv.newSegment({ value: 'SLIMIT' }));\n        }\n        if (this.target.orderByTime === 'ASC') {\n          options.push(this.uiSegmentSrv.newSegment({ value: 'ORDER BY time DESC' }));\n        }\n        if (!this.queryModel.hasGroupByTime()) {\n          options.push(this.uiSegmentSrv.newSegment({ value: 'time($interval)' }));\n        }\n        for (const tag of tags) {\n          options.push(this.uiSegmentSrv.newSegment({ value: 'tag(' + tag.text + ')' }));\n        }\n        return options;\n      })\n      .catch(this.handleQueryError.bind(this));\n  }\n\n  groupByAction() {\n    switch (this.groupBySegment.value) {\n      case 'LIMIT': {\n        this.target.limit = 10;\n        break;\n      }\n      case 'SLIMIT': {\n        this.target.slimit = 10;\n        break;\n      }\n      case 'ORDER BY time DESC': {\n        this.target.orderByTime = 'DESC';\n        break;\n      }\n      default: {\n        this.queryModel.addGroupBy(this.groupBySegment.value);\n      }\n    }\n\n    const plusButton = this.uiSegmentSrv.newPlusButton();\n    this.groupBySegment.value = plusButton.value;\n    this.groupBySegment.html = plusButton.html;\n    this.panelCtrl.refresh();\n  }\n\n  addSelectPart(selectParts, cat, subitem) {\n    this.queryModel.addSelectPart(selectParts, subitem.value);\n    this.panelCtrl.refresh();\n  }\n\n  handleSelectPartEvent(selectParts, part, evt) {\n    switch (evt.name) {\n      case 'get-param-options': {\n        const fieldsQuery = this.queryBuilder.buildExploreQuery('FIELDS');\n        return this.datasource\n          .metricFindQuery(fieldsQuery)\n          .then(this.transformToSegments(true))\n          .catch(this.handleQueryError.bind(this));\n      }\n      case 'part-param-changed': {\n        this.panelCtrl.refresh();\n        break;\n      }\n      case 'action': {\n        this.queryModel.removeSelectPart(selectParts, part);\n        this.panelCtrl.refresh();\n        break;\n      }\n      case 'get-part-actions': {\n        return this.$q.when([{ text: 'Remove', value: 'remove-part' }]);\n      }\n    }\n  }\n\n  handleGroupByPartEvent(part, index, evt) {\n    switch (evt.name) {\n      case 'get-param-options': {\n        const tagsQuery = this.queryBuilder.buildExploreQuery('TAG_KEYS');\n        return this.datasource\n          .metricFindQuery(tagsQuery)\n          .then(this.transformToSegments(true))\n          .catch(this.handleQueryError.bind(this));\n      }\n      case 'part-param-changed': {\n        this.panelCtrl.refresh();\n        break;\n      }\n      case 'action': {\n        this.queryModel.removeGroupByPart(part, index);\n        this.panelCtrl.refresh();\n        break;\n      }\n      case 'get-part-actions': {\n        return this.$q.when([{ text: 'Remove', value: 'remove-part' }]);\n      }\n    }\n  }\n\n  fixTagSegments() {\n    const count = this.tagSegments.length;\n    const lastSegment = this.tagSegments[Math.max(count - 1, 0)];\n\n    if (!lastSegment || lastSegment.type !== 'plus-button') {\n      this.tagSegments.push(this.uiSegmentSrv.newPlusButton());\n    }\n  }\n\n  measurementChanged() {\n    this.target.measurement = this.measurementSegment.value;\n    this.panelCtrl.refresh();\n  }\n\n  getPolicySegments() {\n    const policiesQuery = this.queryBuilder.buildExploreQuery('RETENTION POLICIES');\n    return this.datasource\n      .metricFindQuery(policiesQuery)\n      .then(this.transformToSegments(false))\n      .catch(this.handleQueryError.bind(this));\n  }\n\n  policyChanged() {\n    this.target.policy = this.policySegment.value;\n    this.panelCtrl.refresh();\n  }\n\n  toggleEditorMode() {\n    try {\n      this.target.query = this.queryModel.render(false);\n    } catch (err) {\n      console.log('query render error');\n    }\n    this.target.rawQuery = !this.target.rawQuery;\n  }\n\n  getMeasurements(measurementFilter) {\n    const query = this.queryBuilder.buildExploreQuery('MEASUREMENTS', undefined, measurementFilter);\n    return this.datasource\n      .metricFindQuery(query)\n      .then(this.transformToSegments(true))\n      .catch(this.handleQueryError.bind(this));\n  }\n\n  handleQueryError(err) {\n    this.error = err.message || 'Failed to issue metric query';\n    return [];\n  }\n\n  transformToSegments(addTemplateVars) {\n    return results => {\n      const segments = _.map(results, segment => {\n        return this.uiSegmentSrv.newSegment({\n          value: segment.text,\n          expandable: segment.expandable,\n        });\n      });\n\n      if (addTemplateVars) {\n        for (const variable of this.templateSrv.variables) {\n          segments.unshift(\n            this.uiSegmentSrv.newSegment({\n              type: 'value',\n              value: '/^$' + variable.name + '$/',\n              expandable: true,\n            })\n          );\n        }\n      }\n\n      return segments;\n    };\n  }\n\n  getTagsOrValues(segment, index) {\n    if (segment.type === 'condition') {\n      return this.$q.when([this.uiSegmentSrv.newSegment('AND'), this.uiSegmentSrv.newSegment('OR')]);\n    }\n    if (segment.type === 'operator') {\n      const nextValue = this.tagSegments[index + 1].value;\n      if (/^\\/.*\\/$/.test(nextValue)) {\n        return this.$q.when(this.uiSegmentSrv.newOperators(['=~', '!~']));\n      } else {\n        return this.$q.when(this.uiSegmentSrv.newOperators(['=', '!=', '<>', '<', '>']));\n      }\n    }\n\n    let query, addTemplateVars;\n    if (segment.type === 'key' || segment.type === 'plus-button') {\n      query = this.queryBuilder.buildExploreQuery('TAG_KEYS');\n      addTemplateVars = false;\n    } else if (segment.type === 'value') {\n      query = this.queryBuilder.buildExploreQuery('TAG_VALUES', this.tagSegments[index - 2].value);\n      addTemplateVars = true;\n    }\n\n    return this.datasource\n      .metricFindQuery(query)\n      .then(this.transformToSegments(addTemplateVars))\n      .then(results => {\n        if (segment.type === 'key') {\n          results.splice(0, 0, angular.copy(this.removeTagFilterSegment));\n        }\n        return results;\n      })\n      .catch(this.handleQueryError.bind(this));\n  }\n\n  getFieldSegments() {\n    const fieldsQuery = this.queryBuilder.buildExploreQuery('FIELDS');\n    return this.datasource\n      .metricFindQuery(fieldsQuery)\n      .then(this.transformToSegments(false))\n      .catch(this.handleQueryError);\n  }\n\n  tagSegmentUpdated(segment, index) {\n    this.tagSegments[index] = segment;\n\n    // handle remove tag condition\n    if (segment.value === this.removeTagFilterSegment.value) {\n      this.tagSegments.splice(index, 3);\n      if (this.tagSegments.length === 0) {\n        this.tagSegments.push(this.uiSegmentSrv.newPlusButton());\n      } else if (this.tagSegments.length > 2) {\n        this.tagSegments.splice(Math.max(index - 1, 0), 1);\n        if (this.tagSegments[this.tagSegments.length - 1].type !== 'plus-button') {\n          this.tagSegments.push(this.uiSegmentSrv.newPlusButton());\n        }\n      }\n    } else {\n      if (segment.type === 'plus-button') {\n        if (index > 2) {\n          this.tagSegments.splice(index, 0, this.uiSegmentSrv.newCondition('AND'));\n        }\n        this.tagSegments.push(this.uiSegmentSrv.newOperator('='));\n        this.tagSegments.push(this.uiSegmentSrv.newFake('select tag value', 'value', 'query-segment-value'));\n        segment.type = 'key';\n        segment.cssClass = 'query-segment-key';\n      }\n\n      if (index + 1 === this.tagSegments.length) {\n        this.tagSegments.push(this.uiSegmentSrv.newPlusButton());\n      }\n    }\n\n    this.rebuildTargetTagConditions();\n  }\n\n  rebuildTargetTagConditions() {\n    const tags = [];\n    let tagIndex = 0;\n    let tagOperator = '';\n\n    _.each(this.tagSegments, (segment2, index) => {\n      if (segment2.type === 'key') {\n        if (tags.length === 0) {\n          tags.push({});\n        }\n        tags[tagIndex].key = segment2.value;\n      } else if (segment2.type === 'value') {\n        tagOperator = this.getTagValueOperator(segment2.value, tags[tagIndex].operator);\n        if (tagOperator) {\n          this.tagSegments[index - 1] = this.uiSegmentSrv.newOperator(tagOperator);\n          tags[tagIndex].operator = tagOperator;\n        }\n        tags[tagIndex].value = segment2.value;\n      } else if (segment2.type === 'condition') {\n        tags.push({ condition: segment2.value });\n        tagIndex += 1;\n      } else if (segment2.type === 'operator') {\n        tags[tagIndex].operator = segment2.value;\n      }\n    });\n\n    this.target.tags = tags;\n    this.panelCtrl.refresh();\n  }\n\n  getTagValueOperator(tagValue, tagOperator): string {\n    if (tagOperator !== '=~' && tagOperator !== '!~' && /^\\/.*\\/$/.test(tagValue)) {\n      return '=~';\n    } else if ((tagOperator === '=~' || tagOperator === '!~') && /^(?!\\/.*\\/$)/.test(tagValue)) {\n      return '=';\n    }\n    return null;\n  }\n\n  getCollapsedText() {\n    return this.queryModel.render(false);\n  }\n}\n","import InfluxDatasource from './datasource';\nimport { InfluxQueryCtrl } from './query_ctrl';\n\nclass InfluxConfigCtrl {\n  static templateUrl = 'partials/config.html';\n}\n\nclass InfluxAnnotationsQueryCtrl {\n  static templateUrl = 'partials/annotations.editor.html';\n}\n\nexport {\n  InfluxDatasource as Datasource,\n  InfluxQueryCtrl as QueryCtrl,\n  InfluxConfigCtrl as ConfigCtrl,\n  InfluxAnnotationsQueryCtrl as AnnotationsQueryCtrl,\n};\n","export enum LogLevel {\n  crit = 'crit',\n  warn = 'warn',\n  err = 'error',\n  error = 'error',\n  info = 'info',\n  debug = 'debug',\n  trace = 'trace',\n}\n\nexport interface LogSearchMatch {\n  start: number;\n  length: number;\n  text?: string;\n}\n\nexport interface LogRow {\n  key: string;\n  entry: string;\n  logLevel: LogLevel;\n  timestamp: string;\n  timeFromNow: string;\n  timeLocal: string;\n  searchMatches?: LogSearchMatch[];\n}\n\nexport interface LogsModel {\n  rows: LogRow[];\n}\n","import _ from 'lodash';\nimport moment from 'moment';\n\nimport { LogLevel, LogsModel, LogRow } from 'app/core/logs_model';\n\nexport function getLogLevel(line: string): LogLevel {\n  if (!line) {\n    return undefined;\n  }\n  let level: LogLevel;\n  Object.keys(LogLevel).forEach(key => {\n    if (!level) {\n      const regexp = new RegExp(`\\\\b${key}\\\\b`, 'i');\n      if (regexp.test(line)) {\n        level = LogLevel[key];\n      }\n    }\n  });\n  return level;\n}\n\nexport function getSearchMatches(line: string, search: string) {\n  // Empty search can send re.exec() into infinite loop, exit early\n  if (!line || !search) {\n    return [];\n  }\n  const regexp = new RegExp(`(?:${search})`, 'g');\n  const matches = [];\n  let match;\n  while ((match = regexp.exec(line))) {\n    matches.push({\n      text: match[0],\n      start: match.index,\n      length: match[0].length,\n    });\n  }\n  return matches;\n}\n\nexport function processEntry(entry: { line: string; timestamp: string }, stream): LogRow {\n  const { line, timestamp } = entry;\n  const { labels } = stream;\n  const key = `EK${timestamp}${labels}`;\n  const time = moment(timestamp);\n  const timeFromNow = time.fromNow();\n  const timeLocal = time.format('YYYY-MM-DD HH:mm:ss');\n  const searchMatches = getSearchMatches(line, stream.search);\n  const logLevel = getLogLevel(line);\n\n  return {\n    key,\n    logLevel,\n    searchMatches,\n    timeFromNow,\n    timeLocal,\n    entry: line,\n    timestamp: timestamp,\n  };\n}\n\nexport function processStreams(streams, limit?: number): LogsModel {\n  const combinedEntries = streams.reduce((acc, stream) => {\n    return [...acc, ...stream.entries.map(entry => processEntry(entry, stream))];\n  }, []);\n  const sortedEntries = _.chain(combinedEntries)\n    .sortBy('timestamp')\n    .reverse()\n    .slice(0, limit || combinedEntries.length)\n    .value();\n  return { rows: sortedEntries };\n}\n","import _ from 'lodash';\n\nimport * as dateMath from 'app/core/utils/datemath';\n\nimport { processStreams } from './result_transformer';\n\nconst DEFAULT_LIMIT = 100;\n\nconst DEFAULT_QUERY_PARAMS = {\n  direction: 'BACKWARD',\n  limit: DEFAULT_LIMIT,\n  regexp: '',\n  query: '',\n};\n\nconst QUERY_REGEXP = /({\\w+=\"[^\"]+\"})?\\s*(\\w[^{]+)?\\s*({\\w+=\"[^\"]+\"})?/;\nexport function parseQuery(input: string) {\n  const match = input.match(QUERY_REGEXP);\n  let query = '';\n  let regexp = '';\n\n  if (match) {\n    if (match[1]) {\n      query = match[1];\n    }\n    if (match[2]) {\n      regexp = match[2].trim();\n    }\n    if (match[3]) {\n      if (match[1]) {\n        query = `${match[1].slice(0, -1)},${match[3].slice(1)}`;\n      } else {\n        query = match[3];\n      }\n    }\n  }\n\n  return { query, regexp };\n}\n\nfunction serializeParams(data: any) {\n  return Object.keys(data)\n    .map(k => {\n      const v = data[k];\n      return encodeURIComponent(k) + '=' + encodeURIComponent(v);\n    })\n    .join('&');\n}\n\nexport default class LoggingDatasource {\n  /** @ngInject */\n  constructor(private instanceSettings, private backendSrv, private templateSrv) {}\n\n  _request(apiUrl: string, data?, options?: any) {\n    const baseUrl = this.instanceSettings.url;\n    const params = data ? serializeParams(data) : '';\n    const url = `${baseUrl}${apiUrl}?${params}`;\n    const req = {\n      ...options,\n      url,\n    };\n    return this.backendSrv.datasourceRequest(req);\n  }\n\n  prepareQueryTarget(target, options) {\n    const interpolated = this.templateSrv.replace(target.expr);\n    const start = this.getTime(options.range.from, false);\n    const end = this.getTime(options.range.to, true);\n    return {\n      ...DEFAULT_QUERY_PARAMS,\n      ...parseQuery(interpolated),\n      start,\n      end,\n    };\n  }\n\n  query(options) {\n    const queryTargets = options.targets\n      .filter(target => target.expr)\n      .map(target => this.prepareQueryTarget(target, options));\n    if (queryTargets.length === 0) {\n      return Promise.resolve({ data: [] });\n    }\n\n    const queries = queryTargets.map(target => this._request('/api/prom/query', target));\n\n    return Promise.all(queries).then((results: any[]) => {\n      // Flatten streams from multiple queries\n      const allStreams = results.reduce((acc, response, i) => {\n        const streams = response.data.streams || [];\n        // Inject search for match highlighting\n        const search = queryTargets[i].regexp;\n        streams.forEach(s => {\n          s.search = search;\n        });\n        return [...acc, ...streams];\n      }, []);\n      const model = processStreams(allStreams, DEFAULT_LIMIT);\n      return { data: model };\n    });\n  }\n\n  metadataRequest(url) {\n    // HACK to get label values for {job=|}, will be replaced when implementing LoggingQueryField\n    const apiUrl = url.replace('v1', 'prom');\n    return this._request(apiUrl, { silent: true }).then(res => {\n      const data = { data: { data: res.data.values || [] } };\n      return data;\n    });\n  }\n\n  getTime(date, roundUp) {\n    if (_.isString(date)) {\n      date = dateMath.parse(date, roundUp);\n    }\n    return Math.ceil(date.valueOf() * 1e6);\n  }\n\n  testDatasource() {\n    return this._request('/api/prom/label')\n      .then(res => {\n        if (res && res.data && res.data.values && res.data.values.length > 0) {\n          return { status: 'success', message: 'Data source connected and labels found.' };\n        }\n        return {\n          status: 'error',\n          message: 'Data source connected, but no labels received. Verify that logging is configured properly.',\n        };\n      })\n      .catch(err => {\n        return { status: 'error', message: err.message };\n      });\n  }\n}\n","import _ from 'lodash';\n\nexport default class ResponseParser {\n  constructor(private $q) {}\n\n  processQueryResult(res) {\n    const data = [];\n\n    if (!res.data.results) {\n      return { data: data };\n    }\n\n    for (const key in res.data.results) {\n      const queryRes = res.data.results[key];\n\n      if (queryRes.series) {\n        for (const series of queryRes.series) {\n          data.push({\n            target: series.name,\n            datapoints: series.points,\n            refId: queryRes.refId,\n            meta: queryRes.meta,\n          });\n        }\n      }\n\n      if (queryRes.tables) {\n        for (const table of queryRes.tables) {\n          table.type = 'table';\n          table.refId = queryRes.refId;\n          table.meta = queryRes.meta;\n          data.push(table);\n        }\n      }\n    }\n\n    return { data: data };\n  }\n\n  parseMetricFindQueryResult(refId, results) {\n    if (!results || results.data.length === 0 || results.data.results[refId].meta.rowCount === 0) {\n      return [];\n    }\n\n    const columns = results.data.results[refId].tables[0].columns;\n    const rows = results.data.results[refId].tables[0].rows;\n    const textColIndex = this.findColIndex(columns, '__text');\n    const valueColIndex = this.findColIndex(columns, '__value');\n\n    if (columns.length === 2 && textColIndex !== -1 && valueColIndex !== -1) {\n      return this.transformToKeyValueList(rows, textColIndex, valueColIndex);\n    }\n\n    return this.transformToSimpleList(rows);\n  }\n\n  transformToKeyValueList(rows, textColIndex, valueColIndex) {\n    const res = [];\n\n    for (let i = 0; i < rows.length; i++) {\n      if (!this.containsKey(res, rows[i][textColIndex])) {\n        res.push({\n          text: rows[i][textColIndex],\n          value: rows[i][valueColIndex],\n        });\n      }\n    }\n\n    return res;\n  }\n\n  transformToSimpleList(rows) {\n    const res = [];\n\n    for (let i = 0; i < rows.length; i++) {\n      for (let j = 0; j < rows[i].length; j++) {\n        const value = rows[i][j];\n        if (res.indexOf(value) === -1) {\n          res.push(value);\n        }\n      }\n    }\n\n    return _.map(res, value => {\n      return { text: value };\n    });\n  }\n\n  findColIndex(columns, colName) {\n    for (let i = 0; i < columns.length; i++) {\n      if (columns[i].text === colName) {\n        return i;\n      }\n    }\n\n    return -1;\n  }\n\n  containsKey(res, key) {\n    for (let i = 0; i < res.length; i++) {\n      if (res[i].text === key) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  transformAnnotationResponse(options, data) {\n    const table = data.data.results[options.annotation.name].tables[0];\n\n    let timeColumnIndex = -1;\n    let textColumnIndex = -1;\n    let tagsColumnIndex = -1;\n\n    for (let i = 0; i < table.columns.length; i++) {\n      if (table.columns[i].text === 'time_sec' || table.columns[i].text === 'time') {\n        timeColumnIndex = i;\n      } else if (table.columns[i].text === 'title') {\n        return this.$q.reject({\n          message: 'The title column for annotations is deprecated, now only a column named text is returned',\n        });\n      } else if (table.columns[i].text === 'text') {\n        textColumnIndex = i;\n      } else if (table.columns[i].text === 'tags') {\n        tagsColumnIndex = i;\n      }\n    }\n\n    if (timeColumnIndex === -1) {\n      return this.$q.reject({\n        message: 'Missing mandatory time column (with time_sec column alias) in annotation query.',\n      });\n    }\n\n    const list = [];\n    for (let i = 0; i < table.rows.length; i++) {\n      const row = table.rows[i];\n      list.push({\n        annotation: options.annotation,\n        time: Math.floor(row[timeColumnIndex]),\n        text: row[textColumnIndex] ? row[textColumnIndex].toString() : '',\n        tags: row[tagsColumnIndex] ? row[tagsColumnIndex].trim().split(/\\s*,\\s*/) : [],\n      });\n    }\n\n    return list;\n  }\n}\n","import Datasource from './datasource';\n\nexport class LoggingConfigCtrl {\n  static templateUrl = 'partials/config.html';\n}\n\nexport { Datasource, LoggingConfigCtrl as ConfigCtrl };\n","import angular from 'angular';\nimport _ from 'lodash';\n\nclass MixedDatasource {\n  /** @ngInject */\n  constructor(private $q, private datasourceSrv) {}\n\n  query(options) {\n    const sets = _.groupBy(options.targets, 'datasource');\n    const promises = _.map(sets, targets => {\n      const dsName = targets[0].datasource;\n      if (dsName === '-- Mixed --') {\n        return this.$q([]);\n      }\n\n      return this.datasourceSrv.get(dsName).then(function(ds) {\n        const opt = angular.copy(options);\n        opt.targets = targets;\n        return ds.query(opt);\n      });\n    });\n\n    return this.$q.all(promises).then(function(results) {\n      return { data: _.flatten(_.map(results, 'data')) };\n    });\n  }\n}\n\nexport { MixedDatasource, MixedDatasource as Datasource };\n","import { MixedDatasource } from './datasource';\nexport { MixedDatasource, MixedDatasource as Datasource };\n","import _ from 'lodash';\nimport ResponseParser from './response_parser';\n\nexport class MysqlDatasource {\n  id: any;\n  name: any;\n  responseParser: ResponseParser;\n\n  /** @ngInject */\n  constructor(instanceSettings, private backendSrv, private $q, private templateSrv) {\n    this.name = instanceSettings.name;\n    this.id = instanceSettings.id;\n    this.responseParser = new ResponseParser(this.$q);\n  }\n\n  interpolateVariable(value, variable) {\n    if (typeof value === 'string') {\n      if (variable.multi || variable.includeAll) {\n        return \"'\" + value.replace(/'/g, `''`) + \"'\";\n      } else {\n        return value;\n      }\n    }\n\n    if (typeof value === 'number') {\n      return value;\n    }\n\n    const quotedValues = _.map(value, function(val) {\n      if (typeof value === 'number') {\n        return value;\n      }\n\n      return \"'\" + val.replace(/'/g, `''`) + \"'\";\n    });\n    return quotedValues.join(',');\n  }\n\n  query(options) {\n    const queries = _.filter(options.targets, item => {\n      return item.hide !== true;\n    }).map(item => {\n      return {\n        refId: item.refId,\n        intervalMs: options.intervalMs,\n        maxDataPoints: options.maxDataPoints,\n        datasourceId: this.id,\n        rawSql: this.templateSrv.replace(item.rawSql, options.scopedVars, this.interpolateVariable),\n        format: item.format,\n      };\n    });\n\n    if (queries.length === 0) {\n      return this.$q.when({ data: [] });\n    }\n\n    return this.backendSrv\n      .datasourceRequest({\n        url: '/api/tsdb/query',\n        method: 'POST',\n        data: {\n          from: options.range.from.valueOf().toString(),\n          to: options.range.to.valueOf().toString(),\n          queries: queries,\n        },\n      })\n      .then(this.responseParser.processQueryResult);\n  }\n\n  annotationQuery(options) {\n    if (!options.annotation.rawQuery) {\n      return this.$q.reject({\n        message: 'Query missing in annotation definition',\n      });\n    }\n\n    const query = {\n      refId: options.annotation.name,\n      datasourceId: this.id,\n      rawSql: this.templateSrv.replace(options.annotation.rawQuery, options.scopedVars, this.interpolateVariable),\n      format: 'table',\n    };\n\n    return this.backendSrv\n      .datasourceRequest({\n        url: '/api/tsdb/query',\n        method: 'POST',\n        data: {\n          from: options.range.from.valueOf().toString(),\n          to: options.range.to.valueOf().toString(),\n          queries: [query],\n        },\n      })\n      .then(data => this.responseParser.transformAnnotationResponse(options, data));\n  }\n\n  metricFindQuery(query, optionalOptions) {\n    let refId = 'tempvar';\n    if (optionalOptions && optionalOptions.variable && optionalOptions.variable.name) {\n      refId = optionalOptions.variable.name;\n    }\n\n    const interpolatedQuery = {\n      refId: refId,\n      datasourceId: this.id,\n      rawSql: this.templateSrv.replace(query, {}, this.interpolateVariable),\n      format: 'table',\n    };\n\n    const data = {\n      queries: [interpolatedQuery],\n    };\n\n    if (optionalOptions && optionalOptions.range && optionalOptions.range.from) {\n      data['from'] = optionalOptions.range.from.valueOf().toString();\n    }\n    if (optionalOptions && optionalOptions.range && optionalOptions.range.to) {\n      data['to'] = optionalOptions.range.to.valueOf().toString();\n    }\n\n    return this.backendSrv\n      .datasourceRequest({\n        url: '/api/tsdb/query',\n        method: 'POST',\n        data: data,\n      })\n      .then(data => this.responseParser.parseMetricFindQueryResult(refId, data));\n  }\n\n  testDatasource() {\n    return this.backendSrv\n      .datasourceRequest({\n        url: '/api/tsdb/query',\n        method: 'POST',\n        data: {\n          from: '5m',\n          to: 'now',\n          queries: [\n            {\n              refId: 'A',\n              intervalMs: 1,\n              maxDataPoints: 1,\n              datasourceId: this.id,\n              rawSql: 'SELECT 1',\n              format: 'table',\n            },\n          ],\n        },\n      })\n      .then(res => {\n        return { status: 'success', message: 'Database Connection OK' };\n      })\n      .catch(err => {\n        console.log(err);\n        if (err.data && err.data.message) {\n          return { status: 'error', message: err.data.message };\n        } else {\n          return { status: 'error', message: err.status };\n        }\n      });\n  }\n}\n","import { MysqlDatasource } from './datasource';\nimport { MysqlQueryCtrl } from './query_ctrl';\n\nclass MysqlConfigCtrl {\n  static templateUrl = 'partials/config.html';\n}\n\nconst defaultQuery = `SELECT\n    UNIX_TIMESTAMP(<time_column>) as time_sec,\n    <text_column> as text,\n    <tags_column> as tags\n  FROM <table name>\n  WHERE $__timeFilter(time_column)\n  ORDER BY <time_column> ASC\n  LIMIT 100\n  `;\n\nclass MysqlAnnotationsQueryCtrl {\n  static templateUrl = 'partials/annotations.editor.html';\n\n  annotation: any;\n\n  /** @ngInject */\n  constructor() {\n    this.annotation.rawQuery = this.annotation.rawQuery || defaultQuery;\n  }\n}\n\nexport {\n  MysqlDatasource,\n  MysqlDatasource as Datasource,\n  MysqlQueryCtrl as QueryCtrl,\n  MysqlConfigCtrl as ConfigCtrl,\n  MysqlAnnotationsQueryCtrl as AnnotationsQueryCtrl,\n};\n","import _ from 'lodash';\nimport { QueryCtrl } from 'app/plugins/sdk';\n\nexport interface MysqlQuery {\n  refId: string;\n  format: string;\n  alias: string;\n  rawSql: string;\n}\n\nexport interface QueryMeta {\n  sql: string;\n}\n\nconst defaultQuery = `SELECT\n  UNIX_TIMESTAMP(<time_column>) as time_sec,\n  <value column> as value,\n  <series name column> as metric\nFROM <table name>\nWHERE $__timeFilter(time_column)\nORDER BY <time_column> ASC\n`;\n\nexport class MysqlQueryCtrl extends QueryCtrl {\n  static templateUrl = 'partials/query.editor.html';\n\n  showLastQuerySQL: boolean;\n  formats: any[];\n  target: MysqlQuery;\n  lastQueryMeta: QueryMeta;\n  lastQueryError: string;\n  showHelp: boolean;\n\n  /** @ngInject */\n  constructor($scope, $injector) {\n    super($scope, $injector);\n\n    this.target.format = this.target.format || 'time_series';\n    this.target.alias = '';\n    this.formats = [{ text: 'Time series', value: 'time_series' }, { text: 'Table', value: 'table' }];\n\n    if (!this.target.rawSql) {\n      // special handling when in table panel\n      if (this.panelCtrl.panel.type === 'table') {\n        this.target.format = 'table';\n        this.target.rawSql = 'SELECT 1';\n      } else {\n        this.target.rawSql = defaultQuery;\n      }\n    }\n\n    this.panelCtrl.events.on('data-received', this.onDataReceived.bind(this), $scope);\n    this.panelCtrl.events.on('data-error', this.onDataError.bind(this), $scope);\n  }\n\n  onDataReceived(dataList) {\n    this.lastQueryMeta = null;\n    this.lastQueryError = null;\n\n    const anySeriesFromQuery = _.find(dataList, { refId: this.target.refId });\n    if (anySeriesFromQuery) {\n      this.lastQueryMeta = anySeriesFromQuery.meta;\n    }\n  }\n\n  onDataError(err) {\n    if (err.data && err.data.results) {\n      const queryRes = err.data.results[this.target.refId];\n      if (queryRes) {\n        this.lastQueryMeta = queryRes.meta;\n        this.lastQueryError = queryRes.error;\n      }\n    }\n  }\n}\n","import _ from 'lodash';\n\nexport default class ResponseParser {\n  constructor(private $q) {}\n\n  processQueryResult(res) {\n    const data = [];\n\n    if (!res.data.results) {\n      return { data: data };\n    }\n\n    for (const key in res.data.results) {\n      const queryRes = res.data.results[key];\n\n      if (queryRes.series) {\n        for (const series of queryRes.series) {\n          data.push({\n            target: series.name,\n            datapoints: series.points,\n            refId: queryRes.refId,\n            meta: queryRes.meta,\n          });\n        }\n      }\n\n      if (queryRes.tables) {\n        for (const table of queryRes.tables) {\n          table.type = 'table';\n          table.refId = queryRes.refId;\n          table.meta = queryRes.meta;\n          data.push(table);\n        }\n      }\n    }\n\n    return { data: data };\n  }\n\n  parseMetricFindQueryResult(refId, results) {\n    if (!results || results.data.length === 0 || results.data.results[refId].meta.rowCount === 0) {\n      return [];\n    }\n\n    const columns = results.data.results[refId].tables[0].columns;\n    const rows = results.data.results[refId].tables[0].rows;\n    const textColIndex = this.findColIndex(columns, '__text');\n    const valueColIndex = this.findColIndex(columns, '__value');\n\n    if (columns.length === 2 && textColIndex !== -1 && valueColIndex !== -1) {\n      return this.transformToKeyValueList(rows, textColIndex, valueColIndex);\n    }\n\n    return this.transformToSimpleList(rows);\n  }\n\n  transformToKeyValueList(rows, textColIndex, valueColIndex) {\n    const res = [];\n\n    for (let i = 0; i < rows.length; i++) {\n      if (!this.containsKey(res, rows[i][textColIndex])) {\n        res.push({\n          text: rows[i][textColIndex],\n          value: rows[i][valueColIndex],\n        });\n      }\n    }\n\n    return res;\n  }\n\n  transformToSimpleList(rows) {\n    const res = [];\n\n    for (let i = 0; i < rows.length; i++) {\n      for (let j = 0; j < rows[i].length; j++) {\n        const value = rows[i][j];\n        if (res.indexOf(value) === -1) {\n          res.push(value);\n        }\n      }\n    }\n\n    return _.map(res, value => {\n      return { text: value };\n    });\n  }\n\n  findColIndex(columns, colName) {\n    for (let i = 0; i < columns.length; i++) {\n      if (columns[i].text === colName) {\n        return i;\n      }\n    }\n\n    return -1;\n  }\n\n  containsKey(res, key) {\n    for (let i = 0; i < res.length; i++) {\n      if (res[i].text === key) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  transformAnnotationResponse(options, data) {\n    const table = data.data.results[options.annotation.name].tables[0];\n\n    let timeColumnIndex = -1;\n    const titleColumnIndex = -1;\n    let textColumnIndex = -1;\n    let tagsColumnIndex = -1;\n\n    for (let i = 0; i < table.columns.length; i++) {\n      if (table.columns[i].text === 'time') {\n        timeColumnIndex = i;\n      } else if (table.columns[i].text === 'text') {\n        textColumnIndex = i;\n      } else if (table.columns[i].text === 'tags') {\n        tagsColumnIndex = i;\n      }\n    }\n\n    if (timeColumnIndex === -1) {\n      return this.$q.reject({\n        message: 'Missing mandatory time column in annotation query.',\n      });\n    }\n\n    const list = [];\n    for (let i = 0; i < table.rows.length; i++) {\n      const row = table.rows[i];\n      list.push({\n        annotation: options.annotation,\n        time: Math.floor(row[timeColumnIndex]),\n        title: row[titleColumnIndex],\n        text: row[textColumnIndex],\n        tags: row[tagsColumnIndex] ? row[tagsColumnIndex].trim().split(/\\s*,\\s*/) : [],\n      });\n    }\n\n    return list;\n  }\n}\n","import _ from 'lodash';\nimport ResponseParser from './response_parser';\n\nexport class PostgresDatasource {\n  id: any;\n  name: any;\n  responseParser: ResponseParser;\n\n  /** @ngInject */\n  constructor(instanceSettings, private backendSrv, private $q, private templateSrv) {\n    this.name = instanceSettings.name;\n    this.id = instanceSettings.id;\n    this.responseParser = new ResponseParser(this.$q);\n  }\n\n  interpolateVariable(value, variable) {\n    if (typeof value === 'string') {\n      if (variable.multi || variable.includeAll) {\n        return \"'\" + value.replace(/'/g, `''`) + \"'\";\n      } else {\n        return value;\n      }\n    }\n\n    if (typeof value === 'number') {\n      return value;\n    }\n\n    const quotedValues = _.map(value, function(val) {\n      return \"'\" + val.replace(/'/g, `''`) + \"'\";\n    });\n    return quotedValues.join(',');\n  }\n\n  query(options) {\n    const queries = _.filter(options.targets, item => {\n      return item.hide !== true;\n    }).map(item => {\n      return {\n        refId: item.refId,\n        intervalMs: options.intervalMs,\n        maxDataPoints: options.maxDataPoints,\n        datasourceId: this.id,\n        rawSql: this.templateSrv.replace(item.rawSql, options.scopedVars, this.interpolateVariable),\n        format: item.format,\n      };\n    });\n\n    if (queries.length === 0) {\n      return this.$q.when({ data: [] });\n    }\n\n    return this.backendSrv\n      .datasourceRequest({\n        url: '/api/tsdb/query',\n        method: 'POST',\n        data: {\n          from: options.range.from.valueOf().toString(),\n          to: options.range.to.valueOf().toString(),\n          queries: queries,\n        },\n      })\n      .then(this.responseParser.processQueryResult);\n  }\n\n  annotationQuery(options) {\n    if (!options.annotation.rawQuery) {\n      return this.$q.reject({\n        message: 'Query missing in annotation definition',\n      });\n    }\n\n    const query = {\n      refId: options.annotation.name,\n      datasourceId: this.id,\n      rawSql: this.templateSrv.replace(options.annotation.rawQuery, options.scopedVars, this.interpolateVariable),\n      format: 'table',\n    };\n\n    return this.backendSrv\n      .datasourceRequest({\n        url: '/api/tsdb/query',\n        method: 'POST',\n        data: {\n          from: options.range.from.valueOf().toString(),\n          to: options.range.to.valueOf().toString(),\n          queries: [query],\n        },\n      })\n      .then(data => this.responseParser.transformAnnotationResponse(options, data));\n  }\n\n  metricFindQuery(query, optionalOptions) {\n    let refId = 'tempvar';\n    if (optionalOptions && optionalOptions.variable && optionalOptions.variable.name) {\n      refId = optionalOptions.variable.name;\n    }\n\n    const interpolatedQuery = {\n      refId: refId,\n      datasourceId: this.id,\n      rawSql: this.templateSrv.replace(query, {}, this.interpolateVariable),\n      format: 'table',\n    };\n\n    const data = {\n      queries: [interpolatedQuery],\n    };\n\n    if (optionalOptions && optionalOptions.range && optionalOptions.range.from) {\n      data['from'] = optionalOptions.range.from.valueOf().toString();\n    }\n    if (optionalOptions && optionalOptions.range && optionalOptions.range.to) {\n      data['to'] = optionalOptions.range.to.valueOf().toString();\n    }\n\n    return this.backendSrv\n      .datasourceRequest({\n        url: '/api/tsdb/query',\n        method: 'POST',\n        data: data,\n      })\n      .then(data => this.responseParser.parseMetricFindQueryResult(refId, data));\n  }\n\n  testDatasource() {\n    return this.metricFindQuery('SELECT 1', {})\n      .then(res => {\n        return { status: 'success', message: 'Database Connection OK' };\n      })\n      .catch(err => {\n        console.log(err);\n        if (err.data && err.data.message) {\n          return { status: 'error', message: err.data.message };\n        } else {\n          return { status: 'error', message: err.status };\n        }\n      });\n  }\n}\n","import { PostgresDatasource } from './datasource';\nimport { PostgresQueryCtrl } from './query_ctrl';\n\nclass PostgresConfigCtrl {\n  static templateUrl = 'partials/config.html';\n\n  current: any;\n\n  /** @ngInject */\n  constructor($scope) {\n    this.current.jsonData.sslmode = this.current.jsonData.sslmode || 'verify-full';\n  }\n}\n\nconst defaultQuery = `SELECT\n  extract(epoch from time_column) AS time,\n  text_column as text,\n  tags_column as tags\nFROM\n  metric_table\nWHERE\n  $__timeFilter(time_column)\n`;\n\nclass PostgresAnnotationsQueryCtrl {\n  static templateUrl = 'partials/annotations.editor.html';\n\n  annotation: any;\n\n  /** @ngInject */\n  constructor() {\n    this.annotation.rawQuery = this.annotation.rawQuery || defaultQuery;\n  }\n}\n\nexport {\n  PostgresDatasource,\n  PostgresDatasource as Datasource,\n  PostgresQueryCtrl as QueryCtrl,\n  PostgresConfigCtrl as ConfigCtrl,\n  PostgresAnnotationsQueryCtrl as AnnotationsQueryCtrl,\n};\n","import _ from 'lodash';\nimport { QueryCtrl } from 'app/plugins/sdk';\n\nexport interface PostgresQuery {\n  refId: string;\n  format: string;\n  alias: string;\n  rawSql: string;\n}\n\nexport interface QueryMeta {\n  sql: string;\n}\n\nconst defaultQuery = `SELECT\n  $__time(time_column),\n  value1\nFROM\n  metric_table\nWHERE\n  $__timeFilter(time_column)\n`;\n\nexport class PostgresQueryCtrl extends QueryCtrl {\n  static templateUrl = 'partials/query.editor.html';\n\n  showLastQuerySQL: boolean;\n  formats: any[];\n  target: PostgresQuery;\n  lastQueryMeta: QueryMeta;\n  lastQueryError: string;\n  showHelp: boolean;\n\n  /** @ngInject */\n  constructor($scope, $injector) {\n    super($scope, $injector);\n\n    this.target.format = this.target.format || 'time_series';\n    this.target.alias = '';\n    this.formats = [{ text: 'Time series', value: 'time_series' }, { text: 'Table', value: 'table' }];\n\n    if (!this.target.rawSql) {\n      // special handling when in table panel\n      if (this.panelCtrl.panel.type === 'table') {\n        this.target.format = 'table';\n        this.target.rawSql = 'SELECT 1';\n      } else {\n        this.target.rawSql = defaultQuery;\n      }\n    }\n\n    this.panelCtrl.events.on('data-received', this.onDataReceived.bind(this), $scope);\n    this.panelCtrl.events.on('data-error', this.onDataError.bind(this), $scope);\n  }\n\n  onDataReceived(dataList) {\n    this.lastQueryMeta = null;\n    this.lastQueryError = null;\n\n    const anySeriesFromQuery = _.find(dataList, { refId: this.target.refId });\n    if (anySeriesFromQuery) {\n      this.lastQueryMeta = anySeriesFromQuery.meta;\n    }\n  }\n\n  onDataError(err) {\n    if (err.data && err.data.results) {\n      const queryRes = err.data.results[this.target.refId];\n      if (queryRes) {\n        this.lastQueryMeta = queryRes.meta;\n        this.lastQueryError = queryRes.error;\n      }\n    }\n  }\n}\n","import _ from 'lodash';\n\nexport default class PrometheusMetricFindQuery {\n  datasource: any;\n  query: any;\n  range: any;\n\n  constructor(datasource, query, timeSrv) {\n    this.datasource = datasource;\n    this.query = query;\n    this.range = timeSrv.timeRange();\n  }\n\n  process() {\n    const label_values_regex = /^label_values\\((?:(.+),\\s*)?([a-zA-Z_][a-zA-Z0-9_]+)\\)\\s*$/;\n    const metric_names_regex = /^metrics\\((.+)\\)\\s*$/;\n    const query_result_regex = /^query_result\\((.+)\\)\\s*$/;\n\n    const label_values_query = this.query.match(label_values_regex);\n    if (label_values_query) {\n      if (label_values_query[1]) {\n        return this.labelValuesQuery(label_values_query[2], label_values_query[1]);\n      } else {\n        return this.labelValuesQuery(label_values_query[2], null);\n      }\n    }\n\n    const metric_names_query = this.query.match(metric_names_regex);\n    if (metric_names_query) {\n      return this.metricNameQuery(metric_names_query[1]);\n    }\n\n    const query_result_query = this.query.match(query_result_regex);\n    if (query_result_query) {\n      return this.queryResultQuery(query_result_query[1]);\n    }\n\n    // if query contains full metric name, return metric name and label list\n    return this.metricNameAndLabelsQuery(this.query);\n  }\n\n  labelValuesQuery(label, metric) {\n    let url;\n\n    if (!metric) {\n      // return label values globally\n      url = '/api/v1/label/' + label + '/values';\n\n      return this.datasource.metadataRequest(url).then(function(result) {\n        return _.map(result.data.data, function(value) {\n          return { text: value };\n        });\n      });\n    } else {\n      const start = this.datasource.getPrometheusTime(this.range.from, false);\n      const end = this.datasource.getPrometheusTime(this.range.to, true);\n      url = '/api/v1/series?match[]=' + encodeURIComponent(metric) + '&start=' + start + '&end=' + end;\n\n      return this.datasource.metadataRequest(url).then(function(result) {\n        const _labels = _.map(result.data.data, function(metric) {\n          return metric[label] || '';\n        }).filter(function(label) {\n          return label !== '';\n        });\n\n        return _.uniq(_labels).map(function(metric) {\n          return {\n            text: metric,\n            expandable: true,\n          };\n        });\n      });\n    }\n  }\n\n  metricNameQuery(metricFilterPattern) {\n    const url = '/api/v1/label/__name__/values';\n\n    return this.datasource.metadataRequest(url).then(function(result) {\n      return _.chain(result.data.data)\n        .filter(function(metricName) {\n          const r = new RegExp(metricFilterPattern);\n          return r.test(metricName);\n        })\n        .map(function(matchedMetricName) {\n          return {\n            text: matchedMetricName,\n            expandable: true,\n          };\n        })\n        .value();\n    });\n  }\n\n  queryResultQuery(query) {\n    const end = this.datasource.getPrometheusTime(this.range.to, true);\n    return this.datasource.performInstantQuery({ expr: query }, end).then(function(result) {\n      return _.map(result.data.data.result, function(metricData) {\n        let text = metricData.metric.__name__ || '';\n        delete metricData.metric.__name__;\n        text +=\n          '{' +\n          _.map(metricData.metric, function(v, k) {\n            return k + '=\"' + v + '\"';\n          }).join(',') +\n          '}';\n        text += ' ' + metricData.value[1] + ' ' + metricData.value[0] * 1000;\n\n        return {\n          text: text,\n          expandable: true,\n        };\n      });\n    });\n  }\n\n  metricNameAndLabelsQuery(query) {\n    const start = this.datasource.getPrometheusTime(this.range.from, false);\n    const end = this.datasource.getPrometheusTime(this.range.to, true);\n    const url = '/api/v1/series?match[]=' + encodeURIComponent(query) + '&start=' + start + '&end=' + end;\n\n    const self = this;\n    return this.datasource.metadataRequest(url).then(function(result) {\n      return _.map(result.data.data, metric => {\n        return {\n          text: self.datasource.getOriginalMetricName(metric),\n          expandable: true,\n        };\n      });\n    });\n  }\n}\n","import _ from 'lodash';\nimport TableModel from 'app/core/table_model';\n\nexport class ResultTransformer {\n  constructor(private templateSrv) {}\n\n  transform(response: any, options: any): any[] {\n    const prometheusResult = response.data.data.result;\n\n    if (options.format === 'table') {\n      return [this.transformMetricDataToTable(prometheusResult, options.responseListLength, options.refId)];\n    } else if (options.format === 'heatmap') {\n      let seriesList = [];\n      prometheusResult.sort(sortSeriesByLabel);\n      for (const metricData of prometheusResult) {\n        seriesList.push(this.transformMetricData(metricData, options, options.start, options.end));\n      }\n      seriesList = this.transformToHistogramOverTime(seriesList);\n      return seriesList;\n    } else {\n      const seriesList = [];\n      for (const metricData of prometheusResult) {\n        if (response.data.data.resultType === 'matrix') {\n          seriesList.push(this.transformMetricData(metricData, options, options.start, options.end));\n        } else if (response.data.data.resultType === 'vector') {\n          seriesList.push(this.transformInstantMetricData(metricData, options));\n        }\n      }\n      return seriesList;\n    }\n    return [];\n  }\n\n  transformMetricData(metricData, options, start, end) {\n    const dps = [];\n    let metricLabel = null;\n\n    metricLabel = this.createMetricLabel(metricData.metric, options);\n\n    const stepMs = parseInt(options.step) * 1000;\n    let baseTimestamp = start * 1000;\n\n    if (metricData.values === undefined) {\n      throw new Error('Prometheus heatmap error: data should be a time series');\n    }\n\n    for (const value of metricData.values) {\n      let dp_value = parseFloat(value[1]);\n      if (_.isNaN(dp_value)) {\n        dp_value = null;\n      }\n\n      const timestamp = parseFloat(value[0]) * 1000;\n      for (let t = baseTimestamp; t < timestamp; t += stepMs) {\n        dps.push([null, t]);\n      }\n      baseTimestamp = timestamp + stepMs;\n      dps.push([dp_value, timestamp]);\n    }\n\n    const endTimestamp = end * 1000;\n    for (let t = baseTimestamp; t <= endTimestamp; t += stepMs) {\n      dps.push([null, t]);\n    }\n\n    return {\n      datapoints: dps,\n      query: options.query,\n      responseIndex: options.responseIndex,\n      target: metricLabel,\n    };\n  }\n\n  transformMetricDataToTable(md, resultCount: number, refId: string) {\n    const table = new TableModel();\n    let i, j;\n    const metricLabels = {};\n\n    if (md.length === 0) {\n      return table;\n    }\n\n    // Collect all labels across all metrics\n    _.each(md, function(series) {\n      for (const label in series.metric) {\n        if (!metricLabels.hasOwnProperty(label)) {\n          metricLabels[label] = 1;\n        }\n      }\n    });\n\n    // Sort metric labels, create columns for them and record their index\n    const sortedLabels = _.keys(metricLabels).sort();\n    table.columns.push({ text: 'Time', type: 'time' });\n    _.each(sortedLabels, function(label, labelIndex) {\n      metricLabels[label] = labelIndex + 1;\n      table.columns.push({ text: label, filterable: !label.startsWith('__') });\n    });\n    const valueText = resultCount > 1 ? `Value #${refId}` : 'Value';\n    table.columns.push({ text: valueText });\n\n    // Populate rows, set value to empty string when label not present.\n    _.each(md, function(series) {\n      if (series.value) {\n        series.values = [series.value];\n      }\n      if (series.values) {\n        for (i = 0; i < series.values.length; i++) {\n          const values = series.values[i];\n          const reordered: any = [values[0] * 1000];\n          if (series.metric) {\n            for (j = 0; j < sortedLabels.length; j++) {\n              const label = sortedLabels[j];\n              if (series.metric.hasOwnProperty(label)) {\n                reordered.push(series.metric[label]);\n              } else {\n                reordered.push('');\n              }\n            }\n          }\n          reordered.push(parseFloat(values[1]));\n          table.rows.push(reordered);\n        }\n      }\n    });\n\n    return table;\n  }\n\n  transformInstantMetricData(md, options) {\n    const dps = [];\n    let metricLabel = null;\n    metricLabel = this.createMetricLabel(md.metric, options);\n    dps.push([parseFloat(md.value[1]), md.value[0] * 1000]);\n    return { target: metricLabel, datapoints: dps, labels: md.metric };\n  }\n\n  createMetricLabel(labelData, options) {\n    let label = '';\n    if (_.isUndefined(options) || _.isEmpty(options.legendFormat)) {\n      label = this.getOriginalMetricName(labelData);\n    } else {\n      label = this.renderTemplate(this.templateSrv.replace(options.legendFormat), labelData);\n    }\n    if (!label || label === '{}') {\n      label = options.query;\n    }\n    return label;\n  }\n\n  renderTemplate(aliasPattern, aliasData) {\n    const aliasRegex = /\\{\\{\\s*(.+?)\\s*\\}\\}/g;\n    return aliasPattern.replace(aliasRegex, function(match, g1) {\n      if (aliasData[g1]) {\n        return aliasData[g1];\n      }\n      return g1;\n    });\n  }\n\n  getOriginalMetricName(labelData) {\n    const metricName = labelData.__name__ || '';\n    delete labelData.__name__;\n    const labelPart = _.map(_.toPairs(labelData), function(label) {\n      return label[0] + '=\"' + label[1] + '\"';\n    }).join(',');\n    return metricName + '{' + labelPart + '}';\n  }\n\n  transformToHistogramOverTime(seriesList) {\n    /*      t1 = timestamp1, t2 = timestamp2 etc.\n            t1  t2  t3          t1  t2  t3\n    le10    10  10  0     =>    10  10  0\n    le20    20  10  30    =>    10  0   30\n    le30    30  10  35    =>    10  0   5\n    */\n    for (let i = seriesList.length - 1; i > 0; i--) {\n      const topSeries = seriesList[i].datapoints;\n      const bottomSeries = seriesList[i - 1].datapoints;\n      if (!topSeries || !bottomSeries) {\n        throw new Error('Prometheus heatmap transform error: data should be a time series');\n      }\n\n      for (let j = 0; j < topSeries.length; j++) {\n        const bottomPoint = bottomSeries[j] || [0];\n        topSeries[j][0] -= bottomPoint[0];\n      }\n    }\n\n    return seriesList;\n  }\n}\n\nfunction sortSeriesByLabel(s1, s2): number {\n  let le1, le2;\n\n  try {\n    // fail if not integer. might happen with bad queries\n    le1 = parseHistogramLabel(s1.metric.le);\n    le2 = parseHistogramLabel(s2.metric.le);\n  } catch (err) {\n    console.log(err);\n    return 0;\n  }\n\n  if (le1 > le2) {\n    return 1;\n  }\n\n  if (le1 < le2) {\n    return -1;\n  }\n\n  return 0;\n}\n\nfunction parseHistogramLabel(le: string): number {\n  if (le === '+Inf') {\n    return +Infinity;\n  }\n  return Number(le);\n}\n","import _ from 'lodash';\n\nimport $ from 'jquery';\nimport kbn from 'app/core/utils/kbn';\nimport * as dateMath from 'app/core/utils/datemath';\nimport PrometheusMetricFindQuery from './metric_find_query';\nimport { ResultTransformer } from './result_transformer';\nimport { BackendSrv } from 'app/core/services/backend_srv';\n\nexport function alignRange(start, end, step) {\n  const alignedEnd = Math.ceil(end / step) * step;\n  const alignedStart = Math.floor(start / step) * step;\n  return {\n    end: alignedEnd,\n    start: alignedStart,\n  };\n}\n\nconst keywords = 'by|without|on|ignoring|group_left|group_right';\n\n// Duplicate from mode-prometheus.js, which can't be used in tests due to global ace not being loaded.\nconst builtInWords = [\n  keywords,\n  'count|count_values|min|max|avg|sum|stddev|stdvar|bottomk|topk|quantile',\n  'true|false|null|__name__|job',\n  'abs|absent|ceil|changes|clamp_max|clamp_min|count_scalar|day_of_month|day_of_week|days_in_month|delta|deriv',\n  'drop_common_labels|exp|floor|histogram_quantile|holt_winters|hour|idelta|increase|irate|label_replace|ln|log2',\n  'log10|minute|month|predict_linear|rate|resets|round|scalar|sort|sort_desc|sqrt|time|vector|year|avg_over_time',\n  'min_over_time|max_over_time|sum_over_time|count_over_time|quantile_over_time|stddev_over_time|stdvar_over_time',\n]\n  .join('|')\n  .split('|');\n\n// addLabelToQuery('foo', 'bar', 'baz') => 'foo{bar=\"baz\"}'\nexport function addLabelToQuery(query: string, key: string, value: string): string {\n  if (!key || !value) {\n    throw new Error('Need label to add to query.');\n  }\n\n  // Add empty selector to bare metric name\n  let previousWord;\n  query = query.replace(/(\\w+)\\b(?![\\(\\]{=\",])/g, (match, word, offset) => {\n    // Check if inside a selector\n    const nextSelectorStart = query.slice(offset).indexOf('{');\n    const nextSelectorEnd = query.slice(offset).indexOf('}');\n    const insideSelector = nextSelectorEnd > -1 && (nextSelectorStart === -1 || nextSelectorStart > nextSelectorEnd);\n    // Handle \"sum by (key) (metric)\"\n    const previousWordIsKeyWord = previousWord && keywords.split('|').indexOf(previousWord) > -1;\n    previousWord = word;\n    if (!insideSelector && !previousWordIsKeyWord && builtInWords.indexOf(word) === -1) {\n      return `${word}{}`;\n    }\n    return word;\n  });\n\n  // Adding label to existing selectors\n  const selectorRegexp = /{([^{]*)}/g;\n  let match = null;\n  const parts = [];\n  let lastIndex = 0;\n  let suffix = '';\n  while ((match = selectorRegexp.exec(query))) {\n    const prefix = query.slice(lastIndex, match.index);\n    const selectorParts = match[1].split(',');\n    const labels = selectorParts.reduce((acc, label) => {\n      const labelParts = label.split('=');\n      if (labelParts.length === 2) {\n        acc[labelParts[0]] = labelParts[1];\n      }\n      return acc;\n    }, {});\n    labels[key] = `\"${value}\"`;\n    const selector = Object.keys(labels)\n      .sort()\n      .map(key => `${key}=${labels[key]}`)\n      .join(',');\n    lastIndex = match.index + match[1].length + 2;\n    suffix = query.slice(match.index + match[0].length);\n    parts.push(prefix, '{', selector, '}');\n  }\n  parts.push(suffix);\n  return parts.join('');\n}\n\nexport function determineQueryHints(series: any[], datasource?: any): any[] {\n  const hints = series.map((s, i) => {\n    const query: string = s.query;\n    const index: number = s.responseIndex;\n    if (query === undefined || index === undefined) {\n      return null;\n    }\n\n    // ..._bucket metric needs a histogram_quantile()\n    const histogramMetric = query.trim().match(/^\\w+_bucket$/);\n    if (histogramMetric) {\n      const label = 'Time series has buckets, you probably wanted a histogram.';\n      return {\n        index,\n        label,\n        fix: {\n          label: 'Fix by adding histogram_quantile().',\n          action: {\n            type: 'ADD_HISTOGRAM_QUANTILE',\n            query,\n            index,\n          },\n        },\n      };\n    }\n\n    // Check for monotony\n    const datapoints: number[][] = s.datapoints;\n    if (datapoints.length > 1) {\n      let increasing = false;\n      const monotonic = datapoints.filter(dp => dp[0] !== null).every((dp, index) => {\n        if (index === 0) {\n          return true;\n        }\n        increasing = increasing || dp[0] > datapoints[index - 1][0];\n        // monotonic?\n        return dp[0] >= datapoints[index - 1][0];\n      });\n      if (increasing && monotonic) {\n        const simpleMetric = query.trim().match(/^\\w+$/);\n        let label = 'Time series is monotonously increasing.';\n        let fix;\n        if (simpleMetric) {\n          fix = {\n            label: 'Fix by adding rate().',\n            action: {\n              type: 'ADD_RATE',\n              query,\n              index,\n            },\n          };\n        } else {\n          label = `${label} Try applying a rate() function.`;\n        }\n        return {\n          label,\n          index,\n          fix,\n        };\n      }\n    }\n\n    // Check for recording rules expansion\n    if (datasource && datasource.ruleMappings) {\n      const mapping = datasource.ruleMappings;\n      const mappingForQuery = Object.keys(mapping).reduce((acc, ruleName) => {\n        if (query.search(ruleName) > -1) {\n          return {\n            ...acc,\n            [ruleName]: mapping[ruleName],\n          };\n        }\n        return acc;\n      }, {});\n      if (_.size(mappingForQuery) > 0) {\n        const label = 'Query contains recording rules.';\n        return {\n          label,\n          index,\n          fix: {\n            label: 'Expand rules',\n            action: {\n              type: 'EXPAND_RULES',\n              query,\n              index,\n              mapping: mappingForQuery,\n            },\n          },\n        };\n      }\n    }\n\n    // No hint found\n    return null;\n  });\n  return hints;\n}\n\nexport function extractRuleMappingFromGroups(groups: any[]) {\n  return groups.reduce(\n    (mapping, group) =>\n      group.rules.filter(rule => rule.type === 'recording').reduce(\n        (acc, rule) => ({\n          ...acc,\n          [rule.name]: rule.query,\n        }),\n        mapping\n      ),\n    {}\n  );\n}\n\nexport function prometheusRegularEscape(value) {\n  if (typeof value === 'string') {\n    return value.replace(/'/g, \"\\\\\\\\'\");\n  }\n  return value;\n}\n\nexport function prometheusSpecialRegexEscape(value) {\n  if (typeof value === 'string') {\n    return prometheusRegularEscape(value.replace(/\\\\/g, '\\\\\\\\\\\\\\\\').replace(/[$^*{}\\[\\]+?.()]/g, '\\\\\\\\$&'));\n  }\n  return value;\n}\n\nexport class PrometheusDatasource {\n  type: string;\n  editorSrc: string;\n  name: string;\n  ruleMappings: { [index: string]: string };\n  supportsExplore: boolean;\n  supportMetrics: boolean;\n  url: string;\n  directUrl: string;\n  basicAuth: any;\n  withCredentials: any;\n  metricsNameCache: any;\n  interval: string;\n  queryTimeout: string;\n  httpMethod: string;\n  resultTransformer: ResultTransformer;\n\n  /** @ngInject */\n  constructor(instanceSettings, private $q, private backendSrv: BackendSrv, private templateSrv, private timeSrv) {\n    this.type = 'prometheus';\n    this.editorSrc = 'app/features/prometheus/partials/query.editor.html';\n    this.name = instanceSettings.name;\n    this.supportsExplore = true;\n    this.supportMetrics = true;\n    this.url = instanceSettings.url;\n    this.directUrl = instanceSettings.directUrl;\n    this.basicAuth = instanceSettings.basicAuth;\n    this.withCredentials = instanceSettings.withCredentials;\n    this.interval = instanceSettings.jsonData.timeInterval || '15s';\n    this.queryTimeout = instanceSettings.jsonData.queryTimeout;\n    this.httpMethod = instanceSettings.jsonData.httpMethod || 'GET';\n    this.resultTransformer = new ResultTransformer(templateSrv);\n    this.ruleMappings = {};\n  }\n\n  init() {\n    this.loadRules();\n  }\n\n  _request(url, data?, options?: any) {\n    options = _.defaults(options || {}, {\n      url: this.url + url,\n      method: this.httpMethod,\n    });\n\n    if (options.method === 'GET') {\n      if (!_.isEmpty(data)) {\n        options.url =\n          options.url +\n          '?' +\n          _.map(data, (v, k) => {\n            return encodeURIComponent(k) + '=' + encodeURIComponent(v);\n          }).join('&');\n      }\n    } else {\n      options.headers = {\n        'Content-Type': 'application/x-www-form-urlencoded',\n      };\n      options.transformRequest = data => {\n        return $.param(data);\n      };\n      options.data = data;\n    }\n\n    if (this.basicAuth || this.withCredentials) {\n      options.withCredentials = true;\n    }\n\n    if (this.basicAuth) {\n      options.headers = {\n        Authorization: this.basicAuth,\n      };\n    }\n\n    return this.backendSrv.datasourceRequest(options);\n  }\n\n  // Use this for tab completion features, wont publish response to other components\n  metadataRequest(url) {\n    return this._request(url, null, { method: 'GET', silent: true });\n  }\n\n  interpolateQueryExpr(value, variable, defaultFormatFn) {\n    // if no multi or include all do not regexEscape\n    if (!variable.multi && !variable.includeAll) {\n      return prometheusRegularEscape(value);\n    }\n\n    if (typeof value === 'string') {\n      return prometheusSpecialRegexEscape(value);\n    }\n\n    const escapedValues = _.map(value, prometheusSpecialRegexEscape);\n    return escapedValues.join('|');\n  }\n\n  targetContainsTemplate(target) {\n    return this.templateSrv.variableExists(target.expr);\n  }\n\n  query(options) {\n    const start = this.getPrometheusTime(options.range.from, false);\n    const end = this.getPrometheusTime(options.range.to, true);\n\n    const queries = [];\n    const activeTargets = [];\n\n    options = _.clone(options);\n\n    for (const target of options.targets) {\n      if (!target.expr || target.hide) {\n        continue;\n      }\n\n      activeTargets.push(target);\n      queries.push(this.createQuery(target, options, start, end));\n    }\n\n    // No valid targets, return the empty result to save a round trip.\n    if (_.isEmpty(queries)) {\n      return this.$q.when({ data: [] });\n    }\n\n    const allQueryPromise = _.map(queries, query => {\n      if (!query.instant) {\n        return this.performTimeSeriesQuery(query, query.start, query.end);\n      } else {\n        return this.performInstantQuery(query, end);\n      }\n    });\n\n    return this.$q.all(allQueryPromise).then(responseList => {\n      let result = [];\n      let hints = [];\n\n      _.each(responseList, (response, index) => {\n        if (response.status === 'error') {\n          const error = {\n            index,\n            ...response.error,\n          };\n          throw error;\n        }\n\n        // Keeping original start/end for transformers\n        const transformerOptions = {\n          format: activeTargets[index].format,\n          step: queries[index].step,\n          legendFormat: activeTargets[index].legendFormat,\n          start: queries[index].start,\n          end: queries[index].end,\n          query: queries[index].expr,\n          responseListLength: responseList.length,\n          responseIndex: index,\n          refId: activeTargets[index].refId,\n        };\n        const series = this.resultTransformer.transform(response, transformerOptions);\n        result = [...result, ...series];\n\n        if (queries[index].hinting) {\n          const queryHints = determineQueryHints(series, this);\n          hints = [...hints, ...queryHints];\n        }\n      });\n\n      return { data: result, hints };\n    });\n  }\n\n  createQuery(target, options, start, end) {\n    const query: any = {\n      hinting: target.hinting,\n      instant: target.instant,\n    };\n    const range = Math.ceil(end - start);\n\n    let interval = kbn.interval_to_seconds(options.interval);\n    // Minimum interval (\"Min step\"), if specified for the query. or same as interval otherwise\n    const minInterval = kbn.interval_to_seconds(\n      this.templateSrv.replace(target.interval, options.scopedVars) || options.interval\n    );\n    const intervalFactor = target.intervalFactor || 1;\n    // Adjust the interval to take into account any specified minimum and interval factor plus Prometheus limits\n    const adjustedInterval = this.adjustInterval(interval, minInterval, range, intervalFactor);\n    let scopedVars = { ...options.scopedVars, ...this.getRangeScopedVars() };\n    // If the interval was adjusted, make a shallow copy of scopedVars with updated interval vars\n    if (interval !== adjustedInterval) {\n      interval = adjustedInterval;\n      scopedVars = Object.assign({}, options.scopedVars, {\n        __interval: { text: interval + 's', value: interval + 's' },\n        __interval_ms: { text: interval * 1000, value: interval * 1000 },\n        ...this.getRangeScopedVars(),\n      });\n    }\n    query.step = interval;\n\n    // Only replace vars in expression after having (possibly) updated interval vars\n    query.expr = this.templateSrv.replace(target.expr, scopedVars, this.interpolateQueryExpr);\n    query.requestId = options.panelId + target.refId;\n\n    // Align query interval with step\n    const adjusted = alignRange(start, end, query.step);\n    query.start = adjusted.start;\n    query.end = adjusted.end;\n\n    return query;\n  }\n\n  adjustInterval(interval, minInterval, range, intervalFactor) {\n    // Prometheus will drop queries that might return more than 11000 data points.\n    // Calibrate interval if it is too small.\n    if (interval !== 0 && range / intervalFactor / interval > 11000) {\n      interval = Math.ceil(range / intervalFactor / 11000);\n    }\n    return Math.max(interval * intervalFactor, minInterval, 1);\n  }\n\n  performTimeSeriesQuery(query, start, end) {\n    if (start > end) {\n      throw { message: 'Invalid time range' };\n    }\n\n    const url = '/api/v1/query_range';\n    const data = {\n      query: query.expr,\n      start: start,\n      end: end,\n      step: query.step,\n    };\n    if (this.queryTimeout) {\n      data['timeout'] = this.queryTimeout;\n    }\n    return this._request(url, data, { requestId: query.requestId });\n  }\n\n  performInstantQuery(query, time) {\n    const url = '/api/v1/query';\n    const data = {\n      query: query.expr,\n      time: time,\n    };\n    if (this.queryTimeout) {\n      data['timeout'] = this.queryTimeout;\n    }\n    return this._request(url, data, { requestId: query.requestId });\n  }\n\n  performSuggestQuery(query, cache = false) {\n    const url = '/api/v1/label/__name__/values';\n\n    if (cache && this.metricsNameCache && this.metricsNameCache.expire > Date.now()) {\n      return this.$q.when(\n        _.filter(this.metricsNameCache.data, metricName => {\n          return metricName.indexOf(query) !== 1;\n        })\n      );\n    }\n\n    return this.metadataRequest(url).then(result => {\n      this.metricsNameCache = {\n        data: result.data.data,\n        expire: Date.now() + 60 * 1000,\n      };\n      return _.filter(result.data.data, metricName => {\n        return metricName.indexOf(query) !== 1;\n      });\n    });\n  }\n\n  metricFindQuery(query) {\n    if (!query) {\n      return this.$q.when([]);\n    }\n\n    const scopedVars = {\n      __interval: { text: this.interval, value: this.interval },\n      __interval_ms: { text: kbn.interval_to_ms(this.interval), value: kbn.interval_to_ms(this.interval) },\n      ...this.getRangeScopedVars(),\n    };\n    const interpolated = this.templateSrv.replace(query, scopedVars, this.interpolateQueryExpr);\n    const metricFindQuery = new PrometheusMetricFindQuery(this, interpolated, this.timeSrv);\n    return metricFindQuery.process();\n  }\n\n  getRangeScopedVars() {\n    const range = this.timeSrv.timeRange();\n    const msRange = range.to.diff(range.from);\n    const sRange = Math.round(msRange / 1000);\n    const regularRange = kbn.secondsToHms(msRange / 1000);\n    return {\n      __range_ms: { text: msRange, value: msRange },\n      __range_s: { text: sRange, value: sRange },\n      __range: { text: regularRange, value: regularRange },\n    };\n  }\n\n  annotationQuery(options) {\n    const annotation = options.annotation;\n    const expr = annotation.expr || '';\n    let tagKeys = annotation.tagKeys || '';\n    const titleFormat = annotation.titleFormat || '';\n    const textFormat = annotation.textFormat || '';\n\n    if (!expr) {\n      return this.$q.when([]);\n    }\n\n    const step = annotation.step || '60s';\n    const start = this.getPrometheusTime(options.range.from, false);\n    const end = this.getPrometheusTime(options.range.to, true);\n    // Unsetting min interval\n    const queryOptions = {\n      ...options,\n      interval: '0s',\n    };\n    const query = this.createQuery({ expr, interval: step }, queryOptions, start, end);\n\n    const self = this;\n    return this.performTimeSeriesQuery(query, query.start, query.end).then(function(results) {\n      const eventList = [];\n      tagKeys = tagKeys.split(',');\n\n      _.each(results.data.data.result, function(series) {\n        const tags = _.chain(series.metric)\n          .filter(function(v, k) {\n            return _.includes(tagKeys, k);\n          })\n          .value();\n\n        for (const value of series.values) {\n          if (value[1] === '1') {\n            const event = {\n              annotation: annotation,\n              time: Math.floor(parseFloat(value[0])) * 1000,\n              title: self.resultTransformer.renderTemplate(titleFormat, series.metric),\n              tags: tags,\n              text: self.resultTransformer.renderTemplate(textFormat, series.metric),\n            };\n\n            eventList.push(event);\n          }\n        }\n      });\n\n      return eventList;\n    });\n  }\n\n  testDatasource() {\n    const now = new Date().getTime();\n    return this.performInstantQuery({ expr: '1+1' }, now / 1000).then(response => {\n      if (response.data.status === 'success') {\n        return { status: 'success', message: 'Data source is working' };\n      } else {\n        return { status: 'error', message: response.error };\n      }\n    });\n  }\n\n  getExploreState(panel) {\n    let state = {};\n    if (panel.targets) {\n      const queries = panel.targets.map(t => ({\n        query: this.templateSrv.replace(t.expr, {}, this.interpolateQueryExpr),\n        format: t.format,\n      }));\n      state = {\n        ...state,\n        queries,\n        datasource: this.name,\n      };\n    }\n    return state;\n  }\n\n  loadRules() {\n    this.metadataRequest('/api/v1/rules')\n      .then(res => res.data || res.json())\n      .then(body => {\n        const groups = _.get(body, ['data', 'groups']);\n        if (groups) {\n          this.ruleMappings = extractRuleMappingFromGroups(groups);\n        }\n      })\n      .catch(e => {\n        console.log('Rules API is experimental. Ignore next error.');\n        console.error(e);\n      });\n  }\n\n  modifyQuery(query: string, action: any): string {\n    switch (action.type) {\n      case 'ADD_FILTER': {\n        return addLabelToQuery(query, action.key, action.value);\n      }\n      case 'ADD_HISTOGRAM_QUANTILE': {\n        return `histogram_quantile(0.95, sum(rate(${query}[5m])) by (le))`;\n      }\n      case 'ADD_RATE': {\n        return `rate(${query}[5m])`;\n      }\n      case 'EXPAND_RULES': {\n        const mapping = action.mapping;\n        if (mapping) {\n          const ruleNames = Object.keys(mapping);\n          const rulesRegex = new RegExp(`(\\\\s|^)(${ruleNames.join('|')})(\\\\s|$|\\\\()`, 'ig');\n          return query.replace(rulesRegex, (match, pre, name, post) => mapping[name]);\n        }\n      }\n      default:\n        return query;\n    }\n  }\n\n  getPrometheusTime(date, roundUp) {\n    if (_.isString(date)) {\n      date = dateMath.parse(date, roundUp);\n    }\n    return Math.ceil(date.valueOf() / 1000);\n  }\n\n  getOriginalMetricName(labelData) {\n    return this.resultTransformer.getOriginalMetricName(labelData);\n  }\n}\n","import { PrometheusDatasource } from './datasource';\nimport _ from 'lodash';\n\nexport class PromCompleter {\n  labelQueryCache: any;\n  labelNameCache: any;\n  labelValueCache: any;\n  templateVariableCompletions: any;\n\n  identifierRegexps = [/\\[/, /[a-zA-Z0-9_:]/];\n\n  constructor(private datasource: PrometheusDatasource, private templateSrv) {\n    this.labelQueryCache = {};\n    this.labelNameCache = {};\n    this.labelValueCache = {};\n    this.templateVariableCompletions = this.templateSrv.variables.map(variable => {\n      return {\n        caption: '$' + variable.name,\n        value: '$' + variable.name,\n        meta: 'variable',\n        score: Number.MAX_VALUE,\n      };\n    });\n  }\n\n  getCompletions(editor, session, pos, prefix, callback) {\n    const wrappedCallback = (err, completions) => {\n      completions = completions.concat(this.templateVariableCompletions);\n      return callback(err, completions);\n    };\n\n    const token = session.getTokenAt(pos.row, pos.column);\n\n    switch (token.type) {\n      case 'entity.name.tag.label-matcher':\n        this.getCompletionsForLabelMatcherName(session, pos).then(completions => {\n          wrappedCallback(null, completions);\n        });\n        return;\n      case 'string.quoted.label-matcher':\n        this.getCompletionsForLabelMatcherValue(session, pos).then(completions => {\n          wrappedCallback(null, completions);\n        });\n        return;\n      case 'entity.name.tag.label-list-matcher':\n        this.getCompletionsForBinaryOperator(session, pos).then(completions => {\n          wrappedCallback(null, completions);\n        });\n        return;\n    }\n\n    if (token.type === 'paren.lparen' && token.value === '[') {\n      const vectors = [];\n      for (const unit of ['s', 'm', 'h']) {\n        for (const value of [1, 5, 10, 30]) {\n          vectors.push({\n            caption: value + unit,\n            value: '[' + value + unit,\n            meta: 'range vector',\n          });\n        }\n      }\n\n      vectors.unshift({\n        caption: '$__interval_ms',\n        value: '[$__interval_ms',\n        meta: 'range vector',\n      });\n\n      vectors.unshift({\n        caption: '$__interval',\n        value: '[$__interval',\n        meta: 'range vector',\n      });\n\n      wrappedCallback(null, vectors);\n      return;\n    }\n\n    const query = prefix;\n\n    return this.datasource.performSuggestQuery(query, true).then(metricNames => {\n      wrappedCallback(\n        null,\n        metricNames.map(name => {\n          let value = name;\n          if (prefix === '(') {\n            value = '(' + name;\n          }\n\n          return {\n            caption: name,\n            value: value,\n            meta: 'metric',\n          };\n        })\n      );\n    });\n  }\n\n  getCompletionsForLabelMatcherName(session, pos) {\n    const metricName = this.findMetricName(session, pos.row, pos.column);\n    if (!metricName) {\n      return Promise.resolve(this.transformToCompletions(['__name__', 'instance', 'job'], 'label name'));\n    }\n\n    if (this.labelNameCache[metricName]) {\n      return Promise.resolve(this.labelNameCache[metricName]);\n    }\n\n    return this.getLabelNameAndValueForExpression(metricName, 'metricName').then(result => {\n      const labelNames = this.transformToCompletions(\n        _.uniq(\n          _.flatten(\n            result.map(r => {\n              return Object.keys(r.metric);\n            })\n          )\n        ),\n        'label name'\n      );\n      this.labelNameCache[metricName] = labelNames;\n      return Promise.resolve(labelNames);\n    });\n  }\n\n  getCompletionsForLabelMatcherValue(session, pos) {\n    const metricName = this.findMetricName(session, pos.row, pos.column);\n    if (!metricName) {\n      return Promise.resolve([]);\n    }\n\n    const labelNameToken = this.findToken(\n      session,\n      pos.row,\n      pos.column,\n      'entity.name.tag.label-matcher',\n      null,\n      'paren.lparen.label-matcher'\n    );\n    if (!labelNameToken) {\n      return Promise.resolve([]);\n    }\n    const labelName = labelNameToken.value;\n\n    if (this.labelValueCache[metricName] && this.labelValueCache[metricName][labelName]) {\n      return Promise.resolve(this.labelValueCache[metricName][labelName]);\n    }\n\n    return this.getLabelNameAndValueForExpression(metricName, 'metricName').then(result => {\n      const labelValues = this.transformToCompletions(\n        _.uniq(\n          result.map(r => {\n            return r.metric[labelName];\n          })\n        ),\n        'label value'\n      );\n      this.labelValueCache[metricName] = this.labelValueCache[metricName] || {};\n      this.labelValueCache[metricName][labelName] = labelValues;\n      return Promise.resolve(labelValues);\n    });\n  }\n\n  getCompletionsForBinaryOperator(session, pos) {\n    const keywordOperatorToken = this.findToken(session, pos.row, pos.column, 'keyword.control', null, 'identifier');\n    if (!keywordOperatorToken) {\n      return Promise.resolve([]);\n    }\n    let rparenToken, expr;\n    switch (keywordOperatorToken.value) {\n      case 'by':\n      case 'without':\n        rparenToken = this.findToken(\n          session,\n          keywordOperatorToken.row,\n          keywordOperatorToken.column,\n          'paren.rparen',\n          null,\n          'identifier'\n        );\n        if (!rparenToken) {\n          return Promise.resolve([]);\n        }\n        expr = this.findExpressionMatchedParen(session, rparenToken.row, rparenToken.column);\n        if (expr === '') {\n          return Promise.resolve([]);\n        }\n        return this.getLabelNameAndValueForExpression(expr, 'expression').then(result => {\n          const labelNames = this.transformToCompletions(\n            _.uniq(\n              _.flatten(\n                result.map(r => {\n                  return Object.keys(r.metric);\n                })\n              )\n            ),\n            'label name'\n          );\n          this.labelNameCache[expr] = labelNames;\n          return labelNames;\n        });\n      case 'on':\n      case 'ignoring':\n      case 'group_left':\n      case 'group_right':\n        const binaryOperatorToken = this.findToken(\n          session,\n          keywordOperatorToken.row,\n          keywordOperatorToken.column,\n          'keyword.operator.binary',\n          null,\n          'identifier'\n        );\n        if (!binaryOperatorToken) {\n          return Promise.resolve([]);\n        }\n        rparenToken = this.findToken(\n          session,\n          binaryOperatorToken.row,\n          binaryOperatorToken.column,\n          'paren.rparen',\n          null,\n          'identifier'\n        );\n        if (rparenToken) {\n          expr = this.findExpressionMatchedParen(session, rparenToken.row, rparenToken.column);\n          if (expr === '') {\n            return Promise.resolve([]);\n          }\n          return this.getLabelNameAndValueForExpression(expr, 'expression').then(result => {\n            const labelNames = this.transformToCompletions(\n              _.uniq(\n                _.flatten(\n                  result.map(r => {\n                    return Object.keys(r.metric);\n                  })\n                )\n              ),\n              'label name'\n            );\n            this.labelNameCache[expr] = labelNames;\n            return labelNames;\n          });\n        } else {\n          const metricName = this.findMetricName(session, binaryOperatorToken.row, binaryOperatorToken.column);\n          return this.getLabelNameAndValueForExpression(metricName, 'metricName').then(result => {\n            const labelNames = this.transformToCompletions(\n              _.uniq(\n                _.flatten(\n                  result.map(r => {\n                    return Object.keys(r.metric);\n                  })\n                )\n              ),\n              'label name'\n            );\n            this.labelNameCache[metricName] = labelNames;\n            return Promise.resolve(labelNames);\n          });\n        }\n    }\n\n    return Promise.resolve([]);\n  }\n\n  getLabelNameAndValueForExpression(expr, type) {\n    if (this.labelQueryCache[expr]) {\n      return Promise.resolve(this.labelQueryCache[expr]);\n    }\n    let query = expr;\n    if (type === 'metricName') {\n      let op = '=~';\n      if (/[a-zA-Z_:][a-zA-Z0-9_:]*/.test(expr)) {\n        op = '=';\n      }\n      query = '{__name__' + op + '\"' + expr + '\"}';\n    }\n    return this.datasource.performInstantQuery({ expr: query }, new Date().getTime() / 1000).then(response => {\n      this.labelQueryCache[expr] = response.data.data.result;\n      return response.data.data.result;\n    });\n  }\n\n  transformToCompletions(words, meta) {\n    return words.map(name => {\n      return {\n        caption: name,\n        value: name,\n        meta: meta,\n        score: Number.MAX_VALUE,\n      };\n    });\n  }\n\n  findMetricName(session, row, column) {\n    let metricName = '';\n\n    let tokens;\n    const nameLabelNameToken = this.findToken(\n      session,\n      row,\n      column,\n      'entity.name.tag.label-matcher',\n      '__name__',\n      'paren.lparen.label-matcher'\n    );\n    if (nameLabelNameToken) {\n      tokens = session.getTokens(nameLabelNameToken.row);\n      const nameLabelValueToken = tokens[nameLabelNameToken.index + 2];\n      if (nameLabelValueToken && nameLabelValueToken.type === 'string.quoted.label-matcher') {\n        metricName = nameLabelValueToken.value.slice(1, -1); // cut begin/end quotation\n      }\n    } else {\n      const metricNameToken = this.findToken(session, row, column, 'identifier', null, null);\n      if (metricNameToken) {\n        tokens = session.getTokens(metricNameToken.row);\n        metricName = metricNameToken.value;\n      }\n    }\n\n    return metricName;\n  }\n\n  findToken(session, row, column, target, value, guard) {\n    let tokens, idx;\n    // find index and get column of previous token\n    for (let r = row; r >= 0; r--) {\n      let c;\n      tokens = session.getTokens(r);\n      if (r === row) {\n        // current row\n        c = 0;\n        for (idx = 0; idx < tokens.length; idx++) {\n          const nc = c + tokens[idx].value.length;\n          if (nc >= column) {\n            break;\n          }\n          c = nc;\n        }\n      } else {\n        idx = tokens.length - 1;\n        c =\n          _.sum(\n            tokens.map(t => {\n              return t.value.length;\n            })\n          ) - tokens[tokens.length - 1].value.length;\n      }\n\n      for (; idx >= 0; idx--) {\n        if (tokens[idx].type === guard) {\n          return null;\n        }\n\n        if (tokens[idx].type === target && (!value || tokens[idx].value === value)) {\n          tokens[idx].row = r;\n          tokens[idx].column = c;\n          tokens[idx].index = idx;\n          return tokens[idx];\n        }\n        c -= tokens[idx].value.length;\n      }\n    }\n\n    return null;\n  }\n\n  findExpressionMatchedParen(session, row, column) {\n    let tokens, idx;\n    let deep = 1;\n    let expression = ')';\n    for (let r = row; r >= 0; r--) {\n      tokens = session.getTokens(r);\n      if (r === row) {\n        // current row\n        let c = 0;\n        for (idx = 0; idx < tokens.length; idx++) {\n          c += tokens[idx].value.length;\n          if (c >= column) {\n            break;\n          }\n        }\n      } else {\n        idx = tokens.length - 1;\n      }\n\n      for (; idx >= 0; idx--) {\n        expression = tokens[idx].value + expression;\n        if (tokens[idx].type === 'paren.rparen') {\n          deep++;\n        } else if (tokens[idx].type === 'paren.lparen') {\n          deep--;\n          if (deep === 0) {\n            return expression;\n          }\n        }\n      }\n    }\n\n    return expression;\n  }\n}\n","import angular from 'angular';\nimport _ from 'lodash';\nimport { QueryCtrl } from 'app/plugins/sdk';\nimport { PromCompleter } from './completer';\nimport './mode-prometheus';\nimport './snippets/prometheus';\n\nclass PrometheusQueryCtrl extends QueryCtrl {\n  static templateUrl = 'partials/query.editor.html';\n\n  metric: any;\n  resolutions: any;\n  formats: any;\n  instant: any;\n  oldTarget: any;\n  suggestMetrics: any;\n  getMetricsAutocomplete: any;\n  linkToPrometheus: any;\n\n  /** @ngInject */\n  constructor($scope, $injector, private templateSrv) {\n    super($scope, $injector);\n\n    const target = this.target;\n    target.expr = target.expr || '';\n    target.intervalFactor = target.intervalFactor || 1;\n    target.format = target.format || this.getDefaultFormat();\n\n    this.metric = '';\n    this.resolutions = _.map([1, 2, 3, 4, 5, 10], function(f) {\n      return { factor: f, label: '1/' + f };\n    });\n\n    this.formats = [\n      { text: 'Time series', value: 'time_series' },\n      { text: 'Table', value: 'table' },\n      { text: 'Heatmap', value: 'heatmap' },\n    ];\n\n    this.instant = false;\n\n    this.updateLink();\n  }\n\n  getCompleter(query) {\n    return new PromCompleter(this.datasource, this.templateSrv);\n  }\n\n  getDefaultFormat() {\n    if (this.panelCtrl.panel.type === 'table') {\n      return 'table';\n    } else if (this.panelCtrl.panel.type === 'heatmap') {\n      return 'heatmap';\n    }\n\n    return 'time_series';\n  }\n\n  refreshMetricData() {\n    if (!_.isEqual(this.oldTarget, this.target)) {\n      this.oldTarget = angular.copy(this.target);\n      this.panelCtrl.refresh();\n      this.updateLink();\n    }\n  }\n\n  updateLink() {\n    const range = this.panelCtrl.range;\n    if (!range) {\n      return;\n    }\n\n    const rangeDiff = Math.ceil((range.to.valueOf() - range.from.valueOf()) / 1000);\n    const endTime = range.to.utc().format('YYYY-MM-DD HH:mm');\n    const expr = {\n      'g0.expr': this.templateSrv.replace(\n        this.target.expr,\n        this.panelCtrl.panel.scopedVars,\n        this.datasource.interpolateQueryExpr\n      ),\n      'g0.range_input': rangeDiff + 's',\n      'g0.end_input': endTime,\n      'g0.step_input': this.target.step,\n      'g0.stacked': this.panelCtrl.panel.stack ? 1 : 0,\n      'g0.tab': 0,\n    };\n    const args = _.map(expr, (v, k) => {\n      return k + '=' + encodeURIComponent(v);\n    }).join('&');\n    this.linkToPrometheus = this.datasource.directUrl + '/graph?' + args;\n  }\n\n  getCollapsedText() {\n    return this.target.expr;\n  }\n}\n\nexport { PrometheusQueryCtrl };\n","export class PrometheusConfigCtrl {\n  static templateUrl = 'public/app/plugins/datasource/prometheus/partials/config.html';\n  current: any;\n\n  /** @ngInject */\n  constructor($scope) {\n    this.current.jsonData.httpMethod = this.current.jsonData.httpMethod || 'GET';\n  }\n}\n","import _ from 'lodash';\n\nexport default class ResponseParser {\n  constructor(private $q) {}\n\n  processQueryResult(res) {\n    const data = [];\n\n    if (!res.data.results) {\n      return { data: data };\n    }\n\n    for (const key in res.data.results) {\n      const queryRes = res.data.results[key];\n\n      if (queryRes.series) {\n        for (const series of queryRes.series) {\n          data.push({\n            target: series.name,\n            datapoints: series.points,\n            refId: queryRes.refId,\n            meta: queryRes.meta,\n          });\n        }\n      }\n\n      if (queryRes.tables) {\n        for (const table of queryRes.tables) {\n          table.type = 'table';\n          table.refId = queryRes.refId;\n          table.meta = queryRes.meta;\n          data.push(table);\n        }\n      }\n    }\n\n    return { data: data };\n  }\n\n  parseMetricFindQueryResult(refId, results) {\n    if (!results || results.data.length === 0 || results.data.results[refId].meta.rowCount === 0) {\n      return [];\n    }\n\n    const columns = results.data.results[refId].tables[0].columns;\n    const rows = results.data.results[refId].tables[0].rows;\n    const textColIndex = this.findColIndex(columns, '__text');\n    const valueColIndex = this.findColIndex(columns, '__value');\n\n    if (columns.length === 2 && textColIndex !== -1 && valueColIndex !== -1) {\n      return this.transformToKeyValueList(rows, textColIndex, valueColIndex);\n    }\n\n    return this.transformToSimpleList(rows);\n  }\n\n  transformToKeyValueList(rows, textColIndex, valueColIndex) {\n    const res = [];\n\n    for (let i = 0; i < rows.length; i++) {\n      if (!this.containsKey(res, rows[i][textColIndex])) {\n        res.push({ text: rows[i][textColIndex], value: rows[i][valueColIndex] });\n      }\n    }\n\n    return res;\n  }\n\n  transformToSimpleList(rows) {\n    const res = [];\n\n    for (let i = 0; i < rows.length; i++) {\n      for (let j = 0; j < rows[i].length; j++) {\n        const value = rows[i][j];\n        if (res.indexOf(value) === -1) {\n          res.push(value);\n        }\n      }\n    }\n\n    return _.map(res, value => {\n      return { text: value };\n    });\n  }\n\n  findColIndex(columns, colName) {\n    for (let i = 0; i < columns.length; i++) {\n      if (columns[i].text === colName) {\n        return i;\n      }\n    }\n\n    return -1;\n  }\n\n  containsKey(res, key) {\n    for (let i = 0; i < res.length; i++) {\n      if (res[i].text === key) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  transformAnnotationResponse(options, data) {\n    const table = data.data.results[options.annotation.name].tables[0];\n\n    let timeColumnIndex = -1;\n    let textColumnIndex = -1;\n    let tagsColumnIndex = -1;\n\n    for (let i = 0; i < table.columns.length; i++) {\n      if (table.columns[i].text === 'time') {\n        timeColumnIndex = i;\n      } else if (table.columns[i].text === 'text') {\n        textColumnIndex = i;\n      } else if (table.columns[i].text === 'tags') {\n        tagsColumnIndex = i;\n      }\n    }\n\n    if (timeColumnIndex === -1) {\n      return this.$q.reject({ message: 'Missing mandatory time column (with time column alias) in annotation query.' });\n    }\n\n    const list = [];\n    for (let i = 0; i < table.rows.length; i++) {\n      const row = table.rows[i];\n      list.push({\n        annotation: options.annotation,\n        time: Math.floor(row[timeColumnIndex]),\n        text: row[textColumnIndex],\n        tags: row[tagsColumnIndex] ? row[tagsColumnIndex].trim().split(/\\s*,\\s*/) : [],\n      });\n    }\n\n    return list;\n  }\n}\n","import { PrometheusDatasource } from './datasource';\nimport { PrometheusQueryCtrl } from './query_ctrl';\nimport { PrometheusConfigCtrl } from './config_ctrl';\n\nclass PrometheusAnnotationsQueryCtrl {\n  static templateUrl = 'partials/annotations.editor.html';\n}\n\nexport {\n  PrometheusDatasource as Datasource,\n  PrometheusQueryCtrl as QueryCtrl,\n  PrometheusConfigCtrl as ConfigCtrl,\n  PrometheusAnnotationsQueryCtrl as AnnotationsQueryCtrl,\n};\n","import _ from 'lodash';\nimport ResponseParser from './response_parser';\n\nexport class MssqlDatasource {\n  id: any;\n  name: any;\n  responseParser: ResponseParser;\n\n  /** @ngInject */\n  constructor(instanceSettings, private backendSrv, private $q, private templateSrv) {\n    this.name = instanceSettings.name;\n    this.id = instanceSettings.id;\n    this.responseParser = new ResponseParser(this.$q);\n  }\n\n  interpolateVariable(value, variable) {\n    if (typeof value === 'string') {\n      if (variable.multi || variable.includeAll) {\n        return \"'\" + value.replace(/'/g, `''`) + \"'\";\n      } else {\n        return value;\n      }\n    }\n\n    if (typeof value === 'number') {\n      return value;\n    }\n\n    const quotedValues = _.map(value, function(val) {\n      if (typeof value === 'number') {\n        return value;\n      }\n\n      return \"'\" + val.replace(/'/g, `''`) + \"'\";\n    });\n    return quotedValues.join(',');\n  }\n\n  query(options) {\n    const queries = _.filter(options.targets, item => {\n      return item.hide !== true;\n    }).map(item => {\n      return {\n        refId: item.refId,\n        intervalMs: options.intervalMs,\n        maxDataPoints: options.maxDataPoints,\n        datasourceId: this.id,\n        rawSql: this.templateSrv.replace(item.rawSql, options.scopedVars, this.interpolateVariable),\n        format: item.format,\n      };\n    });\n\n    if (queries.length === 0) {\n      return this.$q.when({ data: [] });\n    }\n\n    return this.backendSrv\n      .datasourceRequest({\n        url: '/api/tsdb/query',\n        method: 'POST',\n        data: {\n          from: options.range.from.valueOf().toString(),\n          to: options.range.to.valueOf().toString(),\n          queries: queries,\n        },\n      })\n      .then(this.responseParser.processQueryResult);\n  }\n\n  annotationQuery(options) {\n    if (!options.annotation.rawQuery) {\n      return this.$q.reject({ message: 'Query missing in annotation definition' });\n    }\n\n    const query = {\n      refId: options.annotation.name,\n      datasourceId: this.id,\n      rawSql: this.templateSrv.replace(options.annotation.rawQuery, options.scopedVars, this.interpolateVariable),\n      format: 'table',\n    };\n\n    return this.backendSrv\n      .datasourceRequest({\n        url: '/api/tsdb/query',\n        method: 'POST',\n        data: {\n          from: options.range.from.valueOf().toString(),\n          to: options.range.to.valueOf().toString(),\n          queries: [query],\n        },\n      })\n      .then(data => this.responseParser.transformAnnotationResponse(options, data));\n  }\n\n  metricFindQuery(query, optionalOptions) {\n    let refId = 'tempvar';\n    if (optionalOptions && optionalOptions.variable && optionalOptions.variable.name) {\n      refId = optionalOptions.variable.name;\n    }\n\n    const interpolatedQuery = {\n      refId: refId,\n      datasourceId: this.id,\n      rawSql: this.templateSrv.replace(query, {}, this.interpolateVariable),\n      format: 'table',\n    };\n\n    return this.backendSrv\n      .datasourceRequest({\n        url: '/api/tsdb/query',\n        method: 'POST',\n        data: {\n          queries: [interpolatedQuery],\n        },\n      })\n      .then(data => this.responseParser.parseMetricFindQueryResult(refId, data));\n  }\n\n  testDatasource() {\n    return this.backendSrv\n      .datasourceRequest({\n        url: '/api/tsdb/query',\n        method: 'POST',\n        data: {\n          from: '5m',\n          to: 'now',\n          queries: [\n            {\n              refId: 'A',\n              intervalMs: 1,\n              maxDataPoints: 1,\n              datasourceId: this.id,\n              rawSql: 'SELECT 1',\n              format: 'table',\n            },\n          ],\n        },\n      })\n      .then(res => {\n        return { status: 'success', message: 'Database Connection OK' };\n      })\n      .catch(err => {\n        console.log(err);\n        if (err.data && err.data.message) {\n          return { status: 'error', message: err.data.message };\n        } else {\n          return { status: 'error', message: err.status };\n        }\n      });\n  }\n}\n","import _ from 'lodash';\n\nclass TestDataDatasource {\n  id: any;\n\n  /** @ngInject */\n  constructor(instanceSettings, private backendSrv, private $q) {\n    this.id = instanceSettings.id;\n  }\n\n  query(options) {\n    const queries = _.filter(options.targets, item => {\n      return item.hide !== true;\n    }).map(item => {\n      return {\n        refId: item.refId,\n        scenarioId: item.scenarioId,\n        intervalMs: options.intervalMs,\n        maxDataPoints: options.maxDataPoints,\n        stringInput: item.stringInput,\n        points: item.points,\n        alias: item.alias,\n        datasourceId: this.id,\n      };\n    });\n\n    if (queries.length === 0) {\n      return this.$q.when({ data: [] });\n    }\n\n    return this.backendSrv\n      .post('/api/tsdb/query', {\n        from: options.range.from.valueOf().toString(),\n        to: options.range.to.valueOf().toString(),\n        queries: queries,\n      })\n      .then(res => {\n        const data = [];\n\n        if (res.results) {\n          _.forEach(res.results, queryRes => {\n            for (const series of queryRes.series) {\n              data.push({\n                target: series.name,\n                datapoints: series.points,\n              });\n            }\n          });\n        }\n\n        return { data: data };\n      });\n  }\n\n  annotationQuery(options) {\n    return this.backendSrv.get('/api/annotations', {\n      from: options.range.from.valueOf(),\n      to: options.range.to.valueOf(),\n      limit: options.limit,\n      type: options.type,\n    });\n  }\n}\n\nexport { TestDataDatasource };\n","import _ from 'lodash';\nimport { QueryCtrl } from 'app/plugins/sdk';\n\nexport interface MssqlQuery {\n  refId: string;\n  format: string;\n  alias: string;\n  rawSql: string;\n}\n\nexport interface QueryMeta {\n  sql: string;\n}\n\nconst defaultQuery = `SELECT\n  $__timeEpoch(<time_column>),\n  <value column> as value,\n  <series name column> as metric\nFROM\n  <table name>\nWHERE\n  $__timeFilter(time_column)\nORDER BY\n  <time_column> ASC`;\n\nexport class MssqlQueryCtrl extends QueryCtrl {\n  static templateUrl = 'partials/query.editor.html';\n\n  showLastQuerySQL: boolean;\n  formats: any[];\n  target: MssqlQuery;\n  lastQueryMeta: QueryMeta;\n  lastQueryError: string;\n  showHelp: boolean;\n\n  /** @ngInject */\n  constructor($scope, $injector) {\n    super($scope, $injector);\n\n    this.target.format = this.target.format || 'time_series';\n    this.target.alias = '';\n    this.formats = [{ text: 'Time series', value: 'time_series' }, { text: 'Table', value: 'table' }];\n\n    if (!this.target.rawSql) {\n      // special handling when in table panel\n      if (this.panelCtrl.panel.type === 'table') {\n        this.target.format = 'table';\n        this.target.rawSql = 'SELECT 1';\n      } else {\n        this.target.rawSql = defaultQuery;\n      }\n    }\n\n    this.panelCtrl.events.on('data-received', this.onDataReceived.bind(this), $scope);\n    this.panelCtrl.events.on('data-error', this.onDataError.bind(this), $scope);\n  }\n\n  onDataReceived(dataList) {\n    this.lastQueryMeta = null;\n    this.lastQueryError = null;\n\n    const anySeriesFromQuery = _.find(dataList, { refId: this.target.refId });\n    if (anySeriesFromQuery) {\n      this.lastQueryMeta = anySeriesFromQuery.meta;\n    }\n  }\n\n  onDataError(err) {\n    if (err.data && err.data.results) {\n      const queryRes = err.data.results[this.target.refId];\n      if (queryRes) {\n        this.lastQueryMeta = queryRes.meta;\n        this.lastQueryError = queryRes.error;\n      }\n    }\n  }\n}\n","import { MssqlDatasource } from './datasource';\nimport { MssqlQueryCtrl } from './query_ctrl';\n\nclass MssqlConfigCtrl {\n  static templateUrl = 'partials/config.html';\n}\n\nconst defaultQuery = `SELECT\n    <time_column> as time,\n    <text_column> as text,\n    <tags_column> as tags\n  FROM\n    <table name>\n  WHERE\n    $__timeFilter(time_column)\n  ORDER BY\n    <time_column> ASC`;\n\nclass MssqlAnnotationsQueryCtrl {\n  static templateUrl = 'partials/annotations.editor.html';\n\n  annotation: any;\n\n  /** @ngInject */\n  constructor() {\n    this.annotation.rawQuery = this.annotation.rawQuery || defaultQuery;\n  }\n}\n\nexport {\n  MssqlDatasource,\n  MssqlDatasource as Datasource,\n  MssqlQueryCtrl as QueryCtrl,\n  MssqlConfigCtrl as ConfigCtrl,\n  MssqlAnnotationsQueryCtrl as AnnotationsQueryCtrl,\n};\n","import _ from 'lodash';\n\nimport { QueryCtrl } from 'app/plugins/sdk';\nimport moment from 'moment';\n\nexport class TestDataQueryCtrl extends QueryCtrl {\n  static templateUrl = 'partials/query.editor.html';\n\n  scenarioList: any;\n  scenario: any;\n  newPointValue: number;\n  newPointTime: any;\n  selectedPoint: any;\n\n  /** @ngInject */\n  constructor($scope, $injector, private backendSrv) {\n    super($scope, $injector);\n\n    this.target.scenarioId = this.target.scenarioId || 'random_walk';\n    this.scenarioList = [];\n    this.newPointTime = moment();\n    this.selectedPoint = { text: 'Select point', value: null };\n  }\n\n  getPoints() {\n    return _.map(this.target.points, (point, index) => {\n      return {\n        text: moment(point[1]).format('MMMM Do YYYY, H:mm:ss') + ' : ' + point[0],\n        value: index,\n      };\n    });\n  }\n\n  pointSelected(option) {\n    this.selectedPoint = option;\n  }\n\n  deletePoint() {\n    this.target.points.splice(this.selectedPoint.value, 1);\n    this.selectedPoint = { text: 'Select point', value: null };\n    this.refresh();\n  }\n\n  addPoint() {\n    this.target.points = this.target.points || [];\n    this.target.points.push([this.newPointValue, this.newPointTime.valueOf()]);\n    this.target.points = _.sortBy(this.target.points, p => p[1]);\n    this.refresh();\n  }\n\n  $onInit() {\n    return this.backendSrv.get('/api/tsdb/testdata/scenarios').then(res => {\n      this.scenarioList = res;\n      this.scenario = _.find(this.scenarioList, { id: this.target.scenarioId });\n    });\n  }\n\n  scenarioChanged() {\n    this.scenario = _.find(this.scenarioList, { id: this.target.scenarioId });\n    this.target.stringInput = this.scenario.stringInput;\n\n    if (this.target.scenarioId === 'manual_entry') {\n      this.target.points = this.target.points || [];\n    } else {\n      delete this.target.points;\n    }\n\n    this.refresh();\n  }\n}\n","import { TestDataDatasource } from './datasource';\nimport { TestDataQueryCtrl } from './query_ctrl';\n\nclass TestDataAnnotationsQueryCtrl {\n  annotation: any;\n\n  constructor() {}\n\n  static template = '<h2>test data</h2>';\n}\n\nexport {\n  TestDataDatasource,\n  TestDataDatasource as Datasource,\n  TestDataQueryCtrl as QueryCtrl,\n  TestDataAnnotationsQueryCtrl as AnnotationsQueryCtrl,\n};\n","import _ from 'lodash';\nimport { PanelCtrl } from 'app/plugins/sdk';\nimport Remarkable from 'remarkable';\n\nexport class TextPanelCtrl extends PanelCtrl {\n  static templateUrl = `public/app/plugins/panel/text/module.html`;\n  static scrollable = true;\n\n  remarkable: any;\n  content: string;\n  // Set and populate defaults\n  panelDefaults = {\n    mode: 'markdown', // 'html', 'markdown', 'text'\n    content: '# title',\n  };\n\n  /** @ngInject */\n  constructor($scope, $injector, private templateSrv, private $sce) {\n    super($scope, $injector);\n\n    _.defaults(this.panel, this.panelDefaults);\n\n    this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n    this.events.on('refresh', this.onRefresh.bind(this));\n    this.events.on('render', this.onRender.bind(this));\n\n    $scope.$watch(\n      'ctrl.panel.content',\n      _.throttle(() => {\n        this.render();\n      }, 1000)\n    );\n  }\n\n  onInitEditMode() {\n    this.addEditorTab('选项', 'public/app/plugins/panel/text/editor.html');\n    this.editorTabIndex = 1;\n\n    if (this.panel.mode === 'text') {\n      this.panel.mode = 'markdown';\n    }\n  }\n\n  onRefresh() {\n    this.render();\n  }\n\n  onRender() {\n    if (this.panel.mode === 'markdown') {\n      this.renderMarkdown(this.panel.content);\n    } else if (this.panel.mode === 'html') {\n      this.updateContent(this.panel.content);\n    }\n    this.renderingCompleted();\n  }\n\n  renderText(content) {\n    content = content\n      .replace(/&/g, '&amp;')\n      .replace(/>/g, '&gt;')\n      .replace(/</g, '&lt;')\n      .replace(/\\n/g, '<br/>');\n    this.updateContent(content);\n  }\n\n  renderMarkdown(content) {\n    if (!this.remarkable) {\n      this.remarkable = new Remarkable();\n    }\n\n    this.$scope.$applyAsync(() => {\n      this.updateContent(this.remarkable.render(content));\n    });\n  }\n\n  updateContent(html) {\n    try {\n      this.content = this.$sce.trustAsHtml(this.templateSrv.replace(html, this.panel.scopedVars));\n    } catch (e) {\n      console.log('Text panel error: ', e);\n      this.content = this.$sce.trustAsHtml(html);\n    }\n  }\n}\n\nexport { TextPanelCtrl as PanelCtrl };\n","import angular from 'angular';\nimport $ from 'jquery';\nimport _ from 'lodash';\nimport Drop from 'tether-drop';\n\n/** @ngInject */\nexport function createAnnotationToolip(element, event, plot) {\n  const injector = angular.element(document).injector();\n  const content = document.createElement('div');\n  content.innerHTML = '<annotation-tooltip event=\"event\" on-edit=\"onEdit()\"></annotation-tooltip>';\n\n  injector.invoke([\n    '$compile',\n    '$rootScope',\n    function($compile, $rootScope) {\n      const eventManager = plot.getOptions().events.manager;\n      const tmpScope = $rootScope.$new(true);\n      tmpScope.event = event;\n      tmpScope.onEdit = function() {\n        eventManager.editEvent(event);\n      };\n\n      $compile(content)(tmpScope);\n      tmpScope.$digest();\n      tmpScope.$destroy();\n\n      const drop = new Drop({\n        target: element[0],\n        content: content,\n        position: 'bottom center',\n        classes: 'drop-popover drop-popover--annotation',\n        openOn: 'hover',\n        hoverCloseDelay: 200,\n        tetherOptions: {\n          constraints: [{ to: 'window', pin: true, attachment: 'both' }],\n        },\n      });\n\n      drop.open();\n\n      drop.on('close', function() {\n        setTimeout(function() {\n          drop.destroy();\n        });\n      });\n    },\n  ]);\n}\n\nlet markerElementToAttachTo = null;\n\n/** @ngInject */\nexport function createEditPopover(element, event, plot) {\n  const eventManager = plot.getOptions().events.manager;\n  if (eventManager.editorOpen) {\n    // update marker element to attach to (needed in case of legend on the right\n    // when there is a double render pass and the inital marker element is removed)\n    markerElementToAttachTo = element;\n    return;\n  }\n\n  // mark as openend\n  eventManager.editorOpened();\n  // set marker elment to attache to\n  markerElementToAttachTo = element;\n\n  // wait for element to be attached and positioned\n  setTimeout(function() {\n    const injector = angular.element(document).injector();\n    const content = document.createElement('div');\n    content.innerHTML = '<event-editor panel-ctrl=\"panelCtrl\" event=\"event\" close=\"close()\"></event-editor>';\n\n    injector.invoke([\n      '$compile',\n      '$rootScope',\n      function($compile, $rootScope) {\n        const scope = $rootScope.$new(true);\n        let drop;\n\n        scope.event = event;\n        scope.panelCtrl = eventManager.panelCtrl;\n        scope.close = function() {\n          drop.close();\n        };\n\n        $compile(content)(scope);\n        scope.$digest();\n\n        drop = new Drop({\n          target: markerElementToAttachTo[0],\n          content: content,\n          position: 'bottom center',\n          classes: 'drop-popover drop-popover--form',\n          openOn: 'click',\n          tetherOptions: {\n            constraints: [{ to: 'window', pin: true, attachment: 'both' }],\n          },\n        });\n\n        drop.open();\n        eventManager.editorOpened();\n\n        drop.on('close', function() {\n          // need timeout here in order call drop.destroy\n          setTimeout(function() {\n            eventManager.editorClosed();\n            scope.$destroy();\n            drop.destroy();\n          });\n        });\n      },\n    ]);\n  }, 100);\n}\n\n/*\n * jquery.flot.events\n *\n * description: Flot plugin for adding events/markers to the plot\n * version: 0.2.5\n * authors:\n *    Alexander Wunschik <alex@wunschik.net>\n *    Joel Oughton <joeloughton@gmail.com>\n *    Nicolas Joseph <www.nicolasjoseph.com>\n *\n * website: https://github.com/mojoaxel/flot-events\n *\n * released under MIT License and GPLv2+\n */\n\n/**\n * A class that allows for the drawing an remove of some object\n */\nexport class DrawableEvent {\n  _object: any;\n  _drawFunc: any;\n  _clearFunc: any;\n  _moveFunc: any;\n  _position: any;\n  _width: any;\n  _height: any;\n\n  /** @ngInject */\n  constructor(object, drawFunc, clearFunc, moveFunc, left, top, width, height) {\n    this._object = object;\n    this._drawFunc = drawFunc;\n    this._clearFunc = clearFunc;\n    this._moveFunc = moveFunc;\n    this._position = { left: left, top: top };\n    this._width = width;\n    this._height = height;\n  }\n\n  width() {\n    return this._width;\n  }\n  height() {\n    return this._height;\n  }\n  position() {\n    return this._position;\n  }\n  draw() {\n    this._drawFunc(this._object);\n  }\n  clear() {\n    this._clearFunc(this._object);\n  }\n  getObject() {\n    return this._object;\n  }\n  moveTo(position) {\n    this._position = position;\n    this._moveFunc(this._object, this._position);\n  }\n}\n\n/**\n * Event class that stores options (eventType, min, max, title, description) and the object to draw.\n */\nexport class VisualEvent {\n  _parent: any;\n  _options: any;\n  _drawableEvent: any;\n  _hidden: any;\n\n  /** @ngInject */\n  constructor(options, drawableEvent) {\n    this._options = options;\n    this._drawableEvent = drawableEvent;\n    this._hidden = false;\n  }\n\n  visual() {\n    return this._drawableEvent;\n  }\n  getOptions() {\n    return this._options;\n  }\n  getParent() {\n    return this._parent;\n  }\n  isHidden() {\n    return this._hidden;\n  }\n  hide() {\n    this._hidden = true;\n  }\n  unhide() {\n    this._hidden = false;\n  }\n}\n\n/**\n * A Class that handles the event-markers inside the given plot\n */\nexport class EventMarkers {\n  _events: any;\n  _types: any;\n  _plot: any;\n  eventsEnabled: any;\n\n  /** @ngInject */\n  constructor(plot) {\n    this._events = [];\n    this._types = [];\n    this._plot = plot;\n    this.eventsEnabled = false;\n  }\n\n  getEvents() {\n    return this._events;\n  }\n\n  setTypes(types) {\n    return (this._types = types);\n  }\n\n  /**\n   * create internal objects for the given events\n   */\n  setupEvents(events) {\n    const parts = _.partition(events, 'isRegion');\n    const regions = parts[0];\n    events = parts[1];\n\n    $.each(events, (index, event) => {\n      const ve = new VisualEvent(event, this._buildDiv(event));\n      this._events.push(ve);\n    });\n\n    $.each(regions, (index, event) => {\n      const vre = new VisualEvent(event, this._buildRegDiv(event));\n      this._events.push(vre);\n    });\n\n    this._events.sort((a, b) => {\n      const ao = a.getOptions(),\n        bo = b.getOptions();\n      if (ao.min > bo.min) {\n        return 1;\n      }\n      if (ao.min < bo.min) {\n        return -1;\n      }\n      return 0;\n    });\n  }\n\n  /**\n   * draw the events to the plot\n   */\n  drawEvents() {\n    // var o = this._plot.getPlotOffset();\n\n    $.each(this._events, (index, event) => {\n      // check event is inside the graph range\n      if (this._insidePlot(event.getOptions().min) && !event.isHidden()) {\n        event.visual().draw();\n      } else {\n        event\n          .visual()\n          .getObject()\n          .hide();\n      }\n    });\n  }\n\n  /**\n   * update the position of the event-markers (e.g. after scrolling or zooming)\n   */\n  updateEvents() {\n    const o = this._plot.getPlotOffset();\n    let left;\n    let top;\n    const xaxis = this._plot.getXAxes()[this._plot.getOptions().events.xaxis - 1];\n\n    $.each(this._events, (index, event) => {\n      top = o.top + this._plot.height() - event.visual().height();\n      left = xaxis.p2c(event.getOptions().min) + o.left - event.visual().width() / 2;\n      event.visual().moveTo({ top: top, left: left });\n    });\n  }\n\n  /**\n   * remove all events from the plot\n   */\n  _clearEvents() {\n    $.each(this._events, (index, val) => {\n      val.visual().clear();\n    });\n    this._events = [];\n  }\n\n  /**\n   * create a DOM element for the given event\n   */\n  _buildDiv(event) {\n    const that = this;\n\n    const container = this._plot.getPlaceholder();\n    const o = this._plot.getPlotOffset();\n    const xaxis = this._plot.getXAxes()[this._plot.getOptions().events.xaxis - 1];\n    let top, left, color, markerSize, markerShow, lineStyle, lineWidth;\n    let markerTooltip;\n\n    // map the eventType to a types object\n    const eventTypeId = event.eventType;\n\n    if (this._types === null || !this._types[eventTypeId] || !this._types[eventTypeId].color) {\n      color = '#666';\n    } else {\n      color = this._types[eventTypeId].color;\n    }\n\n    if (this._types === null || !this._types[eventTypeId] || !this._types[eventTypeId].markerSize) {\n      markerSize = 8; //default marker size\n    } else {\n      markerSize = this._types[eventTypeId].markerSize;\n    }\n\n    if (this._types === null || !this._types[eventTypeId] || this._types[eventTypeId].markerShow === undefined) {\n      markerShow = true;\n    } else {\n      markerShow = this._types[eventTypeId].markerShow;\n    }\n\n    if (this._types === null || !this._types[eventTypeId] || this._types[eventTypeId].markerTooltip === undefined) {\n      markerTooltip = true;\n    } else {\n      markerTooltip = this._types[eventTypeId].markerTooltip;\n    }\n\n    if (this._types == null || !this._types[eventTypeId] || !this._types[eventTypeId].lineStyle) {\n      lineStyle = 'dashed'; //default line style\n    } else {\n      lineStyle = this._types[eventTypeId].lineStyle.toLowerCase();\n    }\n\n    if (this._types == null || !this._types[eventTypeId] || this._types[eventTypeId].lineWidth === undefined) {\n      lineWidth = 1; //default line width\n    } else {\n      lineWidth = this._types[eventTypeId].lineWidth;\n    }\n\n    let topOffset = xaxis.options.eventSectionHeight || 0;\n    topOffset = topOffset / 3;\n\n    top = o.top + this._plot.height() + topOffset;\n    left = xaxis.p2c(event.min) + o.left;\n\n    const line = $('<div class=\"events_line flot-temp-elem\"></div>')\n      .css({\n        position: 'absolute',\n        opacity: 0.8,\n        left: left + 'px',\n        top: 8,\n        width: lineWidth + 'px',\n        height: this._plot.height() + topOffset * 0.8,\n        'border-left-width': lineWidth + 'px',\n        'border-left-style': lineStyle,\n        'border-left-color': color,\n        color: color,\n      })\n      .appendTo(container);\n\n    if (markerShow) {\n      const marker = $('<div class=\"events_marker\"></div>').css({\n        position: 'absolute',\n        left: -markerSize - Math.round(lineWidth / 2) + 'px',\n        'font-size': 0,\n        'line-height': 0,\n        width: 0,\n        height: 0,\n        'border-left': markerSize + 'px solid transparent',\n        'border-right': markerSize + 'px solid transparent',\n      });\n\n      marker.appendTo(line);\n\n      if (\n        this._types[eventTypeId] &&\n        this._types[eventTypeId].position &&\n        this._types[eventTypeId].position.toUpperCase() === 'BOTTOM'\n      ) {\n        marker.css({\n          top: top - markerSize - 8 + 'px',\n          'border-top': 'none',\n          'border-bottom': markerSize + 'px solid ' + color,\n        });\n      } else {\n        marker.css({\n          top: '0px',\n          'border-top': markerSize + 'px solid ' + color,\n          'border-bottom': 'none',\n        });\n      }\n\n      marker.data({\n        event: event,\n      });\n\n      const mouseenter = function(this: any) {\n        createAnnotationToolip(marker, $(this).data('event'), that._plot);\n      };\n\n      if (event.editModel) {\n        createEditPopover(marker, event.editModel, that._plot);\n      }\n\n      const mouseleave = function() {\n        that._plot.clearSelection();\n      };\n\n      if (markerTooltip) {\n        marker.css({ cursor: 'help' });\n        marker.hover(mouseenter, mouseleave);\n      }\n    }\n\n    const drawableEvent = new DrawableEvent(\n      line,\n      function drawFunc(obj) {\n        obj.show();\n      },\n      function(obj) {\n        obj.remove();\n      },\n      function(obj, position) {\n        obj.css({\n          top: position.top,\n          left: position.left,\n        });\n      },\n      left,\n      top,\n      line.width(),\n      line.height()\n    );\n\n    return drawableEvent;\n  }\n\n  /**\n   * create a DOM element for the given region\n   */\n  _buildRegDiv(event) {\n    const that = this;\n\n    const container = this._plot.getPlaceholder();\n    const o = this._plot.getPlotOffset();\n    const xaxis = this._plot.getXAxes()[this._plot.getOptions().events.xaxis - 1];\n    let top, left, lineWidth, regionWidth, lineStyle, color, markerTooltip;\n\n    // map the eventType to a types object\n    const eventTypeId = event.eventType;\n\n    if (this._types === null || !this._types[eventTypeId] || !this._types[eventTypeId].color) {\n      color = '#666';\n    } else {\n      color = this._types[eventTypeId].color;\n    }\n\n    if (this._types === null || !this._types[eventTypeId] || this._types[eventTypeId].markerTooltip === undefined) {\n      markerTooltip = true;\n    } else {\n      markerTooltip = this._types[eventTypeId].markerTooltip;\n    }\n\n    if (this._types == null || !this._types[eventTypeId] || this._types[eventTypeId].lineWidth === undefined) {\n      lineWidth = 1; //default line width\n    } else {\n      lineWidth = this._types[eventTypeId].lineWidth;\n    }\n\n    if (this._types == null || !this._types[eventTypeId] || !this._types[eventTypeId].lineStyle) {\n      lineStyle = 'dashed'; //default line style\n    } else {\n      lineStyle = this._types[eventTypeId].lineStyle.toLowerCase();\n    }\n\n    const topOffset = 2;\n    top = o.top + this._plot.height() + topOffset;\n\n    const timeFrom = Math.min(event.min, event.timeEnd);\n    const timeTo = Math.max(event.min, event.timeEnd);\n    left = xaxis.p2c(timeFrom) + o.left;\n    const right = xaxis.p2c(timeTo) + o.left;\n    regionWidth = right - left;\n\n    _.each([left, right], position => {\n      const line = $('<div class=\"events_line flot-temp-elem\"></div>').css({\n        position: 'absolute',\n        opacity: 0.8,\n        left: position + 'px',\n        top: 8,\n        width: lineWidth + 'px',\n        height: this._plot.height() + topOffset,\n        'border-left-width': lineWidth + 'px',\n        'border-left-style': lineStyle,\n        'border-left-color': color,\n        color: color,\n      });\n      line.appendTo(container);\n    });\n\n    const region = $('<div class=\"events_marker region_marker flot-temp-elem\"></div>').css({\n      position: 'absolute',\n      opacity: 0.5,\n      left: left + 'px',\n      top: top,\n      width: Math.round(regionWidth + lineWidth) + 'px',\n      height: '0.5rem',\n      'border-left-color': color,\n      color: color,\n      'background-color': color,\n    });\n    region.appendTo(container);\n\n    region.data({\n      event: event,\n    });\n\n    const mouseenter = function(this: any) {\n      createAnnotationToolip(region, $(this).data('event'), that._plot);\n    };\n\n    if (event.editModel) {\n      createEditPopover(region, event.editModel, that._plot);\n    }\n\n    const mouseleave = function() {\n      that._plot.clearSelection();\n    };\n\n    if (markerTooltip) {\n      region.css({ cursor: 'help' });\n      region.hover(mouseenter, mouseleave);\n    }\n\n    const drawableEvent = new DrawableEvent(\n      region,\n      function drawFunc(obj) {\n        obj.show();\n      },\n      function(obj) {\n        obj.remove();\n      },\n      function(obj, position) {\n        obj.css({\n          top: position.top,\n          left: position.left,\n        });\n      },\n      left,\n      top,\n      region.width(),\n      region.height()\n    );\n\n    return drawableEvent;\n  }\n\n  /**\n   * check if the event is inside visible range\n   */\n  _insidePlot(x) {\n    const xaxis = this._plot.getXAxes()[this._plot.getOptions().events.xaxis - 1];\n    const xc = xaxis.p2c(x);\n    return xc > 0 && xc < xaxis.p2c(xaxis.max);\n  }\n}\n\n/**\n * initialize the plugin for the given plot\n */\n\n/** @ngInject */\nexport function init(this: any, plot) {\n  /*jshint validthis:true */\n  const that = this;\n  const eventMarkers = new EventMarkers(plot);\n\n  plot.getEvents = function() {\n    return eventMarkers._events;\n  };\n\n  plot.hideEvents = function() {\n    $.each(eventMarkers._events, (index, event) => {\n      event\n        .visual()\n        .getObject()\n        .hide();\n    });\n  };\n\n  plot.showEvents = function() {\n    plot.hideEvents();\n    $.each(eventMarkers._events, (index, event) => {\n      event.hide();\n    });\n\n    that.eventMarkers.drawEvents();\n  };\n\n  // change events on an existing plot\n  plot.setEvents = function(events) {\n    if (eventMarkers.eventsEnabled) {\n      eventMarkers.setupEvents(events);\n    }\n  };\n\n  plot.hooks.processOptions.push(function(plot, options) {\n    // enable the plugin\n    if (options.events.data != null) {\n      eventMarkers.eventsEnabled = true;\n    }\n  });\n\n  plot.hooks.draw.push(function(plot) {\n    const options = plot.getOptions();\n\n    if (eventMarkers.eventsEnabled) {\n      // check for first run\n      if (eventMarkers.getEvents().length < 1) {\n        eventMarkers.setTypes(options.events.types);\n        eventMarkers.setupEvents(options.events.data);\n      } else {\n        eventMarkers.updateEvents();\n      }\n    }\n\n    eventMarkers.drawEvents();\n  });\n}\n\nconst defaultOptions = {\n  events: {\n    data: null,\n    types: null,\n    xaxis: 1,\n    position: 'BOTTOM',\n  },\n};\n\n$.plot.plugins.push({\n  init: init,\n  options: defaultOptions,\n  name: 'events',\n  version: '0.2.5',\n});\n","import $ from 'jquery';\nimport { appEvents } from 'app/core/core';\n\nexport default function GraphTooltip(this: any, elem, dashboard, scope, getSeriesFn) {\n  const self = this;\n  const ctrl = scope.ctrl;\n  const panel = ctrl.panel;\n\n  const $tooltip = $('<div class=\"graph-tooltip\">');\n\n  this.destroy = function() {\n    $tooltip.remove();\n  };\n\n  this.findHoverIndexFromDataPoints = function(posX, series, last) {\n    const ps = series.datapoints.pointsize;\n    const initial = last * ps;\n    const len = series.datapoints.points.length;\n    let j;\n    for (j = initial; j < len; j += ps) {\n      // Special case of a non stepped line, highlight the very last point just before a null point\n      if (\n        (!series.lines.steps && series.datapoints.points[initial] != null && series.datapoints.points[j] == null) ||\n        //normal case\n        series.datapoints.points[j] > posX\n      ) {\n        return Math.max(j - ps, 0) / ps;\n      }\n    }\n    return j / ps - 1;\n  };\n\n  this.findHoverIndexFromData = function(posX, series) {\n    let lower = 0;\n    let upper = series.data.length - 1;\n    let middle;\n    while (true) {\n      if (lower > upper) {\n        return Math.max(upper, 0);\n      }\n      middle = Math.floor((lower + upper) / 2);\n      if (series.data[middle][0] === posX) {\n        return middle;\n      } else if (series.data[middle][0] < posX) {\n        lower = middle + 1;\n      } else {\n        upper = middle - 1;\n      }\n    }\n  };\n\n  this.renderAndShow = function(absoluteTime, innerHtml, pos, xMode) {\n    if (xMode === 'time') {\n      innerHtml = '<div class=\"graph-tooltip-time\">' + absoluteTime + '</div>' + innerHtml;\n    }\n    $tooltip.html(innerHtml).place_tt(pos.pageX + 20, pos.pageY);\n  };\n\n  this.getMultiSeriesPlotHoverInfo = function(seriesList, pos) {\n    let value, i, series, hoverIndex, hoverDistance, pointTime, yaxis;\n    // 3 sub-arrays, 1st for hidden series, 2nd for left yaxis, 3rd for right yaxis.\n    let results: any = [[], [], []];\n\n    //now we know the current X (j) position for X and Y values\n    let last_value = 0; //needed for stacked values\n\n    let minDistance, minTime;\n\n    for (i = 0; i < seriesList.length; i++) {\n      series = seriesList[i];\n\n      if (!series.data.length || (panel.legend.hideEmpty && series.allIsNull)) {\n        // Init value so that it does not brake series sorting\n        results[0].push({ hidden: true, value: 0 });\n        continue;\n      }\n\n      if (!series.data.length || (panel.legend.hideZero && series.allIsZero)) {\n        // Init value so that it does not brake series sorting\n        results[0].push({ hidden: true, value: 0 });\n        continue;\n      }\n\n      if (series.hideTooltip) {\n        results[0].push({ hidden: true, value: 0 });\n        continue;\n      }\n\n      hoverIndex = this.findHoverIndexFromData(pos.x, series);\n      hoverDistance = pos.x - series.data[hoverIndex][0];\n      pointTime = series.data[hoverIndex][0];\n\n      // Take the closest point before the cursor, or if it does not exist, the closest after\n      if (\n        !minDistance ||\n        (hoverDistance >= 0 && (hoverDistance < minDistance || minDistance < 0)) ||\n        (hoverDistance < 0 && hoverDistance > minDistance)\n      ) {\n        minDistance = hoverDistance;\n        minTime = pointTime;\n      }\n\n      if (series.stack) {\n        if (panel.tooltip.value_type === 'individual') {\n          value = series.data[hoverIndex][1];\n        } else if (!series.stack) {\n          value = series.data[hoverIndex][1];\n        } else {\n          last_value += series.data[hoverIndex][1];\n          value = last_value;\n        }\n      } else {\n        value = series.data[hoverIndex][1];\n      }\n\n      // Highlighting multiple Points depending on the plot type\n      if (series.lines.steps || series.stack) {\n        // stacked and steppedLine plots can have series with different length.\n        // Stacked series can increase its length on each new stacked serie if null points found,\n        // to speed the index search we begin always on the last found hoverIndex.\n        hoverIndex = this.findHoverIndexFromDataPoints(pos.x, series, hoverIndex);\n      }\n\n      // Be sure we have a yaxis so that it does not brake series sorting\n      yaxis = 0;\n      if (series.yaxis) {\n        yaxis = series.yaxis.n;\n      }\n\n      results[yaxis].push({\n        value: value,\n        hoverIndex: hoverIndex,\n        color: series.color,\n        label: series.aliasEscaped,\n        time: pointTime,\n        distance: hoverDistance,\n        index: i,\n      });\n    }\n\n    // Contat the 3 sub-arrays\n    results = results[0].concat(results[1], results[2]);\n\n    // Time of the point closer to pointer\n    results.time = minTime;\n\n    return results;\n  };\n\n  elem.mouseleave(function() {\n    if (panel.tooltip.shared) {\n      const plot = elem.data().plot;\n      if (plot) {\n        $tooltip.detach();\n        plot.unhighlight();\n      }\n    }\n    appEvents.emit('graph-hover-clear');\n  });\n\n  elem.bind('plothover', function(event, pos, item) {\n    self.show(pos, item);\n\n    // broadcast to other graph panels that we are hovering!\n    pos.panelRelY = (pos.pageY - elem.offset().top) / elem.height();\n    appEvents.emit('graph-hover', { pos: pos, panel: panel });\n  });\n\n  elem.bind('plotclick', function(event, pos, item) {\n    appEvents.emit('graph-click', { pos: pos, panel: panel, item: item });\n  });\n\n  this.clear = function(plot) {\n    $tooltip.detach();\n    plot.clearCrosshair();\n    plot.unhighlight();\n  };\n\n  this.show = function(pos, item) {\n    const plot = elem.data().plot;\n    const plotData = plot.getData();\n    const xAxes = plot.getXAxes();\n    const xMode = xAxes[0].options.mode;\n    const seriesList = getSeriesFn();\n    let allSeriesMode = panel.tooltip.shared;\n    let group, value, absoluteTime, hoverInfo, i, series, seriesHtml, tooltipFormat;\n\n    // if panelRelY is defined another panel wants us to show a tooltip\n    // get pageX from position on x axis and pageY from relative position in original panel\n    if (pos.panelRelY) {\n      const pointOffset = plot.pointOffset({ x: pos.x });\n      if (Number.isNaN(pointOffset.left) || pointOffset.left < 0 || pointOffset.left > elem.width()) {\n        self.clear(plot);\n        return;\n      }\n      pos.pageX = elem.offset().left + pointOffset.left;\n      pos.pageY = elem.offset().top + elem.height() * pos.panelRelY;\n      const isVisible =\n        pos.pageY >= $(window).scrollTop() && pos.pageY <= $(window).innerHeight() + $(window).scrollTop();\n      if (!isVisible) {\n        self.clear(plot);\n        return;\n      }\n      plot.setCrosshair(pos);\n      allSeriesMode = true;\n\n      if (dashboard.sharedCrosshairModeOnly()) {\n        // if only crosshair mode we are done\n        return;\n      }\n    }\n\n    if (seriesList.length === 0) {\n      return;\n    }\n\n    if (seriesList[0].hasMsResolution) {\n      tooltipFormat = 'YYYY-MM-DD HH:mm:ss.SSS';\n    } else {\n      tooltipFormat = 'YYYY-MM-DD HH:mm:ss';\n    }\n\n    if (allSeriesMode) {\n      plot.unhighlight();\n\n      const seriesHoverInfo = self.getMultiSeriesPlotHoverInfo(plotData, pos);\n\n      seriesHtml = '';\n\n      absoluteTime = dashboard.formatDate(seriesHoverInfo.time, tooltipFormat);\n\n      // Dynamically reorder the hovercard for the current time point if the\n      // option is enabled.\n      if (panel.tooltip.sort === 2) {\n        seriesHoverInfo.sort(function(a, b) {\n          return b.value - a.value;\n        });\n      } else if (panel.tooltip.sort === 1) {\n        seriesHoverInfo.sort(function(a, b) {\n          return a.value - b.value;\n        });\n      }\n\n      for (i = 0; i < seriesHoverInfo.length; i++) {\n        hoverInfo = seriesHoverInfo[i];\n\n        if (hoverInfo.hidden) {\n          continue;\n        }\n\n        let highlightClass = '';\n        if (item && hoverInfo.index === item.seriesIndex) {\n          highlightClass = 'graph-tooltip-list-item--highlight';\n        }\n\n        series = seriesList[hoverInfo.index];\n\n        value = series.formatValue(hoverInfo.value);\n\n        seriesHtml +=\n          '<div class=\"graph-tooltip-list-item ' + highlightClass + '\"><div class=\"graph-tooltip-series-name\">';\n        seriesHtml +=\n          '<i class=\"fa fa-minus\" style=\"color:' + hoverInfo.color + ';\"></i> ' + hoverInfo.label + ':</div>';\n        seriesHtml += '<div class=\"graph-tooltip-value\">' + value + '</div></div>';\n        plot.highlight(hoverInfo.index, hoverInfo.hoverIndex);\n      }\n\n      self.renderAndShow(absoluteTime, seriesHtml, pos, xMode);\n    } else if (item) {\n      // single series tooltip\n      series = seriesList[item.seriesIndex];\n      group = '<div class=\"graph-tooltip-list-item\"><div class=\"graph-tooltip-series-name\">';\n      group +=\n        '<i class=\"fa fa-minus\" style=\"color:' + item.series.color + ';\"></i> ' + series.aliasEscaped + ':</div>';\n\n      if (panel.stack && panel.tooltip.value_type === 'individual') {\n        value = item.datapoint[1] - item.datapoint[2];\n      } else {\n        value = item.datapoint[1];\n      }\n\n      value = series.formatValue(value);\n\n      absoluteTime = dashboard.formatDate(item.datapoint[0], tooltipFormat);\n\n      group += '<div class=\"graph-tooltip-value\">' + value + '</div>';\n\n      self.renderAndShow(absoluteTime, group, pos, xMode);\n    } else {\n      // no hit\n      $tooltip.detach();\n    }\n  };\n}\n","import 'vendor/flot/jquery.flot';\nimport $ from 'jquery';\nimport _ from 'lodash';\n\nexport class ThresholdManager {\n  plot: any;\n  placeholder: any;\n  height: any;\n  thresholds: any;\n  needsCleanup: boolean;\n  hasSecondYAxis: any;\n\n  constructor(private panelCtrl) {}\n\n  getHandleHtml(handleIndex, model, valueStr) {\n    let stateClass = model.colorMode;\n    if (model.colorMode === 'custom') {\n      stateClass = 'critical';\n    }\n\n    return `\n    <div class=\"alert-handle-wrapper alert-handle-wrapper--T${handleIndex}\">\n      <div class=\"alert-handle-line alert-handle-line--${stateClass}\">\n      </div>\n      <div class=\"alert-handle\" data-handle-index=\"${handleIndex}\">\n        <i class=\"icon-gf icon-gf-${stateClass} alert-state-${stateClass}\"></i>\n        <span class=\"alert-handle-value\">${valueStr}<i class=\"alert-handle-grip\"></i></span>\n      </div>\n    </div>`;\n  }\n\n  initDragging(evt) {\n    const handleElem = $(evt.currentTarget).parents('.alert-handle-wrapper');\n    const handleIndex = $(evt.currentTarget).data('handleIndex');\n\n    let lastY = null;\n    let posTop;\n    const plot = this.plot;\n    const panelCtrl = this.panelCtrl;\n    const model = this.thresholds[handleIndex];\n\n    function dragging(evt) {\n      if (lastY === null) {\n        lastY = evt.clientY;\n      } else {\n        const diff = evt.clientY - lastY;\n        posTop = posTop + diff;\n        lastY = evt.clientY;\n        handleElem.css({ top: posTop + diff });\n      }\n    }\n\n    function stopped() {\n      // calculate graph level\n      let graphValue = plot.c2p({ left: 0, top: posTop }).y;\n      graphValue = parseInt(graphValue.toFixed(0));\n      model.value = graphValue;\n\n      handleElem.off('mousemove', dragging);\n      handleElem.off('mouseup', dragging);\n      handleElem.off('mouseleave', dragging);\n\n      // trigger digest and render\n      panelCtrl.$scope.$apply(function() {\n        panelCtrl.render();\n        panelCtrl.events.emit('threshold-changed', {\n          threshold: model,\n          handleIndex: handleIndex,\n        });\n      });\n    }\n\n    lastY = null;\n    posTop = handleElem.position().top;\n\n    handleElem.on('mousemove', dragging);\n    handleElem.on('mouseup', stopped);\n    handleElem.on('mouseleave', stopped);\n  }\n\n  cleanUp() {\n    this.placeholder.find('.alert-handle-wrapper').remove();\n    this.needsCleanup = false;\n  }\n\n  renderHandle(handleIndex, defaultHandleTopPos) {\n    const model = this.thresholds[handleIndex];\n    const value = model.value;\n    let valueStr = value;\n    let handleTopPos = 0;\n\n    // handle no value\n    if (!_.isNumber(value)) {\n      valueStr = '';\n      handleTopPos = defaultHandleTopPos;\n    } else {\n      const valueCanvasPos = this.plot.p2c({ x: 0, y: value });\n      handleTopPos = Math.round(Math.min(Math.max(valueCanvasPos.top, 0), this.height) - 6);\n    }\n\n    const handleElem = $(this.getHandleHtml(handleIndex, model, valueStr));\n    this.placeholder.append(handleElem);\n\n    handleElem.toggleClass('alert-handle-wrapper--no-value', valueStr === '');\n    handleElem.css({ top: handleTopPos });\n  }\n\n  shouldDrawHandles() {\n    return !this.hasSecondYAxis && this.panelCtrl.editingThresholds && this.panelCtrl.panel.thresholds.length > 0;\n  }\n\n  prepare(elem, data) {\n    this.hasSecondYAxis = false;\n    for (let i = 0; i < data.length; i++) {\n      if (data[i].yaxis > 1) {\n        this.hasSecondYAxis = true;\n        break;\n      }\n    }\n\n    if (this.shouldDrawHandles()) {\n      const thresholdMargin = this.panelCtrl.panel.thresholds.length > 1 ? '220px' : '110px';\n      elem.css('margin-right', thresholdMargin);\n    } else if (this.needsCleanup) {\n      elem.css('margin-right', '0');\n    }\n  }\n\n  draw(plot) {\n    this.thresholds = this.panelCtrl.panel.thresholds;\n    this.plot = plot;\n    this.placeholder = plot.getPlaceholder();\n\n    if (this.needsCleanup) {\n      this.cleanUp();\n    }\n\n    if (!this.shouldDrawHandles()) {\n      return;\n    }\n\n    this.height = plot.height();\n\n    if (this.thresholds.length > 0) {\n      this.renderHandle(0, 10);\n    }\n    if (this.thresholds.length > 1) {\n      this.renderHandle(1, this.height - 30);\n    }\n\n    this.placeholder.off('mousedown', '.alert-handle');\n    this.placeholder.on('mousedown', '.alert-handle', this.initDragging.bind(this));\n    this.needsCleanup = true;\n  }\n\n  addFlotOptions(options, panel) {\n    if (!panel.thresholds || panel.thresholds.length === 0) {\n      return;\n    }\n\n    let gtLimit = Infinity;\n    let ltLimit = -Infinity;\n    let i, threshold, other;\n\n    for (i = 0; i < panel.thresholds.length; i++) {\n      threshold = panel.thresholds[i];\n      if (!_.isNumber(threshold.value)) {\n        continue;\n      }\n\n      let limit;\n      switch (threshold.op) {\n        case 'gt': {\n          limit = gtLimit;\n          // if next threshold is less then op and greater value, then use that as limit\n          if (panel.thresholds.length > i + 1) {\n            other = panel.thresholds[i + 1];\n            if (other.value > threshold.value) {\n              limit = other.value;\n              ltLimit = limit;\n            }\n          }\n          break;\n        }\n        case 'lt': {\n          limit = ltLimit;\n          // if next threshold is less then op and greater value, then use that as limit\n          if (panel.thresholds.length > i + 1) {\n            other = panel.thresholds[i + 1];\n            if (other.value < threshold.value) {\n              limit = other.value;\n              gtLimit = limit;\n            }\n          }\n          break;\n        }\n      }\n\n      let fillColor, lineColor;\n      switch (threshold.colorMode) {\n        case 'critical': {\n          fillColor = 'rgba(234, 112, 112, 0.12)';\n          lineColor = 'rgba(237, 46, 24, 0.60)';\n          break;\n        }\n        case 'warning': {\n          fillColor = 'rgba(235, 138, 14, 0.12)';\n          lineColor = 'rgba(247, 149, 32, 0.60)';\n          break;\n        }\n        case 'ok': {\n          fillColor = 'rgba(11, 237, 50, 0.090)';\n          lineColor = 'rgba(6,163,69, 0.60)';\n          break;\n        }\n        case 'custom': {\n          fillColor = threshold.fillColor;\n          lineColor = threshold.lineColor;\n          break;\n        }\n      }\n\n      // fill\n      if (threshold.fill) {\n        if (threshold.yaxis === 'right' && this.hasSecondYAxis) {\n          options.grid.markings.push({\n            y2axis: { from: threshold.value, to: limit },\n            color: fillColor,\n          });\n        } else {\n          options.grid.markings.push({\n            yaxis: { from: threshold.value, to: limit },\n            color: fillColor,\n          });\n        }\n      }\n      if (threshold.line) {\n        if (threshold.yaxis === 'right' && this.hasSecondYAxis) {\n          options.grid.markings.push({\n            y2axis: { from: threshold.value, to: threshold.value },\n            color: lineColor,\n          });\n        } else {\n          options.grid.markings.push({\n            yaxis: { from: threshold.value, to: threshold.value },\n            color: lineColor,\n          });\n        }\n      }\n    }\n  }\n}\n","import _ from 'lodash';\n\n/**\n * To align two Y axes by Y level\n * @param yAxes data [{min: min_y1, min: max_y1}, {min: min_y2, max: max_y2}]\n * @param level Y level\n */\nexport function alignYLevel(yAxes, level) {\n  if (isNaN(level) || !checkCorrectAxis(yAxes)) {\n    return;\n  }\n\n  const [yLeft, yRight] = yAxes;\n  moveLevelToZero(yLeft, yRight, level);\n\n  expandStuckValues(yLeft, yRight);\n\n  // one of graphs on zero\n  const zero = yLeft.min === 0 || yRight.min === 0 || yLeft.max === 0 || yRight.max === 0;\n\n  const oneSide = checkOneSide(yLeft, yRight);\n\n  if (zero && oneSide) {\n    yLeft.min = yLeft.max > 0 ? 0 : yLeft.min;\n    yLeft.max = yLeft.max > 0 ? yLeft.max : 0;\n    yRight.min = yRight.max > 0 ? 0 : yRight.min;\n    yRight.max = yRight.max > 0 ? yRight.max : 0;\n  } else {\n    if (checkOppositeSides(yLeft, yRight)) {\n      if (yLeft.min >= 0) {\n        yLeft.min = -yLeft.max;\n        yRight.max = -yRight.min;\n      } else {\n        yLeft.max = -yLeft.min;\n        yRight.min = -yRight.max;\n      }\n    } else {\n      const rate = getRate(yLeft, yRight);\n\n      if (oneSide) {\n        // all graphs above the Y level\n        if (yLeft.min > 0) {\n          yLeft.min = yLeft.max / rate;\n          yRight.min = yRight.max / rate;\n        } else {\n          yLeft.max = yLeft.min / rate;\n          yRight.max = yRight.min / rate;\n        }\n      } else {\n        if (checkTwoCross(yLeft, yRight)) {\n          yLeft.min = yRight.min ? yRight.min * rate : yLeft.min;\n          yRight.min = yLeft.min ? yLeft.min / rate : yRight.min;\n          yLeft.max = yRight.max ? yRight.max * rate : yLeft.max;\n          yRight.max = yLeft.max ? yLeft.max / rate : yRight.max;\n        } else {\n          yLeft.min = yLeft.min > 0 ? yRight.min * rate : yLeft.min;\n          yRight.min = yRight.min > 0 ? yLeft.min / rate : yRight.min;\n          yLeft.max = yLeft.max < 0 ? yRight.max * rate : yLeft.max;\n          yRight.max = yRight.max < 0 ? yLeft.max / rate : yRight.max;\n        }\n      }\n    }\n  }\n\n  restoreLevelFromZero(yLeft, yRight, level);\n}\n\nfunction expandStuckValues(yLeft, yRight) {\n  // wide Y min and max using increased wideFactor\n  const wideFactor = 0.25;\n  if (yLeft.max === yLeft.min) {\n    yLeft.min -= wideFactor;\n    yLeft.max += wideFactor;\n  }\n  if (yRight.max === yRight.min) {\n    yRight.min -= wideFactor;\n    yRight.max += wideFactor;\n  }\n}\n\nfunction moveLevelToZero(yLeft, yRight, level) {\n  if (level !== 0) {\n    yLeft.min -= level;\n    yLeft.max -= level;\n    yRight.min -= level;\n    yRight.max -= level;\n  }\n}\n\nfunction restoreLevelFromZero(yLeft, yRight, level) {\n  if (level !== 0) {\n    yLeft.min += level;\n    yLeft.max += level;\n    yRight.min += level;\n    yRight.max += level;\n  }\n}\n\nfunction checkCorrectAxis(axis) {\n  return axis.length === 2 && checkCorrectAxes(axis[0]) && checkCorrectAxes(axis[1]);\n}\n\nfunction checkCorrectAxes(axes) {\n  return 'min' in axes && 'max' in axes;\n}\n\nfunction checkOneSide(yLeft, yRight) {\n  // on the one hand with respect to zero\n  return (yLeft.min >= 0 && yRight.min >= 0) || (yLeft.max <= 0 && yRight.max <= 0);\n}\n\nfunction checkTwoCross(yLeft, yRight) {\n  // both across zero\n  return yLeft.min <= 0 && yLeft.max >= 0 && yRight.min <= 0 && yRight.max >= 0;\n}\n\nfunction checkOppositeSides(yLeft, yRight) {\n  // on the opposite sides with respect to zero\n  return (yLeft.min >= 0 && yRight.max <= 0) || (yLeft.max <= 0 && yRight.min >= 0);\n}\n\nfunction getRate(yLeft, yRight) {\n  let rateLeft, rateRight, rate;\n  if (checkTwoCross(yLeft, yRight)) {\n    rateLeft = yRight.min ? yLeft.min / yRight.min : 0;\n    rateRight = yRight.max ? yLeft.max / yRight.max : 0;\n  } else {\n    if (checkOneSide(yLeft, yRight)) {\n      const absLeftMin = Math.abs(yLeft.min);\n      const absLeftMax = Math.abs(yLeft.max);\n      const absRightMin = Math.abs(yRight.min);\n      const absRightMax = Math.abs(yRight.max);\n      const upLeft = _.max([absLeftMin, absLeftMax]);\n      const downLeft = _.min([absLeftMin, absLeftMax]);\n      const upRight = _.max([absRightMin, absRightMax]);\n      const downRight = _.min([absRightMin, absRightMax]);\n\n      rateLeft = downLeft ? upLeft / downLeft : upLeft;\n      rateRight = downRight ? upRight / downRight : upRight;\n    } else {\n      if (yLeft.min > 0 || yRight.min > 0) {\n        rateLeft = yLeft.max / yRight.max;\n        rateRight = 0;\n      } else {\n        rateLeft = 0;\n        rateRight = yLeft.min / yRight.min;\n      }\n    }\n  }\n\n  rate = rateLeft > rateRight ? rateLeft : rateRight;\n\n  return rate;\n}\n","import _ from 'lodash';\nimport TimeSeries from 'app/core/time_series2';\n\n/**\n * Convert series into array of series values.\n * @param data Array of series\n */\nexport function getSeriesValues(dataList: TimeSeries[]): number[] {\n  const VALUE_INDEX = 0;\n  const values = [];\n\n  // Count histogam stats\n  for (let i = 0; i < dataList.length; i++) {\n    const series = dataList[i];\n    const datapoints = series.datapoints;\n    for (let j = 0; j < datapoints.length; j++) {\n      if (datapoints[j][VALUE_INDEX] !== null) {\n        values.push(datapoints[j][VALUE_INDEX]);\n      }\n    }\n  }\n\n  return values;\n}\n\n/**\n * Convert array of values into timeseries-like histogram:\n * [[val_1, count_1], [val_2, count_2], ..., [val_n, count_n]]\n * @param values\n * @param bucketSize\n */\nexport function convertValuesToHistogram(values: number[], bucketSize: number, min: number, max: number): any[] {\n  const histogram = {};\n\n  const minBound = getBucketBound(min, bucketSize);\n  const maxBound = getBucketBound(max, bucketSize);\n  let bound = minBound;\n  let n = 0;\n  while (bound <= maxBound) {\n    histogram[bound] = 0;\n    bound = minBound + bucketSize * n;\n    n++;\n  }\n\n  for (let i = 0; i < values.length; i++) {\n    const bound = getBucketBound(values[i], bucketSize);\n    histogram[bound] = histogram[bound] + 1;\n  }\n\n  const histogam_series = _.map(histogram, (count, bound) => {\n    return [Number(bound), count];\n  });\n\n  // Sort by Y axis values\n  return _.sortBy(histogam_series, point => point[0]);\n}\n\n/**\n * Convert series into array of histogram data.\n * @param data Array of series\n * @param bucketSize\n */\nexport function convertToHistogramData(\n  data: any,\n  bucketSize: number,\n  hiddenSeries: any,\n  min: number,\n  max: number\n): any[] {\n  return data.map(series => {\n    const values = getSeriesValues([series]);\n    series.histogram = true;\n    if (!hiddenSeries[series.alias]) {\n      const histogram = convertValuesToHistogram(values, bucketSize, min, max);\n      series.data = histogram;\n    } else {\n      series.data = [];\n    }\n    return series;\n  });\n}\n\nfunction getBucketBound(value: number, bucketSize: number): number {\n  return Math.floor(value / bucketSize) * bucketSize;\n}\n","import 'vendor/flot/jquery.flot';\nimport 'vendor/flot/jquery.flot.selection';\nimport 'vendor/flot/jquery.flot.time';\nimport 'vendor/flot/jquery.flot.stack';\nimport 'vendor/flot/jquery.flot.stackpercent';\nimport 'vendor/flot/jquery.flot.fillbelow';\nimport 'vendor/flot/jquery.flot.crosshair';\nimport 'vendor/flot/jquery.flot.dashes';\nimport './jquery.flot.events';\n\nimport $ from 'jquery';\nimport _ from 'lodash';\nimport moment from 'moment';\nimport kbn from 'app/core/utils/kbn';\nimport { tickStep } from 'app/core/utils/ticks';\nimport { appEvents, coreModule, updateLegendValues } from 'app/core/core';\nimport GraphTooltip from './graph_tooltip';\nimport { ThresholdManager } from './threshold_manager';\nimport { EventManager } from 'app/features/annotations/all';\nimport { convertToHistogramData } from './histogram';\nimport { alignYLevel } from './align_yaxes';\nimport config from 'app/core/config';\n\nimport { GraphCtrl } from './module';\n\nclass GraphElement {\n  ctrl: GraphCtrl;\n  tooltip: any;\n  dashboard: any;\n  annotations: object[];\n  panel: any;\n  plot: any;\n  sortedSeries: any[];\n  data: any[];\n  panelWidth: number;\n  eventManager: EventManager;\n  thresholdManager: ThresholdManager;\n\n  constructor(private scope, private elem, private timeSrv) {\n    this.ctrl = scope.ctrl;\n    this.dashboard = this.ctrl.dashboard;\n    this.panel = this.ctrl.panel;\n    this.annotations = [];\n\n    this.panelWidth = 0;\n    this.eventManager = new EventManager(this.ctrl);\n    this.thresholdManager = new ThresholdManager(this.ctrl);\n    this.tooltip = new GraphTooltip(this.elem, this.ctrl.dashboard, this.scope, () => {\n      return this.sortedSeries;\n    });\n\n    // panel events\n    this.ctrl.events.on('panel-teardown', this.onPanelteardown.bind(this));\n\n    /**\n     * Split graph rendering into two parts.\n     * First, calculate series stats in buildFlotPairs() function. Then legend rendering started\n     * (see ctrl.events.on('render') in legend.ts).\n     * When legend is rendered it emits 'legend-rendering-complete' and graph rendered.\n     */\n    this.ctrl.events.on('render', this.onRender.bind(this));\n    this.ctrl.events.on('legend-rendering-complete', this.onLegendRenderingComplete.bind(this));\n\n    // global events\n    appEvents.on('graph-hover', this.onGraphHover.bind(this), scope);\n\n    appEvents.on('graph-hover-clear', this.onGraphHoverClear.bind(this), scope);\n\n    this.elem.bind('plotselected', this.onPlotSelected.bind(this));\n\n    this.elem.bind('plotclick', this.onPlotClick.bind(this));\n    scope.$on('$destroy', this.onScopeDestroy.bind(this));\n  }\n\n  onRender(renderData) {\n    this.data = renderData || this.data;\n    if (!this.data) {\n      return;\n    }\n    this.annotations = this.ctrl.annotations || [];\n    this.buildFlotPairs(this.data);\n    const graphHeight = this.elem.height();\n    updateLegendValues(this.data, this.panel, graphHeight);\n\n    this.ctrl.events.emit('render-legend');\n  }\n\n  onGraphHover(evt) {\n    // ignore other graph hover events if shared tooltip is disabled\n    if (!this.dashboard.sharedTooltipModeEnabled()) {\n      return;\n    }\n\n    // ignore if we are the emitter\n    if (!this.plot || evt.panel.id === this.panel.id || this.ctrl.otherPanelInFullscreenMode()) {\n      return;\n    }\n\n    this.tooltip.show(evt.pos);\n  }\n\n  onPanelteardown() {\n    this.thresholdManager = null;\n\n    if (this.plot) {\n      this.plot.destroy();\n      this.plot = null;\n    }\n  }\n\n  onLegendRenderingComplete() {\n    this.render_panel();\n  }\n\n  onGraphHoverClear(event, info) {\n    if (this.plot) {\n      this.tooltip.clear(this.plot);\n    }\n  }\n\n  onPlotSelected(event, ranges) {\n    if (this.panel.xaxis.mode !== 'time') {\n      // Skip if panel in histogram or series mode\n      this.plot.clearSelection();\n      return;\n    }\n\n    if ((ranges.ctrlKey || ranges.metaKey) && (this.dashboard.meta.canEdit || this.dashboard.meta.canMakeEditable)) {\n      // Add annotation\n      setTimeout(() => {\n        this.eventManager.updateTime(ranges.xaxis);\n      }, 100);\n    } else {\n      this.scope.$apply(() => {\n        this.timeSrv.setTime({\n          from: moment.utc(ranges.xaxis.from),\n          to: moment.utc(ranges.xaxis.to),\n        });\n      });\n    }\n  }\n\n  onPlotClick(event, pos, item) {\n    if (this.panel.xaxis.mode !== 'time') {\n      // Skip if panel in histogram or series mode\n      return;\n    }\n\n    if ((pos.ctrlKey || pos.metaKey) && (this.dashboard.meta.canEdit || this.dashboard.meta.canMakeEditable)) {\n      // Skip if range selected (added in \"plotselected\" event handler)\n      const isRangeSelection = pos.x !== pos.x1;\n      if (!isRangeSelection) {\n        setTimeout(() => {\n          this.eventManager.updateTime({ from: pos.x, to: null });\n        }, 100);\n      }\n    }\n  }\n\n  onScopeDestroy() {\n    this.tooltip.destroy();\n    this.elem.off();\n    this.elem.remove();\n  }\n\n  shouldAbortRender() {\n    if (!this.data) {\n      return true;\n    }\n\n    if (this.panelWidth === 0) {\n      return true;\n    }\n\n    return false;\n  }\n\n  drawHook(plot) {\n    // add left axis labels\n    if (this.panel.yaxes[0].label && this.panel.yaxes[0].show) {\n      $(\"<div class='axisLabel left-yaxis-label flot-temp-elem'></div>\")\n        .text(this.panel.yaxes[0].label)\n        .appendTo(this.elem);\n    }\n\n    // add right axis labels\n    if (this.panel.yaxes[1].label && this.panel.yaxes[1].show) {\n      $(\"<div class='axisLabel right-yaxis-label flot-temp-elem'></div>\")\n        .text(this.panel.yaxes[1].label)\n        .appendTo(this.elem);\n    }\n\n    if (this.ctrl.dataWarning) {\n      $(`<div class=\"datapoints-warning flot-temp-elem\">${this.ctrl.dataWarning.title}</div>`).appendTo(this.elem);\n    }\n\n    this.thresholdManager.draw(plot);\n  }\n\n  processOffsetHook(plot, gridMargin) {\n    const left = this.panel.yaxes[0];\n    const right = this.panel.yaxes[1];\n    if (left.show && left.label) {\n      gridMargin.left = 20;\n    }\n    if (right.show && right.label) {\n      gridMargin.right = 20;\n    }\n\n    // apply y-axis min/max options\n    const yaxis = plot.getYAxes();\n    for (let i = 0; i < yaxis.length; i++) {\n      const axis = yaxis[i];\n      const panelOptions = this.panel.yaxes[i];\n      axis.options.max = axis.options.max !== null ? axis.options.max : panelOptions.max;\n      axis.options.min = axis.options.min !== null ? axis.options.min : panelOptions.min;\n    }\n  }\n\n  processRangeHook(plot) {\n    const yAxes = plot.getYAxes();\n    const align = this.panel.yaxis.align || false;\n\n    if (yAxes.length > 1 && align === true) {\n      const level = this.panel.yaxis.alignLevel || 0;\n      alignYLevel(yAxes, parseFloat(level));\n    }\n  }\n\n  // Series could have different timeSteps,\n  // let's find the smallest one so that bars are correctly rendered.\n  // In addition, only take series which are rendered as bars for this.\n  getMinTimeStepOfSeries(data) {\n    let min = Number.MAX_VALUE;\n\n    for (let i = 0; i < data.length; i++) {\n      if (!data[i].stats.timeStep) {\n        continue;\n      }\n      if (this.panel.bars) {\n        if (data[i].bars && data[i].bars.show === false) {\n          continue;\n        }\n      } else {\n        if (typeof data[i].bars === 'undefined' || typeof data[i].bars.show === 'undefined' || !data[i].bars.show) {\n          continue;\n        }\n      }\n\n      if (data[i].stats.timeStep < min) {\n        min = data[i].stats.timeStep;\n      }\n    }\n\n    return min;\n  }\n\n  // Function for rendering panel\n  render_panel() {\n    this.panelWidth = this.elem.width();\n    if (this.shouldAbortRender()) {\n      return;\n    }\n\n    // give space to alert editing\n    this.thresholdManager.prepare(this.elem, this.data);\n\n    // un-check dashes if lines are unchecked\n    this.panel.dashes = this.panel.lines ? this.panel.dashes : false;\n\n    // Populate element\n    const options: any = this.buildFlotOptions(this.panel);\n    this.prepareXAxis(options, this.panel);\n    this.configureYAxisOptions(this.data, options);\n    this.thresholdManager.addFlotOptions(options, this.panel);\n    this.eventManager.addFlotEvents(this.annotations, options);\n\n    this.sortedSeries = this.sortSeries(this.data, this.panel);\n    this.callPlot(options, true);\n  }\n\n  buildFlotPairs(data) {\n    for (let i = 0; i < data.length; i++) {\n      const series = data[i];\n      series.data = series.getFlotPairs(series.nullPointMode || this.panel.nullPointMode);\n\n      // if hidden remove points and disable stack\n      if (this.ctrl.hiddenSeries[series.alias]) {\n        series.data = [];\n        series.stack = false;\n      }\n    }\n  }\n\n  prepareXAxis(options, panel) {\n    switch (panel.xaxis.mode) {\n      case 'series': {\n        options.series.bars.barWidth = 0.7;\n        options.series.bars.align = 'center';\n\n        for (let i = 0; i < this.data.length; i++) {\n          const series = this.data[i];\n          series.data = [[i + 1, series.stats[panel.xaxis.values[0]]]];\n        }\n\n        this.addXSeriesAxis(options);\n        break;\n      }\n      case 'histogram': {\n        let bucketSize: number;\n\n        if (this.data.length) {\n          const histMin = _.min(_.map(this.data, s => s.stats.min));\n          const histMax = _.max(_.map(this.data, s => s.stats.max));\n          const ticks = panel.xaxis.buckets || this.panelWidth / 50;\n          bucketSize = tickStep(histMin, histMax, ticks);\n          options.series.bars.barWidth = bucketSize * 0.8;\n          this.data = convertToHistogramData(this.data, bucketSize, this.ctrl.hiddenSeries, histMin, histMax);\n        } else {\n          bucketSize = 0;\n        }\n\n        this.addXHistogramAxis(options, bucketSize);\n        break;\n      }\n      case 'table': {\n        options.series.bars.barWidth = 0.7;\n        options.series.bars.align = 'center';\n        this.addXTableAxis(options);\n        break;\n      }\n      default: {\n        options.series.bars.barWidth = this.getMinTimeStepOfSeries(this.data) / 1.5;\n        this.addTimeAxis(options);\n        break;\n      }\n    }\n  }\n\n  callPlot(options, incrementRenderCounter) {\n    try {\n      this.plot = $.plot(this.elem, this.sortedSeries, options);\n      if (this.ctrl.renderError) {\n        delete this.ctrl.error;\n        delete this.ctrl.inspector;\n      }\n    } catch (e) {\n      console.log('flotcharts error', e);\n      this.ctrl.error = e.message || 'Render Error';\n      this.ctrl.renderError = true;\n      this.ctrl.inspector = { error: e };\n    }\n\n    if (incrementRenderCounter) {\n      this.ctrl.renderingCompleted();\n    }\n  }\n\n  buildFlotOptions(panel) {\n    let gridColor = '#c8c8c8';\n    if (config.bootData.user.lightTheme === true) {\n      gridColor = '#a1a1a1';\n    }\n    const stack = panel.stack ? true : null;\n    const options = {\n      hooks: {\n        draw: [this.drawHook.bind(this)],\n        processOffset: [this.processOffsetHook.bind(this)],\n        processRange: [this.processRangeHook.bind(this)],\n      },\n      legend: { show: false },\n      series: {\n        stackpercent: panel.stack ? panel.percentage : false,\n        stack: panel.percentage ? null : stack,\n        lines: {\n          show: panel.lines,\n          zero: false,\n          fill: this.translateFillOption(panel.fill),\n          lineWidth: panel.dashes ? 0 : panel.linewidth,\n          steps: panel.steppedLine,\n        },\n        dashes: {\n          show: panel.dashes,\n          lineWidth: panel.linewidth,\n          dashLength: [panel.dashLength, panel.spaceLength],\n        },\n        bars: {\n          show: panel.bars,\n          fill: 1,\n          barWidth: 1,\n          zero: false,\n          lineWidth: 0,\n        },\n        points: {\n          show: panel.points,\n          fill: 1,\n          fillColor: false,\n          radius: panel.points ? panel.pointradius : 2,\n        },\n        shadowSize: 0,\n      },\n      yaxes: [],\n      xaxis: {},\n      grid: {\n        minBorderMargin: 0,\n        markings: [],\n        backgroundColor: null,\n        borderWidth: 0,\n        hoverable: true,\n        clickable: true,\n        color: gridColor,\n        margin: { left: 0, right: 0 },\n        labelMarginX: 0,\n      },\n      selection: {\n        mode: 'x',\n        color: '#666',\n      },\n      crosshair: {\n        mode: 'x',\n      },\n    };\n    return options;\n  }\n\n  sortSeries(series, panel) {\n    const sortBy = panel.legend.sort;\n    const sortOrder = panel.legend.sortDesc;\n    const haveSortBy = sortBy !== null && sortBy !== undefined;\n    const haveSortOrder = sortOrder !== null && sortOrder !== undefined;\n    const shouldSortBy = panel.stack && haveSortBy && haveSortOrder;\n    const sortDesc = panel.legend.sortDesc === true ? -1 : 1;\n\n    if (shouldSortBy) {\n      return _.sortBy(series, s => s.stats[sortBy] * sortDesc);\n    } else {\n      return _.sortBy(series, s => s.zindex);\n    }\n  }\n\n  translateFillOption(fill) {\n    if (this.panel.percentage && this.panel.stack) {\n      return fill === 0 ? 0.001 : fill / 10;\n    } else {\n      return fill / 10;\n    }\n  }\n\n  addTimeAxis(options) {\n    const ticks = this.panelWidth / 100;\n    const min = _.isUndefined(this.ctrl.range.from) ? null : this.ctrl.range.from.valueOf();\n    const max = _.isUndefined(this.ctrl.range.to) ? null : this.ctrl.range.to.valueOf();\n\n    options.xaxis = {\n      timezone: this.dashboard.getTimezone(),\n      show: this.panel.xaxis.show,\n      mode: 'time',\n      min: min,\n      max: max,\n      label: 'Datetime',\n      ticks: ticks,\n      timeformat: this.time_format(ticks, min, max),\n    };\n  }\n\n  addXSeriesAxis(options) {\n    const ticks = _.map(this.data, function(series, index) {\n      return [index + 1, series.alias];\n    });\n\n    options.xaxis = {\n      timezone: this.dashboard.getTimezone(),\n      show: this.panel.xaxis.show,\n      mode: null,\n      min: 0,\n      max: ticks.length + 1,\n      label: 'Datetime',\n      ticks: ticks,\n    };\n  }\n\n  addXHistogramAxis(options, bucketSize) {\n    let ticks, min, max;\n    const defaultTicks = this.panelWidth / 50;\n\n    if (this.data.length && bucketSize) {\n      const tick_values = [];\n      for (const d of this.data) {\n        for (const point of d.data) {\n          tick_values[point[0]] = true;\n        }\n      }\n      ticks = Object.keys(tick_values).map(v => Number(v));\n      min = _.min(ticks);\n      max = _.max(ticks);\n\n      // Adjust tick step\n      let tickStep = bucketSize;\n      let ticks_num = Math.floor((max - min) / tickStep);\n      while (ticks_num > defaultTicks) {\n        tickStep = tickStep * 2;\n        ticks_num = Math.ceil((max - min) / tickStep);\n      }\n\n      // Expand ticks for pretty view\n      min = Math.floor(min / tickStep) * tickStep;\n      // 1.01 is 101% - ensure we have enough space for last bar\n      max = Math.ceil(max * 1.01 / tickStep) * tickStep;\n\n      ticks = [];\n      for (let i = min; i <= max; i += tickStep) {\n        ticks.push(i);\n      }\n    } else {\n      // Set defaults if no data\n      ticks = defaultTicks / 2;\n      min = 0;\n      max = 1;\n    }\n\n    options.xaxis = {\n      timezone: this.dashboard.getTimezone(),\n      show: this.panel.xaxis.show,\n      mode: null,\n      min: min,\n      max: max,\n      label: 'Histogram',\n      ticks: ticks,\n    };\n\n    // Use 'short' format for histogram values\n    this.configureAxisMode(options.xaxis, 'short');\n  }\n\n  addXTableAxis(options) {\n    let ticks = _.map(this.data, function(series, seriesIndex) {\n      return _.map(series.datapoints, function(point, pointIndex) {\n        const tickIndex = seriesIndex * series.datapoints.length + pointIndex;\n        return [tickIndex + 1, point[1]];\n      });\n    });\n    ticks = _.flatten(ticks, true);\n\n    options.xaxis = {\n      timezone: this.dashboard.getTimezone(),\n      show: this.panel.xaxis.show,\n      mode: null,\n      min: 0,\n      max: ticks.length + 1,\n      label: 'Datetime',\n      ticks: ticks,\n    };\n  }\n\n  configureYAxisOptions(data, options) {\n    const defaults = {\n      position: 'left',\n      show: this.panel.yaxes[0].show,\n      index: 1,\n      logBase: this.panel.yaxes[0].logBase || 1,\n      min: this.parseNumber(this.panel.yaxes[0].min),\n      max: this.parseNumber(this.panel.yaxes[0].max),\n      tickDecimals: this.panel.yaxes[0].decimals,\n    };\n\n    options.yaxes.push(defaults);\n\n    if (_.find(data, { yaxis: 2 })) {\n      const secondY = _.clone(defaults);\n      secondY.index = 2;\n      secondY.show = this.panel.yaxes[1].show;\n      secondY.logBase = this.panel.yaxes[1].logBase || 1;\n      secondY.position = 'right';\n      secondY.min = this.parseNumber(this.panel.yaxes[1].min);\n      secondY.max = this.parseNumber(this.panel.yaxes[1].max);\n      secondY.tickDecimals = this.panel.yaxes[1].decimals;\n      options.yaxes.push(secondY);\n\n      this.applyLogScale(options.yaxes[1], data);\n      this.configureAxisMode(\n        options.yaxes[1],\n        this.panel.percentage && this.panel.stack ? 'percent' : this.panel.yaxes[1].format\n      );\n    }\n    this.applyLogScale(options.yaxes[0], data);\n    this.configureAxisMode(\n      options.yaxes[0],\n      this.panel.percentage && this.panel.stack ? 'percent' : this.panel.yaxes[0].format\n    );\n  }\n\n  parseNumber(value: any) {\n    if (value === null || typeof value === 'undefined') {\n      return null;\n    }\n\n    return _.toNumber(value);\n  }\n\n  applyLogScale(axis, data) {\n    if (axis.logBase === 1) {\n      return;\n    }\n\n    const minSetToZero = axis.min === 0;\n\n    if (axis.min < Number.MIN_VALUE) {\n      axis.min = null;\n    }\n    if (axis.max < Number.MIN_VALUE) {\n      axis.max = null;\n    }\n\n    let series, i;\n    let max = axis.max,\n      min = axis.min;\n\n    for (i = 0; i < data.length; i++) {\n      series = data[i];\n      if (series.yaxis === axis.index) {\n        if (!max || max < series.stats.max) {\n          max = series.stats.max;\n        }\n        if (!min || min > series.stats.logmin) {\n          min = series.stats.logmin;\n        }\n      }\n    }\n\n    axis.transform = function(v) {\n      return v < Number.MIN_VALUE ? null : Math.log(v) / Math.log(axis.logBase);\n    };\n    axis.inverseTransform = function(v) {\n      return Math.pow(axis.logBase, v);\n    };\n\n    if (!max && !min) {\n      max = axis.inverseTransform(+2);\n      min = axis.inverseTransform(-2);\n    } else if (!max) {\n      max = min * axis.inverseTransform(+4);\n    } else if (!min) {\n      min = max * axis.inverseTransform(-4);\n    }\n\n    if (axis.min) {\n      min = axis.inverseTransform(Math.ceil(axis.transform(axis.min)));\n    } else {\n      min = axis.min = axis.inverseTransform(Math.floor(axis.transform(min)));\n    }\n    if (axis.max) {\n      max = axis.inverseTransform(Math.floor(axis.transform(axis.max)));\n    } else {\n      max = axis.max = axis.inverseTransform(Math.ceil(axis.transform(max)));\n    }\n\n    if (!min || min < Number.MIN_VALUE || !max || max < Number.MIN_VALUE) {\n      return;\n    }\n\n    if (Number.isFinite(min) && Number.isFinite(max)) {\n      if (minSetToZero) {\n        axis.min = 0.1;\n        min = 1;\n      }\n\n      axis.ticks = this.generateTicksForLogScaleYAxis(min, max, axis.logBase);\n      if (minSetToZero) {\n        axis.ticks.unshift(0.1);\n      }\n      if (axis.ticks[axis.ticks.length - 1] > axis.max) {\n        axis.max = axis.ticks[axis.ticks.length - 1];\n      }\n    } else {\n      axis.ticks = [1, 2];\n      delete axis.min;\n      delete axis.max;\n    }\n  }\n\n  generateTicksForLogScaleYAxis(min, max, logBase) {\n    let ticks = [];\n\n    let nextTick;\n    for (nextTick = min; nextTick <= max; nextTick *= logBase) {\n      ticks.push(nextTick);\n    }\n\n    const maxNumTicks = Math.ceil(this.ctrl.height / 25);\n    const numTicks = ticks.length;\n    if (numTicks > maxNumTicks) {\n      const factor = Math.ceil(numTicks / maxNumTicks) * logBase;\n      ticks = [];\n\n      for (nextTick = min; nextTick <= max * factor; nextTick *= factor) {\n        ticks.push(nextTick);\n      }\n    }\n\n    return ticks;\n  }\n\n  configureAxisMode(axis, format) {\n    axis.tickFormatter = function(val, axis) {\n      if (!kbn.valueFormats[format]) {\n        throw new Error(`Unit '${format}' is not supported`);\n      }\n      return kbn.valueFormats[format](val, axis.tickDecimals, axis.scaledDecimals);\n    };\n  }\n\n  time_format(ticks, min, max) {\n    if (min && max && ticks) {\n      const range = max - min;\n      const secPerTick = range / ticks / 1000;\n      const oneDay = 86400000;\n      const oneYear = 31536000000;\n\n      if (secPerTick <= 45) {\n        return '%H:%M:%S';\n      }\n      if (secPerTick <= 7200 || range <= oneDay) {\n        return '%H:%M';\n      }\n      if (secPerTick <= 80000) {\n        return '%m/%d %H:%M';\n      }\n      if (secPerTick <= 2419200 || range <= oneYear) {\n        return '%m/%d';\n      }\n      return '%Y-%m';\n    }\n\n    return '%H:%M';\n  }\n}\n\n/** @ngInject */\nfunction graphDirective(timeSrv, popoverSrv, contextSrv) {\n  return {\n    restrict: 'A',\n    template: '',\n    link: (scope, elem) => {\n      return new GraphElement(scope, elem, timeSrv);\n    },\n  };\n}\n\ncoreModule.directive('grafanaGraph', graphDirective);\nexport { GraphElement, graphDirective };\n","import angular from 'angular';\nimport _ from 'lodash';\nimport $ from 'jquery';\nimport baron from 'baron';\n\nconst module = angular.module('grafana.directives');\n\nmodule.directive('graphLegend', function(popoverSrv, $timeout) {\n  return {\n    link: function(scope, elem) {\n      let firstRender = true;\n      const ctrl = scope.ctrl;\n      const panel = ctrl.panel;\n      let data;\n      let seriesList;\n      let i;\n      let legendScrollbar;\n      const legendRightDefaultWidth = 10;\n      const legendElem = elem.parent();\n\n      scope.$on('$destroy', function() {\n        destroyScrollbar();\n      });\n\n      ctrl.events.on('render-legend', () => {\n        data = ctrl.seriesList;\n        if (data) {\n          render();\n        }\n        ctrl.events.emit('legend-rendering-complete');\n      });\n\n      function getSeriesIndexForElement(el) {\n        return el.parents('[data-series-index]').data('series-index');\n      }\n\n      function openColorSelector(e) {\n        // if we clicked inside poup container ignore click\n        if ($(e.target).parents('.popover').length) {\n          return;\n        }\n\n        const el = $(e.currentTarget).find('.fa-minus');\n        const index = getSeriesIndexForElement(el);\n        const series = seriesList[index];\n\n        $timeout(function() {\n          popoverSrv.show({\n            element: el[0],\n            position: 'bottom left',\n            targetAttachment: 'top left',\n            template:\n              '<series-color-picker series=\"series\" onToggleAxis=\"toggleAxis\" onColorChange=\"colorSelected\">' +\n              '</series-color-picker>',\n            openOn: 'hover',\n            model: {\n              series: series,\n              toggleAxis: function() {\n                ctrl.toggleAxis(series);\n              },\n              colorSelected: function(color) {\n                ctrl.changeSeriesColor(series, color);\n              },\n            },\n          });\n        });\n      }\n\n      function toggleSeries(e) {\n        const el = $(e.currentTarget);\n        const index = getSeriesIndexForElement(el);\n        const seriesInfo = seriesList[index];\n        const scrollPosition = legendScrollbar.scroller.scrollTop;\n        ctrl.toggleSeries(seriesInfo, e);\n        legendScrollbar.scroller.scrollTop = scrollPosition;\n      }\n\n      function sortLegend(e) {\n        const el = $(e.currentTarget);\n        const stat = el.data('stat');\n\n        if (stat !== panel.legend.sort) {\n          panel.legend.sortDesc = null;\n        }\n\n        // if already sort ascending, disable sorting\n        if (panel.legend.sortDesc === false) {\n          panel.legend.sort = null;\n          panel.legend.sortDesc = null;\n          ctrl.render();\n          return;\n        }\n\n        panel.legend.sortDesc = !panel.legend.sortDesc;\n        panel.legend.sort = stat;\n        ctrl.render();\n      }\n\n      function getTableHeaderHtml(statName) {\n        if (!panel.legend[statName]) {\n          return '';\n        }\n        let html = '<th class=\"pointer\" data-stat=\"' + statName + '\">' + statName;\n\n        if (panel.legend.sort === statName) {\n          const cssClass = panel.legend.sortDesc ? 'fa fa-caret-down' : 'fa fa-caret-up';\n          html += ' <span class=\"' + cssClass + '\"></span>';\n        }\n\n        return html + '</th>';\n      }\n\n      function render() {\n        const legendWidth = legendElem.width();\n        if (!ctrl.panel.legend.show) {\n          elem.empty();\n          firstRender = true;\n          return;\n        }\n\n        if (firstRender) {\n          elem.on('click', '.graph-legend-icon', openColorSelector);\n          elem.on('click', '.graph-legend-alias', toggleSeries);\n          elem.on('click', 'th', sortLegend);\n          firstRender = false;\n        }\n\n        seriesList = data;\n\n        elem.empty();\n\n        // Set min-width if side style and there is a value, otherwise remove the CSS property\n        // Set width so it works with IE11\n        const width: any = panel.legend.rightSide && panel.legend.sideWidth ? panel.legend.sideWidth + 'px' : '';\n        const ieWidth: any = panel.legend.rightSide && panel.legend.sideWidth ? panel.legend.sideWidth - 1 + 'px' : '';\n        legendElem.css('min-width', width);\n        legendElem.css('width', ieWidth);\n\n        elem.toggleClass('graph-legend-table', panel.legend.alignAsTable === true);\n\n        let tableHeaderElem;\n        if (panel.legend.alignAsTable) {\n          let header = '<tr>';\n          header += '<th colspan=\"2\" style=\"text-align:left\"></th>';\n          if (panel.legend.values) {\n            header += getTableHeaderHtml('min');\n            header += getTableHeaderHtml('max');\n            header += getTableHeaderHtml('avg');\n            header += getTableHeaderHtml('current');\n            header += getTableHeaderHtml('total');\n          }\n          header += '</tr>';\n          tableHeaderElem = $(header);\n        }\n\n        if (panel.legend.sort) {\n          seriesList = _.sortBy(seriesList, function(series) {\n            let sort = series.stats[panel.legend.sort];\n            if (sort === null) {\n              sort = -Infinity;\n            }\n            return sort;\n          });\n          if (panel.legend.sortDesc) {\n            seriesList = seriesList.reverse();\n          }\n        }\n\n        // render first time for getting proper legend height\n        if (!panel.legend.rightSide || (panel.legend.rightSide && legendWidth !== legendRightDefaultWidth)) {\n          renderLegendElement(tableHeaderElem);\n          elem.empty();\n        }\n\n        renderLegendElement(tableHeaderElem);\n      }\n\n      function renderSeriesLegendElements() {\n        const seriesElements = [];\n        for (i = 0; i < seriesList.length; i++) {\n          const series = seriesList[i];\n\n          if (series.hideFromLegend(panel.legend)) {\n            continue;\n          }\n\n          let html = '<div class=\"graph-legend-series';\n\n          if (series.yaxis === 2) {\n            html += ' graph-legend-series--right-y';\n          }\n          if (ctrl.hiddenSeries[series.alias]) {\n            html += ' graph-legend-series-hidden';\n          }\n          html += '\" data-series-index=\"' + i + '\">';\n          html += '<div class=\"graph-legend-icon\">';\n          html += '<i class=\"fa fa-minus pointer\" style=\"color:' + series.color + '\"></i>';\n          html += '</div>';\n\n          html +=\n            '<a class=\"graph-legend-alias pointer\" title=\"' + series.aliasEscaped + '\">' + series.aliasEscaped + '</a>';\n\n          if (panel.legend.values) {\n            const avg = series.formatValue(series.stats.avg);\n            const current = series.formatValue(series.stats.current);\n            const min = series.formatValue(series.stats.min);\n            const max = series.formatValue(series.stats.max);\n            const total = series.formatValue(series.stats.total);\n\n            if (panel.legend.min) {\n              html += '<div class=\"graph-legend-value min\">' + min + '</div>';\n            }\n            if (panel.legend.max) {\n              html += '<div class=\"graph-legend-value max\">' + max + '</div>';\n            }\n            if (panel.legend.avg) {\n              html += '<div class=\"graph-legend-value avg\">' + avg + '</div>';\n            }\n            if (panel.legend.current) {\n              html += '<div class=\"graph-legend-value current\">' + current + '</div>';\n            }\n            if (panel.legend.total) {\n              html += '<div class=\"graph-legend-value total\">' + total + '</div>';\n            }\n          }\n\n          html += '</div>';\n          seriesElements.push($(html));\n        }\n        return seriesElements;\n      }\n\n      function renderLegendElement(tableHeaderElem) {\n        const legendWidth = elem.width();\n\n        const seriesElements = renderSeriesLegendElements();\n\n        if (panel.legend.alignAsTable) {\n          const tbodyElem = $('<tbody></tbody>');\n          tbodyElem.append(tableHeaderElem);\n          tbodyElem.append(seriesElements);\n          elem.append(tbodyElem);\n          tbodyElem.wrap('<div class=\"graph-legend-scroll\"></div>');\n        } else {\n          elem.append('<div class=\"graph-legend-scroll\"></div>');\n          elem.find('.graph-legend-scroll').append(seriesElements);\n        }\n\n        if (!panel.legend.rightSide || (panel.legend.rightSide && legendWidth !== legendRightDefaultWidth)) {\n          addScrollbar();\n        } else {\n          destroyScrollbar();\n        }\n      }\n\n      function addScrollbar() {\n        const scrollRootClass = 'baron baron__root';\n        const scrollerClass = 'baron__scroller';\n        const scrollBarHTML = `\n          <div class=\"baron__track\">\n            <div class=\"baron__bar\"></div>\n          </div>\n        `;\n\n        const scrollRoot = elem;\n        const scroller = elem.find('.graph-legend-scroll');\n\n        // clear existing scroll bar track to prevent duplication\n        scrollRoot.find('.baron__track').remove();\n\n        scrollRoot.addClass(scrollRootClass);\n        $(scrollBarHTML).appendTo(scrollRoot);\n        scroller.addClass(scrollerClass);\n\n        const scrollbarParams = {\n          root: scrollRoot[0],\n          scroller: scroller[0],\n          bar: '.baron__bar',\n          track: '.baron__track',\n          barOnCls: '_scrollbar',\n          scrollingCls: '_scrolling',\n        };\n\n        if (!legendScrollbar) {\n          legendScrollbar = baron(scrollbarParams);\n        } else {\n          destroyScrollbar();\n          legendScrollbar = baron(scrollbarParams);\n        }\n\n        // #11830 - compensates for Firefox scrollbar calculation error in the baron framework\n        scroller[0].style.marginRight = '-' + (scroller[0].offsetWidth - scroller[0].clientWidth) + 'px';\n\n        legendScrollbar.scroll();\n      }\n\n      function destroyScrollbar() {\n        if (legendScrollbar) {\n          legendScrollbar.dispose();\n          legendScrollbar = undefined;\n        }\n      }\n    },\n  };\n});\n","import _ from 'lodash';\nimport angular from 'angular';\n\n/** @ngInject */\nexport function SeriesOverridesCtrl($scope, $element, popoverSrv) {\n  $scope.overrideMenu = [];\n  $scope.currentOverrides = [];\n  $scope.override = $scope.override || {};\n\n  $scope.addOverrideOption = function(name, propertyName, values) {\n    const option = {\n      text: name,\n      propertyName: propertyName,\n      index: $scope.overrideMenu.lenght,\n      values: values,\n      submenu: _.map(values, function(value) {\n        return { text: String(value), value: value };\n      }),\n    };\n\n    $scope.overrideMenu.push(option);\n  };\n\n  $scope.setOverride = function(item, subItem) {\n    // handle color overrides\n    if (item.propertyName === 'color') {\n      $scope.openColorSelector($scope.override['color']);\n      return;\n    }\n\n    $scope.override[item.propertyName] = subItem.value;\n\n    // automatically disable lines for this series and the fill below to series\n    // can be removed by the user if they still want lines\n    if (item.propertyName === 'fillBelowTo') {\n      $scope.override['lines'] = false;\n      $scope.ctrl.addSeriesOverride({ alias: subItem.value, lines: false });\n    }\n\n    $scope.updateCurrentOverrides();\n    $scope.ctrl.render();\n  };\n\n  $scope.colorSelected = function(color) {\n    $scope.override['color'] = color;\n    $scope.updateCurrentOverrides();\n    $scope.ctrl.render();\n  };\n\n  $scope.openColorSelector = function(color) {\n    const fakeSeries = { color: color };\n    popoverSrv.show({\n      element: $element.find('.dropdown')[0],\n      position: 'top center',\n      openOn: 'click',\n      template: '<series-color-picker series=\"series\" onColorChange=\"colorSelected\" />',\n      model: {\n        autoClose: true,\n        colorSelected: $scope.colorSelected,\n        series: fakeSeries,\n      },\n      onClose: function() {\n        $scope.ctrl.render();\n      },\n    });\n  };\n\n  $scope.removeOverride = function(option) {\n    delete $scope.override[option.propertyName];\n    $scope.updateCurrentOverrides();\n    $scope.ctrl.refresh();\n  };\n\n  $scope.getSeriesNames = function() {\n    return _.map($scope.ctrl.seriesList, function(series) {\n      return series.alias;\n    });\n  };\n\n  $scope.updateCurrentOverrides = function() {\n    $scope.currentOverrides = [];\n    _.each($scope.overrideMenu, function(option) {\n      const value = $scope.override[option.propertyName];\n      if (_.isUndefined(value)) {\n        return;\n      }\n      $scope.currentOverrides.push({\n        name: option.text,\n        propertyName: option.propertyName,\n        value: String(value),\n      });\n    });\n  };\n\n  $scope.addOverrideOption('条状', 'bars', [true, false]);\n  $scope.addOverrideOption('线条', 'lines', [true, false]);\n  $scope.addOverrideOption('填充线条', 'fill', [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\n  $scope.addOverrideOption('线条宽度', 'linewidth', [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\n  $scope.addOverrideOption('空点模式', 'nullPointMode', ['connected', 'null', 'null as zero']);\n  $scope.addOverrideOption('填满以下', 'fillBelowTo', $scope.getSeriesNames());\n  $scope.addOverrideOption('楼梯线', 'steppedLine', [true, false]);\n  $scope.addOverrideOption('虚线', 'dashes', [true, false]);\n  $scope.addOverrideOption('虚线长度', 'dashLength', [\n    1,\n    2,\n    3,\n    4,\n    5,\n    6,\n    7,\n    8,\n    9,\n    10,\n    11,\n    12,\n    13,\n    14,\n    15,\n    16,\n    17,\n    18,\n    19,\n    20,\n  ]);\n  $scope.addOverrideOption('虚线空间', 'spaceLength', [\n    1,\n    2,\n    3,\n    4,\n    5,\n    6,\n    7,\n    8,\n    9,\n    10,\n    11,\n    12,\n    13,\n    14,\n    15,\n    16,\n    17,\n    18,\n    19,\n    20,\n  ]);\n  $scope.addOverrideOption('点状', 'points', [true, false]);\n  $scope.addOverrideOption('点半径', 'pointradius', [1, 2, 3, 4, 5]);\n  $scope.addOverrideOption('栈式', 'stack', [true, false, 'A', 'B', 'C', 'D']);\n  $scope.addOverrideOption('颜色', 'color', ['change']);\n  $scope.addOverrideOption('Y-轴', 'yaxis', [1, 2]);\n  $scope.addOverrideOption('Z-索引', 'zindex', [-3, -2, -1, 0, 1, 2, 3]);\n  $scope.addOverrideOption('转换', 'transform', ['negative-Y']);\n  $scope.addOverrideOption('图例', 'legend', [true, false]);\n  $scope.addOverrideOption('提示文本框中隐藏', 'hideTooltip', [true, false]);\n  $scope.updateCurrentOverrides();\n}\n\nangular.module('grafana.controllers').controller('SeriesOverridesCtrl', SeriesOverridesCtrl);\n","import coreModule from 'app/core/core_module';\n\nexport class ThresholdFormCtrl {\n  panelCtrl: any;\n  panel: any;\n  disabled: boolean;\n\n  /** @ngInject */\n  constructor($scope) {\n    this.panel = this.panelCtrl.panel;\n\n    if (this.panel.alert) {\n      this.disabled = true;\n    }\n\n    const unbindDestroy = $scope.$on('$destroy', () => {\n      this.panelCtrl.editingThresholds = false;\n      this.panelCtrl.render();\n      unbindDestroy();\n    });\n\n    this.panelCtrl.editingThresholds = true;\n  }\n\n  addThreshold() {\n    this.panel.thresholds.push({\n      value: undefined,\n      colorMode: 'critical',\n      op: 'gt',\n      fill: true,\n      line: true,\n      yaxis: 'left',\n    });\n    this.panelCtrl.render();\n  }\n\n  removeThreshold(index) {\n    this.panel.thresholds.splice(index, 1);\n    this.panelCtrl.render();\n  }\n\n  render() {\n    this.panelCtrl.render();\n  }\n\n  onFillColorChange(index) {\n    return newColor => {\n      this.panel.thresholds[index].fillColor = newColor;\n      this.render();\n    };\n  }\n\n  onLineColorChange(index) {\n    return newColor => {\n      this.panel.thresholds[index].lineColor = newColor;\n      this.render();\n    };\n  }\n}\n\nconst template = `\n<div class=\"gf-form-group\">\n  <h5>阈值</h5>\n  <p class=\"muted\" ng-show=\"ctrl.disabled\">\n    <strong>已禁用</strong>查看阈值选项\n    查看报警选项卡更新阈值。 <br>\n    要重新启用阈值，必须从该面板中删除报警规则。\n  </p>\n  <div ng-class=\"{'thresholds-form-disabled': ctrl.disabled}\">\n    <div class=\"gf-form-inline\" ng-repeat=\"threshold in ctrl.panel.thresholds\">\n      <div class=\"gf-form\">\n        <label class=\"gf-form-label\">T{{$index+1}}</label>\n      </div>\n\n      <div class=\"gf-form\">\n        <div class=\"gf-form-select-wrapper\">\n          <select class=\"gf-form-input\" ng-model=\"threshold.op\"\n                  ng-options=\"f for f in ['gt', 'lt']\" ng-change=\"ctrl.render()\" ng-disabled=\"ctrl.disabled\"></select>\n        </div>\n        <input type=\"number\" ng-model=\"threshold.value\" class=\"gf-form-input width-8\"\n               ng-change=\"ctrl.render()\" placeholder=\"值\" ng-disabled=\"ctrl.disabled\">\n      </div>\n\n      <div class=\"gf-form\">\n        <label class=\"gf-form-label\">颜色</label>\n        <div class=\"gf-form-select-wrapper\">\n          <select class=\"gf-form-input\" ng-model=\"threshold.colorMode\"\n                  ng-options=\"f for f in ['custom', 'critical', 'warning', 'ok']\" ng-change=\"ctrl.render()\" ng-disabled=\"ctrl.disabled\">\n          </select>\n        </div>\n      </div>\n\n      <gf-form-switch class=\"gf-form\" label=\"Fill\" checked=\"threshold.fill\"\n                      on-change=\"ctrl.render()\" ng-disabled=\"ctrl.disabled\"></gf-form-switch>\n\n      <div class=\"gf-form\" ng-if=\"threshold.fill && threshold.colorMode === 'custom'\">\n        <label class=\"gf-form-label\">填充颜色</label>\n        <span class=\"gf-form-label\">\n          <color-picker color=\"threshold.fillColor\" onChange=\"ctrl.onFillColorChange($index)\"></color-picker>\n        </span>\n      </div>\n\n      <gf-form-switch class=\"gf-form\" label=\"线段\" checked=\"threshold.line\"\n                      on-change=\"ctrl.render()\" ng-disabled=\"ctrl.disabled\"></gf-form-switch>\n\n      <div class=\"gf-form\" ng-if=\"threshold.line && threshold.colorMode === 'custom'\">\n        <label class=\"gf-form-label\">线段颜色</label>\n        <span class=\"gf-form-label\">\n          <color-picker color=\"threshold.lineColor\" onChange=\"ctrl.onLineColorChange($index)\"></color-picker>\n        </span>\n      </div>\n\n      <div class=\"gf-form\">\n        <label class=\"gf-form-label\">Y-轴</label>\n        <div class=\"gf-form-select-wrapper\">\n          <select class=\"gf-form-input\" ng-model=\"threshold.yaxis\"\n                  ng-init=\"threshold.yaxis = threshold.yaxis === 'left' || threshold.yaxis === 'right' ? threshold.yaxis : 'left'\"\n                  ng-options=\"f for f in ['left', 'right']\" ng-change=\"ctrl.render()\" ng-disabled=\"ctrl.disabled\">\n          </select>\n        </div>\n      </div>\n\n      <div class=\"gf-form\">\n        <label class=\"gf-form-label\">\n          <a class=\"pointer\" ng-click=\"ctrl.removeThreshold($index)\" ng-disabled=\"ctrl.disabled\">\n            <i class=\"fa fa-trash\"></i>\n          </a>\n        </label>\n      </div>\n    </div>\n\n    <div class=\"gf-form-button-row\">\n      <button class=\"btn btn-inverse\" ng-click=\"ctrl.addThreshold()\" ng-disabled=\"ctrl.disabled\">\n        <i class=\"fa fa-plus\"></i>&nbsp;Add Threshold\n      </button>\n    </div>\n  </div>\n</div>\n`;\n\ncoreModule.directive('graphThresholdForm', function() {\n  return {\n    restrict: 'E',\n    template: template,\n    controller: ThresholdFormCtrl,\n    bindToController: true,\n    controllerAs: 'ctrl',\n    scope: {\n      panelCtrl: '=',\n    },\n  };\n});\n","const template = `\n<div class=\"graph-panel\" ng-class=\"{'graph-panel--legend-right': ctrl.panel.legend.rightSide}\">\n  <div class=\"graph-panel__chart\" grafana-graph ng-dblclick=\"ctrl.zoomOut()\">\n  </div>\n\n  <div class=\"graph-legend\">\n    <div class=\"graph-legend-content\" graph-legend></div>\n  </div>\n</div>\n`;\n\nexport default template;\n","import _ from 'lodash';\nimport TimeSeries from 'app/core/time_series2';\nimport colors from 'app/core/utils/colors';\n\nexport class DataProcessor {\n  constructor(private panel) {}\n\n  getSeriesList(options) {\n    if (!options.dataList || options.dataList.length === 0) {\n      return [];\n    }\n\n    // auto detect xaxis mode\n    let firstItem;\n    if (options.dataList && options.dataList.length > 0) {\n      firstItem = options.dataList[0];\n      const autoDetectMode = this.getAutoDetectXAxisMode(firstItem);\n      if (this.panel.xaxis.mode !== autoDetectMode) {\n        this.panel.xaxis.mode = autoDetectMode;\n        this.setPanelDefaultsForNewXAxisMode();\n      }\n    }\n\n    switch (this.panel.xaxis.mode) {\n      case 'series':\n      case 'time': {\n        return options.dataList.map((item, index) => {\n          return this.timeSeriesHandler(item, index, options);\n        });\n      }\n      case 'histogram': {\n        let histogramDataList;\n        if (this.panel.stack) {\n          histogramDataList = options.dataList;\n        } else {\n          histogramDataList = [\n            {\n              target: 'count',\n              datapoints: _.concat([], _.flatten(_.map(options.dataList, 'datapoints'))),\n            },\n          ];\n        }\n        return histogramDataList.map((item, index) => {\n          return this.timeSeriesHandler(item, index, options);\n        });\n      }\n      case 'field': {\n        return this.customHandler(firstItem);\n      }\n    }\n  }\n\n  getAutoDetectXAxisMode(firstItem) {\n    switch (firstItem.type) {\n      case 'docs':\n        return 'field';\n      case 'table':\n        return 'field';\n      default: {\n        if (this.panel.xaxis.mode === 'series') {\n          return 'series';\n        }\n        if (this.panel.xaxis.mode === 'histogram') {\n          return 'histogram';\n        }\n        return 'time';\n      }\n    }\n  }\n\n  setPanelDefaultsForNewXAxisMode() {\n    switch (this.panel.xaxis.mode) {\n      case 'time': {\n        this.panel.bars = false;\n        this.panel.lines = true;\n        this.panel.points = false;\n        this.panel.legend.show = true;\n        this.panel.tooltip.shared = true;\n        this.panel.xaxis.values = [];\n        break;\n      }\n      case 'series': {\n        this.panel.bars = true;\n        this.panel.lines = false;\n        this.panel.points = false;\n        this.panel.stack = false;\n        this.panel.legend.show = false;\n        this.panel.tooltip.shared = false;\n        this.panel.xaxis.values = ['total'];\n        break;\n      }\n      case 'histogram': {\n        this.panel.bars = true;\n        this.panel.lines = false;\n        this.panel.points = false;\n        this.panel.stack = false;\n        this.panel.legend.show = false;\n        this.panel.tooltip.shared = false;\n        break;\n      }\n    }\n  }\n\n  timeSeriesHandler(seriesData, index, options) {\n    const datapoints = seriesData.datapoints || [];\n    const alias = seriesData.target;\n\n    const colorIndex = index % colors.length;\n    const color = this.panel.aliasColors[alias] || colors[colorIndex];\n\n    const series = new TimeSeries({\n      datapoints: datapoints,\n      alias: alias,\n      color: color,\n      unit: seriesData.unit,\n    });\n\n    if (datapoints && datapoints.length > 0) {\n      const last = datapoints[datapoints.length - 1][1];\n      const from = options.range.from;\n      if (last - from < -10000) {\n        series.isOutsideRange = true;\n      }\n    }\n\n    return series;\n  }\n\n  customHandler(dataItem) {\n    const nameField = this.panel.xaxis.name;\n    if (!nameField) {\n      throw {\n        message: 'No field name specified to use for x-axis, check your axes settings',\n      };\n    }\n    return [];\n  }\n\n  validateXAxisSeriesValue() {\n    switch (this.panel.xaxis.mode) {\n      case 'series': {\n        if (this.panel.xaxis.values.length === 0) {\n          this.panel.xaxis.values = ['total'];\n          return;\n        }\n\n        const validOptions = this.getXAxisValueOptions({});\n        const found = _.find(validOptions, { value: this.panel.xaxis.values[0] });\n        if (!found) {\n          this.panel.xaxis.values = ['total'];\n        }\n        return;\n      }\n    }\n  }\n\n  getDataFieldNames(dataList, onlyNumbers) {\n    if (dataList.length === 0) {\n      return [];\n    }\n\n    const fields = [];\n    const firstItem = dataList[0];\n    const fieldParts = [];\n\n    function getPropertiesRecursive(obj) {\n      _.forEach(obj, (value, key) => {\n        if (_.isObject(value)) {\n          fieldParts.push(key);\n          getPropertiesRecursive(value);\n        } else {\n          if (!onlyNumbers || _.isNumber(value)) {\n            const field = fieldParts.concat(key).join('.');\n            fields.push(field);\n          }\n        }\n      });\n      fieldParts.pop();\n    }\n\n    if (firstItem.type === 'docs') {\n      if (firstItem.datapoints.length === 0) {\n        return [];\n      }\n      getPropertiesRecursive(firstItem.datapoints[0]);\n    }\n\n    return fields;\n  }\n\n  getXAxisValueOptions(options) {\n    switch (this.panel.xaxis.mode) {\n      case 'series': {\n        return [\n          { text: 'Avg', value: 'avg' },\n          { text: 'Min', value: 'min' },\n          { text: 'Max', value: 'max' },\n          { text: 'Total', value: 'total' },\n          { text: 'Count', value: 'count' },\n        ];\n      }\n    }\n\n    return [];\n  }\n\n  pluckDeep(obj: any, property: string) {\n    const propertyParts = property.split('.');\n    let value = obj;\n    for (let i = 0; i < propertyParts.length; ++i) {\n      if (value[propertyParts[i]]) {\n        value = value[propertyParts[i]];\n      } else {\n        return undefined;\n      }\n    }\n    return value;\n  }\n}\n","import './graph';\nimport './legend';\nimport './series_overrides_ctrl';\nimport './thresholds_form';\n\nimport template from './template';\nimport _ from 'lodash';\nimport config from 'app/core/config';\nimport { MetricsPanelCtrl, alertTab } from 'app/plugins/sdk';\nimport { DataProcessor } from './data_processor';\nimport { axesEditorComponent } from './axes_editor';\n\nclass GraphCtrl extends MetricsPanelCtrl {\n  static template = template;\n\n  renderError: boolean;\n  hiddenSeries: any = {};\n  seriesList: any = [];\n  dataList: any = [];\n  annotations: any = [];\n  alertState: any;\n\n  annotationsPromise: any;\n  dataWarning: any;\n  colors: any = [];\n  subTabIndex: number;\n  processor: DataProcessor;\n\n  panelDefaults = {\n    // datasource name, null = default datasource\n    datasource: null,\n    // sets client side (flot) or native graphite png renderer (png)\n    renderer: 'flot',\n    yaxes: [\n      {\n        label: null,\n        show: true,\n        logBase: 1,\n        min: null,\n        max: null,\n        format: 'short',\n      },\n      {\n        label: null,\n        show: true,\n        logBase: 1,\n        min: null,\n        max: null,\n        format: 'short',\n      },\n    ],\n    xaxis: {\n      show: true,\n      mode: 'time',\n      name: null,\n      values: [],\n      buckets: null,\n    },\n    yaxis: {\n      align: false,\n      alignLevel: null,\n    },\n    // show/hide lines\n    lines: true,\n    // fill factor\n    fill: 1,\n    // line width in pixels\n    linewidth: 1,\n    // show/hide dashed line\n    dashes: false,\n    // length of a dash\n    dashLength: 10,\n    // length of space between two dashes\n    spaceLength: 10,\n    // show hide points\n    points: false,\n    // point radius in pixels\n    pointradius: 5,\n    // show hide bars\n    bars: false,\n    // enable/disable stacking\n    stack: false,\n    // stack percentage mode\n    percentage: false,\n    // legend options\n    legend: {\n      show: true, // disable/enable legend\n      values: false, // disable/enable legend values\n      min: false,\n      max: false,\n      current: false,\n      total: false,\n      avg: false,\n    },\n    // how null points should be handled\n    nullPointMode: 'null',\n    // staircase line mode\n    steppedLine: false,\n    // tooltip options\n    tooltip: {\n      value_type: 'individual',\n      shared: true,\n      sort: 0,\n    },\n    // time overrides\n    timeFrom: null,\n    timeShift: null,\n    // metric queries\n    targets: [{}],\n    // series color overrides\n    aliasColors: {},\n    // other style overrides\n    seriesOverrides: [],\n    thresholds: [],\n  };\n\n  /** @ngInject */\n  constructor($scope, $injector, private annotationsSrv) {\n    super($scope, $injector);\n\n    _.defaults(this.panel, this.panelDefaults);\n    _.defaults(this.panel.tooltip, this.panelDefaults.tooltip);\n    _.defaults(this.panel.legend, this.panelDefaults.legend);\n    _.defaults(this.panel.xaxis, this.panelDefaults.xaxis);\n\n    this.processor = new DataProcessor(this.panel);\n\n    this.events.on('render', this.onRender.bind(this));\n    this.events.on('data-received', this.onDataReceived.bind(this));\n    this.events.on('data-error', this.onDataError.bind(this));\n    this.events.on('data-snapshot-load', this.onDataSnapshotLoad.bind(this));\n    this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n    this.events.on('init-panel-actions', this.onInitPanelActions.bind(this));\n  }\n\n  onInitEditMode() {\n    this.addEditorTab('坐标轴', axesEditorComponent, 2);\n    this.addEditorTab('图例', 'public/app/plugins/panel/graph/tab_legend.html', 3);\n    this.addEditorTab('展示', 'public/app/plugins/panel/graph/tab_display.html', 4);\n\n    if (config.alertingEnabled) {\n      this.addEditorTab('报警', alertTab, 5);\n    }\n\n    this.subTabIndex = 0;\n  }\n\n  onInitPanelActions(actions) {\n    actions.push({ text: '导出 CSV', click: 'ctrl.exportCsv()' });\n    actions.push({ text: '启用图例', click: 'ctrl.toggleLegend()' });\n  }\n\n  issueQueries(datasource) {\n    this.annotationsPromise = this.annotationsSrv.getAnnotations({\n      dashboard: this.dashboard,\n      panel: this.panel,\n      range: this.range,\n    });\n    return super.issueQueries(datasource);\n  }\n\n  zoomOut(evt) {\n    this.publishAppEvent('zoom-out', 2);\n  }\n\n  onDataSnapshotLoad(snapshotData) {\n    this.annotationsPromise = this.annotationsSrv.getAnnotations({\n      dashboard: this.dashboard,\n      panel: this.panel,\n      range: this.range,\n    });\n    this.onDataReceived(snapshotData);\n  }\n\n  onDataError(err) {\n    this.seriesList = [];\n    this.annotations = [];\n    this.render([]);\n  }\n\n  onDataReceived(dataList) {\n    this.dataList = dataList;\n    this.seriesList = this.processor.getSeriesList({\n      dataList: dataList,\n      range: this.range,\n    });\n\n    this.dataWarning = null;\n    const datapointsCount = this.seriesList.reduce((prev, series) => {\n      return prev + series.datapoints.length;\n    }, 0);\n\n    if (datapointsCount === 0) {\n      this.dataWarning = {\n        title: '暂无数据点',\n        tip: '数据查询中无数据点返回',\n      };\n    } else {\n      for (const series of this.seriesList) {\n        if (series.isOutsideRange) {\n          this.dataWarning = {\n            title: '数据点不在时间范围内',\n            tip: '由时区失配或时间过滤设置不当引起',\n          };\n          break;\n        }\n      }\n    }\n\n    this.annotationsPromise.then(\n      result => {\n        this.loading = false;\n        this.alertState = result.alertState;\n        this.annotations = result.annotations;\n        this.render(this.seriesList);\n      },\n      () => {\n        this.loading = false;\n        this.render(this.seriesList);\n      }\n    );\n  }\n\n  onRender() {\n    if (!this.seriesList) {\n      return;\n    }\n\n    for (const series of this.seriesList) {\n      series.applySeriesOverrides(this.panel.seriesOverrides);\n\n      if (series.unit) {\n        this.panel.yaxes[series.yaxis - 1].format = series.unit;\n      }\n    }\n  }\n\n  changeSeriesColor(series, color) {\n    series.setColor(color);\n    this.panel.aliasColors[series.alias] = series.color;\n    this.render();\n  }\n\n  toggleSeries(serie, event) {\n    if (event.ctrlKey || event.metaKey || event.shiftKey) {\n      if (this.hiddenSeries[serie.alias]) {\n        delete this.hiddenSeries[serie.alias];\n      } else {\n        this.hiddenSeries[serie.alias] = true;\n      }\n    } else {\n      this.toggleSeriesExclusiveMode(serie);\n    }\n    this.render();\n  }\n\n  toggleSeriesExclusiveMode(serie) {\n    const hidden = this.hiddenSeries;\n\n    if (hidden[serie.alias]) {\n      delete hidden[serie.alias];\n    }\n\n    // check if every other series is hidden\n    const alreadyExclusive = _.every(this.seriesList, value => {\n      if (value.alias === serie.alias) {\n        return true;\n      }\n\n      return hidden[value.alias];\n    });\n\n    if (alreadyExclusive) {\n      // remove all hidden series\n      _.each(this.seriesList, value => {\n        delete this.hiddenSeries[value.alias];\n      });\n    } else {\n      // hide all but this serie\n      _.each(this.seriesList, value => {\n        if (value.alias === serie.alias) {\n          return;\n        }\n\n        this.hiddenSeries[value.alias] = true;\n      });\n    }\n  }\n\n  toggleAxis(info) {\n    let override = _.find(this.panel.seriesOverrides, { alias: info.alias });\n    if (!override) {\n      override = { alias: info.alias };\n      this.panel.seriesOverrides.push(override);\n    }\n    info.yaxis = override.yaxis = info.yaxis === 2 ? 1 : 2;\n    this.render();\n  }\n\n  addSeriesOverride(override) {\n    this.panel.seriesOverrides.push(override || {});\n  }\n\n  removeSeriesOverride(override) {\n    this.panel.seriesOverrides = _.without(this.panel.seriesOverrides, override);\n    this.render();\n  }\n\n  toggleLegend() {\n    this.panel.legend.show = !this.panel.legend.show;\n    this.refresh();\n  }\n\n  legendValuesOptionChanged() {\n    const legend = this.panel.legend;\n    legend.values = legend.min || legend.max || legend.avg || legend.current || legend.total;\n    this.render();\n  }\n\n  exportCsv() {\n    const scope = this.$scope.$new(true);\n    scope.seriesList = this.seriesList;\n    this.publishAppEvent('show-modal', {\n      templateHtml: '<export-data-modal data=\"seriesList\"></export-data-modal>',\n      scope,\n      modalClass: 'modal--narrow',\n    });\n  }\n}\n\nexport { GraphCtrl, GraphCtrl as PanelCtrl };\n","import kbn from 'app/core/utils/kbn';\n\nexport class AxesEditorCtrl {\n  panel: any;\n  panelCtrl: any;\n  unitFormats: any;\n  logScales: any;\n  xAxisModes: any;\n  xAxisStatOptions: any;\n  xNameSegment: any;\n\n  /** @ngInject */\n  constructor(private $scope, private $q) {\n    this.panelCtrl = $scope.ctrl;\n    this.panel = this.panelCtrl.panel;\n    this.$scope.ctrl = this;\n\n    this.unitFormats = kbn.getUnitFormats();\n\n    this.logScales = {\n      linear: 1,\n      'log (base 2)': 2,\n      'log (base 10)': 10,\n      'log (base 32)': 32,\n      'log (base 1024)': 1024,\n    };\n\n    this.xAxisModes = {\n      Time: 'time',\n      Series: 'series',\n      Histogram: 'histogram',\n      // 'Data field': 'field',\n    };\n\n    this.xAxisStatOptions = [\n      { text: 'Avg', value: 'avg' },\n      { text: 'Min', value: 'min' },\n      { text: 'Max', value: 'max' },\n      { text: 'Total', value: 'total' },\n      { text: 'Count', value: 'count' },\n      { text: 'Current', value: 'current' },\n    ];\n\n    if (this.panel.xaxis.mode === 'custom') {\n      if (!this.panel.xaxis.name) {\n        this.panel.xaxis.name = 'specify field';\n      }\n    }\n  }\n\n  setUnitFormat(axis, subItem) {\n    axis.format = subItem.value;\n    this.panelCtrl.render();\n  }\n\n  render() {\n    this.panelCtrl.render();\n  }\n\n  xAxisModeChanged() {\n    this.panelCtrl.processor.setPanelDefaultsForNewXAxisMode();\n    this.panelCtrl.onDataReceived(this.panelCtrl.dataList);\n  }\n\n  xAxisValueChanged() {\n    this.panelCtrl.onDataReceived(this.panelCtrl.dataList);\n  }\n\n  getDataFieldNames(onlyNumbers) {\n    const props = this.panelCtrl.processor.getDataFieldNames(this.panelCtrl.dataList, onlyNumbers);\n    const items = props.map(prop => {\n      return { text: prop, value: prop };\n    });\n\n    return this.$q.when(items);\n  }\n}\n\n/** @ngInject */\nexport function axesEditorComponent() {\n  'use strict';\n  return {\n    restrict: 'E',\n    scope: true,\n    templateUrl: 'public/app/plugins/panel/graph/axes_editor.html',\n    controller: AxesEditorCtrl,\n  };\n}\n","import _ from 'lodash';\nimport { PanelCtrl } from 'app/plugins/sdk';\nimport impressionSrv from 'app/core/services/impression_srv';\n\nclass DashListCtrl extends PanelCtrl {\n  static templateUrl = 'module.html';\n  static scrollable = true;\n\n  groups: any[];\n  modes: any[];\n\n  panelDefaults = {\n    query: '',\n    limit: 10,\n    tags: [],\n    recent: false,\n    search: false,\n    starred: true,\n    headings: true,\n    folderId: null,\n  };\n\n  /** @ngInject */\n  constructor($scope, $injector, private backendSrv, private dashboardSrv) {\n    super($scope, $injector);\n    _.defaults(this.panel, this.panelDefaults);\n\n    if (this.panel.tag) {\n      this.panel.tags = [this.panel.tag];\n      delete this.panel.tag;\n    }\n\n    this.events.on('refresh', this.onRefresh.bind(this));\n    this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n\n    this.groups = [\n      { list: [], show: false, header: '收藏的仪表盘' },\n      { list: [], show: false, header: '最近查看的仪表盘' },\n      { list: [], show: false, header: '搜索' },\n    ];\n\n    // update capability\n    if (this.panel.mode) {\n      if (this.panel.mode === 'starred') {\n        this.panel.starred = true;\n        this.panel.headings = false;\n      }\n      if (this.panel.mode === 'recently viewed') {\n        this.panel.recent = true;\n        this.panel.starred = false;\n        this.panel.headings = false;\n      }\n      if (this.panel.mode === 'search') {\n        this.panel.search = true;\n        this.panel.starred = false;\n        this.panel.headings = false;\n      }\n      delete this.panel.mode;\n    }\n  }\n\n  onInitEditMode() {\n    this.editorTabIndex = 1;\n    this.modes = ['starred', 'search', 'recently viewed'];\n    this.addEditorTab('选项', 'public/app/plugins/panel/dashlist/editor.html');\n  }\n\n  onRefresh() {\n    const promises = [];\n\n    promises.push(this.getRecentDashboards());\n    promises.push(this.getStarred());\n    promises.push(this.getSearch());\n\n    return Promise.all(promises).then(this.renderingCompleted.bind(this));\n  }\n\n  getSearch() {\n    this.groups[2].show = this.panel.search;\n    if (!this.panel.search) {\n      return Promise.resolve();\n    }\n\n    const params = {\n      limit: this.panel.limit,\n      query: this.panel.query,\n      tag: this.panel.tags,\n      folderIds: this.panel.folderId,\n      type: 'dash-db',\n    };\n\n    return this.backendSrv.search(params).then(result => {\n      this.groups[2].list = result;\n    });\n  }\n\n  getStarred() {\n    this.groups[0].show = this.panel.starred;\n    if (!this.panel.starred) {\n      return Promise.resolve();\n    }\n\n    const params = { limit: this.panel.limit, starred: 'true' };\n    return this.backendSrv.search(params).then(result => {\n      this.groups[0].list = result;\n    });\n  }\n\n  starDashboard(dash, evt) {\n    this.dashboardSrv.starDashboard(dash.id, dash.isStarred).then(newState => {\n      dash.isStarred = newState;\n    });\n\n    if (evt) {\n      evt.stopPropagation();\n      evt.preventDefault();\n    }\n  }\n\n  getRecentDashboards() {\n    this.groups[1].show = this.panel.recent;\n    if (!this.panel.recent) {\n      return Promise.resolve();\n    }\n\n    const dashIds = _.take(impressionSrv.getDashboardOpened(), this.panel.limit);\n    return this.backendSrv.search({ dashboardIds: dashIds, limit: this.panel.limit }).then(result => {\n      this.groups[1].list = dashIds\n        .map(orderId => {\n          return _.find(result, dashboard => {\n            return dashboard.id === orderId;\n          });\n        })\n        .filter(el => {\n          return el !== undefined;\n        });\n    });\n  }\n\n  onFolderChange(folder: any) {\n    this.panel.folderId = folder.id;\n    this.refresh();\n  }\n}\n\nexport { DashListCtrl, DashListCtrl as PanelCtrl };\n","import _ from 'lodash';\nimport { PanelCtrl } from '../../../features/panel/panel_ctrl';\n\nclass PluginListCtrl extends PanelCtrl {\n  static templateUrl = 'module.html';\n  static scrollable = true;\n\n  pluginList: any[];\n  viewModel: any;\n\n  // Set and populate defaults\n  panelDefaults = {};\n\n  /** @ngInject */\n  constructor($scope, $injector, private backendSrv) {\n    super($scope, $injector);\n\n    _.defaults(this.panel, this.panelDefaults);\n\n    this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n    this.pluginList = [];\n    this.viewModel = [\n      { header: '已安装应用', list: [], type: 'app' },\n      { header: '已安装插件', list: [], type: 'panel' },\n      { header: '已安装数据源', list: [], type: 'datasource' },\n    ];\n\n    this.update();\n  }\n\n  onInitEditMode() {\n    this.editorTabIndex = 1;\n    this.addEditorTab('Options', 'public/app/plugins/panel/pluginlist/editor.html');\n  }\n\n  gotoPlugin(plugin, evt) {\n    if (evt) {\n      evt.stopPropagation();\n    }\n    this.$location.url(`plugins/${plugin.id}/edit`);\n  }\n\n  updateAvailable(plugin, $event) {\n    $event.stopPropagation();\n    $event.preventDefault();\n\n    const modalScope = this.$scope.$new(true);\n    modalScope.plugin = plugin;\n\n    this.publishAppEvent('show-modal', {\n      src: 'public/app/features/plugins/partials/update_instructions.html',\n      scope: modalScope,\n    });\n  }\n\n  update() {\n    this.backendSrv.get('api/plugins', { embedded: 0, core: 0 }).then(plugins => {\n      this.pluginList = plugins;\n      this.viewModel[0].list = _.filter(plugins, { type: 'app' });\n      this.viewModel[1].list = _.filter(plugins, { type: 'panel' });\n      this.viewModel[2].list = _.filter(plugins, { type: 'datasource' });\n\n      for (const plugin of this.pluginList) {\n        if (plugin.hasUpdate) {\n          plugin.state = 'has-update';\n        } else if (!plugin.enabled) {\n          plugin.state = 'not-enabled';\n        }\n      }\n    });\n  }\n}\n\nexport { PluginListCtrl, PluginListCtrl as PanelCtrl };\n","import _ from 'lodash';\nimport moment from 'moment';\nimport alertDef from '../../../features/alerting/alert_def';\nimport { PanelCtrl } from 'app/plugins/sdk';\n\nimport * as dateMath from 'app/core/utils/datemath';\n\nclass AlertListPanel extends PanelCtrl {\n  static templateUrl = 'module.html';\n  static scrollable = true;\n\n  showOptions = [{ text: '当前状态', value: 'current' }, { text: '近期状态改变', value: 'changes' }];\n\n  sortOrderOptions = [\n    { text: '字母序 (升序)', value: 1 },\n    { text: '字母序 (降序)', value: 2 },\n    { text: '重要因子', value: 3 },\n  ];\n\n  stateFilter: any = {};\n  currentAlerts: any = [];\n  alertHistory: any = [];\n  noAlertsMessage: string;\n\n  // Set and populate defaults\n  panelDefaults = {\n    show: 'current',\n    limit: 10,\n    stateFilter: [],\n    onlyAlertsOnDashboard: false,\n    sortOrder: 1,\n    dashboardFilter: '',\n    nameFilter: '',\n    folderId: null,\n  };\n\n  /** @ngInject */\n  constructor($scope, $injector, private backendSrv) {\n    super($scope, $injector);\n    _.defaults(this.panel, this.panelDefaults);\n\n    this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n    this.events.on('refresh', this.onRefresh.bind(this));\n\n    for (const key in this.panel.stateFilter) {\n      this.stateFilter[this.panel.stateFilter[key]] = true;\n    }\n  }\n\n  sortResult(alerts) {\n    if (this.panel.sortOrder === 3) {\n      return _.sortBy(alerts, a => {\n        return alertDef.alertStateSortScore[a.state];\n      });\n    }\n\n    const result = _.sortBy(alerts, a => {\n      return a.name.toLowerCase();\n    });\n    if (this.panel.sortOrder === 2) {\n      result.reverse();\n    }\n\n    return result;\n  }\n\n  updateStateFilter() {\n    const result = [];\n\n    for (const key in this.stateFilter) {\n      if (this.stateFilter[key]) {\n        result.push(key);\n      }\n    }\n\n    this.panel.stateFilter = result;\n    this.onRefresh();\n  }\n\n  onRefresh() {\n    let getAlertsPromise;\n\n    if (this.panel.show === 'current') {\n      getAlertsPromise = this.getCurrentAlertState();\n    }\n\n    if (this.panel.show === 'changes') {\n      getAlertsPromise = this.getStateChanges();\n    }\n\n    getAlertsPromise.then(() => {\n      this.renderingCompleted();\n    });\n  }\n\n  onFolderChange(folder: any) {\n    this.panel.folderId = folder.id;\n    this.refresh();\n  }\n\n  getStateChanges() {\n    const params: any = {\n      limit: this.panel.limit,\n      type: 'alert',\n      newState: this.panel.stateFilter,\n    };\n\n    if (this.panel.onlyAlertsOnDashboard) {\n      params.dashboardId = this.dashboard.id;\n    }\n\n    params.from = dateMath.parse(this.dashboard.time.from).unix() * 1000;\n    params.to = dateMath.parse(this.dashboard.time.to).unix() * 1000;\n\n    return this.backendSrv.get(`/api/annotations`, params).then(res => {\n      this.alertHistory = _.map(res, al => {\n        al.time = this.dashboard.formatDate(al.time, 'MMM D, YYYY HH:mm:ss');\n        al.stateModel = alertDef.getStateDisplayModel(al.newState);\n        al.info = alertDef.getAlertAnnotationInfo(al);\n        return al;\n      });\n\n      this.noAlertsMessage = this.alertHistory.length === 0 ? '近期暂无报警状态变更' : '';\n\n      return this.alertHistory;\n    });\n  }\n\n  getCurrentAlertState() {\n    const params: any = {\n      state: this.panel.stateFilter,\n    };\n\n    if (this.panel.nameFilter) {\n      params.query = this.panel.nameFilter;\n    }\n\n    if (this.panel.folderId >= 0) {\n      params.folderId = this.panel.folderId;\n    }\n\n    if (this.panel.dashboardFilter) {\n      params.dashboardQuery = this.panel.dashboardFilter;\n    }\n\n    if (this.panel.onlyAlertsOnDashboard) {\n      params.dashboardId = this.dashboard.id;\n    }\n\n    if (this.panel.dashboardTags) {\n      params.dashboardTag = this.panel.dashboardTags;\n    }\n\n    return this.backendSrv.get(`/api/alerts`, params).then(res => {\n      this.currentAlerts = this.sortResult(\n        _.map(res, al => {\n          al.stateModel = alertDef.getStateDisplayModel(al.state);\n          al.newStateDateAgo = moment(al.newStateDate)\n            .locale('en')\n            .fromNow(true);\n          return al;\n        })\n      );\n      if (this.currentAlerts.length > this.panel.limit) {\n        this.currentAlerts = this.currentAlerts.slice(0, this.panel.limit);\n      }\n      this.noAlertsMessage = this.currentAlerts.length === 0 ? '没有警报' : '';\n\n      return this.currentAlerts;\n    });\n  }\n\n  onInitEditMode() {\n    this.addEditorTab('选项', 'public/app/plugins/panel/alertlist/editor.html');\n  }\n}\n\nexport { AlertListPanel, AlertListPanel as PanelCtrl };\n","import * as d3 from 'd3';\nimport * as d3ScaleChromatic from 'd3-scale-chromatic';\n\nexport function getColorScale(colorScheme: any, lightTheme: boolean, maxValue: number, minValue = 0): (d: any) => any {\n  const colorInterpolator = d3ScaleChromatic[colorScheme.value];\n  const colorScaleInverted = colorScheme.invert === 'always' || colorScheme.invert === (lightTheme ? 'light' : 'dark');\n\n  const start = colorScaleInverted ? maxValue : minValue;\n  const end = colorScaleInverted ? minValue : maxValue;\n\n  return d3.scaleSequential(colorInterpolator).domain([start, end]);\n}\n\nexport function getOpacityScale(options, maxValue, minValue = 0) {\n  let legendOpacityScale;\n  if (options.colorScale === 'linear') {\n    legendOpacityScale = d3\n      .scaleLinear()\n      .domain([minValue, maxValue])\n      .range([0, 1]);\n  } else if (options.colorScale === 'sqrt') {\n    legendOpacityScale = d3\n      .scalePow()\n      .exponent(options.exponent)\n      .domain([minValue, maxValue])\n      .range([0, 1]);\n  }\n  return legendOpacityScale;\n}\n","import angular from 'angular';\nimport _ from 'lodash';\nimport $ from 'jquery';\nimport * as d3 from 'd3';\nimport { contextSrv } from 'app/core/core';\nimport { tickStep } from 'app/core/utils/ticks';\nimport { getColorScale, getOpacityScale } from './color_scale';\n\nconst module = angular.module('grafana.directives');\n\nconst LEGEND_HEIGHT_PX = 6;\nconst LEGEND_WIDTH_PX = 100;\nconst LEGEND_TICK_SIZE = 0;\nconst LEGEND_VALUE_MARGIN = 0;\n\n/**\n * Color legend for heatmap editor.\n */\nmodule.directive('colorLegend', function() {\n  return {\n    restrict: 'E',\n    template: '<div class=\"heatmap-color-legend\"><svg width=\"16.5rem\" height=\"24px\"></svg></div>',\n    link: function(scope, elem, attrs) {\n      const ctrl = scope.ctrl;\n      const panel = scope.ctrl.panel;\n\n      render();\n\n      ctrl.events.on('render', function() {\n        render();\n      });\n\n      function render() {\n        const legendElem = $(elem).find('svg');\n        const legendWidth = Math.floor(legendElem.outerWidth());\n\n        if (panel.color.mode === 'spectrum') {\n          const colorScheme = _.find(ctrl.colorSchemes, {\n            value: panel.color.colorScheme,\n          });\n          const colorScale = getColorScale(colorScheme, contextSrv.user.lightTheme, legendWidth);\n          drawSimpleColorLegend(elem, colorScale);\n        } else if (panel.color.mode === 'opacity') {\n          const colorOptions = panel.color;\n          drawSimpleOpacityLegend(elem, colorOptions);\n        }\n      }\n    },\n  };\n});\n\n/**\n * Heatmap legend with scale values.\n */\nmodule.directive('heatmapLegend', function() {\n  return {\n    restrict: 'E',\n    template: `<div class=\"heatmap-color-legend\"><svg width=\"${LEGEND_WIDTH_PX}px\" height=\"${LEGEND_HEIGHT_PX}px\"></svg></div>`,\n    link: function(scope, elem, attrs) {\n      const ctrl = scope.ctrl;\n      const panel = scope.ctrl.panel;\n\n      render();\n      ctrl.events.on('render', function() {\n        render();\n      });\n\n      function render() {\n        clearLegend(elem);\n        if (!_.isEmpty(ctrl.data) && !_.isEmpty(ctrl.data.cards)) {\n          const rangeFrom = 0;\n          const rangeTo = ctrl.data.cardStats.max;\n          const maxValue = panel.color.max || rangeTo;\n          const minValue = panel.color.min || 0;\n\n          if (panel.color.mode === 'spectrum') {\n            const colorScheme = _.find(ctrl.colorSchemes, {\n              value: panel.color.colorScheme,\n            });\n            drawColorLegend(elem, colorScheme, rangeFrom, rangeTo, maxValue, minValue);\n          } else if (panel.color.mode === 'opacity') {\n            const colorOptions = panel.color;\n            drawOpacityLegend(elem, colorOptions, rangeFrom, rangeTo, maxValue, minValue);\n          }\n        }\n      }\n    },\n  };\n});\n\nfunction drawColorLegend(elem, colorScheme, rangeFrom, rangeTo, maxValue, minValue) {\n  const legendElem = $(elem).find('svg');\n  const legend = d3.select(legendElem.get(0));\n  clearLegend(elem);\n\n  const legendWidth = Math.floor(legendElem.outerWidth()) - 30;\n  const legendHeight = legendElem.attr('height');\n\n  let rangeStep = 1;\n  if (rangeTo - rangeFrom > legendWidth) {\n    rangeStep = Math.floor((rangeTo - rangeFrom) / legendWidth);\n  }\n  const widthFactor = legendWidth / (rangeTo - rangeFrom);\n  const valuesRange = d3.range(rangeFrom, rangeTo, rangeStep);\n\n  const colorScale = getColorScale(colorScheme, contextSrv.user.lightTheme, maxValue, minValue);\n  legend\n    .selectAll('.heatmap-color-legend-rect')\n    .data(valuesRange)\n    .enter()\n    .append('rect')\n    .attr('x', d => d * widthFactor)\n    .attr('y', 0)\n    .attr('width', rangeStep * widthFactor + 1) // Overlap rectangles to prevent gaps\n    .attr('height', legendHeight)\n    .attr('stroke-width', 0)\n    .attr('fill', d => colorScale(d));\n\n  drawLegendValues(elem, colorScale, rangeFrom, rangeTo, maxValue, minValue, legendWidth);\n}\n\nfunction drawOpacityLegend(elem, options, rangeFrom, rangeTo, maxValue, minValue) {\n  const legendElem = $(elem).find('svg');\n  const legend = d3.select(legendElem.get(0));\n  clearLegend(elem);\n\n  const legendWidth = Math.floor(legendElem.outerWidth()) - 30;\n  const legendHeight = legendElem.attr('height');\n\n  let rangeStep = 1;\n  if (rangeTo - rangeFrom > legendWidth) {\n    rangeStep = Math.floor((rangeTo - rangeFrom) / legendWidth);\n  }\n  const widthFactor = legendWidth / (rangeTo - rangeFrom);\n  const valuesRange = d3.range(rangeFrom, rangeTo, rangeStep);\n\n  const opacityScale = getOpacityScale(options, maxValue, minValue);\n  legend\n    .selectAll('.heatmap-opacity-legend-rect')\n    .data(valuesRange)\n    .enter()\n    .append('rect')\n    .attr('x', d => d * widthFactor)\n    .attr('y', 0)\n    .attr('width', rangeStep * widthFactor)\n    .attr('height', legendHeight)\n    .attr('stroke-width', 0)\n    .attr('fill', options.cardColor)\n    .style('opacity', d => opacityScale(d));\n\n  drawLegendValues(elem, opacityScale, rangeFrom, rangeTo, maxValue, minValue, legendWidth);\n}\n\nfunction drawLegendValues(elem, colorScale, rangeFrom, rangeTo, maxValue, minValue, legendWidth) {\n  const legendElem = $(elem).find('svg');\n  const legend = d3.select(legendElem.get(0));\n\n  if (legendWidth <= 0 || legendElem.get(0).childNodes.length === 0) {\n    return;\n  }\n\n  const legendValueScale = d3\n    .scaleLinear()\n    .domain([0, rangeTo])\n    .range([0, legendWidth]);\n\n  const ticks = buildLegendTicks(0, rangeTo, maxValue, minValue);\n  const xAxis = d3\n    .axisBottom(legendValueScale)\n    .tickValues(ticks)\n    .tickSize(LEGEND_TICK_SIZE);\n\n  const colorRect = legendElem.find(':first-child');\n  const posY = getSvgElemHeight(legendElem) + LEGEND_VALUE_MARGIN;\n  const posX = getSvgElemX(colorRect);\n\n  d3\n    .select(legendElem.get(0))\n    .append('g')\n    .attr('class', 'axis')\n    .attr('transform', 'translate(' + posX + ',' + posY + ')')\n    .call(xAxis);\n\n  legend\n    .select('.axis')\n    .select('.domain')\n    .remove();\n}\n\nfunction drawSimpleColorLegend(elem, colorScale) {\n  const legendElem = $(elem).find('svg');\n  clearLegend(elem);\n\n  const legendWidth = Math.floor(legendElem.outerWidth());\n  const legendHeight = legendElem.attr('height');\n\n  if (legendWidth) {\n    const valuesNumber = Math.floor(legendWidth / 2);\n    const rangeStep = Math.floor(legendWidth / valuesNumber);\n    const valuesRange = d3.range(0, legendWidth, rangeStep);\n\n    const legend = d3.select(legendElem.get(0));\n    const legendRects = legend.selectAll('.heatmap-color-legend-rect').data(valuesRange);\n\n    legendRects\n      .enter()\n      .append('rect')\n      .attr('x', d => d)\n      .attr('y', 0)\n      .attr('width', rangeStep + 1) // Overlap rectangles to prevent gaps\n      .attr('height', legendHeight)\n      .attr('stroke-width', 0)\n      .attr('fill', d => colorScale(d));\n  }\n}\n\nfunction drawSimpleOpacityLegend(elem, options) {\n  const legendElem = $(elem).find('svg');\n  clearLegend(elem);\n\n  const legend = d3.select(legendElem.get(0));\n  const legendWidth = Math.floor(legendElem.outerWidth());\n  const legendHeight = legendElem.attr('height');\n\n  if (legendWidth) {\n    let legendOpacityScale;\n    if (options.colorScale === 'linear') {\n      legendOpacityScale = d3\n        .scaleLinear()\n        .domain([0, legendWidth])\n        .range([0, 1]);\n    } else if (options.colorScale === 'sqrt') {\n      legendOpacityScale = d3\n        .scalePow()\n        .exponent(options.exponent)\n        .domain([0, legendWidth])\n        .range([0, 1]);\n    }\n\n    const rangeStep = 10;\n    const valuesRange = d3.range(0, legendWidth, rangeStep);\n    const legendRects = legend.selectAll('.heatmap-opacity-legend-rect').data(valuesRange);\n\n    legendRects\n      .enter()\n      .append('rect')\n      .attr('x', d => d)\n      .attr('y', 0)\n      .attr('width', rangeStep)\n      .attr('height', legendHeight)\n      .attr('stroke-width', 0)\n      .attr('fill', options.cardColor)\n      .style('opacity', d => legendOpacityScale(d));\n  }\n}\n\nfunction clearLegend(elem) {\n  const legendElem = $(elem).find('svg');\n  legendElem.empty();\n}\n\nfunction getSvgElemX(elem) {\n  const svgElem = elem.get(0);\n  if (svgElem && svgElem.x && svgElem.x.baseVal) {\n    return svgElem.x.baseVal.value;\n  } else {\n    return 0;\n  }\n}\n\nfunction getSvgElemHeight(elem) {\n  const svgElem = elem.get(0);\n  if (svgElem && svgElem.height && svgElem.height.baseVal) {\n    return svgElem.height.baseVal.value;\n  } else {\n    return 0;\n  }\n}\n\nfunction buildLegendTicks(rangeFrom, rangeTo, maxValue, minValue) {\n  const range = rangeTo - rangeFrom;\n  const tickStepSize = tickStep(rangeFrom, rangeTo, 3);\n  const ticksNum = Math.round(range / tickStepSize);\n  let ticks = [];\n\n  for (let i = 0; i < ticksNum; i++) {\n    const current = tickStepSize * i;\n    // Add user-defined min and max if it had been set\n    if (isValueCloseTo(minValue, current, tickStepSize)) {\n      ticks.push(minValue);\n      continue;\n    } else if (minValue < current) {\n      ticks.push(minValue);\n    }\n    if (isValueCloseTo(maxValue, current, tickStepSize)) {\n      ticks.push(maxValue);\n      continue;\n    } else if (maxValue < current) {\n      ticks.push(maxValue);\n    }\n    ticks.push(tickStepSize * i);\n  }\n  if (!isValueCloseTo(maxValue, rangeTo, tickStepSize)) {\n    ticks.push(maxValue);\n  }\n  ticks.push(rangeTo);\n  ticks = _.sortBy(_.uniq(ticks));\n  return ticks;\n}\n\nfunction isValueCloseTo(val, valueTo, step) {\n  const diff = Math.abs(val - valueTo);\n  return diff < step * 0.3;\n}\n","export class HeatmapDisplayEditorCtrl {\n  panel: any;\n  panelCtrl: any;\n\n  /** @ngInject */\n  constructor($scope) {\n    $scope.editor = this;\n    this.panelCtrl = $scope.ctrl;\n    this.panel = this.panelCtrl.panel;\n\n    this.panelCtrl.render();\n  }\n}\n\n/** @ngInject */\nexport function heatmapDisplayEditor() {\n  'use strict';\n  return {\n    restrict: 'E',\n    scope: true,\n    templateUrl: 'public/app/plugins/panel/heatmap/partials/display_editor.html',\n    controller: HeatmapDisplayEditorCtrl,\n  };\n}\n","import _ from 'lodash';\n\nconst VALUE_INDEX = 0;\nconst TIME_INDEX = 1;\n\ninterface XBucket {\n  x: number;\n  buckets: any;\n}\n\ninterface YBucket {\n  y: number;\n  values: number[];\n}\n\n/**\n * Convert histogram represented by the list of series to heatmap object.\n * @param seriesList List of time series\n */\nfunction histogramToHeatmap(seriesList) {\n  const heatmap = {};\n\n  for (let i = 0; i < seriesList.length; i++) {\n    const series = seriesList[i];\n    const bound = i;\n    if (isNaN(bound)) {\n      return heatmap;\n    }\n\n    for (const point of series.datapoints) {\n      const count = point[VALUE_INDEX];\n      const time = point[TIME_INDEX];\n\n      if (!_.isNumber(count)) {\n        continue;\n      }\n\n      let bucket = heatmap[time];\n      if (!bucket) {\n        bucket = heatmap[time] = { x: time, buckets: {} };\n      }\n\n      bucket.buckets[bound] = {\n        y: bound,\n        count: count,\n        bounds: {\n          top: null,\n          bottom: bound,\n        },\n        values: [],\n        points: [],\n      };\n    }\n  }\n\n  return heatmap;\n}\n\n/**\n * Sort series representing histogram by label value.\n */\nfunction sortSeriesByLabel(s1, s2) {\n  let label1, label2;\n\n  try {\n    // fail if not integer. might happen with bad queries\n    label1 = parseHistogramLabel(s1.label);\n    label2 = parseHistogramLabel(s2.label);\n  } catch (err) {\n    console.log(err.message || err);\n    return 0;\n  }\n\n  if (label1 > label2) {\n    return 1;\n  }\n\n  if (label1 < label2) {\n    return -1;\n  }\n\n  return 0;\n}\n\nfunction parseHistogramLabel(label: string): number {\n  if (label === '+Inf' || label === 'inf') {\n    return +Infinity;\n  }\n  const value = Number(label);\n  if (isNaN(value)) {\n    throw new Error(`Error parsing histogram label: ${label} is not a number`);\n  }\n  return value;\n}\n\n/**\n * Convert buckets into linear array of \"cards\" - objects, represented heatmap elements.\n * @param  {Object} buckets\n * @return {Array}          Array of \"card\" objects\n */\nfunction convertToCards(buckets) {\n  let min = 0,\n    max = 0;\n  const cards = [];\n  _.forEach(buckets, xBucket => {\n    _.forEach(xBucket.buckets, yBucket => {\n      const card = {\n        x: xBucket.x,\n        y: yBucket.y,\n        yBounds: yBucket.bounds,\n        values: yBucket.values,\n        count: yBucket.count,\n      };\n      cards.push(card);\n\n      if (cards.length === 1) {\n        min = yBucket.count;\n        max = yBucket.count;\n      }\n\n      min = yBucket.count < min ? yBucket.count : min;\n      max = yBucket.count > max ? yBucket.count : max;\n    });\n  });\n\n  const cardStats = { min, max };\n  return { cards, cardStats };\n}\n\n/**\n * Special method for log scales. When series converted into buckets with log scale,\n * for simplification, 0 values are converted into 0, not into -Infinity. On the other hand, we mean\n * that all values less than series minimum, is 0 values, and we create special \"minimum\" bucket for\n * that values (actually, there're no values less than minimum, so this bucket is empty).\n *  8-16|    | ** |    |  * |  **|\n *   4-8|  * |*  *|*   |** *| *  |\n *   2-4| * *|    | ***|    |*   |\n *   1-2|*   |    |    |    |    | This bucket contains minimum series value\n * 0.5-1|____|____|____|____|____| This bucket should be displayed as 0 on graph\n *     0|____|____|____|____|____| This bucket is for 0 values (should actually be -Infinity)\n * So we should merge two bottom buckets into one (0-value bucket).\n *\n * @param  {Object} buckets  Heatmap buckets\n * @param  {Number} minValue Minimum series value\n * @return {Object}          Transformed buckets\n */\nfunction mergeZeroBuckets(buckets, minValue) {\n  _.forEach(buckets, xBucket => {\n    const yBuckets = xBucket.buckets;\n\n    const emptyBucket = {\n      bounds: { bottom: 0, top: 0 },\n      values: [],\n      points: [],\n      count: 0,\n    };\n\n    const nullBucket = yBuckets[0] || emptyBucket;\n    const minBucket = yBuckets[minValue] || emptyBucket;\n\n    const newBucket = {\n      y: 0,\n      bounds: { bottom: minValue, top: minBucket.bounds.top || minValue },\n      values: [],\n      points: [],\n      count: 0,\n    };\n\n    newBucket.points = nullBucket.points.concat(minBucket.points);\n    newBucket.values = nullBucket.values.concat(minBucket.values);\n    newBucket.count = newBucket.values.length;\n\n    if (newBucket.count === 0) {\n      return;\n    }\n\n    delete yBuckets[minValue];\n    yBuckets[0] = newBucket;\n  });\n\n  return buckets;\n}\n\n/**\n * Convert set of time series into heatmap buckets\n * @return {Object}    Heatmap object:\n * {\n *   xBucketBound_1: {\n *     x: xBucketBound_1,\n *     buckets: {\n *       yBucketBound_1: {\n *         y: yBucketBound_1,\n *         bounds: {bottom, top}\n *         values: [val_1, val_2, ..., val_K],\n *         points: [[val_Y, val_X, series_name], ..., [...]],\n *         seriesStat: {seriesName_1: val_1, seriesName_2: val_2}\n *       },\n *       ...\n *       yBucketBound_M: {}\n *     },\n *     values: [val_1, val_2, ..., val_K],\n *     points: [\n *       [val_Y, val_X, series_name], (point_1)\n *       ...\n *       [...] (point_K)\n *     ]\n *   },\n *   xBucketBound_2: {},\n *   ...\n *   xBucketBound_N: {}\n * }\n */\nfunction convertToHeatMap(seriesList, yBucketSize, xBucketSize, logBase = 1) {\n  const heatmap = {};\n\n  for (const series of seriesList) {\n    const datapoints = series.datapoints;\n    const seriesName = series.label;\n\n    // Slice series into X axis buckets\n    // |    | ** |    |  * |  **|\n    // |  * |*  *|*   |** *| *  |\n    // |** *|    | ***|    |*   |\n    // |____|____|____|____|____|_\n    //\n    _.forEach(datapoints, point => {\n      const bucketBound = getBucketBound(point[TIME_INDEX], xBucketSize);\n      pushToXBuckets(heatmap, point, bucketBound, seriesName);\n    });\n  }\n\n  // Slice X axis buckets into Y (value) buckets\n  // |  **|     |2|,\n  // | *  | --\\ |1|,\n  // |*   | --/ |1|,\n  // |____|     |0|\n  //\n  _.forEach(heatmap, xBucket => {\n    if (logBase !== 1) {\n      xBucket.buckets = convertToLogScaleValueBuckets(xBucket, yBucketSize, logBase);\n    } else {\n      xBucket.buckets = convertToValueBuckets(xBucket, yBucketSize);\n    }\n  });\n\n  return heatmap;\n}\n\nfunction pushToXBuckets(buckets, point, bucketNum, seriesName) {\n  const value = point[VALUE_INDEX];\n  if (value === null || value === undefined || isNaN(value)) {\n    return;\n  }\n\n  // Add series name to point for future identification\n  const point_ext = _.concat(point, seriesName);\n\n  if (buckets[bucketNum] && buckets[bucketNum].values) {\n    buckets[bucketNum].values.push(value);\n    buckets[bucketNum].points.push(point_ext);\n  } else {\n    buckets[bucketNum] = {\n      x: bucketNum,\n      values: [value],\n      points: [point_ext],\n    };\n  }\n}\n\nfunction pushToYBuckets(buckets, bucketNum, value, point, bounds) {\n  let count = 1;\n  // Use the 3rd argument as scale/count\n  if (point.length > 3) {\n    count = parseInt(point[2]);\n  }\n  if (buckets[bucketNum]) {\n    buckets[bucketNum].values.push(value);\n    buckets[bucketNum].points.push(point);\n    buckets[bucketNum].count += count;\n  } else {\n    buckets[bucketNum] = {\n      y: bucketNum,\n      bounds: bounds,\n      values: [value],\n      points: [point],\n      count: count,\n    };\n  }\n}\n\nfunction getValueBucketBound(value, yBucketSize, logBase) {\n  if (logBase === 1) {\n    return getBucketBound(value, yBucketSize);\n  } else {\n    return getLogScaleBucketBound(value, yBucketSize, logBase);\n  }\n}\n\n/**\n * Find bucket for given value (for linear scale)\n */\nfunction getBucketBounds(value, bucketSize) {\n  let bottom, top;\n  bottom = Math.floor(value / bucketSize) * bucketSize;\n  top = (Math.floor(value / bucketSize) + 1) * bucketSize;\n\n  return { bottom, top };\n}\n\nfunction getBucketBound(value, bucketSize) {\n  const bounds = getBucketBounds(value, bucketSize);\n  return bounds.bottom;\n}\n\nfunction convertToValueBuckets(xBucket, bucketSize) {\n  const values = xBucket.values;\n  const points = xBucket.points;\n  const buckets = {};\n\n  _.forEach(values, (val, index) => {\n    const bounds = getBucketBounds(val, bucketSize);\n    const bucketNum = bounds.bottom;\n    pushToYBuckets(buckets, bucketNum, val, points[index], bounds);\n  });\n\n  return buckets;\n}\n\n/**\n * Find bucket for given value (for log scales)\n */\nfunction getLogScaleBucketBounds(value, yBucketSplitFactor, logBase) {\n  let top, bottom;\n  if (value === 0) {\n    return { bottom: 0, top: 0 };\n  }\n\n  const value_log = logp(value, logBase);\n  let pow, powTop;\n  if (yBucketSplitFactor === 1 || !yBucketSplitFactor) {\n    pow = Math.floor(value_log);\n    powTop = pow + 1;\n  } else {\n    const additional_bucket_size = 1 / yBucketSplitFactor;\n    let additional_log = value_log - Math.floor(value_log);\n    additional_log = Math.floor(additional_log / additional_bucket_size) * additional_bucket_size;\n    pow = Math.floor(value_log) + additional_log;\n    powTop = pow + additional_bucket_size;\n  }\n  bottom = Math.pow(logBase, pow);\n  top = Math.pow(logBase, powTop);\n\n  return { bottom, top };\n}\n\nfunction getLogScaleBucketBound(value, yBucketSplitFactor, logBase) {\n  const bounds = getLogScaleBucketBounds(value, yBucketSplitFactor, logBase);\n  return bounds.bottom;\n}\n\nfunction convertToLogScaleValueBuckets(xBucket, yBucketSplitFactor, logBase) {\n  const values = xBucket.values;\n  const points = xBucket.points;\n\n  const buckets = {};\n  _.forEach(values, (val, index) => {\n    const bounds = getLogScaleBucketBounds(val, yBucketSplitFactor, logBase);\n    const bucketNum = bounds.bottom;\n    pushToYBuckets(buckets, bucketNum, val, points[index], bounds);\n  });\n\n  return buckets;\n}\n\n/**\n * Logarithm for custom base\n * @param value\n * @param base logarithm base\n */\nfunction logp(value, base) {\n  return Math.log(value) / Math.log(base);\n}\n\n/**\n * Calculate size of Y bucket from given buckets bounds.\n * @param bounds Array of Y buckets bounds\n * @param logBase Logarithm base\n */\nfunction calculateBucketSize(bounds: number[], logBase = 1): number {\n  let bucketSize = Infinity;\n\n  if (bounds.length === 0) {\n    return 0;\n  } else if (bounds.length === 1) {\n    return bounds[0];\n  } else {\n    bounds = _.sortBy(bounds);\n    for (let i = 1; i < bounds.length; i++) {\n      const distance = getDistance(bounds[i], bounds[i - 1], logBase);\n      bucketSize = distance < bucketSize ? distance : bucketSize;\n    }\n  }\n\n  return bucketSize;\n}\n\n/**\n * Calculate distance between two numbers in given scale (linear or logarithmic).\n * @param a\n * @param b\n * @param logBase\n */\nfunction getDistance(a: number, b: number, logBase = 1): number {\n  if (logBase === 1) {\n    // Linear distance\n    return Math.abs(b - a);\n  } else {\n    // logarithmic distance\n    const ratio = Math.max(a, b) / Math.min(a, b);\n    return logp(ratio, logBase);\n  }\n}\n\n/**\n * Compare two heatmap data objects\n * @param objA\n * @param objB\n */\nfunction isHeatmapDataEqual(objA: any, objB: any): boolean {\n  let is_eql = !emptyXOR(objA, objB);\n\n  _.forEach(objA, (xBucket: XBucket, x) => {\n    if (objB[x]) {\n      if (emptyXOR(xBucket.buckets, objB[x].buckets)) {\n        is_eql = false;\n        return false;\n      }\n\n      _.forEach(xBucket.buckets, (yBucket: YBucket, y) => {\n        if (objB[x].buckets && objB[x].buckets[y]) {\n          if (objB[x].buckets[y].values) {\n            is_eql = _.isEqual(_.sortBy(yBucket.values), _.sortBy(objB[x].buckets[y].values));\n            if (!is_eql) {\n              return false;\n            } else {\n              return true;\n            }\n          } else {\n            is_eql = false;\n            return false;\n          }\n        } else {\n          is_eql = false;\n          return false;\n        }\n      });\n\n      if (!is_eql) {\n        return false;\n      } else {\n        return true;\n      }\n    } else {\n      is_eql = false;\n      return false;\n    }\n  });\n\n  return is_eql;\n}\n\nfunction emptyXOR(foo: any, bar: any): boolean {\n  return (_.isEmpty(foo) || _.isEmpty(bar)) && !(_.isEmpty(foo) && _.isEmpty(bar));\n}\n\nexport {\n  convertToHeatMap,\n  histogramToHeatmap,\n  convertToCards,\n  mergeZeroBuckets,\n  getValueBucketBound,\n  isHeatmapDataEqual,\n  calculateBucketSize,\n  sortSeriesByLabel,\n};\n","import kbn from 'app/core/utils/kbn';\n\nexport class AxesEditorCtrl {\n  panel: any;\n  panelCtrl: any;\n  unitFormats: any;\n  logScales: any;\n  dataFormats: any;\n  yBucketBoundModes: any;\n\n  /** @ngInject */\n  constructor($scope, uiSegmentSrv) {\n    $scope.editor = this;\n    this.panelCtrl = $scope.ctrl;\n    this.panel = this.panelCtrl.panel;\n    this.unitFormats = kbn.getUnitFormats();\n\n    this.logScales = {\n      linear: 1,\n      'log (base 2)': 2,\n      'log (base 10)': 10,\n      'log (base 32)': 32,\n      'log (base 1024)': 1024,\n    };\n\n    this.dataFormats = {\n      'Time series': 'timeseries',\n      'Time series buckets': 'tsbuckets',\n    };\n\n    this.yBucketBoundModes = {\n      Auto: 'auto',\n      Upper: 'upper',\n      Lower: 'lower',\n    };\n  }\n\n  setUnitFormat(subItem) {\n    this.panel.yAxis.format = subItem.value;\n    this.panelCtrl.render();\n  }\n}\n\n/** @ngInject */\nexport function axesEditor() {\n  'use strict';\n  return {\n    restrict: 'E',\n    scope: true,\n    templateUrl: 'public/app/plugins/panel/heatmap/partials/axes_editor.html',\n    controller: AxesEditorCtrl,\n  };\n}\n","import * as d3 from 'd3';\nimport $ from 'jquery';\nimport _ from 'lodash';\nimport kbn from 'app/core/utils/kbn';\nimport { getValueBucketBound } from './heatmap_data_converter';\n\nconst TOOLTIP_PADDING_X = 30;\nconst TOOLTIP_PADDING_Y = 5;\nconst HISTOGRAM_WIDTH = 160;\nconst HISTOGRAM_HEIGHT = 40;\n\nexport class HeatmapTooltip {\n  tooltip: any;\n  scope: any;\n  dashboard: any;\n  panelCtrl: any;\n  panel: any;\n  heatmapPanel: any;\n  mouseOverBucket: boolean;\n  originalFillColor: any;\n\n  constructor(elem, scope) {\n    this.scope = scope;\n    this.dashboard = scope.ctrl.dashboard;\n    this.panelCtrl = scope.ctrl;\n    this.panel = scope.ctrl.panel;\n    this.heatmapPanel = elem;\n    this.mouseOverBucket = false;\n    this.originalFillColor = null;\n\n    elem.on('mouseleave', this.onMouseLeave.bind(this));\n  }\n\n  onMouseLeave() {\n    this.destroy();\n  }\n\n  onMouseMove(e) {\n    if (!this.panel.tooltip.show) {\n      return;\n    }\n\n    this.move(e);\n  }\n\n  add() {\n    this.tooltip = d3\n      .select('body')\n      .append('div')\n      .attr('class', 'heatmap-tooltip graph-tooltip grafana-tooltip');\n  }\n\n  destroy() {\n    if (this.tooltip) {\n      this.tooltip.remove();\n    }\n\n    this.tooltip = null;\n  }\n\n  show(pos, data) {\n    if (!this.panel.tooltip.show || !data) {\n      return;\n    }\n    // shared tooltip mode\n    if (pos.panelRelY) {\n      return;\n    }\n\n    const { xBucketIndex, yBucketIndex } = this.getBucketIndexes(pos, data);\n\n    if (!data.buckets[xBucketIndex]) {\n      this.destroy();\n      return;\n    }\n\n    if (!this.tooltip) {\n      this.add();\n    }\n\n    let boundBottom, boundTop, valuesNumber;\n    const xData = data.buckets[xBucketIndex];\n    // Search in special 'zero' bucket also\n    const yData = _.find(xData.buckets, (bucket, bucketIndex) => {\n      return bucket.bounds.bottom === yBucketIndex || bucketIndex === yBucketIndex.toString();\n    });\n\n    const tooltipTimeFormat = 'YYYY-MM-DD HH:mm:ss';\n    const time = this.dashboard.formatDate(xData.x, tooltipTimeFormat);\n\n    // Decimals override. Code from panel/graph/graph.ts\n    let countValueFormatter, bucketBoundFormatter;\n    if (_.isNumber(this.panel.tooltipDecimals)) {\n      countValueFormatter = this.countValueFormatter(this.panel.tooltipDecimals, null);\n      bucketBoundFormatter = this.panelCtrl.tickValueFormatter(this.panelCtrl.decimals, null);\n    } else {\n      // auto decimals\n      // legend and tooltip gets one more decimal precision\n      // than graph legend ticks\n      const decimals = (this.panelCtrl.decimals || -1) + 1;\n      countValueFormatter = this.countValueFormatter(decimals, this.panelCtrl.scaledDecimals + 2);\n      bucketBoundFormatter = this.panelCtrl.tickValueFormatter(decimals, this.panelCtrl.scaledDecimals + 2);\n    }\n\n    let tooltipHtml = `<div class=\"graph-tooltip-time\">${time}</div>\n      <div class=\"heatmap-histogram\"></div>`;\n\n    if (yData) {\n      if (yData.bounds) {\n        if (data.tsBuckets) {\n          // Use Y-axis labels\n          const tickFormatter = valIndex => {\n            return data.tsBucketsFormatted ? data.tsBucketsFormatted[valIndex] : data.tsBuckets[valIndex];\n          };\n\n          boundBottom = tickFormatter(yBucketIndex);\n          boundTop = yBucketIndex < data.tsBuckets.length - 1 ? tickFormatter(yBucketIndex + 1) : '';\n        } else {\n          // Display 0 if bucket is a special 'zero' bucket\n          const bottom = yData.y ? yData.bounds.bottom : 0;\n          boundBottom = bucketBoundFormatter(bottom);\n          boundTop = bucketBoundFormatter(yData.bounds.top);\n        }\n        valuesNumber = countValueFormatter(yData.count);\n        tooltipHtml += `<div>\n          bucket: <b>${boundBottom} - ${boundTop}</b> <br>\n          count: <b>${valuesNumber}</b> <br>\n        </div>`;\n      } else {\n        // currently no bounds for pre bucketed data\n        tooltipHtml += `<div>count: <b>${yData.count}</b><br></div>`;\n      }\n    } else {\n      if (!this.panel.tooltip.showHistogram) {\n        this.destroy();\n        return;\n      }\n      boundBottom = yBucketIndex;\n      boundTop = '';\n      valuesNumber = 0;\n    }\n\n    this.tooltip.html(tooltipHtml);\n\n    if (this.panel.tooltip.showHistogram) {\n      this.addHistogram(xData);\n    }\n\n    this.move(pos);\n  }\n\n  getBucketIndexes(pos, data) {\n    const xBucketIndex = this.getXBucketIndex(pos.x, data);\n    const yBucketIndex = this.getYBucketIndex(pos.y, data);\n    return { xBucketIndex, yBucketIndex };\n  }\n\n  getXBucketIndex(x, data) {\n    // First try to find X bucket by checking x pos is in the\n    // [bucket.x, bucket.x + xBucketSize] interval\n    const xBucket = _.find(data.buckets, bucket => {\n      return x > bucket.x && x - bucket.x <= data.xBucketSize;\n    });\n    return xBucket ? xBucket.x : getValueBucketBound(x, data.xBucketSize, 1);\n  }\n\n  getYBucketIndex(y, data) {\n    if (data.tsBuckets) {\n      return Math.floor(y);\n    }\n    const yBucketIndex = getValueBucketBound(y, data.yBucketSize, this.panel.yAxis.logBase);\n    return yBucketIndex;\n  }\n\n  getSharedTooltipPos(pos) {\n    // get pageX from position on x axis and pageY from relative position in original panel\n    pos.pageX = this.heatmapPanel.offset().left + this.scope.xScale(pos.x);\n    pos.pageY = this.heatmapPanel.offset().top + this.scope.chartHeight * pos.panelRelY;\n    return pos;\n  }\n\n  addHistogram(data) {\n    const xBucket = this.scope.ctrl.data.buckets[data.x];\n    const yBucketSize = this.scope.ctrl.data.yBucketSize;\n    let min, max, ticks;\n    if (this.scope.ctrl.data.tsBuckets) {\n      min = 0;\n      max = this.scope.ctrl.data.tsBuckets.length - 1;\n      ticks = this.scope.ctrl.data.tsBuckets.length;\n    } else {\n      min = this.scope.ctrl.data.yAxis.min;\n      max = this.scope.ctrl.data.yAxis.max;\n      ticks = this.scope.ctrl.data.yAxis.ticks;\n    }\n    let histogramData = _.map(xBucket.buckets, bucket => {\n      const count = bucket.count !== undefined ? bucket.count : bucket.values.length;\n      return [bucket.bounds.bottom, count];\n    });\n    histogramData = _.filter(histogramData, d => {\n      return d[0] >= min && d[0] <= max;\n    });\n\n    const scale = this.scope.yScale.copy();\n    const histXScale = scale.domain([min, max]).range([0, HISTOGRAM_WIDTH]);\n\n    let barWidth;\n    if (this.panel.yAxis.logBase === 1) {\n      barWidth = Math.floor(HISTOGRAM_WIDTH / (max - min) * yBucketSize * 0.9);\n    } else {\n      const barNumberFactor = yBucketSize ? yBucketSize : 1;\n      barWidth = Math.floor(HISTOGRAM_WIDTH / ticks / barNumberFactor * 0.9);\n    }\n    barWidth = Math.max(barWidth, 1);\n\n    // Normalize histogram Y axis\n    const histogramDomain = _.reduce(_.map(histogramData, d => d[1]), (sum, val) => sum + val, 0);\n    const histYScale = d3\n      .scaleLinear()\n      .domain([0, histogramDomain])\n      .range([0, HISTOGRAM_HEIGHT]);\n\n    const histogram = this.tooltip\n      .select('.heatmap-histogram')\n      .append('svg')\n      .attr('width', HISTOGRAM_WIDTH)\n      .attr('height', HISTOGRAM_HEIGHT);\n\n    histogram\n      .selectAll('.bar')\n      .data(histogramData)\n      .enter()\n      .append('rect')\n      .attr('x', d => {\n        return histXScale(d[0]);\n      })\n      .attr('width', barWidth)\n      .attr('y', d => {\n        return HISTOGRAM_HEIGHT - histYScale(d[1]);\n      })\n      .attr('height', d => {\n        return histYScale(d[1]);\n      });\n  }\n\n  move(pos) {\n    if (!this.tooltip) {\n      return;\n    }\n\n    const elem = $(this.tooltip.node())[0];\n    const tooltipWidth = elem.clientWidth;\n    const tooltipHeight = elem.clientHeight;\n\n    let left = pos.pageX + TOOLTIP_PADDING_X;\n    let top = pos.pageY + TOOLTIP_PADDING_Y;\n\n    if (pos.pageX + tooltipWidth + 40 > window.innerWidth) {\n      left = pos.pageX - tooltipWidth - TOOLTIP_PADDING_X;\n    }\n\n    if (pos.pageY - window.pageYOffset + tooltipHeight + 20 > window.innerHeight) {\n      top = pos.pageY - tooltipHeight - TOOLTIP_PADDING_Y;\n    }\n\n    return this.tooltip.style('left', left + 'px').style('top', top + 'px');\n  }\n\n  countValueFormatter(decimals, scaledDecimals = null) {\n    const format = 'short';\n    return function(value) {\n      return kbn.valueFormats[format](value, decimals, scaledDecimals);\n    };\n  }\n}\n","import _ from 'lodash';\nimport $ from 'jquery';\nimport moment from 'moment';\nimport * as d3 from 'd3';\nimport kbn from 'app/core/utils/kbn';\nimport { appEvents, contextSrv } from 'app/core/core';\nimport * as ticksUtils from 'app/core/utils/ticks';\nimport { HeatmapTooltip } from './heatmap_tooltip';\nimport { mergeZeroBuckets } from './heatmap_data_converter';\nimport { getColorScale, getOpacityScale } from './color_scale';\n\nconst MIN_CARD_SIZE = 1,\n  CARD_PADDING = 1,\n  CARD_ROUND = 0,\n  DATA_RANGE_WIDING_FACTOR = 1.2,\n  DEFAULT_X_TICK_SIZE_PX = 100,\n  DEFAULT_Y_TICK_SIZE_PX = 50,\n  X_AXIS_TICK_PADDING = 10,\n  Y_AXIS_TICK_PADDING = 5,\n  MIN_SELECTION_WIDTH = 2;\n\nexport default function rendering(scope, elem, attrs, ctrl) {\n  return new HeatmapRenderer(scope, elem, attrs, ctrl);\n}\nexport class HeatmapRenderer {\n  width: number;\n  height: number;\n  yScale: any;\n  xScale: any;\n  chartWidth: number;\n  chartHeight: number;\n  chartTop: number;\n  chartBottom: number;\n  yAxisWidth: number;\n  xAxisHeight: number;\n  cardPadding: number;\n  cardRound: number;\n  cardWidth: number;\n  cardHeight: number;\n  colorScale: any;\n  opacityScale: any;\n  mouseUpHandler: any;\n  data: any;\n  panel: any;\n  $heatmap: any;\n  tooltip: HeatmapTooltip;\n  heatmap: any;\n  timeRange: any;\n\n  selection: any;\n  padding: any;\n  margin: any;\n  dataRangeWidingFactor: number;\n  constructor(private scope, private elem, attrs, private ctrl) {\n    // $heatmap is JQuery object, but heatmap is D3\n    this.$heatmap = this.elem.find('.heatmap-panel');\n    this.tooltip = new HeatmapTooltip(this.$heatmap, this.scope);\n\n    this.selection = {\n      active: false,\n      x1: -1,\n      x2: -1,\n    };\n\n    this.padding = { left: 0, right: 0, top: 0, bottom: 0 };\n    this.margin = { left: 25, right: 15, top: 10, bottom: 20 };\n    this.dataRangeWidingFactor = DATA_RANGE_WIDING_FACTOR;\n\n    this.ctrl.events.on('render', this.onRender.bind(this));\n\n    this.ctrl.tickValueFormatter = this.tickValueFormatter.bind(this);\n\n    /////////////////////////////\n    // Selection and crosshair //\n    /////////////////////////////\n\n    // Shared crosshair and tooltip\n    appEvents.on('graph-hover', this.onGraphHover.bind(this), this.scope);\n\n    appEvents.on('graph-hover-clear', this.onGraphHoverClear.bind(this), this.scope);\n\n    // Register selection listeners\n    this.$heatmap.on('mousedown', this.onMouseDown.bind(this));\n    this.$heatmap.on('mousemove', this.onMouseMove.bind(this));\n    this.$heatmap.on('mouseleave', this.onMouseLeave.bind(this));\n  }\n\n  onGraphHoverClear() {\n    this.clearCrosshair();\n  }\n\n  onGraphHover(event) {\n    this.drawSharedCrosshair(event.pos);\n  }\n\n  onRender() {\n    this.render();\n    this.ctrl.renderingCompleted();\n  }\n\n  setElementHeight() {\n    try {\n      let height = this.ctrl.height || this.panel.height || this.ctrl.row.height;\n      if (_.isString(height)) {\n        height = parseInt(height.replace('px', ''), 10);\n      }\n\n      height -= this.panel.legend.show ? 28 : 11; // bottom padding and space for legend\n\n      this.$heatmap.css('height', height + 'px');\n\n      return true;\n    } catch (e) {\n      // IE throws errors sometimes\n      return false;\n    }\n  }\n\n  getYAxisWidth(elem) {\n    const axis_text = elem.selectAll('.axis-y text').nodes();\n    const max_text_width = _.max(\n      _.map(axis_text, text => {\n        // Use SVG getBBox method\n        return text.getBBox().width;\n      })\n    );\n\n    return max_text_width;\n  }\n\n  getXAxisHeight(elem) {\n    const axis_line = elem.select('.axis-x line');\n    if (!axis_line.empty()) {\n      const axis_line_position = parseFloat(elem.select('.axis-x line').attr('y2'));\n      const canvas_width = parseFloat(elem.attr('height'));\n      return canvas_width - axis_line_position;\n    } else {\n      // Default height\n      return 30;\n    }\n  }\n\n  addXAxis() {\n    this.scope.xScale = this.xScale = d3\n      .scaleTime()\n      .domain([this.timeRange.from, this.timeRange.to])\n      .range([0, this.chartWidth]);\n\n    const ticks = this.chartWidth / DEFAULT_X_TICK_SIZE_PX;\n    const grafanaTimeFormatter = ticksUtils.grafanaTimeFormat(ticks, this.timeRange.from, this.timeRange.to);\n    let timeFormat;\n    const dashboardTimeZone = this.ctrl.dashboard.getTimezone();\n    if (dashboardTimeZone === 'utc') {\n      timeFormat = d3.utcFormat(grafanaTimeFormatter);\n    } else {\n      timeFormat = d3.timeFormat(grafanaTimeFormatter);\n    }\n\n    const xAxis = d3\n      .axisBottom(this.xScale)\n      .ticks(ticks)\n      .tickFormat(timeFormat)\n      .tickPadding(X_AXIS_TICK_PADDING)\n      .tickSize(this.chartHeight);\n\n    const posY = this.margin.top;\n    const posX = this.yAxisWidth;\n    this.heatmap\n      .append('g')\n      .attr('class', 'axis axis-x')\n      .attr('transform', 'translate(' + posX + ',' + posY + ')')\n      .call(xAxis);\n\n    // Remove horizontal line in the top of axis labels (called domain in d3)\n    this.heatmap\n      .select('.axis-x')\n      .select('.domain')\n      .remove();\n  }\n\n  addYAxis() {\n    let ticks = Math.ceil(this.chartHeight / DEFAULT_Y_TICK_SIZE_PX);\n    let tick_interval = ticksUtils.tickStep(this.data.heatmapStats.min, this.data.heatmapStats.max, ticks);\n    let { y_min, y_max } = this.wideYAxisRange(this.data.heatmapStats.min, this.data.heatmapStats.max, tick_interval);\n\n    // Rewrite min and max if it have been set explicitly\n    y_min = this.panel.yAxis.min !== null ? this.panel.yAxis.min : y_min;\n    y_max = this.panel.yAxis.max !== null ? this.panel.yAxis.max : y_max;\n\n    // Adjust ticks after Y range widening\n    tick_interval = ticksUtils.tickStep(y_min, y_max, ticks);\n    ticks = Math.ceil((y_max - y_min) / tick_interval);\n\n    const decimalsAuto = ticksUtils.getPrecision(tick_interval);\n    let decimals = this.panel.yAxis.decimals === null ? decimalsAuto : this.panel.yAxis.decimals;\n    // Calculate scaledDecimals for log scales using tick size (as in jquery.flot.js)\n    const flot_tick_size = ticksUtils.getFlotTickSize(y_min, y_max, ticks, decimalsAuto);\n    const scaledDecimals = ticksUtils.getScaledDecimals(decimals, flot_tick_size);\n    this.ctrl.decimals = decimals;\n    this.ctrl.scaledDecimals = scaledDecimals;\n\n    // Set default Y min and max if no data\n    if (_.isEmpty(this.data.buckets)) {\n      y_max = 1;\n      y_min = -1;\n      ticks = 3;\n      decimals = 1;\n    }\n\n    this.data.yAxis = {\n      min: y_min,\n      max: y_max,\n      ticks: ticks,\n    };\n\n    this.scope.yScale = this.yScale = d3\n      .scaleLinear()\n      .domain([y_min, y_max])\n      .range([this.chartHeight, 0]);\n\n    const yAxis = d3\n      .axisLeft(this.yScale)\n      .ticks(ticks)\n      .tickFormat(this.tickValueFormatter(decimals, scaledDecimals))\n      .tickSizeInner(0 - this.width)\n      .tickSizeOuter(0)\n      .tickPadding(Y_AXIS_TICK_PADDING);\n\n    this.heatmap\n      .append('g')\n      .attr('class', 'axis axis-y')\n      .call(yAxis);\n\n    // Calculate Y axis width first, then move axis into visible area\n    const posY = this.margin.top;\n    const posX = this.getYAxisWidth(this.heatmap) + Y_AXIS_TICK_PADDING;\n    this.heatmap.select('.axis-y').attr('transform', 'translate(' + posX + ',' + posY + ')');\n\n    // Remove vertical line in the right of axis labels (called domain in d3)\n    this.heatmap\n      .select('.axis-y')\n      .select('.domain')\n      .remove();\n  }\n\n  // Wide Y values range and anjust to bucket size\n  wideYAxisRange(min, max, tickInterval) {\n    const y_widing = (max * (this.dataRangeWidingFactor - 1) - min * (this.dataRangeWidingFactor - 1)) / 2;\n    let y_min, y_max;\n\n    if (tickInterval === 0) {\n      y_max = max * this.dataRangeWidingFactor;\n      y_min = min - min * (this.dataRangeWidingFactor - 1);\n      tickInterval = (y_max - y_min) / 2;\n    } else {\n      y_max = Math.ceil((max + y_widing) / tickInterval) * tickInterval;\n      y_min = Math.floor((min - y_widing) / tickInterval) * tickInterval;\n    }\n\n    // Don't wide axis below 0 if all values are positive\n    if (min >= 0 && y_min < 0) {\n      y_min = 0;\n    }\n\n    return { y_min, y_max };\n  }\n\n  addLogYAxis() {\n    const log_base = this.panel.yAxis.logBase;\n    let { y_min, y_max } = this.adjustLogRange(this.data.heatmapStats.minLog, this.data.heatmapStats.max, log_base);\n\n    y_min =\n      this.panel.yAxis.min && this.panel.yAxis.min !== '0' ? this.adjustLogMin(this.panel.yAxis.min, log_base) : y_min;\n    y_max = this.panel.yAxis.max !== null ? this.adjustLogMax(this.panel.yAxis.max, log_base) : y_max;\n\n    // Set default Y min and max if no data\n    if (_.isEmpty(this.data.buckets)) {\n      y_max = Math.pow(log_base, 2);\n      y_min = 1;\n    }\n\n    this.scope.yScale = this.yScale = d3\n      .scaleLog()\n      .base(this.panel.yAxis.logBase)\n      .domain([y_min, y_max])\n      .range([this.chartHeight, 0]);\n\n    const domain = this.yScale.domain();\n    const tick_values = this.logScaleTickValues(domain, log_base);\n\n    const decimalsAuto = ticksUtils.getPrecision(y_min);\n    const decimals = this.panel.yAxis.decimals || decimalsAuto;\n\n    // Calculate scaledDecimals for log scales using tick size (as in jquery.flot.js)\n    const flot_tick_size = ticksUtils.getFlotTickSize(y_min, y_max, tick_values.length, decimalsAuto);\n    const scaledDecimals = ticksUtils.getScaledDecimals(decimals, flot_tick_size);\n    this.ctrl.decimals = decimals;\n    this.ctrl.scaledDecimals = scaledDecimals;\n\n    this.data.yAxis = {\n      min: y_min,\n      max: y_max,\n      ticks: tick_values.length,\n    };\n\n    const yAxis = d3\n      .axisLeft(this.yScale)\n      .tickValues(tick_values)\n      .tickFormat(this.tickValueFormatter(decimals, scaledDecimals))\n      .tickSizeInner(0 - this.width)\n      .tickSizeOuter(0)\n      .tickPadding(Y_AXIS_TICK_PADDING);\n\n    this.heatmap\n      .append('g')\n      .attr('class', 'axis axis-y')\n      .call(yAxis);\n\n    // Calculate Y axis width first, then move axis into visible area\n    const posY = this.margin.top;\n    const posX = this.getYAxisWidth(this.heatmap) + Y_AXIS_TICK_PADDING;\n    this.heatmap.select('.axis-y').attr('transform', 'translate(' + posX + ',' + posY + ')');\n\n    // Set first tick as pseudo 0\n    if (y_min < 1) {\n      this.heatmap\n        .select('.axis-y')\n        .select('.tick text')\n        .text('0');\n    }\n\n    // Remove vertical line in the right of axis labels (called domain in d3)\n    this.heatmap\n      .select('.axis-y')\n      .select('.domain')\n      .remove();\n  }\n\n  addYAxisFromBuckets() {\n    const tsBuckets = this.data.tsBuckets;\n\n    this.scope.yScale = this.yScale = d3\n      .scaleLinear()\n      .domain([0, tsBuckets.length - 1])\n      .range([this.chartHeight, 0]);\n\n    const tick_values = _.map(tsBuckets, (b, i) => i);\n    const decimalsAuto = _.max(_.map(tsBuckets, ticksUtils.getStringPrecision));\n    const decimals = this.panel.yAxis.decimals === null ? decimalsAuto : this.panel.yAxis.decimals;\n    this.ctrl.decimals = decimals;\n\n    const tickValueFormatter = this.tickValueFormatter.bind(this);\n    function tickFormatter(valIndex) {\n      let valueFormatted = tsBuckets[valIndex];\n      if (!_.isNaN(_.toNumber(valueFormatted)) && valueFormatted !== '') {\n        // Try to format numeric tick labels\n        valueFormatted = tickValueFormatter(decimals)(_.toNumber(valueFormatted));\n      }\n      return valueFormatted;\n    }\n\n    const tsBucketsFormatted = _.map(tsBuckets, (v, i) => tickFormatter(i));\n    this.data.tsBucketsFormatted = tsBucketsFormatted;\n\n    const yAxis = d3\n      .axisLeft(this.yScale)\n      .tickValues(tick_values)\n      .tickFormat(tickFormatter)\n      .tickSizeInner(0 - this.width)\n      .tickSizeOuter(0)\n      .tickPadding(Y_AXIS_TICK_PADDING);\n\n    this.heatmap\n      .append('g')\n      .attr('class', 'axis axis-y')\n      .call(yAxis);\n\n    // Calculate Y axis width first, then move axis into visible area\n    const posY = this.margin.top;\n    const posX = this.getYAxisWidth(this.heatmap) + Y_AXIS_TICK_PADDING;\n    this.heatmap.select('.axis-y').attr('transform', 'translate(' + posX + ',' + posY + ')');\n\n    // Remove vertical line in the right of axis labels (called domain in d3)\n    this.heatmap\n      .select('.axis-y')\n      .select('.domain')\n      .remove();\n  }\n\n  // Adjust data range to log base\n  adjustLogRange(min, max, logBase) {\n    let y_min, y_max;\n\n    y_min = this.data.heatmapStats.minLog;\n    if (this.data.heatmapStats.minLog > 1 || !this.data.heatmapStats.minLog) {\n      y_min = 1;\n    } else {\n      y_min = this.adjustLogMin(this.data.heatmapStats.minLog, logBase);\n    }\n\n    // Adjust max Y value to log base\n    y_max = this.adjustLogMax(this.data.heatmapStats.max, logBase);\n\n    return { y_min, y_max };\n  }\n\n  adjustLogMax(max, base) {\n    return Math.pow(base, Math.ceil(ticksUtils.logp(max, base)));\n  }\n\n  adjustLogMin(min, base) {\n    return Math.pow(base, Math.floor(ticksUtils.logp(min, base)));\n  }\n\n  logScaleTickValues(domain, base) {\n    const domainMin = domain[0];\n    const domainMax = domain[1];\n    const tickValues = [];\n\n    if (domainMin < 1) {\n      const under_one_ticks = Math.floor(ticksUtils.logp(domainMin, base));\n      for (let i = under_one_ticks; i < 0; i++) {\n        const tick_value = Math.pow(base, i);\n        tickValues.push(tick_value);\n      }\n    }\n\n    const ticks = Math.ceil(ticksUtils.logp(domainMax, base));\n    for (let i = 0; i <= ticks; i++) {\n      const tick_value = Math.pow(base, i);\n      tickValues.push(tick_value);\n    }\n\n    return tickValues;\n  }\n\n  tickValueFormatter(decimals, scaledDecimals = null) {\n    const format = this.panel.yAxis.format;\n    return function(value) {\n      try {\n        return format !== 'none' ? kbn.valueFormats[format](value, decimals, scaledDecimals) : value;\n      } catch (err) {\n        console.error(err.message || err);\n        return value;\n      }\n    };\n  }\n\n  fixYAxisTickSize() {\n    this.heatmap\n      .select('.axis-y')\n      .selectAll('.tick line')\n      .attr('x2', this.chartWidth);\n  }\n\n  addAxes() {\n    this.chartHeight = this.height - this.margin.top - this.margin.bottom;\n    this.chartTop = this.margin.top;\n    this.chartBottom = this.chartTop + this.chartHeight;\n    if (this.panel.dataFormat === 'tsbuckets') {\n      this.addYAxisFromBuckets();\n    } else {\n      if (this.panel.yAxis.logBase === 1) {\n        this.addYAxis();\n      } else {\n        this.addLogYAxis();\n      }\n    }\n\n    this.yAxisWidth = this.getYAxisWidth(this.heatmap) + Y_AXIS_TICK_PADDING;\n    this.chartWidth = this.width - this.yAxisWidth - this.margin.right;\n    this.fixYAxisTickSize();\n\n    this.addXAxis();\n    this.xAxisHeight = this.getXAxisHeight(this.heatmap);\n\n    if (!this.panel.yAxis.show) {\n      this.heatmap\n        .select('.axis-y')\n        .selectAll('line')\n        .style('opacity', 0);\n    }\n\n    if (!this.panel.xAxis.show) {\n      this.heatmap\n        .select('.axis-x')\n        .selectAll('line')\n        .style('opacity', 0);\n    }\n  }\n\n  addHeatmapCanvas() {\n    const heatmap_elem = this.$heatmap[0];\n\n    this.width = Math.floor(this.$heatmap.width()) - this.padding.right;\n    this.height = Math.floor(this.$heatmap.height()) - this.padding.bottom;\n\n    this.cardPadding = this.panel.cards.cardPadding !== null ? this.panel.cards.cardPadding : CARD_PADDING;\n    this.cardRound = this.panel.cards.cardRound !== null ? this.panel.cards.cardRound : CARD_ROUND;\n\n    if (this.heatmap) {\n      this.heatmap.remove();\n    }\n\n    this.heatmap = d3\n      .select(heatmap_elem)\n      .append('svg')\n      .attr('width', this.width)\n      .attr('height', this.height);\n  }\n\n  addHeatmap() {\n    this.addHeatmapCanvas();\n    this.addAxes();\n\n    if (this.panel.yAxis.logBase !== 1 && this.panel.dataFormat !== 'tsbuckets') {\n      const log_base = this.panel.yAxis.logBase;\n      const domain = this.yScale.domain();\n      const tick_values = this.logScaleTickValues(domain, log_base);\n      this.data.buckets = mergeZeroBuckets(this.data.buckets, _.min(tick_values));\n    }\n\n    const cardsData = this.data.cards;\n    const maxValueAuto = this.data.cardStats.max;\n    const maxValue = this.panel.color.max || maxValueAuto;\n    const minValue = this.panel.color.min || 0;\n\n    const colorScheme = _.find(this.ctrl.colorSchemes, {\n      value: this.panel.color.colorScheme,\n    });\n    this.colorScale = getColorScale(colorScheme, contextSrv.user.lightTheme, maxValue, minValue);\n    this.opacityScale = getOpacityScale(this.panel.color, maxValue);\n    this.setCardSize();\n\n    let cards = this.heatmap.selectAll('.heatmap-card').data(cardsData);\n    cards.append('title');\n    cards = cards\n      .enter()\n      .append('rect')\n      .attr('x', this.getCardX.bind(this))\n      .attr('width', this.getCardWidth.bind(this))\n      .attr('y', this.getCardY.bind(this))\n      .attr('height', this.getCardHeight.bind(this))\n      .attr('rx', this.cardRound)\n      .attr('ry', this.cardRound)\n      .attr('class', 'bordered heatmap-card')\n      .style('fill', this.getCardColor.bind(this))\n      .style('stroke', this.getCardColor.bind(this))\n      .style('stroke-width', 0)\n      .style('opacity', this.getCardOpacity.bind(this));\n\n    const $cards = this.$heatmap.find('.heatmap-card');\n    $cards\n      .on('mouseenter', event => {\n        this.tooltip.mouseOverBucket = true;\n        this.highlightCard(event);\n      })\n      .on('mouseleave', event => {\n        this.tooltip.mouseOverBucket = false;\n        this.resetCardHighLight(event);\n      });\n  }\n\n  highlightCard(event) {\n    const color = d3.select(event.target).style('fill');\n    const highlightColor = d3.color(color).darker(2);\n    const strokeColor = d3.color(color).brighter(4);\n    const current_card = d3.select(event.target);\n    this.tooltip.originalFillColor = color;\n    current_card\n      .style('fill', highlightColor.toString())\n      .style('stroke', strokeColor.toString())\n      .style('stroke-width', 1);\n  }\n\n  resetCardHighLight(event) {\n    d3\n      .select(event.target)\n      .style('fill', this.tooltip.originalFillColor)\n      .style('stroke', this.tooltip.originalFillColor)\n      .style('stroke-width', 0);\n  }\n\n  setCardSize() {\n    const xGridSize = Math.floor(this.xScale(this.data.xBucketSize) - this.xScale(0));\n    let yGridSize = Math.floor(this.yScale(this.yScale.invert(0) - this.data.yBucketSize));\n\n    if (this.panel.yAxis.logBase !== 1) {\n      const base = this.panel.yAxis.logBase;\n      const splitFactor = this.data.yBucketSize || 1;\n      yGridSize = Math.floor((this.yScale(1) - this.yScale(base)) / splitFactor);\n    }\n\n    this.cardWidth = xGridSize - this.cardPadding * 2;\n    this.cardHeight = yGridSize ? yGridSize - this.cardPadding * 2 : 0;\n  }\n\n  getCardX(d) {\n    let x;\n    if (this.xScale(d.x) < 0) {\n      // Cut card left to prevent overlay\n      x = this.yAxisWidth + this.cardPadding;\n    } else {\n      x = this.xScale(d.x) + this.yAxisWidth + this.cardPadding;\n    }\n\n    return x;\n  }\n\n  getCardWidth(d) {\n    let w;\n    if (this.xScale(d.x) < 0) {\n      // Cut card left to prevent overlay\n      const cutted_width = this.xScale(d.x) + this.cardWidth;\n      w = cutted_width > 0 ? cutted_width : 0;\n    } else if (this.xScale(d.x) + this.cardWidth > this.chartWidth) {\n      // Cut card right to prevent overlay\n      w = this.chartWidth - this.xScale(d.x) - this.cardPadding;\n    } else {\n      w = this.cardWidth;\n    }\n\n    // Card width should be MIN_CARD_SIZE at least\n    w = Math.max(w, MIN_CARD_SIZE);\n    return w;\n  }\n\n  getCardY(d) {\n    let y = this.yScale(d.y) + this.chartTop - this.cardHeight - this.cardPadding;\n    if (this.panel.yAxis.logBase !== 1 && d.y === 0) {\n      y = this.chartBottom - this.cardHeight - this.cardPadding;\n    } else {\n      if (y < this.chartTop) {\n        y = this.chartTop;\n      }\n    }\n\n    return y;\n  }\n\n  getCardHeight(d) {\n    const y = this.yScale(d.y) + this.chartTop - this.cardHeight - this.cardPadding;\n    let h = this.cardHeight;\n\n    if (this.panel.yAxis.logBase !== 1 && d.y === 0) {\n      return this.cardHeight;\n    }\n\n    // Cut card height to prevent overlay\n    if (y < this.chartTop) {\n      h = this.yScale(d.y) - this.cardPadding;\n    } else if (this.yScale(d.y) > this.chartBottom) {\n      h = this.chartBottom - y;\n    } else if (y + this.cardHeight > this.chartBottom) {\n      h = this.chartBottom - y;\n    }\n\n    // Height can't be more than chart height\n    h = Math.min(h, this.chartHeight);\n    // Card height should be MIN_CARD_SIZE at least\n    h = Math.max(h, MIN_CARD_SIZE);\n\n    return h;\n  }\n\n  getCardColor(d) {\n    if (this.panel.color.mode === 'opacity') {\n      return this.panel.color.cardColor;\n    } else {\n      return this.colorScale(d.count);\n    }\n  }\n\n  getCardOpacity(d) {\n    if (this.panel.color.mode === 'opacity') {\n      return this.opacityScale(d.count);\n    } else {\n      return 1;\n    }\n  }\n\n  getEventOffset(event) {\n    const elemOffset = this.$heatmap.offset();\n    const x = Math.floor(event.clientX - elemOffset.left);\n    const y = Math.floor(event.clientY - elemOffset.top);\n    return { x, y };\n  }\n\n  onMouseDown(event) {\n    const offset = this.getEventOffset(event);\n    this.selection.active = true;\n    this.selection.x1 = offset.x;\n\n    this.mouseUpHandler = () => {\n      this.onMouseUp();\n    };\n\n    $(document).one('mouseup', this.mouseUpHandler.bind(this));\n  }\n\n  onMouseUp() {\n    $(document).unbind('mouseup', this.mouseUpHandler.bind(this));\n    this.mouseUpHandler = null;\n    this.selection.active = false;\n\n    const selectionRange = Math.abs(this.selection.x2 - this.selection.x1);\n    if (this.selection.x2 >= 0 && selectionRange > MIN_SELECTION_WIDTH) {\n      const timeFrom = this.xScale.invert(Math.min(this.selection.x1, this.selection.x2) - this.yAxisWidth);\n      const timeTo = this.xScale.invert(Math.max(this.selection.x1, this.selection.x2) - this.yAxisWidth);\n\n      this.ctrl.timeSrv.setTime({\n        from: moment.utc(timeFrom),\n        to: moment.utc(timeTo),\n      });\n    }\n\n    this.clearSelection();\n  }\n\n  onMouseLeave() {\n    appEvents.emit('graph-hover-clear');\n    this.clearCrosshair();\n  }\n\n  onMouseMove(event) {\n    if (!this.heatmap) {\n      return;\n    }\n\n    const offset = this.getEventOffset(event);\n    if (this.selection.active) {\n      // Clear crosshair and tooltip\n      this.clearCrosshair();\n      this.tooltip.destroy();\n\n      this.selection.x2 = this.limitSelection(offset.x);\n      this.drawSelection(this.selection.x1, this.selection.x2);\n    } else {\n      const pos = this.getEventPos(event, offset);\n      this.drawCrosshair(offset.x);\n      this.tooltip.show(pos, this.data);\n      this.emitGraphHoverEvent(pos);\n    }\n  }\n\n  getEventPos(event, offset) {\n    const x = this.xScale.invert(offset.x - this.yAxisWidth).valueOf();\n    const y = this.yScale.invert(offset.y - this.chartTop);\n    const pos = {\n      pageX: event.pageX,\n      pageY: event.pageY,\n      x: x,\n      x1: x,\n      y: y,\n      y1: y,\n      panelRelY: null,\n      offset,\n    };\n\n    return pos;\n  }\n\n  emitGraphHoverEvent(pos) {\n    // Set minimum offset to prevent showing legend from another panel\n    pos.panelRelY = Math.max(pos.offset.y / this.height, 0.001);\n    // broadcast to other graph panels that we are hovering\n    appEvents.emit('graph-hover', { pos: pos, panel: this.panel });\n  }\n\n  limitSelection(x2) {\n    x2 = Math.max(x2, this.yAxisWidth);\n    x2 = Math.min(x2, this.chartWidth + this.yAxisWidth);\n    return x2;\n  }\n\n  drawSelection(posX1, posX2) {\n    if (this.heatmap) {\n      this.heatmap.selectAll('.heatmap-selection').remove();\n      const selectionX = Math.min(posX1, posX2);\n      const selectionWidth = Math.abs(posX1 - posX2);\n\n      if (selectionWidth > MIN_SELECTION_WIDTH) {\n        this.heatmap\n          .append('rect')\n          .attr('class', 'heatmap-selection')\n          .attr('x', selectionX)\n          .attr('width', selectionWidth)\n          .attr('y', this.chartTop)\n          .attr('height', this.chartHeight);\n      }\n    }\n  }\n\n  clearSelection() {\n    this.selection.x1 = -1;\n    this.selection.x2 = -1;\n\n    if (this.heatmap) {\n      this.heatmap.selectAll('.heatmap-selection').remove();\n    }\n  }\n\n  drawCrosshair(position) {\n    if (this.heatmap) {\n      this.heatmap.selectAll('.heatmap-crosshair').remove();\n\n      let posX = position;\n      posX = Math.max(posX, this.yAxisWidth);\n      posX = Math.min(posX, this.chartWidth + this.yAxisWidth);\n\n      this.heatmap\n        .append('g')\n        .attr('class', 'heatmap-crosshair')\n        .attr('transform', 'translate(' + posX + ',0)')\n        .append('line')\n        .attr('x1', 1)\n        .attr('y1', this.chartTop)\n        .attr('x2', 1)\n        .attr('y2', this.chartBottom)\n        .attr('stroke-width', 1);\n    }\n  }\n\n  drawSharedCrosshair(pos) {\n    if (this.heatmap && this.ctrl.dashboard.graphTooltip !== 0) {\n      const posX = this.xScale(pos.x) + this.yAxisWidth;\n      this.drawCrosshair(posX);\n    }\n  }\n\n  clearCrosshair() {\n    if (this.heatmap) {\n      this.heatmap.selectAll('.heatmap-crosshair').remove();\n    }\n  }\n\n  render() {\n    this.data = this.ctrl.data;\n    this.panel = this.ctrl.panel;\n    this.timeRange = this.ctrl.range;\n\n    if (!this.setElementHeight() || !this.data) {\n      return;\n    }\n\n    // Draw default axes and return if no data\n    if (_.isEmpty(this.data.buckets)) {\n      this.addHeatmapCanvas();\n      this.addAxes();\n      return;\n    }\n\n    this.addHeatmap();\n    this.scope.yAxisWidth = this.yAxisWidth;\n    this.scope.xAxisHeight = this.xAxisHeight;\n    this.scope.chartHeight = this.chartHeight;\n    this.scope.chartWidth = this.chartWidth;\n    this.scope.chartTop = this.chartTop;\n  }\n}\n","import { MetricsPanelCtrl } from 'app/plugins/sdk';\nimport _ from 'lodash';\nimport kbn from 'app/core/utils/kbn';\nimport TimeSeries from 'app/core/time_series2';\nimport { axesEditor } from './axes_editor';\nimport { heatmapDisplayEditor } from './display_editor';\nimport rendering from './rendering';\nimport {\n  convertToHeatMap,\n  convertToCards,\n  histogramToHeatmap,\n  calculateBucketSize,\n  sortSeriesByLabel,\n} from './heatmap_data_converter';\n\nconst X_BUCKET_NUMBER_DEFAULT = 30;\nconst Y_BUCKET_NUMBER_DEFAULT = 10;\n\nconst panelDefaults = {\n  heatmap: {},\n  cards: {\n    cardPadding: null,\n    cardRound: null,\n  },\n  color: {\n    mode: 'spectrum',\n    cardColor: '#b4ff00',\n    colorScale: 'sqrt',\n    exponent: 0.5,\n    colorScheme: 'interpolateOranges',\n  },\n  legend: {\n    show: false,\n  },\n  dataFormat: 'timeseries',\n  yBucketBound: 'auto',\n  xAxis: {\n    show: true,\n  },\n  yAxis: {\n    show: true,\n    format: 'short',\n    decimals: null,\n    logBase: 1,\n    splitFactor: null,\n    min: null,\n    max: null,\n  },\n  xBucketSize: null,\n  xBucketNumber: null,\n  yBucketSize: null,\n  yBucketNumber: null,\n  tooltip: {\n    show: true,\n    showHistogram: false,\n  },\n  highlightCards: true,\n};\n\nconst colorModes = ['opacity', 'spectrum'];\nconst opacityScales = ['linear', 'sqrt'];\n\n// Schemes from d3-scale-chromatic\n// https://github.com/d3/d3-scale-chromatic\nconst colorSchemes = [\n  // Diverging\n  { name: 'Spectral', value: 'interpolateSpectral', invert: 'always' },\n  { name: 'RdYlGn', value: 'interpolateRdYlGn', invert: 'always' },\n\n  // Sequential (Single Hue)\n  { name: 'Blues', value: 'interpolateBlues', invert: 'dark' },\n  { name: 'Greens', value: 'interpolateGreens', invert: 'dark' },\n  { name: 'Greys', value: 'interpolateGreys', invert: 'dark' },\n  { name: 'Oranges', value: 'interpolateOranges', invert: 'dark' },\n  { name: 'Purples', value: 'interpolatePurples', invert: 'dark' },\n  { name: 'Reds', value: 'interpolateReds', invert: 'dark' },\n\n  // Sequential (Multi-Hue)\n  { name: 'Viridis', value: 'interpolateViridis', invert: 'light' },\n  { name: 'Magma', value: 'interpolateMagma', invert: 'light' },\n  { name: 'Inferno', value: 'interpolateInferno', invert: 'light' },\n  { name: 'Plasma', value: 'interpolatePlasma', invert: 'light' },\n  { name: 'Warm', value: 'interpolateWarm', invert: 'light' },\n  { name: 'Cool', value: 'interpolateCool', invert: 'light' },\n  { name: 'Cubehelix', value: 'interpolateCubehelixDefault', invert: 'light' },\n  { name: 'BuGn', value: 'interpolateBuGn', invert: 'dark' },\n  { name: 'BuPu', value: 'interpolateBuPu', invert: 'dark' },\n  { name: 'GnBu', value: 'interpolateGnBu', invert: 'dark' },\n  { name: 'OrRd', value: 'interpolateOrRd', invert: 'dark' },\n  { name: 'PuBuGn', value: 'interpolatePuBuGn', invert: 'dark' },\n  { name: 'PuBu', value: 'interpolatePuBu', invert: 'dark' },\n  { name: 'PuRd', value: 'interpolatePuRd', invert: 'dark' },\n  { name: 'RdPu', value: 'interpolateRdPu', invert: 'dark' },\n  { name: 'YlGnBu', value: 'interpolateYlGnBu', invert: 'dark' },\n  { name: 'YlGn', value: 'interpolateYlGn', invert: 'dark' },\n  { name: 'YlOrBr', value: 'interpolateYlOrBr', invert: 'dark' },\n  { name: 'YlOrRd', value: 'interpolateYlOrRd', invert: 'dark' },\n];\n\nconst ds_support_histogram_sort = ['prometheus', 'elasticsearch'];\n\nexport class HeatmapCtrl extends MetricsPanelCtrl {\n  static templateUrl = 'module.html';\n\n  opacityScales: any = [];\n  colorModes: any = [];\n  colorSchemes: any = [];\n  selectionActivated: boolean;\n  unitFormats: any;\n  data: any;\n  series: any;\n  timeSrv: any;\n  dataWarning: any;\n  decimals: number;\n  scaledDecimals: number;\n\n  /** @ngInject */\n  constructor($scope, $injector, timeSrv) {\n    super($scope, $injector);\n    this.timeSrv = timeSrv;\n    this.selectionActivated = false;\n\n    _.defaultsDeep(this.panel, panelDefaults);\n    this.opacityScales = opacityScales;\n    this.colorModes = colorModes;\n    this.colorSchemes = colorSchemes;\n\n    // Bind grafana panel events\n    this.events.on('render', this.onRender.bind(this));\n    this.events.on('data-received', this.onDataReceived.bind(this));\n    this.events.on('data-error', this.onDataError.bind(this));\n    this.events.on('data-snapshot-load', this.onDataReceived.bind(this));\n    this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n\n    this.onCardColorChange = this.onCardColorChange.bind(this);\n  }\n\n  onInitEditMode() {\n    this.addEditorTab('Axes', axesEditor, 2);\n    this.addEditorTab('Display', heatmapDisplayEditor, 3);\n    this.unitFormats = kbn.getUnitFormats();\n  }\n\n  zoomOut(evt) {\n    this.publishAppEvent('zoom-out', 2);\n  }\n\n  onRender() {\n    if (!this.range) {\n      return;\n    }\n\n    if (this.panel.dataFormat === 'tsbuckets') {\n      this.convertHistogramToHeatmapData();\n    } else {\n      this.convertTimeSeriesToHeatmapData();\n    }\n  }\n\n  convertTimeSeriesToHeatmapData() {\n    let xBucketSize, yBucketSize, bucketsData, heatmapStats;\n    const logBase = this.panel.yAxis.logBase;\n\n    const xBucketNumber = this.panel.xBucketNumber || X_BUCKET_NUMBER_DEFAULT;\n    const xBucketSizeByNumber = Math.floor((this.range.to - this.range.from) / xBucketNumber);\n\n    // Parse X bucket size (number or interval)\n    const isIntervalString = kbn.interval_regex.test(this.panel.xBucketSize);\n    if (isIntervalString) {\n      xBucketSize = kbn.interval_to_ms(this.panel.xBucketSize);\n    } else if (\n      isNaN(Number(this.panel.xBucketSize)) ||\n      this.panel.xBucketSize === '' ||\n      this.panel.xBucketSize === null\n    ) {\n      xBucketSize = xBucketSizeByNumber;\n    } else {\n      xBucketSize = Number(this.panel.xBucketSize);\n    }\n\n    // Calculate Y bucket size\n    heatmapStats = this.parseSeries(this.series);\n    const yBucketNumber = this.panel.yBucketNumber || Y_BUCKET_NUMBER_DEFAULT;\n    if (logBase !== 1) {\n      yBucketSize = this.panel.yAxis.splitFactor;\n    } else {\n      if (heatmapStats.max === heatmapStats.min) {\n        if (heatmapStats.max) {\n          yBucketSize = heatmapStats.max / Y_BUCKET_NUMBER_DEFAULT;\n        } else {\n          yBucketSize = 1;\n        }\n      } else {\n        yBucketSize = (heatmapStats.max - heatmapStats.min) / yBucketNumber;\n      }\n      yBucketSize = this.panel.yBucketSize || yBucketSize;\n    }\n\n    bucketsData = convertToHeatMap(this.series, yBucketSize, xBucketSize, logBase);\n\n    // Set default Y range if no data\n    if (!heatmapStats.min && !heatmapStats.max) {\n      heatmapStats = { min: -1, max: 1, minLog: 1 };\n      yBucketSize = 1;\n    }\n\n    const { cards, cardStats } = convertToCards(bucketsData);\n\n    this.data = {\n      buckets: bucketsData,\n      heatmapStats: heatmapStats,\n      xBucketSize: xBucketSize,\n      yBucketSize: yBucketSize,\n      cards: cards,\n      cardStats: cardStats,\n    };\n  }\n\n  convertHistogramToHeatmapData() {\n    const panelDatasource = this.getPanelDataSourceType();\n    let xBucketSize, yBucketSize, bucketsData, tsBuckets;\n\n    // Try to sort series by bucket bound, if datasource doesn't do it.\n    if (!_.includes(ds_support_histogram_sort, panelDatasource)) {\n      this.series.sort(sortSeriesByLabel);\n    }\n\n    // Convert histogram to heatmap. Each histogram bucket represented by the series which name is\n    // a top (or bottom, depends of datasource) bucket bound. Further, these values will be used as X axis labels.\n    bucketsData = histogramToHeatmap(this.series);\n\n    tsBuckets = _.map(this.series, 'label');\n    const yBucketBound = this.panel.yBucketBound;\n    if ((panelDatasource === 'prometheus' && yBucketBound !== 'lower') || yBucketBound === 'upper') {\n      // Prometheus labels are upper inclusive bounds, so add empty bottom bucket label.\n      tsBuckets = [''].concat(tsBuckets);\n    } else {\n      // Elasticsearch uses labels as lower bucket bounds, so add empty top bucket label.\n      // Use this as a default mode as well.\n      tsBuckets.push('');\n    }\n\n    // Calculate bucket size based on heatmap data\n    const xBucketBoundSet = _.map(_.keys(bucketsData), key => Number(key));\n    xBucketSize = calculateBucketSize(xBucketBoundSet);\n    // Always let yBucketSize=1 in 'tsbuckets' mode\n    yBucketSize = 1;\n\n    const { cards, cardStats } = convertToCards(bucketsData);\n\n    this.data = {\n      buckets: bucketsData,\n      xBucketSize: xBucketSize,\n      yBucketSize: yBucketSize,\n      tsBuckets: tsBuckets,\n      cards: cards,\n      cardStats: cardStats,\n    };\n  }\n\n  getPanelDataSourceType() {\n    if (this.datasource.meta && this.datasource.meta.id) {\n      return this.datasource.meta.id;\n    } else {\n      return 'unknown';\n    }\n  }\n\n  onDataReceived(dataList) {\n    this.series = dataList.map(this.seriesHandler.bind(this));\n\n    this.dataWarning = null;\n    const datapointsCount = _.reduce(\n      this.series,\n      (sum, series) => {\n        return sum + series.datapoints.length;\n      },\n      0\n    );\n\n    if (datapointsCount === 0) {\n      this.dataWarning = {\n        title: 'No data points',\n        tip: 'No datapoints returned from data query',\n      };\n    } else {\n      for (const series of this.series) {\n        if (series.isOutsideRange) {\n          this.dataWarning = {\n            title: 'Data points outside time range',\n            tip: 'Can be caused by timezone mismatch or missing time filter in query',\n          };\n          break;\n        }\n      }\n    }\n\n    this.render();\n  }\n\n  onDataError() {\n    this.series = [];\n    this.render();\n  }\n\n  onCardColorChange(newColor) {\n    this.panel.color.cardColor = newColor;\n    this.render();\n  }\n\n  seriesHandler(seriesData) {\n    if (seriesData.datapoints === undefined) {\n      throw new Error('Heatmap error: data should be a time series');\n    }\n\n    const series = new TimeSeries({\n      datapoints: seriesData.datapoints,\n      alias: seriesData.target,\n    });\n\n    series.flotpairs = series.getFlotPairs(this.panel.nullPointMode);\n\n    const datapoints = seriesData.datapoints || [];\n    if (datapoints && datapoints.length > 0) {\n      const last = datapoints[datapoints.length - 1][1];\n      const from = this.range.from;\n      if (last - from < -10000) {\n        series.isOutsideRange = true;\n      }\n    }\n\n    return series;\n  }\n\n  parseSeries(series) {\n    const min = _.min(_.map(series, s => s.stats.min));\n    const minLog = _.min(_.map(series, s => s.stats.logmin));\n    const max = _.max(_.map(series, s => s.stats.max));\n\n    return {\n      max: max,\n      min: min,\n      minLog: minLog,\n    };\n  }\n\n  parseHistogramSeries(series) {\n    const bounds = _.map(series, s => Number(s.alias));\n    const min = _.min(bounds);\n    const minLog = _.min(bounds);\n    const max = _.max(bounds);\n\n    return {\n      max: max,\n      min: min,\n      minLog: minLog,\n    };\n  }\n\n  link(scope, elem, attrs, ctrl) {\n    rendering(scope, elem, attrs, ctrl);\n  }\n}\n","import './color_legend';\nimport { HeatmapCtrl } from './heatmap_ctrl';\n\nexport { HeatmapCtrl as PanelCtrl };\n","import _ from 'lodash';\nimport flatten from '../../../core/utils/flatten';\nimport TimeSeries from '../../../core/time_series2';\nimport TableModel from '../../../core/table_model';\n\nconst transformers = {};\n\ntransformers['timeseries_to_rows'] = {\n  description: '时间序列转到行',\n  getColumns: function() {\n    return [];\n  },\n  transform: function(data, panel, model) {\n    model.columns = [{ text: 'Time', type: 'date' }, { text: 'Metric' }, { text: 'Value' }];\n\n    for (let i = 0; i < data.length; i++) {\n      const series = data[i];\n      for (let y = 0; y < series.datapoints.length; y++) {\n        const dp = series.datapoints[y];\n        model.rows.push([dp[1], series.target, dp[0]]);\n      }\n    }\n  },\n};\n\ntransformers['timeseries_to_columns'] = {\n  description: '时间序列转到列',\n  getColumns: function() {\n    return [];\n  },\n  transform: function(data, panel, model) {\n    model.columns.push({ text: '日期', type: 'date' });\n\n    // group by time\n    const points = {};\n\n    for (let i = 0; i < data.length; i++) {\n      const series = data[i];\n      model.columns.push({ text: series.target });\n\n      for (let y = 0; y < series.datapoints.length; y++) {\n        const dp = series.datapoints[y];\n        const timeKey = dp[1].toString();\n\n        if (!points[timeKey]) {\n          points[timeKey] = { time: dp[1] };\n          points[timeKey][i] = dp[0];\n        } else {\n          points[timeKey][i] = dp[0];\n        }\n      }\n    }\n\n    for (const time in points) {\n      const point = points[time];\n      const values = [point.time];\n\n      for (let i = 0; i < data.length; i++) {\n        const value = point[i];\n        values.push(value);\n      }\n\n      model.rows.push(values);\n    }\n  },\n};\n\ntransformers['timeseries_aggregations'] = {\n  description: '时间序列聚合',\n  getColumns: function() {\n    return [\n      { text: 'Avg', value: 'avg' },\n      { text: 'Min', value: 'min' },\n      { text: 'Max', value: 'max' },\n      { text: 'Total', value: 'total' },\n      { text: 'Current', value: 'current' },\n      { text: 'Count', value: 'count' },\n    ];\n  },\n  transform: function(data, panel, model) {\n    let i, y;\n    model.columns.push({ text: 'Metric' });\n\n    for (i = 0; i < panel.columns.length; i++) {\n      model.columns.push({ text: panel.columns[i].text });\n    }\n\n    for (i = 0; i < data.length; i++) {\n      const series = new TimeSeries({\n        datapoints: data[i].datapoints,\n        alias: data[i].target,\n      });\n\n      series.getFlotPairs('connected');\n      const cells = [series.alias];\n\n      for (y = 0; y < panel.columns.length; y++) {\n        cells.push(series.stats[panel.columns[y].value]);\n      }\n\n      model.rows.push(cells);\n    }\n  },\n};\n\ntransformers['annotations'] = {\n  description: '注释',\n  getColumns: function() {\n    return [];\n  },\n  transform: function(data, panel, model) {\n    model.columns.push({ text: '日期', type: 'date' });\n    model.columns.push({ text: '标题' });\n    model.columns.push({ text: '文本' });\n    model.columns.push({ text: '标签' });\n\n    if (!data || !data.annotations || data.annotations.length === 0) {\n      return;\n    }\n\n    for (let i = 0; i < data.annotations.length; i++) {\n      const evt = data.annotations[i];\n      model.rows.push([evt.time, evt.title, evt.text, evt.tags]);\n    }\n  },\n};\n\ntransformers['table'] = {\n  description: '表格',\n  getColumns: function(data) {\n    if (!data || data.length === 0) {\n      return [];\n    }\n\n    // Single query returns data columns as is\n    if (data.length === 1) {\n      return [...data[0].columns];\n    }\n\n    // Track column indexes: name -> index\n    const columnNames = {};\n\n    // Union of all columns\n    const columns = data.reduce((acc, series) => {\n      series.columns.forEach(col => {\n        const { text } = col;\n        if (columnNames[text] === undefined) {\n          columnNames[text] = acc.length;\n          acc.push(col);\n        }\n      });\n      return acc;\n    }, []);\n\n    return columns;\n  },\n  transform: function(data, panel, model) {\n    if (!data || data.length === 0) {\n      return;\n    }\n\n    const noTableIndex = _.findIndex(data, d => d.type !== 'table');\n    if (noTableIndex > -1) {\n      throw {\n        message: `查询为 #${String.fromCharCode(\n          65 + noTableIndex\n        )} 的结果不是表格格式，尝试使用其他的转换格式。`,\n      };\n    }\n\n    // Single query returns data columns and rows as is\n    if (data.length === 1) {\n      model.columns = [...data[0].columns];\n      model.rows = [...data[0].rows];\n      return;\n    }\n\n    // Track column indexes of union: name -> index\n    const columnNames = {};\n\n    // Union of all non-value columns\n    const columnsUnion = data.reduce((acc, series) => {\n      series.columns.forEach(col => {\n        const { text } = col;\n        if (columnNames[text] === undefined) {\n          columnNames[text] = acc.length;\n          acc.push(col);\n        }\n      });\n      return acc;\n    }, []);\n\n    // Map old column index to union index per series, e.g.,\n    // given columnNames {A: 0, B: 1} and\n    // data [{columns: [{ text: 'A' }]}, {columns: [{ text: 'B' }]}] => [[0], [1]]\n    const columnIndexMapper = data.map(series => series.columns.map(col => columnNames[col.text]));\n\n    // Flatten rows of all series and adjust new column indexes\n    const flattenedRows = data.reduce((acc, series, seriesIndex) => {\n      const mapper = columnIndexMapper[seriesIndex];\n      series.rows.forEach(row => {\n        const alteredRow = [];\n        // Shifting entries according to index mapper\n        mapper.forEach((to, from) => {\n          alteredRow[to] = row[from];\n        });\n        acc.push(alteredRow);\n      });\n      return acc;\n    }, []);\n\n    // Returns true if both rows have matching non-empty fields as well as matching\n    // indexes where one field is empty and the other is not\n    function areRowsMatching(columns, row, otherRow) {\n      let foundFieldToMatch = false;\n      for (let columnIndex = 0; columnIndex < columns.length; columnIndex++) {\n        if (row[columnIndex] !== undefined && otherRow[columnIndex] !== undefined) {\n          if (row[columnIndex] !== otherRow[columnIndex]) {\n            return false;\n          }\n        } else if (row[columnIndex] === undefined || otherRow[columnIndex] === undefined) {\n          foundFieldToMatch = true;\n        }\n      }\n      return foundFieldToMatch;\n    }\n\n    // Merge rows that have same values for columns\n    const mergedRows = {};\n    const compactedRows = flattenedRows.reduce((acc, row, rowIndex) => {\n      if (!mergedRows[rowIndex]) {\n        // Look from current row onwards\n        let offset = rowIndex + 1;\n        // More than one row can be merged into current row\n        while (offset < flattenedRows.length) {\n          // Find next row that could be merged\n          const match = _.findIndex(flattenedRows, otherRow => areRowsMatching(columnsUnion, row, otherRow), offset);\n          if (match > -1) {\n            const matchedRow = flattenedRows[match];\n            // Merge values from match into current row if there is a gap in the current row\n            for (let columnIndex = 0; columnIndex < columnsUnion.length; columnIndex++) {\n              if (row[columnIndex] === undefined && matchedRow[columnIndex] !== undefined) {\n                row[columnIndex] = matchedRow[columnIndex];\n              }\n            }\n            // Don't visit this row again\n            mergedRows[match] = matchedRow;\n            // Keep looking for more rows to merge\n            offset = match + 1;\n          } else {\n            // No match found, stop looking\n            break;\n          }\n        }\n        acc.push(row);\n      }\n      return acc;\n    }, []);\n\n    model.columns = columnsUnion;\n    model.rows = compactedRows;\n  },\n};\n\ntransformers['json'] = {\n  description: 'JSON 数据',\n  getColumns: function(data) {\n    if (!data || data.length === 0) {\n      return [];\n    }\n\n    const names: any = {};\n    for (let i = 0; i < data.length; i++) {\n      const series = data[i];\n      if (series.type !== 'docs') {\n        continue;\n      }\n\n      // only look at 100 docs\n      const maxDocs = Math.min(series.datapoints.length, 100);\n      for (let y = 0; y < maxDocs; y++) {\n        const doc = series.datapoints[y];\n        const flattened = flatten(doc, null);\n        for (const propName in flattened) {\n          names[propName] = true;\n        }\n      }\n    }\n\n    return _.map(names, function(value, key) {\n      return { text: key, value: key };\n    });\n  },\n  transform: function(data, panel, model) {\n    let i, y, z;\n\n    for (const column of panel.columns) {\n      const tableCol: any = { text: column.text };\n\n      // if filterable data then set columns to filterable\n      if (data.length > 0 && data[0].filterable) {\n        tableCol.filterable = true;\n      }\n\n      model.columns.push(tableCol);\n    }\n\n    if (model.columns.length === 0) {\n      model.columns.push({ text: 'JSON' });\n    }\n\n    for (i = 0; i < data.length; i++) {\n      const series = data[i];\n\n      for (y = 0; y < series.datapoints.length; y++) {\n        const dp = series.datapoints[y];\n        const values = [];\n\n        if (_.isObject(dp) && panel.columns.length > 0) {\n          const flattened = flatten(dp, null);\n          for (z = 0; z < panel.columns.length; z++) {\n            values.push(flattened[panel.columns[z].value]);\n          }\n        } else {\n          values.push(JSON.stringify(dp));\n        }\n\n        model.rows.push(values);\n      }\n    }\n  },\n};\n\nfunction transformDataToTable(data, panel) {\n  const model = new TableModel();\n\n  if (!data || data.length === 0) {\n    return model;\n  }\n\n  const transformer = transformers[panel.transform];\n  if (!transformer) {\n    throw { message: 'Transformer ' + panel.transform + ' not found' };\n  }\n\n  transformer.transform(data, panel, model);\n  return model;\n}\n\nexport { transformers, transformDataToTable };\n","import _ from 'lodash';\nimport { transformers } from './transformers';\n\nexport class TablePanelEditorCtrl {\n  panel: any;\n  panelCtrl: any;\n  transformers: any;\n  fontSizes: any;\n  addColumnSegment: any;\n  getColumnNames: any;\n  canSetColumns: boolean;\n  columnsHelpMessage: string;\n\n  /** @ngInject */\n  constructor($scope, private $q, private uiSegmentSrv) {\n    $scope.editor = this;\n    this.panelCtrl = $scope.ctrl;\n    this.panel = this.panelCtrl.panel;\n    this.transformers = transformers;\n    this.fontSizes = ['80%', '90%', '100%', '110%', '120%', '130%', '150%', '160%', '180%', '200%', '220%', '250%'];\n    this.addColumnSegment = uiSegmentSrv.newPlusButton();\n    this.updateTransformHints();\n  }\n\n  updateTransformHints() {\n    this.canSetColumns = false;\n    this.columnsHelpMessage = '';\n\n    switch (this.panel.transform) {\n      case 'timeseries_aggregations': {\n        this.canSetColumns = true;\n        break;\n      }\n      case 'json': {\n        this.canSetColumns = true;\n        break;\n      }\n      case 'table': {\n        this.columnsHelpMessage = '列的内容及顺序由数据查询决定';\n      }\n    }\n  }\n\n  getColumnOptions() {\n    if (!this.panelCtrl.dataRaw) {\n      return this.$q.when([]);\n    }\n    const columns = this.transformers[this.panel.transform].getColumns(this.panelCtrl.dataRaw);\n    const segments = _.map(columns, (c: any) => this.uiSegmentSrv.newSegment({ value: c.text }));\n    return this.$q.when(segments);\n  }\n\n  addColumn() {\n    const columns = transformers[this.panel.transform].getColumns(this.panelCtrl.dataRaw);\n    const column = _.find(columns, { text: this.addColumnSegment.value });\n\n    if (column) {\n      this.panel.columns.push(column);\n      this.render();\n    }\n\n    const plusButton = this.uiSegmentSrv.newPlusButton();\n    this.addColumnSegment.html = plusButton.html;\n    this.addColumnSegment.value = plusButton.value;\n  }\n\n  transformChanged() {\n    this.panel.columns = [];\n    if (this.panel.transform === 'timeseries_aggregations') {\n      this.panel.columns.push({ text: 'Avg', value: 'avg' });\n    }\n\n    this.updateTransformHints();\n    this.render();\n  }\n\n  render() {\n    this.panelCtrl.render();\n  }\n\n  removeColumn(column) {\n    this.panel.columns = _.without(this.panel.columns, column);\n    this.panelCtrl.render();\n  }\n}\n\n/** @ngInject */\nexport function tablePanelEditor($q, uiSegmentSrv) {\n  'use strict';\n  return {\n    restrict: 'E',\n    scope: true,\n    templateUrl: 'public/app/plugins/panel/table/editor.html',\n    controller: TablePanelEditorCtrl,\n  };\n}\n","import _ from 'lodash';\nimport kbn from 'app/core/utils/kbn';\n\nexport class ColumnOptionsCtrl {\n  panel: any;\n  panelCtrl: any;\n  colorModes: any;\n  columnStyles: any;\n  columnTypes: any;\n  fontSizes: any;\n  dateFormats: any;\n  addColumnSegment: any;\n  unitFormats: any;\n  getColumnNames: any;\n  activeStyleIndex: number;\n  mappingTypes: any;\n\n  /** @ngInject */\n  constructor($scope) {\n    $scope.editor = this;\n\n    this.activeStyleIndex = 0;\n    this.panelCtrl = $scope.ctrl;\n    this.panel = this.panelCtrl.panel;\n    this.unitFormats = kbn.getUnitFormats();\n    this.colorModes = [\n      { text: '关闭', value: null },\n      { text: '单元格', value: 'cell' },\n      { text: '值', value: 'value' },\n      { text: '行', value: 'row' },\n    ];\n    this.columnTypes = [\n      { text: '数值', value: 'number' },\n      { text: '字符串', value: 'string' },\n      { text: '日期', value: 'date' },\n      { text: '隐藏', value: 'hidden' },\n    ];\n    this.fontSizes = ['80%', '90%', '100%', '110%', '120%', '130%', '150%', '160%', '180%', '200%', '220%', '250%'];\n    this.dateFormats = [\n      { text: 'YYYY-MM-DD HH:mm:ss', value: 'YYYY-MM-DD HH:mm:ss' },\n      { text: 'YYYY-MM-DD HH:mm:ss.SSS', value: 'YYYY-MM-DD HH:mm:ss.SSS' },\n      { text: 'MM/DD/YY h:mm:ss a', value: 'MM/DD/YY h:mm:ss a' },\n      { text: 'MMMM D, YYYY LT', value: 'MMMM D, YYYY LT' },\n    ];\n    this.mappingTypes = [{ text: '数据值转文本', value: 1 }, { text: '数值范围转文本', value: 2 }];\n\n    this.getColumnNames = () => {\n      if (!this.panelCtrl.table) {\n        return [];\n      }\n      return _.map(this.panelCtrl.table.columns, function(col: any) {\n        return col.text;\n      });\n    };\n\n    this.onColorChange = this.onColorChange.bind(this);\n  }\n\n  render() {\n    this.panelCtrl.render();\n  }\n\n  setUnitFormat(column, subItem) {\n    column.unit = subItem.value;\n    this.panelCtrl.render();\n  }\n\n  addColumnStyle() {\n    const newStyleRule = {\n      unit: 'short',\n      type: 'number',\n      alias: '',\n      decimals: 2,\n      colors: ['rgba(245, 54, 54, 0.9)', 'rgba(237, 129, 40, 0.89)', 'rgba(50, 172, 45, 0.97)'],\n      colorMode: null,\n      pattern: '',\n      dateFormat: 'YYYY-MM-DD HH:mm:ss',\n      thresholds: [],\n      mappingType: 1,\n    };\n\n    const styles = this.panel.styles;\n    const stylesCount = styles.length;\n    let indexToInsert = stylesCount;\n\n    // check if last is a catch all rule, then add it before that one\n    if (stylesCount > 0) {\n      const last = styles[stylesCount - 1];\n      if (last.pattern === '/.*/') {\n        indexToInsert = stylesCount - 1;\n      }\n    }\n\n    styles.splice(indexToInsert, 0, newStyleRule);\n    this.activeStyleIndex = indexToInsert;\n  }\n\n  removeColumnStyle(style) {\n    this.panel.styles = _.without(this.panel.styles, style);\n  }\n\n  invertColorOrder(index) {\n    const ref = this.panel.styles[index].colors;\n    const copy = ref[0];\n    ref[0] = ref[2];\n    ref[2] = copy;\n    this.panelCtrl.render();\n  }\n\n  onColorChange(styleIndex, colorIndex) {\n    return newColor => {\n      this.panel.styles[styleIndex].colors[colorIndex] = newColor;\n      this.render();\n    };\n  }\n\n  addValueMap(style) {\n    if (!style.valueMaps) {\n      style.valueMaps = [];\n    }\n    style.valueMaps.push({ value: '', text: '' });\n    this.panelCtrl.render();\n  }\n\n  removeValueMap(style, index) {\n    style.valueMaps.splice(index, 1);\n    this.panelCtrl.render();\n  }\n\n  addRangeMap(style) {\n    if (!style.rangeMaps) {\n      style.rangeMaps = [];\n    }\n    style.rangeMaps.push({ from: '', to: '', text: '' });\n    this.panelCtrl.render();\n  }\n\n  removeRangeMap(style, index) {\n    style.rangeMaps.splice(index, 1);\n    this.panelCtrl.render();\n  }\n}\n\n/** @ngInject */\nexport function columnOptionsTab($q, uiSegmentSrv) {\n  'use strict';\n  return {\n    restrict: 'E',\n    scope: true,\n    templateUrl: 'public/app/plugins/panel/table/column_options.html',\n    controller: ColumnOptionsCtrl,\n  };\n}\n","import _ from 'lodash';\nimport moment from 'moment';\nimport kbn from 'app/core/utils/kbn';\n\nexport class TableRenderer {\n  formatters: any[];\n  colorState: any;\n\n  constructor(private panel, private table, private isUtc, private sanitize, private templateSrv) {\n    this.initColumns();\n  }\n\n  setTable(table) {\n    this.table = table;\n\n    this.initColumns();\n  }\n\n  initColumns() {\n    this.formatters = [];\n    this.colorState = {};\n\n    for (let colIndex = 0; colIndex < this.table.columns.length; colIndex++) {\n      const column = this.table.columns[colIndex];\n      column.title = column.text;\n\n      for (let i = 0; i < this.panel.styles.length; i++) {\n        const style = this.panel.styles[i];\n\n        const regex = kbn.stringToJsRegex(style.pattern);\n        if (column.text.match(regex)) {\n          column.style = style;\n\n          if (style.alias) {\n            column.title = column.text.replace(regex, style.alias);\n          }\n\n          break;\n        }\n      }\n\n      this.formatters[colIndex] = this.createColumnFormatter(column);\n    }\n  }\n\n  getColorForValue(value, style) {\n    if (!style.thresholds) {\n      return null;\n    }\n    for (let i = style.thresholds.length; i > 0; i--) {\n      if (value >= style.thresholds[i - 1]) {\n        return style.colors[i];\n      }\n    }\n    return _.first(style.colors);\n  }\n\n  defaultCellFormatter(v, style) {\n    if (v === null || v === void 0 || v === undefined) {\n      return '';\n    }\n\n    if (_.isArray(v)) {\n      v = v.join(', ');\n    }\n\n    if (style && style.sanitize) {\n      return this.sanitize(v);\n    } else {\n      return _.escape(v);\n    }\n  }\n\n  createColumnFormatter(column) {\n    if (!column.style) {\n      return this.defaultCellFormatter;\n    }\n\n    if (column.style.type === 'hidden') {\n      return v => {\n        return undefined;\n      };\n    }\n\n    if (column.style.type === 'date') {\n      return v => {\n        if (v === undefined || v === null) {\n          return '-';\n        }\n\n        if (_.isArray(v)) {\n          v = v[0];\n        }\n        let date = moment(v);\n        if (this.isUtc) {\n          date = date.utc();\n        }\n        return date.format(column.style.dateFormat);\n      };\n    }\n\n    if (column.style.type === 'string') {\n      return v => {\n        if (_.isArray(v)) {\n          v = v.join(', ');\n        }\n\n        const mappingType = column.style.mappingType || 0;\n\n        if (mappingType === 1 && column.style.valueMaps) {\n          for (let i = 0; i < column.style.valueMaps.length; i++) {\n            const map = column.style.valueMaps[i];\n\n            if (v === null) {\n              if (map.value === 'null') {\n                return map.text;\n              }\n              continue;\n            }\n\n            // Allow both numeric and string values to be mapped\n            if ((!_.isString(v) && Number(map.value) === Number(v)) || map.value === v) {\n              this.setColorState(v, column.style);\n              return this.defaultCellFormatter(map.text, column.style);\n            }\n          }\n        }\n\n        if (mappingType === 2 && column.style.rangeMaps) {\n          for (let i = 0; i < column.style.rangeMaps.length; i++) {\n            const map = column.style.rangeMaps[i];\n\n            if (v === null) {\n              if (map.from === 'null' && map.to === 'null') {\n                return map.text;\n              }\n              continue;\n            }\n\n            if (Number(map.from) <= Number(v) && Number(map.to) >= Number(v)) {\n              this.setColorState(v, column.style);\n              return this.defaultCellFormatter(map.text, column.style);\n            }\n          }\n        }\n\n        if (v === null || v === void 0) {\n          return '-';\n        }\n\n        this.setColorState(v, column.style);\n        return this.defaultCellFormatter(v, column.style);\n      };\n    }\n\n    if (column.style.type === 'number') {\n      const valueFormatter = kbn.valueFormats[column.unit || column.style.unit];\n\n      return v => {\n        if (v === null || v === void 0) {\n          return '-';\n        }\n\n        if (_.isString(v) || _.isArray(v)) {\n          return this.defaultCellFormatter(v, column.style);\n        }\n\n        this.setColorState(v, column.style);\n        return valueFormatter(v, column.style.decimals, null);\n      };\n    }\n\n    return value => {\n      return this.defaultCellFormatter(value, column.style);\n    };\n  }\n\n  setColorState(value, style) {\n    if (!style.colorMode) {\n      return;\n    }\n\n    if (value === null || value === void 0 || _.isArray(value)) {\n      return;\n    }\n\n    const numericValue = Number(value);\n    if (numericValue === NaN) {\n      return;\n    }\n\n    this.colorState[style.colorMode] = this.getColorForValue(numericValue, style);\n  }\n\n  renderRowVariables(rowIndex) {\n    const scopedVars = {};\n    let cell_variable;\n    const row = this.table.rows[rowIndex];\n    for (let i = 0; i < row.length; i++) {\n      cell_variable = `__cell_${i}`;\n      scopedVars[cell_variable] = { value: row[i] };\n    }\n    return scopedVars;\n  }\n\n  formatColumnValue(colIndex, value) {\n    return this.formatters[colIndex] ? this.formatters[colIndex](value) : value;\n  }\n\n  renderCell(columnIndex, rowIndex, value, addWidthHack = false) {\n    value = this.formatColumnValue(columnIndex, value);\n\n    const column = this.table.columns[columnIndex];\n    let style = '';\n    const cellClasses = [];\n    let cellClass = '';\n\n    if (this.colorState.cell) {\n      style = ' style=\"background-color:' + this.colorState.cell + '\"';\n      cellClasses.push('table-panel-color-cell');\n      this.colorState.cell = null;\n    } else if (this.colorState.value) {\n      style = ' style=\"color:' + this.colorState.value + '\"';\n      this.colorState.value = null;\n    }\n    // because of the fixed table headers css only solution\n    // there is an issue if header cell is wider the cell\n    // this hack adds header content to cell (not visible)\n    let columnHtml = '';\n    if (addWidthHack) {\n      columnHtml = '<div class=\"table-panel-width-hack\">' + this.table.columns[columnIndex].title + '</div>';\n    }\n\n    if (value === undefined) {\n      style = ' style=\"display:none;\"';\n      column.hidden = true;\n    } else {\n      column.hidden = false;\n    }\n\n    if (column.hidden === true) {\n      return '';\n    }\n\n    if (column.style && column.style.preserveFormat) {\n      cellClasses.push('table-panel-cell-pre');\n    }\n\n    if (column.style && column.style.link) {\n      // Render cell as link\n      const scopedVars = this.renderRowVariables(rowIndex);\n      scopedVars['__cell'] = { value: value };\n\n      const cellLink = this.templateSrv.replace(column.style.linkUrl, scopedVars, encodeURIComponent);\n      const cellLinkTooltip = this.templateSrv.replace(column.style.linkTooltip, scopedVars);\n      const cellTarget = column.style.linkTargetBlank ? '_blank' : '';\n\n      cellClasses.push('table-panel-cell-link');\n\n      columnHtml += `\n        <a href=\"${cellLink}\" target=\"${cellTarget}\" data-link-tooltip data-original-title=\"${cellLinkTooltip}\" data-placement=\"right\"${style}>\n          ${value}\n        </a>\n      `;\n    } else {\n      columnHtml += value;\n    }\n\n    if (column.filterable) {\n      cellClasses.push('table-panel-cell-filterable');\n      columnHtml += `\n        <a class=\"table-panel-filter-link\" data-link-tooltip data-original-title=\"Filter out value\" data-placement=\"bottom\"\n           data-row=\"${rowIndex}\" data-column=\"${columnIndex}\" data-operator=\"!=\">\n          <i class=\"fa fa-search-minus\"></i>\n        </a>\n        <a class=\"table-panel-filter-link\" data-link-tooltip data-original-title=\"Filter for value\" data-placement=\"bottom\"\n           data-row=\"${rowIndex}\" data-column=\"${columnIndex}\" data-operator=\"=\">\n          <i class=\"fa fa-search-plus\"></i>\n        </a>`;\n    }\n\n    if (cellClasses.length) {\n      cellClass = ' class=\"' + cellClasses.join(' ') + '\"';\n    }\n\n    columnHtml = '<td' + cellClass + style + '>' + columnHtml + '</td>';\n    return columnHtml;\n  }\n\n  render(page) {\n    const pageSize = this.panel.pageSize || 100;\n    const startPos = page * pageSize;\n    const endPos = Math.min(startPos + pageSize, this.table.rows.length);\n    let html = '';\n    const rowClasses = [];\n    let rowClass = '';\n\n    for (let y = startPos; y < endPos; y++) {\n      const row = this.table.rows[y];\n      let cellHtml = '';\n      let rowStyle = '';\n      for (let i = 0; i < this.table.columns.length; i++) {\n        cellHtml += this.renderCell(i, y, row[i], y === startPos);\n      }\n\n      if (this.colorState.row) {\n        rowStyle = ' style=\"background-color:' + this.colorState.row + '\"';\n        rowClasses.push('table-panel-color-row');\n        this.colorState.row = null;\n      }\n\n      if (rowClasses.length) {\n        rowClass = ' class=\"' + rowClasses.join(' ') + '\"';\n      }\n\n      html += '<tr ' + rowClass + rowStyle + '>' + cellHtml + '</tr>';\n    }\n\n    return html;\n  }\n\n  render_values() {\n    const rows = [];\n\n    for (let y = 0; y < this.table.rows.length; y++) {\n      const row = this.table.rows[y];\n      const new_row = [];\n      for (let i = 0; i < this.table.columns.length; i++) {\n        new_row.push(this.formatColumnValue(i, row[i]));\n      }\n      rows.push(new_row);\n    }\n    return {\n      columns: this.table.columns,\n      rows: rows,\n    };\n  }\n}\n","import _ from 'lodash';\nimport $ from 'jquery';\nimport { MetricsPanelCtrl } from 'app/plugins/sdk';\nimport { transformDataToTable } from './transformers';\nimport { tablePanelEditor } from './editor';\nimport { columnOptionsTab } from './column_options';\nimport { TableRenderer } from './renderer';\n\nclass TablePanelCtrl extends MetricsPanelCtrl {\n  static templateUrl = 'module.html';\n\n  pageIndex: number;\n  dataRaw: any;\n  table: any;\n  renderer: any;\n\n  panelDefaults = {\n    targets: [{}],\n    transform: 'timeseries_to_columns',\n    pageSize: null,\n    showHeader: true,\n    styles: [\n      {\n        type: 'date',\n        pattern: 'Time',\n        alias: '日期',\n        dateFormat: 'YYYY-MM-DD HH:mm:ss',\n      },\n      {\n        unit: 'short',\n        type: 'number',\n        alias: '',\n        decimals: 2,\n        colors: ['rgba(245, 54, 54, 0.9)', 'rgba(237, 129, 40, 0.89)', 'rgba(50, 172, 45, 0.97)'],\n        colorMode: null,\n        pattern: '/.*/',\n        thresholds: [],\n      },\n    ],\n    columns: [],\n    scroll: true,\n    fontSize: '100%',\n    sort: { col: 0, desc: true },\n  };\n\n  /** @ngInject */\n  constructor($scope, $injector, templateSrv, private annotationsSrv, private $sanitize, private variableSrv) {\n    super($scope, $injector);\n\n    this.pageIndex = 0;\n\n    if (this.panel.styles === void 0) {\n      this.panel.styles = this.panel.columns;\n      this.panel.columns = this.panel.fields;\n      delete this.panel.columns;\n      delete this.panel.fields;\n    }\n\n    _.defaults(this.panel, this.panelDefaults);\n\n    this.events.on('data-received', this.onDataReceived.bind(this));\n    this.events.on('data-error', this.onDataError.bind(this));\n    this.events.on('data-snapshot-load', this.onDataReceived.bind(this));\n    this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n    this.events.on('init-panel-actions', this.onInitPanelActions.bind(this));\n  }\n\n  onInitEditMode() {\n    this.addEditorTab('选项', tablePanelEditor, 2);\n    this.addEditorTab('列风格', columnOptionsTab, 3);\n  }\n\n  onInitPanelActions(actions) {\n    actions.push({ text: '导出 CSV', click: 'ctrl.exportCsv()' });\n  }\n\n  issueQueries(datasource) {\n    this.pageIndex = 0;\n\n    if (this.panel.transform === 'annotations') {\n      this.setTimeQueryStart();\n      return this.annotationsSrv\n        .getAnnotations({\n          dashboard: this.dashboard,\n          panel: this.panel,\n          range: this.range,\n        })\n        .then(annotations => {\n          return { data: annotations };\n        });\n    }\n\n    return super.issueQueries(datasource);\n  }\n\n  onDataError(err) {\n    this.dataRaw = [];\n    this.render();\n  }\n\n  onDataReceived(dataList) {\n    this.dataRaw = dataList;\n    this.pageIndex = 0;\n\n    // automatically correct transform mode based on data\n    if (this.dataRaw && this.dataRaw.length) {\n      if (this.dataRaw[0].type === 'table') {\n        this.panel.transform = 'table';\n      } else {\n        if (this.dataRaw[0].type === 'docs') {\n          this.panel.transform = 'json';\n        } else {\n          if (this.panel.transform === 'table' || this.panel.transform === 'json') {\n            this.panel.transform = 'timeseries_to_rows';\n          }\n        }\n      }\n    }\n\n    this.render();\n  }\n\n  render() {\n    this.table = transformDataToTable(this.dataRaw, this.panel);\n    this.table.sort(this.panel.sort);\n\n    this.renderer = new TableRenderer(\n      this.panel,\n      this.table,\n      this.dashboard.isTimezoneUtc(),\n      this.$sanitize,\n      this.templateSrv\n    );\n\n    return super.render(this.table);\n  }\n\n  toggleColumnSort(col, colIndex) {\n    // remove sort flag from current column\n    if (this.table.columns[this.panel.sort.col]) {\n      this.table.columns[this.panel.sort.col].sort = false;\n    }\n\n    if (this.panel.sort.col === colIndex) {\n      if (this.panel.sort.desc) {\n        this.panel.sort.desc = false;\n      } else {\n        this.panel.sort.col = null;\n      }\n    } else {\n      this.panel.sort.col = colIndex;\n      this.panel.sort.desc = true;\n    }\n    this.render();\n  }\n\n  moveQuery(target, direction) {\n    super.moveQuery(target, direction);\n    super.refresh();\n  }\n\n  exportCsv() {\n    const scope = this.$scope.$new(true);\n    scope.tableData = this.renderer.render_values();\n    scope.panel = 'table';\n    this.publishAppEvent('show-modal', {\n      templateHtml: '<export-data-modal panel=\"panel\" data=\"tableData\"></export-data-modal>',\n      scope,\n      modalClass: 'modal--narrow',\n    });\n  }\n\n  link(scope, elem, attrs, ctrl: TablePanelCtrl) {\n    let data;\n    const panel = ctrl.panel;\n    let pageCount = 0;\n\n    function getTableHeight() {\n      let panelHeight = ctrl.height;\n\n      if (pageCount > 1) {\n        panelHeight -= 26;\n      }\n\n      return panelHeight - 31 + 'px';\n    }\n\n    function appendTableRows(tbodyElem) {\n      ctrl.renderer.setTable(data);\n      tbodyElem.empty();\n      tbodyElem.html(ctrl.renderer.render(ctrl.pageIndex));\n    }\n\n    function switchPage(e) {\n      const el = $(e.currentTarget);\n      ctrl.pageIndex = parseInt(el.text(), 10) - 1;\n      renderPanel();\n    }\n\n    function appendPaginationControls(footerElem) {\n      footerElem.empty();\n\n      const pageSize = panel.pageSize || 100;\n      pageCount = Math.ceil(data.rows.length / pageSize);\n      if (pageCount === 1) {\n        return;\n      }\n\n      const startPage = Math.max(ctrl.pageIndex - 3, 0);\n      const endPage = Math.min(pageCount, startPage + 9);\n\n      const paginationList = $('<ul></ul>');\n\n      for (let i = startPage; i < endPage; i++) {\n        const activeClass = i === ctrl.pageIndex ? 'active' : '';\n        const pageLinkElem = $(\n          '<li><a class=\"table-panel-page-link pointer ' + activeClass + '\">' + (i + 1) + '</a></li>'\n        );\n        paginationList.append(pageLinkElem);\n      }\n\n      footerElem.append(paginationList);\n    }\n\n    function renderPanel() {\n      const panelElem = elem.parents('.panel-content');\n      const rootElem = elem.find('.table-panel-scroll');\n      const tbodyElem = elem.find('tbody');\n      const footerElem = elem.find('.table-panel-footer');\n\n      elem.css({ 'font-size': panel.fontSize });\n      panelElem.addClass('table-panel-content');\n\n      appendTableRows(tbodyElem);\n      appendPaginationControls(footerElem);\n\n      rootElem.css({ 'max-height': panel.scroll ? getTableHeight() : '' });\n    }\n\n    // hook up link tooltips\n    elem.tooltip({\n      selector: '[data-link-tooltip]',\n    });\n\n    function addFilterClicked(e) {\n      const filterData = $(e.currentTarget).data();\n      const options = {\n        datasource: panel.datasource,\n        key: data.columns[filterData.column].text,\n        value: data.rows[filterData.row][filterData.column],\n        operator: filterData.operator,\n      };\n\n      ctrl.variableSrv.setAdhocFilter(options);\n    }\n\n    elem.on('click', '.table-panel-page-link', switchPage);\n    elem.on('click', '.table-panel-filter-link', addFilterClicked);\n\n    const unbindDestroy = scope.$on('$destroy', function() {\n      elem.off('click', '.table-panel-page-link');\n      elem.off('click', '.table-panel-filter-link');\n      unbindDestroy();\n    });\n\n    ctrl.events.on('render', function(renderData) {\n      data = renderData || data;\n      if (data) {\n        renderPanel();\n      }\n      ctrl.renderingCompleted();\n    });\n  }\n}\n\nexport { TablePanelCtrl, TablePanelCtrl as PanelCtrl };\n","import _ from 'lodash';\nimport $ from 'jquery';\nimport 'vendor/flot/jquery.flot';\nimport 'vendor/flot/jquery.flot.gauge';\nimport 'app/features/panellinks/link_srv';\n\nimport kbn from 'app/core/utils/kbn';\nimport config from 'app/core/config';\nimport TimeSeries from 'app/core/time_series2';\nimport { MetricsPanelCtrl } from 'app/plugins/sdk';\n\nclass SingleStatCtrl extends MetricsPanelCtrl {\n  static templateUrl = 'module.html';\n\n  dataType = 'timeseries';\n  series: any[];\n  data: any;\n  fontSizes: any[];\n  unitFormats: any[];\n  invalidGaugeRange: boolean;\n  panel: any;\n  events: any;\n  valueNameOptions: any[] = [\n    { value: 'min', text: '最小' },\n    { value: 'max', text: '最大' },\n    { value: 'avg', text: '平均' },\n    { value: 'current', text: '当前' },\n    { value: 'total', text: '总和' },\n    { value: 'name', text: '名称' },\n    { value: 'first', text: '首个' },\n    { value: 'delta', text: 'Delta' },\n    { value: 'diff', text: '差值' },\n    { value: 'range', text: '范围' },\n    { value: 'last_time', text: '上个数据点的时间' },\n  ];\n  tableColumnOptions: any;\n\n  // Set and populate defaults\n  panelDefaults = {\n    links: [],\n    datasource: null,\n    maxDataPoints: 100,\n    interval: null,\n    targets: [{}],\n    cacheTimeout: null,\n    format: 'none',\n    prefix: '',\n    postfix: '',\n    nullText: null,\n    valueMaps: [{ value: 'null', op: '=', text: 'N/A' }],\n    mappingTypes: [{ name: 'value to text', value: 1 }, { name: 'range to text', value: 2 }],\n    rangeMaps: [{ from: 'null', to: 'null', text: 'N/A' }],\n    mappingType: 1,\n    nullPointMode: 'connected',\n    valueName: 'avg',\n    prefixFontSize: '50%',\n    valueFontSize: '80%',\n    postfixFontSize: '50%',\n    thresholds: '',\n    colorBackground: false,\n    colorValue: false,\n    colors: ['#299c46', 'rgba(237, 129, 40, 0.89)', '#d44a3a'],\n    sparkline: {\n      show: false,\n      full: false,\n      lineColor: 'rgb(31, 120, 193)',\n      fillColor: 'rgba(31, 118, 189, 0.18)',\n    },\n    gauge: {\n      show: false,\n      minValue: 0,\n      maxValue: 100,\n      thresholdMarkers: true,\n      thresholdLabels: false,\n    },\n    tableColumn: '',\n  };\n\n  /** @ngInject */\n  constructor($scope, $injector, private linkSrv) {\n    super($scope, $injector);\n    _.defaults(this.panel, this.panelDefaults);\n\n    this.events.on('data-received', this.onDataReceived.bind(this));\n    this.events.on('data-error', this.onDataError.bind(this));\n    this.events.on('data-snapshot-load', this.onDataReceived.bind(this));\n    this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n\n    this.onSparklineColorChange = this.onSparklineColorChange.bind(this);\n    this.onSparklineFillChange = this.onSparklineFillChange.bind(this);\n  }\n\n  onInitEditMode() {\n    this.fontSizes = ['20%', '30%', '50%', '70%', '80%', '100%', '110%', '120%', '150%', '170%', '200%'];\n    this.addEditorTab('选项', 'public/app/plugins/panel/singlestat/editor.html', 2);\n    this.addEditorTab('值映射', 'public/app/plugins/panel/singlestat/mappings.html', 3);\n    this.unitFormats = kbn.getUnitFormats();\n  }\n\n  setUnitFormat(subItem) {\n    this.panel.format = subItem.value;\n    this.refresh();\n  }\n\n  onDataError(err) {\n    this.onDataReceived([]);\n  }\n\n  onDataReceived(dataList) {\n    const data: any = {};\n    if (dataList.length > 0 && dataList[0].type === 'table') {\n      this.dataType = 'table';\n      const tableData = dataList.map(this.tableHandler.bind(this));\n      this.setTableValues(tableData, data);\n    } else {\n      this.dataType = 'timeseries';\n      this.series = dataList.map(this.seriesHandler.bind(this));\n      this.setValues(data);\n    }\n    this.data = data;\n    this.render();\n  }\n\n  seriesHandler(seriesData) {\n    const series = new TimeSeries({\n      datapoints: seriesData.datapoints || [],\n      alias: seriesData.target,\n    });\n\n    series.flotpairs = series.getFlotPairs(this.panel.nullPointMode);\n    return series;\n  }\n\n  tableHandler(tableData) {\n    const datapoints = [];\n    const columnNames = {};\n\n    tableData.columns.forEach((column, columnIndex) => {\n      columnNames[columnIndex] = column.text;\n    });\n\n    this.tableColumnOptions = columnNames;\n    if (!_.find(tableData.columns, ['text', this.panel.tableColumn])) {\n      this.setTableColumnToSensibleDefault(tableData);\n    }\n\n    tableData.rows.forEach(row => {\n      const datapoint = {};\n\n      row.forEach((value, columnIndex) => {\n        const key = columnNames[columnIndex];\n        datapoint[key] = value;\n      });\n\n      datapoints.push(datapoint);\n    });\n\n    return datapoints;\n  }\n\n  setTableColumnToSensibleDefault(tableData) {\n    if (tableData.columns.length === 1) {\n      this.panel.tableColumn = tableData.columns[0].text;\n    } else {\n      this.panel.tableColumn = _.find(tableData.columns, col => {\n        return col.type !== 'time';\n      }).text;\n    }\n  }\n\n  setTableValues(tableData, data) {\n    if (!tableData || tableData.length === 0) {\n      return;\n    }\n\n    if (tableData[0].length === 0 || tableData[0][0][this.panel.tableColumn] === undefined) {\n      return;\n    }\n\n    const datapoint = tableData[0][0];\n    data.value = datapoint[this.panel.tableColumn];\n\n    if (_.isString(data.value)) {\n      data.valueFormatted = _.escape(data.value);\n      data.value = 0;\n      data.valueRounded = 0;\n    } else {\n      const decimalInfo = this.getDecimalsForValue(data.value);\n      const formatFunc = kbn.valueFormats[this.panel.format];\n      data.valueFormatted = formatFunc(\n        datapoint[this.panel.tableColumn],\n        decimalInfo.decimals,\n        decimalInfo.scaledDecimals\n      );\n      data.valueRounded = kbn.roundValue(data.value, this.panel.decimals || 0);\n    }\n\n    this.setValueMapping(data);\n  }\n\n  canModifyText() {\n    return !this.panel.gauge.show;\n  }\n\n  setColoring(options) {\n    if (options.background) {\n      this.panel.colorValue = false;\n      this.panel.colors = ['rgba(71, 212, 59, 0.4)', 'rgba(245, 150, 40, 0.73)', 'rgba(225, 40, 40, 0.59)'];\n    } else {\n      this.panel.colorBackground = false;\n      this.panel.colors = ['rgba(50, 172, 45, 0.97)', 'rgba(237, 129, 40, 0.89)', 'rgba(245, 54, 54, 0.9)'];\n    }\n    this.render();\n  }\n\n  invertColorOrder() {\n    const tmp = this.panel.colors[0];\n    this.panel.colors[0] = this.panel.colors[2];\n    this.panel.colors[2] = tmp;\n    this.render();\n  }\n\n  onColorChange(panelColorIndex) {\n    return color => {\n      this.panel.colors[panelColorIndex] = color;\n      this.render();\n    };\n  }\n\n  onSparklineColorChange(newColor) {\n    this.panel.sparkline.lineColor = newColor;\n    this.render();\n  }\n\n  onSparklineFillChange(newColor) {\n    this.panel.sparkline.fillColor = newColor;\n    this.render();\n  }\n\n  getDecimalsForValue(value) {\n    if (_.isNumber(this.panel.decimals)) {\n      return { decimals: this.panel.decimals, scaledDecimals: null };\n    }\n\n    const delta = value / 2;\n    let dec = -Math.floor(Math.log(delta) / Math.LN10);\n\n    const magn = Math.pow(10, -dec);\n    const norm = delta / magn; // norm is between 1.0 and 10.0\n    let size;\n\n    if (norm < 1.5) {\n      size = 1;\n    } else if (norm < 3) {\n      size = 2;\n      // special case for 2.5, requires an extra decimal\n      if (norm > 2.25) {\n        size = 2.5;\n        ++dec;\n      }\n    } else if (norm < 7.5) {\n      size = 5;\n    } else {\n      size = 10;\n    }\n\n    size *= magn;\n\n    // reduce starting decimals if not needed\n    if (Math.floor(value) === value) {\n      dec = 0;\n    }\n\n    const result: any = {};\n    result.decimals = Math.max(0, dec);\n    result.scaledDecimals = result.decimals - Math.floor(Math.log(size) / Math.LN10) + 2;\n\n    return result;\n  }\n\n  setValues(data) {\n    data.flotpairs = [];\n\n    if (this.series.length > 1) {\n      const error: any = new Error();\n      error.message = 'Multiple Series Error';\n      error.data =\n        'Metric query returns ' +\n        this.series.length +\n        ' series. Single Stat Panel expects a single series.\\n\\nResponse:\\n' +\n        JSON.stringify(this.series);\n      throw error;\n    }\n\n    if (this.series && this.series.length > 0) {\n      const lastPoint = _.last(this.series[0].datapoints);\n      const lastValue = _.isArray(lastPoint) ? lastPoint[0] : null;\n\n      if (this.panel.valueName === 'name') {\n        data.value = 0;\n        data.valueRounded = 0;\n        data.valueFormatted = this.series[0].alias;\n      } else if (_.isString(lastValue)) {\n        data.value = 0;\n        data.valueFormatted = _.escape(lastValue);\n        data.valueRounded = 0;\n      } else if (this.panel.valueName === 'last_time') {\n        const formatFunc = kbn.valueFormats[this.panel.format];\n        data.value = lastPoint[1];\n        data.valueRounded = data.value;\n        data.valueFormatted = formatFunc(data.value, this.dashboard.isTimezoneUtc());\n      } else {\n        data.value = this.series[0].stats[this.panel.valueName];\n        data.flotpairs = this.series[0].flotpairs;\n\n        const decimalInfo = this.getDecimalsForValue(data.value);\n        const formatFunc = kbn.valueFormats[this.panel.format];\n        data.valueFormatted = formatFunc(data.value, decimalInfo.decimals, decimalInfo.scaledDecimals);\n        data.valueRounded = kbn.roundValue(data.value, decimalInfo.decimals);\n      }\n\n      // Add $__name variable for using in prefix or postfix\n      data.scopedVars = _.extend({}, this.panel.scopedVars);\n      data.scopedVars['__name'] = { value: this.series[0].label };\n    }\n    this.setValueMapping(data);\n  }\n\n  setValueMapping(data) {\n    // check value to text mappings if its enabled\n    if (this.panel.mappingType === 1) {\n      for (let i = 0; i < this.panel.valueMaps.length; i++) {\n        const map = this.panel.valueMaps[i];\n        // special null case\n        if (map.value === 'null') {\n          if (data.value === null || data.value === void 0) {\n            data.valueFormatted = map.text;\n            return;\n          }\n          continue;\n        }\n\n        // value/number to text mapping\n        const value = parseFloat(map.value);\n        if (value === data.valueRounded) {\n          data.valueFormatted = map.text;\n          return;\n        }\n      }\n    } else if (this.panel.mappingType === 2) {\n      for (let i = 0; i < this.panel.rangeMaps.length; i++) {\n        const map = this.panel.rangeMaps[i];\n        // special null case\n        if (map.from === 'null' && map.to === 'null') {\n          if (data.value === null || data.value === void 0) {\n            data.valueFormatted = map.text;\n            return;\n          }\n          continue;\n        }\n\n        // value/number to range mapping\n        const from = parseFloat(map.from);\n        const to = parseFloat(map.to);\n        if (to >= data.valueRounded && from <= data.valueRounded) {\n          data.valueFormatted = map.text;\n          return;\n        }\n      }\n    }\n\n    if (data.value === null || data.value === void 0) {\n      data.valueFormatted = 'no value';\n    }\n  }\n\n  removeValueMap(map) {\n    const index = _.indexOf(this.panel.valueMaps, map);\n    this.panel.valueMaps.splice(index, 1);\n    this.render();\n  }\n\n  addValueMap() {\n    this.panel.valueMaps.push({ value: '', op: '=', text: '' });\n  }\n\n  removeRangeMap(rangeMap) {\n    const index = _.indexOf(this.panel.rangeMaps, rangeMap);\n    this.panel.rangeMaps.splice(index, 1);\n    this.render();\n  }\n\n  addRangeMap() {\n    this.panel.rangeMaps.push({ from: '', to: '', text: '' });\n  }\n\n  link(scope, elem, attrs, ctrl) {\n    const $location = this.$location;\n    const linkSrv = this.linkSrv;\n    const $timeout = this.$timeout;\n    const panel = ctrl.panel;\n    const templateSrv = this.templateSrv;\n    let data, linkInfo;\n    const $panelContainer = elem.find('.panel-container');\n    elem = elem.find('.singlestat-panel');\n\n    function applyColoringThresholds(value, valueString) {\n      const color = getColorForValue(data, value);\n      if (color) {\n        return '<span style=\"color:' + color + '\">' + valueString + '</span>';\n      }\n\n      return valueString;\n    }\n\n    function getSpan(className, fontSize, value) {\n      value = templateSrv.replace(value, data.scopedVars);\n      return '<span class=\"' + className + '\" style=\"font-size:' + fontSize + '\">' + value + '</span>';\n    }\n\n    function getBigValueHtml() {\n      let body = '<div class=\"singlestat-panel-value-container\">';\n\n      if (panel.prefix) {\n        let prefix = panel.prefix;\n        if (panel.colorPrefix) {\n          prefix = applyColoringThresholds(data.value, panel.prefix);\n        }\n        body += getSpan('singlestat-panel-prefix', panel.prefixFontSize, prefix);\n      }\n\n      let value = data.valueFormatted;\n      if (panel.colorValue) {\n        value = applyColoringThresholds(data.value, value);\n      }\n      body += getSpan('singlestat-panel-value', panel.valueFontSize, value);\n\n      if (panel.postfix) {\n        let postfix = panel.postfix;\n        if (panel.colorPostfix) {\n          postfix = applyColoringThresholds(data.value, panel.postfix);\n        }\n        body += getSpan('singlestat-panel-postfix', panel.postfixFontSize, postfix);\n      }\n\n      body += '</div>';\n\n      return body;\n    }\n\n    function getValueText() {\n      let result = panel.prefix ? templateSrv.replace(panel.prefix, data.scopedVars) : '';\n      result += data.valueFormatted;\n      result += panel.postfix ? templateSrv.replace(panel.postfix, data.scopedVars) : '';\n\n      return result;\n    }\n\n    function addGauge() {\n      const width = elem.width();\n      const height = elem.height();\n      // Allow to use a bit more space for wide gauges\n      const dimension = Math.min(width, height * 1.3);\n\n      ctrl.invalidGaugeRange = false;\n      if (panel.gauge.minValue > panel.gauge.maxValue) {\n        ctrl.invalidGaugeRange = true;\n        return;\n      }\n\n      const plotCanvas = $('<div></div>');\n      const plotCss = {\n        top: '10px',\n        margin: 'auto',\n        position: 'relative',\n        height: height * 0.9 + 'px',\n        width: dimension + 'px',\n      };\n\n      plotCanvas.css(plotCss);\n\n      const thresholds = [];\n      for (let i = 0; i < data.thresholds.length; i++) {\n        thresholds.push({\n          value: data.thresholds[i],\n          color: data.colorMap[i],\n        });\n      }\n      thresholds.push({\n        value: panel.gauge.maxValue,\n        color: data.colorMap[data.colorMap.length - 1],\n      });\n\n      const bgColor = config.bootData.user.lightTheme ? 'rgb(230,230,230)' : 'rgb(38,38,38)';\n\n      const fontScale = parseInt(panel.valueFontSize) / 100;\n      const fontSize = Math.min(dimension / 5, 100) * fontScale;\n      // Reduce gauge width if threshold labels enabled\n      const gaugeWidthReduceRatio = panel.gauge.thresholdLabels ? 1.5 : 1;\n      const gaugeWidth = Math.min(dimension / 6, 60) / gaugeWidthReduceRatio;\n      const thresholdMarkersWidth = gaugeWidth / 5;\n      const thresholdLabelFontSize = fontSize / 2.5;\n\n      const options = {\n        series: {\n          gauges: {\n            gauge: {\n              min: panel.gauge.minValue,\n              max: panel.gauge.maxValue,\n              background: { color: bgColor },\n              border: { color: null },\n              shadow: { show: false },\n              width: gaugeWidth,\n            },\n            frame: { show: false },\n            label: { show: false },\n            layout: { margin: 0, thresholdWidth: 0 },\n            cell: { border: { width: 0 } },\n            threshold: {\n              values: thresholds,\n              label: {\n                show: panel.gauge.thresholdLabels,\n                margin: thresholdMarkersWidth + 1,\n                font: { size: thresholdLabelFontSize },\n              },\n              show: panel.gauge.thresholdMarkers,\n              width: thresholdMarkersWidth,\n            },\n            value: {\n              color: panel.colorValue ? getColorForValue(data, data.valueRounded) : null,\n              formatter: function() {\n                return getValueText();\n              },\n              font: {\n                size: fontSize,\n                family: '\"Helvetica Neue\", Helvetica, Arial, sans-serif',\n              },\n            },\n            show: true,\n          },\n        },\n      };\n\n      elem.append(plotCanvas);\n\n      const plotSeries = {\n        data: [[0, data.valueRounded]],\n      };\n\n      $.plot(plotCanvas, [plotSeries], options);\n    }\n\n    function addSparkline() {\n      const width = elem.width() + 20;\n      if (width < 30) {\n        // element has not gotten it's width yet\n        // delay sparkline render\n        setTimeout(addSparkline, 30);\n        return;\n      }\n\n      const height = ctrl.height;\n      const plotCanvas = $('<div></div>');\n      const plotCss: any = {};\n      plotCss.position = 'absolute';\n\n      if (panel.sparkline.full) {\n        plotCss.bottom = '5px';\n        plotCss.left = '-5px';\n        plotCss.width = width - 10 + 'px';\n        const dynamicHeightMargin = height <= 100 ? 5 : Math.round(height / 100) * 15 + 5;\n        plotCss.height = height - dynamicHeightMargin + 'px';\n      } else {\n        plotCss.bottom = '0px';\n        plotCss.left = '-5px';\n        plotCss.width = width - 10 + 'px';\n        plotCss.height = Math.floor(height * 0.25) + 'px';\n      }\n\n      plotCanvas.css(plotCss);\n\n      const options = {\n        legend: { show: false },\n        series: {\n          lines: {\n            show: true,\n            fill: 1,\n            zero: false,\n            lineWidth: 1,\n            fillColor: panel.sparkline.fillColor,\n          },\n        },\n        yaxes: { show: false },\n        xaxis: {\n          show: false,\n          mode: 'time',\n          min: ctrl.range.from.valueOf(),\n          max: ctrl.range.to.valueOf(),\n        },\n        grid: { hoverable: false, show: false },\n      };\n\n      elem.append(plotCanvas);\n\n      const plotSeries = {\n        data: data.flotpairs,\n        color: panel.sparkline.lineColor,\n      };\n\n      $.plot(plotCanvas, [plotSeries], options);\n    }\n\n    function render() {\n      if (!ctrl.data) {\n        return;\n      }\n      data = ctrl.data;\n\n      // get thresholds\n      data.thresholds = panel.thresholds.split(',').map(function(strVale) {\n        return Number(strVale.trim());\n      });\n      data.colorMap = panel.colors;\n\n      const body = panel.gauge.show ? '' : getBigValueHtml();\n\n      if (panel.colorBackground) {\n        const color = getColorForValue(data, data.value);\n        if (color) {\n          $panelContainer.css('background-color', color);\n          if (scope.fullscreen) {\n            elem.css('background-color', color);\n          } else {\n            elem.css('background-color', '');\n          }\n        }\n      } else {\n        $panelContainer.css('background-color', '');\n        elem.css('background-color', '');\n      }\n\n      elem.html(body);\n\n      if (panel.sparkline.show) {\n        addSparkline();\n      }\n\n      if (panel.gauge.show) {\n        addGauge();\n      }\n\n      elem.toggleClass('pointer', panel.links.length > 0);\n\n      if (panel.links.length > 0) {\n        linkInfo = linkSrv.getPanelLinkAnchorInfo(panel.links[0], data.scopedVars);\n      } else {\n        linkInfo = null;\n      }\n    }\n\n    function hookupDrilldownLinkTooltip() {\n      // drilldown link tooltip\n      const drilldownTooltip = $('<div id=\"tooltip\" class=\"\">hello</div>\"');\n\n      elem.mouseleave(function() {\n        if (panel.links.length === 0) {\n          return;\n        }\n        $timeout(function() {\n          drilldownTooltip.detach();\n        });\n      });\n\n      elem.click(function(evt) {\n        if (!linkInfo) {\n          return;\n        }\n        // ignore title clicks in title\n        if ($(evt).parents('.panel-header').length > 0) {\n          return;\n        }\n\n        if (linkInfo.target === '_blank') {\n          window.open(linkInfo.href, '_blank');\n          return;\n        }\n\n        if (linkInfo.href.indexOf('http') === 0) {\n          window.location.href = linkInfo.href;\n        } else {\n          $timeout(function() {\n            $location.url(linkInfo.href);\n          });\n        }\n\n        drilldownTooltip.detach();\n      });\n\n      elem.mousemove(function(e) {\n        if (!linkInfo) {\n          return;\n        }\n\n        drilldownTooltip.text('click to go to: ' + linkInfo.title);\n        drilldownTooltip.place_tt(e.pageX, e.pageY - 50);\n      });\n    }\n\n    hookupDrilldownLinkTooltip();\n\n    this.events.on('render', function() {\n      render();\n      ctrl.renderingCompleted();\n    });\n  }\n}\n\nfunction getColorForValue(data, value) {\n  if (!_.isFinite(value)) {\n    return null;\n  }\n\n  for (let i = data.thresholds.length; i > 0; i--) {\n    if (value >= data.thresholds[i - 1]) {\n      return data.colorMap[i];\n    }\n  }\n\n  return _.first(data.colorMap);\n}\n\nexport { SingleStatCtrl, SingleStatCtrl as PanelCtrl, getColorForValue };\n","import { PanelCtrl } from 'app/plugins/sdk';\n\nimport { contextSrv } from 'app/core/core';\n\nclass GettingStartedPanelCtrl extends PanelCtrl {\n  static templateUrl = 'public/app/plugins/panel/gettingstarted/module.html';\n  checksDone: boolean;\n  stepIndex: number;\n  steps: any;\n\n  /** @ngInject */\n  constructor($scope, $injector, private backendSrv, datasourceSrv, private $q) {\n    super($scope, $injector);\n\n    this.stepIndex = 0;\n    this.steps = [];\n\n    this.steps.push({\n      title: '安装 Grafana',\n      icon: 'icon-gf icon-gf-check',\n      href: 'http://docs.grafana.org/',\n      target: '_blank',\n      note: '查看安装过程文档',\n      check: () => $q.when(true),\n    });\n\n    this.steps.push({\n      title: '添加你的第一个数据源',\n      cta: '添加数据源',\n      icon: 'icon-gf icon-gf-datasources',\n      href: 'datasources/new?gettingstarted',\n      check: () => {\n        return $q.when(\n          datasourceSrv.getMetricSources().filter(item => {\n            return item.meta.builtIn !== true;\n          }).length > 0\n        );\n      },\n    });\n\n    this.steps.push({\n      title: '添加你的第一个仪表盘',\n      cta: '创建仪表盘',\n      icon: 'icon-gf icon-gf-dashboard',\n      href: 'dashboard/new?gettingstarted',\n      check: () => {\n        return this.backendSrv.search({ limit: 1 }).then(result => {\n          return result.length > 0;\n        });\n      },\n    });\n\n    this.steps.push({\n      title: '邀请你的团队',\n      cta: '添加成员',\n      icon: 'icon-gf icon-gf-users',\n      href: 'org/users?gettingstarted',\n      check: () => {\n        return this.backendSrv.get('/api/org/users').then(res => {\n          return res.length > 1;\n        });\n      },\n    });\n\n    this.steps.push({\n      title: '安装应用与插件',\n      cta: '探索插件仓库',\n      icon: 'icon-gf icon-gf-apps',\n      href: 'https://grafana.com/plugins?utm_source=grafana_getting_started',\n      check: () => {\n        return this.backendSrv.get('/api/plugins', { embedded: 0, core: 0 }).then(plugins => {\n          return plugins.length > 0;\n        });\n      },\n    });\n  }\n\n  $onInit() {\n    this.stepIndex = -1;\n    return this.nextStep().then(res => {\n      this.checksDone = true;\n    });\n  }\n\n  nextStep() {\n    if (this.stepIndex === this.steps.length - 1) {\n      return this.$q.when();\n    }\n\n    this.stepIndex += 1;\n    const currentStep = this.steps[this.stepIndex];\n    return currentStep.check().then(passed => {\n      if (passed) {\n        currentStep.cssClass = 'completed';\n        return this.nextStep();\n      }\n\n      currentStep.cssClass = 'active';\n      return this.$q.when();\n    });\n  }\n\n  dismiss() {\n    this.dashboard.removePanel(this.panel, false);\n\n    this.backendSrv\n      .request({\n        method: 'PUT',\n        url: '/api/user/helpflags/1',\n        showSuccessAlert: false,\n      })\n      .then(res => {\n        contextSrv.user.helpFlags1 = res.helpFlags1;\n      });\n  }\n}\n\nexport { GettingStartedPanelCtrl, GettingStartedPanelCtrl as PanelCtrl };\n","import * as graphitePlugin from 'app/plugins/datasource/graphite/module';\nimport * as cloudwatchPlugin from 'app/plugins/datasource/cloudwatch/module';\nimport * as elasticsearchPlugin from 'app/plugins/datasource/elasticsearch/module';\nimport * as opentsdbPlugin from 'app/plugins/datasource/opentsdb/module';\nimport * as grafanaPlugin from 'app/plugins/datasource/grafana/module';\nimport * as influxdbPlugin from 'app/plugins/datasource/influxdb/module';\nimport * as loggingPlugin from 'app/plugins/datasource/logging/module';\nimport * as mixedPlugin from 'app/plugins/datasource/mixed/module';\nimport * as mysqlPlugin from 'app/plugins/datasource/mysql/module';\nimport * as postgresPlugin from 'app/plugins/datasource/postgres/module';\nimport * as prometheusPlugin from 'app/plugins/datasource/prometheus/module';\nimport * as mssqlPlugin from 'app/plugins/datasource/mssql/module';\nimport * as testDataDSPlugin from 'app/plugins/datasource/testdata/module';\n\nimport * as textPanel from 'app/plugins/panel/text/module';\nimport * as graphPanel from 'app/plugins/panel/graph/module';\nimport * as dashListPanel from 'app/plugins/panel/dashlist/module';\nimport * as pluginsListPanel from 'app/plugins/panel/pluginlist/module';\nimport * as alertListPanel from 'app/plugins/panel/alertlist/module';\nimport * as heatmapPanel from 'app/plugins/panel/heatmap/module';\nimport * as tablePanel from 'app/plugins/panel/table/module';\nimport * as singlestatPanel from 'app/plugins/panel/singlestat/module';\nimport * as gettingStartedPanel from 'app/plugins/panel/gettingstarted/module';\n\nconst builtInPlugins = {\n  'app/plugins/datasource/graphite/module': graphitePlugin,\n  'app/plugins/datasource/cloudwatch/module': cloudwatchPlugin,\n  'app/plugins/datasource/elasticsearch/module': elasticsearchPlugin,\n  'app/plugins/datasource/opentsdb/module': opentsdbPlugin,\n  'app/plugins/datasource/grafana/module': grafanaPlugin,\n  'app/plugins/datasource/influxdb/module': influxdbPlugin,\n  'app/plugins/datasource/logging/module': loggingPlugin,\n  'app/plugins/datasource/mixed/module': mixedPlugin,\n  'app/plugins/datasource/mysql/module': mysqlPlugin,\n  'app/plugins/datasource/postgres/module': postgresPlugin,\n  'app/plugins/datasource/mssql/module': mssqlPlugin,\n  'app/plugins/datasource/prometheus/module': prometheusPlugin,\n  'app/plugins/datasource/testdata/module': testDataDSPlugin,\n\n  'app/plugins/panel/text/module': textPanel,\n  'app/plugins/panel/graph/module': graphPanel,\n  'app/plugins/panel/dashlist/module': dashListPanel,\n  'app/plugins/panel/pluginlist/module': pluginsListPanel,\n  'app/plugins/panel/alertlist/module': alertListPanel,\n  'app/plugins/panel/heatmap/module': heatmapPanel,\n  'app/plugins/panel/table/module': tablePanel,\n  'app/plugins/panel/singlestat/module': singlestatPanel,\n  'app/plugins/panel/gettingstarted/module': gettingStartedPanel,\n};\n\nexport default builtInPlugins;\n","import System from 'systemjs/dist/system.js';\nimport _ from 'lodash';\nimport * as sdk from 'app/plugins/sdk';\nimport kbn from 'app/core/utils/kbn';\nimport moment from 'moment';\nimport angular from 'angular';\nimport jquery from 'jquery';\n\n// Experimental module exports\nimport prismjs from 'prismjs';\nimport slate from 'slate';\nimport slateReact from 'slate-react';\nimport slatePlain from 'slate-plain-serializer';\nimport react from 'react';\nimport reactDom from 'react-dom';\n\nimport config from 'app/core/config';\nimport TimeSeries from 'app/core/time_series2';\nimport TableModel from 'app/core/table_model';\nimport { coreModule, appEvents, contextSrv } from 'app/core/core';\nimport * as datemath from 'app/core/utils/datemath';\nimport * as fileExport from 'app/core/utils/file_export';\nimport * as flatten from 'app/core/utils/flatten';\nimport * as ticks from 'app/core/utils/ticks';\nimport impressionSrv from 'app/core/services/impression_srv';\nimport builtInPlugins from './built_in_plugins';\nimport * as d3 from 'd3';\n\n// rxjs\nimport { Observable } from 'rxjs/Observable';\nimport { Subject } from 'rxjs/Subject';\n\n// these imports add functions to Observable\nimport 'rxjs/add/observable/empty';\nimport 'rxjs/add/observable/from';\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/operator/combineAll';\n\n// add cache busting\nconst bust = `?_cache=${Date.now()}`;\nfunction locate(load) {\n  return load.address + bust;\n}\nSystem.registry.set('plugin-loader', System.newModule({ locate: locate }));\n\nSystem.config({\n  baseURL: 'public',\n  defaultExtension: 'js',\n  packages: {\n    plugins: {\n      defaultExtension: 'js',\n    },\n  },\n  map: {\n    text: 'vendor/plugin-text/text.js',\n    css: 'vendor/plugin-css/css.js',\n  },\n  meta: {\n    '/*': {\n      esModule: true,\n      authorization: true,\n      loader: 'plugin-loader',\n    },\n  },\n});\n\nfunction exposeToPlugin(name: string, component: any) {\n  System.registerDynamic(name, [], true, function(require, exports, module) {\n    module.exports = component;\n  });\n}\n\nexposeToPlugin('lodash', _);\nexposeToPlugin('moment', moment);\nexposeToPlugin('jquery', jquery);\nexposeToPlugin('angular', angular);\nexposeToPlugin('d3', d3);\nexposeToPlugin('rxjs/Subject', Subject);\nexposeToPlugin('rxjs/Observable', Observable);\n\n// Experimental modules\nexposeToPlugin('prismjs', prismjs);\nexposeToPlugin('slate', slate);\nexposeToPlugin('slate-react', slateReact);\nexposeToPlugin('slate-plain-serializer', slatePlain);\nexposeToPlugin('react', react);\nexposeToPlugin('react-dom', reactDom);\n\n// backward compatible path\nexposeToPlugin('vendor/npm/rxjs/Rx', {\n  Subject: Subject,\n  Observable: Observable,\n});\n\nexposeToPlugin('app/features/dashboard/impression_store', {\n  impressions: impressionSrv,\n  __esModule: true,\n});\n\nexposeToPlugin('app/plugins/sdk', sdk);\nexposeToPlugin('app/core/utils/datemath', datemath);\nexposeToPlugin('app/core/utils/file_export', fileExport);\nexposeToPlugin('app/core/utils/flatten', flatten);\nexposeToPlugin('app/core/utils/kbn', kbn);\nexposeToPlugin('app/core/utils/ticks', ticks);\n\nexposeToPlugin('app/core/config', config);\nexposeToPlugin('app/core/time_series', TimeSeries);\nexposeToPlugin('app/core/time_series2', TimeSeries);\nexposeToPlugin('app/core/table_model', TableModel);\nexposeToPlugin('app/core/app_events', appEvents);\nexposeToPlugin('app/core/core_module', coreModule);\nexposeToPlugin('app/core/core', {\n  coreModule: coreModule,\n  appEvents: appEvents,\n  contextSrv: contextSrv,\n  __esModule: true,\n});\n\nimport 'vendor/flot/jquery.flot';\nimport 'vendor/flot/jquery.flot.selection';\nimport 'vendor/flot/jquery.flot.time';\nimport 'vendor/flot/jquery.flot.stack';\nimport 'vendor/flot/jquery.flot.pie';\nimport 'vendor/flot/jquery.flot.stackpercent';\nimport 'vendor/flot/jquery.flot.fillbelow';\nimport 'vendor/flot/jquery.flot.crosshair';\nimport 'vendor/flot/jquery.flot.dashes';\nimport 'vendor/flot/jquery.flot.gauge';\n\nconst flotDeps = [\n  'jquery.flot',\n  'jquery.flot.pie',\n  'jquery.flot.time',\n  'jquery.flot.fillbelow',\n  'jquery.flot.crosshair',\n  'jquery.flot.stack',\n  'jquery.flot.selection',\n  'jquery.flot.stackpercent',\n  'jquery.flot.events',\n  'jquery.flot.gauge',\n];\nfor (const flotDep of flotDeps) {\n  exposeToPlugin(flotDep, { fakeDep: 1 });\n}\n\nexport function importPluginModule(path: string): Promise<any> {\n  const builtIn = builtInPlugins[path];\n  if (builtIn) {\n    return Promise.resolve(builtIn);\n  }\n  return System.import(path);\n}\n\nexport function loadPluginCss(options) {\n  if (config.bootData.user.lightTheme) {\n    System.import(options.light + '!css');\n  } else {\n    System.import(options.dark + '!css');\n  }\n}\n","import _ from 'lodash';\nimport coreModule from 'app/core/core_module';\nimport config from 'app/core/config';\nimport { importPluginModule } from './plugin_loader';\n\nexport class DatasourceSrv {\n  datasources: any;\n\n  /** @ngInject */\n  constructor(private $q, private $injector, private $rootScope, private templateSrv) {\n    this.init();\n  }\n\n  init() {\n    this.datasources = {};\n  }\n\n  get(name?) {\n    if (!name) {\n      return this.get(config.defaultDatasource);\n    }\n\n    name = this.templateSrv.replace(name);\n\n    if (name === 'default') {\n      return this.get(config.defaultDatasource);\n    }\n\n    if (this.datasources[name]) {\n      return this.$q.when(this.datasources[name]);\n    }\n\n    return this.loadDatasource(name);\n  }\n\n  loadDatasource(name) {\n    const dsConfig = config.datasources[name];\n    if (!dsConfig) {\n      return this.$q.reject({ message: '找不到名为： ' + name + ' 的数据源' });\n    }\n\n    const deferred = this.$q.defer();\n    const pluginDef = dsConfig.meta;\n\n    importPluginModule(pluginDef.module)\n      .then(plugin => {\n        // check if its in cache now\n        if (this.datasources[name]) {\n          deferred.resolve(this.datasources[name]);\n          return;\n        }\n\n        // plugin module needs to export a constructor function named Datasource\n        if (!plugin.Datasource) {\n          throw new Error('Plugin module is missing Datasource constructor');\n        }\n\n        const instance = this.$injector.instantiate(plugin.Datasource, { instanceSettings: dsConfig });\n        instance.meta = pluginDef;\n        instance.name = name;\n        this.datasources[name] = instance;\n        deferred.resolve(instance);\n      })\n      .catch(err => {\n        this.$rootScope.appEvent('alert-error', [dsConfig.name + ' plugin failed', err.toString()]);\n      });\n\n    return deferred.promise;\n  }\n\n  getAll() {\n    return config.datasources;\n  }\n\n  getAnnotationSources() {\n    const sources = [];\n\n    this.addDataSourceVariables(sources);\n\n    _.each(config.datasources, function(value) {\n      if (value.meta && value.meta.annotations) {\n        sources.push(value);\n      }\n    });\n\n    return sources;\n  }\n\n  getExploreSources() {\n    const { datasources } = config;\n    const es = Object.keys(datasources)\n      .map(name => datasources[name])\n      .filter(ds => ds.meta && ds.meta.explore);\n    return _.sortBy(es, ['name']);\n  }\n\n  getMetricSources(options) {\n    const metricSources = [];\n\n    _.each(config.datasources, function(value, key) {\n      if (value.meta && value.meta.metrics) {\n        let metricSource = { value: key, name: key, meta: value.meta, sort: key };\n\n        //Make sure grafana and mixed are sorted at the bottom\n        if (value.meta.id === 'grafana') {\n          metricSource.sort = String.fromCharCode(253);\n        } else if (value.meta.id === 'mixed') {\n          metricSource.sort = String.fromCharCode(254);\n        }\n\n        metricSources.push(metricSource);\n\n        if (key === config.defaultDatasource) {\n          metricSource = { value: null, name: 'default', meta: value.meta, sort: key };\n          metricSources.push(metricSource);\n        }\n      }\n    });\n\n    if (!options || !options.skipVariables) {\n      this.addDataSourceVariables(metricSources);\n    }\n\n    metricSources.sort(function(a, b) {\n      if (a.sort.toLowerCase() > b.sort.toLowerCase()) {\n        return 1;\n      }\n      if (a.sort.toLowerCase() < b.sort.toLowerCase()) {\n        return -1;\n      }\n      return 0;\n    });\n\n    return metricSources;\n  }\n\n  addDataSourceVariables(list) {\n    // look for data source variables\n    for (let i = 0; i < this.templateSrv.variables.length; i++) {\n      const variable = this.templateSrv.variables[i];\n      if (variable.type !== 'datasource') {\n        continue;\n      }\n\n      let first = variable.current.value;\n      if (first === 'default') {\n        first = config.defaultDatasource;\n      }\n\n      const ds = config.datasources[first];\n\n      if (ds) {\n        const key = `$${variable.name}`;\n        list.push({\n          name: key,\n          value: key,\n          meta: ds.meta,\n          sort: key,\n        });\n      }\n    }\n  }\n}\n\ncoreModule.service('datasourceSrv', DatasourceSrv);\nexport default DatasourceSrv;\n","import { PanelCtrl } from 'app/features/panel/panel_ctrl';\n\nexport class UnknownPanelCtrl extends PanelCtrl {\n  static templateUrl = 'public/app/plugins/panel/unknown/module.html';\n\n  /** @ngInject */\n  constructor($scope, $injector) {\n    super($scope, $injector);\n  }\n}\n","import angular from 'angular';\nimport _ from 'lodash';\n\nimport config from 'app/core/config';\nimport coreModule from 'app/core/core_module';\nimport { importPluginModule } from './plugin_loader';\n\nimport { UnknownPanelCtrl } from 'app/plugins/panel/unknown/module';\n\n/** @ngInject */\nfunction pluginDirectiveLoader($compile, datasourceSrv, $rootScope, $q, $http, $templateCache) {\n  function getTemplate(component) {\n    if (component.template) {\n      return $q.when(component.template);\n    }\n    const cached = $templateCache.get(component.templateUrl);\n    if (cached) {\n      return $q.when(cached);\n    }\n    return $http.get(component.templateUrl).then(res => {\n      return res.data;\n    });\n  }\n\n  function relativeTemplateUrlToAbs(templateUrl, baseUrl) {\n    if (!templateUrl) {\n      return undefined;\n    }\n    if (templateUrl.indexOf('public') === 0) {\n      return templateUrl;\n    }\n    return baseUrl + '/' + templateUrl;\n  }\n\n  function getPluginComponentDirective(options) {\n    // handle relative template urls for plugin templates\n    options.Component.templateUrl = relativeTemplateUrlToAbs(options.Component.templateUrl, options.baseUrl);\n\n    return function() {\n      return {\n        templateUrl: options.Component.templateUrl,\n        template: options.Component.template,\n        restrict: 'E',\n        controller: options.Component,\n        controllerAs: 'ctrl',\n        bindToController: true,\n        scope: options.bindings,\n        link: (scope, elem, attrs, ctrl) => {\n          if (ctrl.link) {\n            ctrl.link(scope, elem, attrs, ctrl);\n          }\n          if (ctrl.init) {\n            ctrl.init();\n          }\n        },\n      };\n    };\n  }\n\n  function loadPanelComponentInfo(scope, attrs) {\n    const componentInfo: any = {\n      name: 'panel-plugin-' + scope.panel.type,\n      bindings: { dashboard: '=', panel: '=', row: '=' },\n      attrs: {\n        dashboard: 'dashboard',\n        panel: 'panel',\n        class: 'panel-height-helper',\n      },\n    };\n\n    const panelInfo = config.panels[scope.panel.type];\n    let panelCtrlPromise = Promise.resolve(UnknownPanelCtrl);\n    if (panelInfo) {\n      panelCtrlPromise = importPluginModule(panelInfo.module).then(function(panelModule) {\n        return panelModule.PanelCtrl;\n      });\n    }\n\n    return panelCtrlPromise.then(function(PanelCtrl: any) {\n      componentInfo.Component = PanelCtrl;\n\n      if (!PanelCtrl || PanelCtrl.registered) {\n        return componentInfo;\n      }\n\n      if (PanelCtrl.templatePromise) {\n        return PanelCtrl.templatePromise.then(res => {\n          return componentInfo;\n        });\n      }\n\n      if (panelInfo) {\n        PanelCtrl.templateUrl = relativeTemplateUrlToAbs(PanelCtrl.templateUrl, panelInfo.baseUrl);\n      }\n\n      PanelCtrl.templatePromise = getTemplate(PanelCtrl).then(template => {\n        PanelCtrl.templateUrl = null;\n        PanelCtrl.template = `<grafana-panel ctrl=\"ctrl\" class=\"panel-height-helper\">${template}</grafana-panel>`;\n        return componentInfo;\n      });\n\n      return PanelCtrl.templatePromise;\n    });\n  }\n\n  function getModule(scope, attrs) {\n    switch (attrs.type) {\n      // QueryCtrl\n      case 'query-ctrl': {\n        const datasource = scope.target.datasource || scope.ctrl.panel.datasource;\n        return datasourceSrv.get(datasource).then(ds => {\n          scope.datasource = ds;\n\n          return importPluginModule(ds.meta.module).then(dsModule => {\n            return {\n              baseUrl: ds.meta.baseUrl,\n              name: 'query-ctrl-' + ds.meta.id,\n              bindings: { target: '=', panelCtrl: '=', datasource: '=' },\n              attrs: {\n                target: 'target',\n                'panel-ctrl': 'ctrl.panelCtrl',\n                datasource: 'datasource',\n              },\n              Component: dsModule.QueryCtrl,\n            };\n          });\n        });\n      }\n      // Annotations\n      case 'annotations-query-ctrl': {\n        return importPluginModule(scope.ctrl.currentDatasource.meta.module).then(function(dsModule) {\n          return {\n            baseUrl: scope.ctrl.currentDatasource.meta.baseUrl,\n            name: 'annotations-query-ctrl-' + scope.ctrl.currentDatasource.meta.id,\n            bindings: { annotation: '=', datasource: '=' },\n            attrs: {\n              annotation: 'ctrl.currentAnnotation',\n              datasource: 'ctrl.currentDatasource',\n            },\n            Component: dsModule.AnnotationsQueryCtrl,\n          };\n        });\n      }\n      // Datasource ConfigCtrl\n      case 'datasource-config-ctrl': {\n        const dsMeta = scope.ctrl.datasourceMeta;\n        return importPluginModule(dsMeta.module).then(function(dsModule): any {\n          if (!dsModule.ConfigCtrl) {\n            return { notFound: true };\n          }\n\n          return {\n            baseUrl: dsMeta.baseUrl,\n            name: 'ds-config-' + dsMeta.id,\n            bindings: { meta: '=', current: '=' },\n            attrs: { meta: 'ctrl.datasourceMeta', current: 'ctrl.current' },\n            Component: dsModule.ConfigCtrl,\n          };\n        });\n      }\n      // AppConfigCtrl\n      case 'app-config-ctrl': {\n        const model = scope.ctrl.model;\n        return importPluginModule(model.module).then(function(appModule) {\n          return {\n            baseUrl: model.baseUrl,\n            name: 'app-config-' + model.id,\n            bindings: { appModel: '=', appEditCtrl: '=' },\n            attrs: { 'app-model': 'ctrl.model', 'app-edit-ctrl': 'ctrl' },\n            Component: appModule.ConfigCtrl,\n          };\n        });\n      }\n      // App Page\n      case 'app-page': {\n        const appModel = scope.ctrl.appModel;\n        return importPluginModule(appModel.module).then(function(appModule) {\n          return {\n            baseUrl: appModel.baseUrl,\n            name: 'app-page-' + appModel.id + '-' + scope.ctrl.page.slug,\n            bindings: { appModel: '=' },\n            attrs: { 'app-model': 'ctrl.appModel' },\n            Component: appModule[scope.ctrl.page.component],\n          };\n        });\n      }\n      // Panel\n      case 'panel': {\n        return loadPanelComponentInfo(scope, attrs);\n      }\n      default: {\n        return $q.reject({\n          message: 'Could not find component type: ' + attrs.type,\n        });\n      }\n    }\n  }\n\n  function appendAndCompile(scope, elem, componentInfo) {\n    const child = angular.element(document.createElement(componentInfo.name));\n    _.each(componentInfo.attrs, (value, key) => {\n      child.attr(key, value);\n    });\n\n    $compile(child)(scope);\n    elem.empty();\n\n    // let a binding digest cycle complete before adding to dom\n    setTimeout(function() {\n      elem.append(child);\n      scope.$applyAsync(function() {\n        scope.$broadcast('component-did-mount');\n        scope.$broadcast('refresh');\n      });\n    });\n  }\n\n  function registerPluginComponent(scope, elem, attrs, componentInfo) {\n    if (componentInfo.notFound) {\n      elem.empty();\n      return;\n    }\n\n    if (!componentInfo.Component) {\n      throw {\n        message: 'Failed to find exported plugin component for ' + componentInfo.name,\n      };\n    }\n\n    if (!componentInfo.Component.registered) {\n      const directiveName = attrs.$normalize(componentInfo.name);\n      const directiveFn = getPluginComponentDirective(componentInfo);\n      coreModule.directive(directiveName, directiveFn);\n      componentInfo.Component.registered = true;\n    }\n\n    appendAndCompile(scope, elem, componentInfo);\n  }\n\n  return {\n    restrict: 'E',\n    link: function(scope, elem, attrs) {\n      getModule(scope, attrs)\n        .then(function(componentInfo) {\n          registerPluginComponent(scope, elem, attrs, componentInfo);\n        })\n        .catch(err => {\n          $rootScope.appEvent('alert-error', ['插件报错', err.message || err]);\n          console.log('Plugin component error', err);\n        });\n    },\n  };\n}\n\ncoreModule.directive('pluginComponent', pluginDirectiveLoader);\n","import config from 'app/core/config';\n\nimport coreModule from 'app/core/core_module';\nimport { PanelContainer } from './dashgrid/PanelContainer';\nimport { DashboardModel } from './dashboard_model';\nimport { PanelModel } from './panel_model';\n\nexport class DashboardCtrl implements PanelContainer {\n  dashboard: DashboardModel;\n  dashboardViewState: any;\n  loadedFallbackDashboard: boolean;\n  editTab: number;\n\n  /** @ngInject */\n  constructor(\n    private $scope,\n    private $rootScope,\n    private keybindingSrv,\n    private timeSrv,\n    private variableSrv,\n    private alertingSrv,\n    private dashboardSrv,\n    private unsavedChangesSrv,\n    private dashboardViewStateSrv,\n    public playlistSrv,\n    private panelLoader\n  ) {\n    // temp hack due to way dashboards are loaded\n    // can't use controllerAs on route yet\n    $scope.ctrl = this;\n\n    // TODO: break out settings view to separate view & controller\n    this.editTab = 0;\n\n    // funcs called from React component bindings and needs this binding\n    this.getPanelContainer = this.getPanelContainer.bind(this);\n  }\n\n  setupDashboard(data) {\n    try {\n      this.setupDashboardInternal(data);\n    } catch (err) {\n      this.onInitFailed(err, '仪表盘初始化失败', true);\n    }\n  }\n\n  setupDashboardInternal(data) {\n    const dashboard = this.dashboardSrv.create(data.dashboard, data.meta);\n    this.dashboardSrv.setCurrent(dashboard);\n\n    // init services\n    this.timeSrv.init(dashboard);\n    this.alertingSrv.init(dashboard, data.alerts);\n\n    // template values service needs to initialize completely before\n    // the rest of the dashboard can load\n    this.variableSrv\n      .init(dashboard)\n      // template values failes are non fatal\n      .catch(this.onInitFailed.bind(this, '模板初始化失败', false))\n      // continue\n      .finally(() => {\n        this.dashboard = dashboard;\n        this.dashboard.processRepeats();\n        this.dashboard.updateSubmenuVisibility();\n        this.dashboard.autoFitPanels(window.innerHeight);\n\n        this.unsavedChangesSrv.init(dashboard, this.$scope);\n\n        // TODO refactor ViewStateSrv\n        this.$scope.dashboard = dashboard;\n        this.dashboardViewState = this.dashboardViewStateSrv.create(this.$scope);\n\n        this.keybindingSrv.setupDashboardBindings(this.$scope, dashboard);\n        this.setWindowTitleAndTheme();\n\n        this.$scope.appEvent('dashboard-initialized', dashboard);\n      })\n      .catch(this.onInitFailed.bind(this, '仪表盘初始化失败', true));\n  }\n\n  onInitFailed(msg, fatal, err) {\n    console.log(msg, err);\n\n    if (err.data && err.data.message) {\n      err.message = err.data.message;\n    } else if (!err.message) {\n      err = { message: err.toString() };\n    }\n\n    this.$scope.appEvent('alert-error', [msg, err.message]);\n\n    // protect against  recursive fallbacks\n    if (fatal && !this.loadedFallbackDashboard) {\n      this.loadedFallbackDashboard = true;\n      this.setupDashboard({ dashboard: { title: '仪表盘初始化失败' } });\n    }\n  }\n\n  templateVariableUpdated() {\n    this.dashboard.processRepeats();\n  }\n\n  setWindowTitleAndTheme() {\n    window.document.title = config.window_title_prefix + this.dashboard.title;\n  }\n\n  showJsonEditor(evt, options) {\n    const editScope = this.$rootScope.$new();\n    editScope.object = options.object;\n    editScope.updateHandler = options.updateHandler;\n    this.$scope.appEvent('show-dash-editor', {\n      src: 'public/app/partials/edit_json.html',\n      scope: editScope,\n    });\n  }\n\n  getDashboard() {\n    return this.dashboard;\n  }\n\n  getPanelLoader() {\n    return this.panelLoader;\n  }\n\n  timezoneChanged() {\n    this.$rootScope.$broadcast('refresh');\n  }\n\n  getPanelContainer() {\n    return this;\n  }\n\n  onRemovingPanel(evt, options) {\n    options = options || {};\n    if (!options.panelId) {\n      return;\n    }\n\n    const panelInfo = this.dashboard.getPanelInfoById(options.panelId);\n    this.removePanel(panelInfo.panel, true);\n  }\n\n  removePanel(panel: PanelModel, ask: boolean) {\n    // confirm deletion\n    if (ask !== false) {\n      let text2, confirmText;\n\n      if (panel.alert) {\n        text2 = '面板包含报警规则，删除面板也将删除报警规则';\n        confirmText = '确认';\n      }\n\n      this.$scope.appEvent('confirm-modal', {\n        title: '删除面板',\n        text: '确定要删除此面板吗?',\n        text2: text2,\n        icon: 'fa-trash',\n        confirmText: confirmText,\n        yesText: '删除',\n        onConfirm: () => {\n          this.removePanel(panel, false);\n        },\n      });\n      return;\n    }\n\n    this.dashboard.removePanel(panel);\n  }\n\n  init(dashboard) {\n    this.$scope.onAppEvent('show-json-editor', this.showJsonEditor.bind(this));\n    this.$scope.onAppEvent('template-variable-value-updated', this.templateVariableUpdated.bind(this));\n    this.$scope.onAppEvent('panel-remove', this.onRemovingPanel.bind(this));\n    this.setupDashboard(dashboard);\n  }\n}\n\ncoreModule.controller('DashboardCtrl', DashboardCtrl);\n","import './plugin_edit_ctrl';\nimport './plugin_page_ctrl';\nimport './plugin_list_ctrl';\nimport './import_list/import_list';\nimport './ds_edit_ctrl';\nimport './ds_dashboards_ctrl';\nimport './ds_list_ctrl';\nimport './datasource_srv';\nimport './plugin_component';\n","import coreModule from 'app/core/core_module';\n\nexport class AlertingSrv {\n  dashboard: any;\n  alerts: any[];\n\n  init(dashboard, alerts) {\n    this.dashboard = dashboard;\n    this.alerts = alerts || [];\n  }\n}\n\ncoreModule.service('alertingSrv', AlertingSrv);\n","import _ from 'lodash';\nimport coreModule from 'app/core/core_module';\nimport { DashboardModel } from '../dashboard_model';\n\nexport interface HistoryListOpts {\n  limit: number;\n  start: number;\n}\n\nexport interface RevisionsModel {\n  id: number;\n  checked: boolean;\n  dashboardId: number;\n  parentVersion: number;\n  version: number;\n  created: Date;\n  createdBy: string;\n  message: string;\n}\n\nexport interface CalculateDiffOptions {\n  new: DiffTarget;\n  base: DiffTarget;\n  diffType: string;\n}\n\nexport interface DiffTarget {\n  dashboardId: number;\n  version: number;\n  unsavedDashboard?: DashboardModel; // when doing diffs against unsaved dashboard version\n}\n\nexport class HistorySrv {\n  /** @ngInject */\n  constructor(private backendSrv) {}\n\n  getHistoryList(dashboard: DashboardModel, options: HistoryListOpts) {\n    const id = dashboard && dashboard.id ? dashboard.id : void 0;\n    return id ? this.backendSrv.get(`api/dashboards/id/${id}/versions`, options) : Promise.resolve([]);\n  }\n\n  calculateDiff(options: CalculateDiffOptions) {\n    return this.backendSrv.post('api/dashboards/calculate-diff', options);\n  }\n\n  restoreDashboard(dashboard: DashboardModel, version: number) {\n    const id = dashboard && dashboard.id ? dashboard.id : void 0;\n    const url = `api/dashboards/id/${id}/restore`;\n\n    return id && _.isNumber(version) ? this.backendSrv.post(url, { version }) : Promise.resolve({});\n  }\n}\n\ncoreModule.service('historySrv', HistorySrv);\n","import './history_srv';\n\nimport _ from 'lodash';\nimport angular from 'angular';\nimport moment from 'moment';\n\nimport locationUtil from 'app/core/utils/location_util';\nimport { DashboardModel } from '../dashboard_model';\nimport { HistoryListOpts, RevisionsModel, CalculateDiffOptions, HistorySrv } from './history_srv';\n\nexport class HistoryListCtrl {\n  appending: boolean;\n  dashboard: DashboardModel;\n  delta: { basic: string; json: string };\n  diff: string;\n  limit: number;\n  loading: boolean;\n  max: number;\n  mode: string;\n  revisions: RevisionsModel[];\n  start: number;\n  newInfo: RevisionsModel;\n  baseInfo: RevisionsModel;\n  canCompare: boolean;\n  isNewLatest: boolean;\n\n  /** @ngInject */\n  constructor(\n    private $route,\n    private $rootScope,\n    private $location,\n    private $q,\n    private historySrv: HistorySrv,\n    public $scope\n  ) {\n    this.appending = false;\n    this.diff = 'basic';\n    this.limit = 10;\n    this.loading = false;\n    this.max = 2;\n    this.mode = 'list';\n    this.start = 0;\n    this.canCompare = false;\n\n    this.$rootScope.onAppEvent('dashboard-saved', this.onDashboardSaved.bind(this), $scope);\n    this.resetFromSource();\n  }\n\n  onDashboardSaved() {\n    this.resetFromSource();\n  }\n\n  switchMode(mode: string) {\n    this.mode = mode;\n    if (this.mode === 'list') {\n      this.reset();\n    }\n  }\n\n  dismiss() {\n    this.$rootScope.appEvent('hide-dash-editor');\n  }\n\n  addToLog() {\n    this.start = this.start + this.limit;\n    this.getLog(true);\n  }\n\n  revisionSelectionChanged() {\n    const selected = _.filter(this.revisions, { checked: true }).length;\n    this.canCompare = selected === 2;\n  }\n\n  formatDate(date) {\n    return this.dashboard.formatDate(date);\n  }\n\n  formatBasicDate(date) {\n    const now = this.dashboard.timezone === 'browser' ? moment() : moment.utc();\n    const then = this.dashboard.timezone === 'browser' ? moment(date) : moment.utc(date);\n    return then.from(now);\n  }\n\n  getDiff(diff: string) {\n    this.diff = diff;\n    this.mode = 'compare';\n\n    // have it already been fetched?\n    if (this.delta[this.diff]) {\n      return this.$q.when(this.delta[this.diff]);\n    }\n\n    const selected = _.filter(this.revisions, { checked: true });\n\n    this.newInfo = selected[0];\n    this.baseInfo = selected[1];\n    this.isNewLatest = this.newInfo.version === this.dashboard.version;\n\n    this.loading = true;\n    const options: CalculateDiffOptions = {\n      new: {\n        dashboardId: this.dashboard.id,\n        version: this.newInfo.version,\n      },\n      base: {\n        dashboardId: this.dashboard.id,\n        version: this.baseInfo.version,\n      },\n      diffType: diff,\n    };\n\n    return this.historySrv\n      .calculateDiff(options)\n      .then(response => {\n        this.delta[this.diff] = response;\n      })\n      .catch(() => {\n        this.mode = 'list';\n      })\n      .finally(() => {\n        this.loading = false;\n      });\n  }\n\n  getLog(append = false) {\n    this.loading = !append;\n    this.appending = append;\n    const options: HistoryListOpts = {\n      limit: this.limit,\n      start: this.start,\n    };\n\n    return this.historySrv\n      .getHistoryList(this.dashboard, options)\n      .then(revisions => {\n        // set formatted dates & default values\n        for (const rev of revisions) {\n          rev.createdDateString = this.formatDate(rev.created);\n          rev.ageString = this.formatBasicDate(rev.created);\n          rev.checked = false;\n        }\n\n        this.revisions = append ? this.revisions.concat(revisions) : revisions;\n      })\n      .catch(err => {\n        this.loading = false;\n      })\n      .finally(() => {\n        this.loading = false;\n        this.appending = false;\n      });\n  }\n\n  isLastPage() {\n    return _.find(this.revisions, rev => rev.version === 1);\n  }\n\n  reset() {\n    this.delta = { basic: '', json: '' };\n    this.diff = 'basic';\n    this.mode = 'list';\n    this.revisions = _.map(this.revisions, rev => _.extend({}, rev, { checked: false }));\n    this.canCompare = false;\n    this.start = 0;\n    this.isNewLatest = false;\n  }\n\n  resetFromSource() {\n    this.revisions = [];\n    return this.getLog().then(this.reset.bind(this));\n  }\n\n  restore(version: number) {\n    this.$rootScope.appEvent('confirm-modal', {\n      title: '还原版本',\n      text: '',\n      text2: `您确定要将仪表盘还原到版本 ${version}吗？ 所有未保存的更改都将丢失。`,\n      icon: 'fa-history',\n      yesText: `是的，恢复到版本 ${version}`,\n      onConfirm: this.restoreConfirm.bind(this, version),\n    });\n  }\n\n  restoreConfirm(version: number) {\n    this.loading = true;\n    return this.historySrv\n      .restoreDashboard(this.dashboard, version)\n      .then(response => {\n        this.$location.url(locationUtil.stripBaseFromUrl(response.url)).replace();\n        this.$route.reload();\n        this.$rootScope.appEvent('alert-success', ['仪表盘已恢复', '恢复到版本 ' + version]);\n      })\n      .catch(() => {\n        this.mode = 'list';\n        this.loading = false;\n      });\n  }\n}\n\nexport function dashboardHistoryDirective() {\n  return {\n    restrict: 'E',\n    templateUrl: 'public/app/features/dashboard/history/history.html',\n    controller: HistoryListCtrl,\n    bindToController: true,\n    controllerAs: 'ctrl',\n    scope: {\n      dashboard: '=',\n    },\n  };\n}\n\nangular.module('grafana.directives').directive('gfDashboardHistory', dashboardHistoryDirective);\n","import angular from 'angular';\nimport moment from 'moment';\nimport _ from 'lodash';\nimport $ from 'jquery';\nimport kbn from 'app/core/utils/kbn';\nimport * as dateMath from 'app/core/utils/datemath';\nimport impressionSrv from 'app/core/services/impression_srv';\n\nexport class DashboardLoaderSrv {\n  /** @ngInject */\n  constructor(\n    private backendSrv,\n    private dashboardSrv,\n    private datasourceSrv,\n    private $http,\n    private $q,\n    private $timeout,\n    contextSrv,\n    private $routeParams,\n    private $rootScope\n  ) {}\n\n  _dashboardLoadFailed(title, snapshot?) {\n    snapshot = snapshot || false;\n    return {\n      meta: {\n        canStar: false,\n        isSnapshot: snapshot,\n        canDelete: false,\n        canSave: false,\n        canEdit: false,\n        dashboardNotFound: true,\n      },\n      dashboard: { title: title },\n    };\n  }\n\n  loadDashboard(type, slug, uid) {\n    let promise;\n\n    if (type === 'script') {\n      promise = this._loadScriptedDashboard(slug);\n    } else if (type === 'snapshot') {\n      promise = this.backendSrv.get('/api/snapshots/' + slug).catch(() => {\n        return this._dashboardLoadFailed('未找到快照', true);\n      });\n    } else {\n      promise = this.backendSrv\n        .getDashboardByUid(uid)\n        .then(result => {\n          if (result.meta.isFolder) {\n            this.$rootScope.appEvent('alert-error', ['未找到仪表板']);\n            throw new Error('Dashboard not found');\n          }\n          return result;\n        })\n        .catch(() => {\n          return this._dashboardLoadFailed('未找到', true);\n        });\n    }\n\n    promise.then(function(result) {\n      if (result.meta.dashboardNotFound !== true) {\n        impressionSrv.addDashboardImpression(result.dashboard.id);\n      }\n\n      return result;\n    });\n\n    return promise;\n  }\n\n  _loadScriptedDashboard(file) {\n    const url = 'public/dashboards/' + file.replace(/\\.(?!js)/, '/') + '?' + new Date().getTime();\n\n    return this.$http({ url: url, method: 'GET' })\n      .then(this._executeScript.bind(this))\n      .then(\n        result => {\n          return {\n            meta: {\n              fromScript: true,\n              canDelete: false,\n              canSave: false,\n              canStar: false,\n            },\n            dashboard: result.data,\n          };\n        },\n        err => {\n          console.log('Script dashboard error ' + err);\n          this.$rootScope.appEvent('alert-error', [\n            '脚本错误',\n            '请确保它存在并返回有效的仪表盘',\n          ]);\n          return this._dashboardLoadFailed('Scripted dashboard');\n        }\n      );\n  }\n\n  _executeScript(result) {\n    const services = {\n      dashboardSrv: this.dashboardSrv,\n      datasourceSrv: this.datasourceSrv,\n      $q: this.$q,\n    };\n\n    /*jshint -W054 */\n    const script_func = new Function(\n      'ARGS',\n      'kbn',\n      'dateMath',\n      '_',\n      'moment',\n      'window',\n      'document',\n      '$',\n      'jQuery',\n      'services',\n      result.data\n    );\n    const script_result = script_func(this.$routeParams, kbn, dateMath, _, moment, window, document, $, $, services);\n\n    // Handle async dashboard scripts\n    if (_.isFunction(script_result)) {\n      const deferred = this.$q.defer();\n      script_result(dashboard => {\n        this.$timeout(() => {\n          deferred.resolve({ data: dashboard });\n        });\n      });\n      return deferred.promise;\n    }\n\n    return { data: script_result };\n  }\n}\n\nangular.module('grafana.services').service('dashboardLoaderSrv', DashboardLoaderSrv);\n","import moment from 'moment';\nimport angular from 'angular';\nimport { appEvents, NavModel } from 'app/core/core';\nimport { DashboardModel } from '../dashboard_model';\n\nexport class DashNavCtrl {\n  dashboard: DashboardModel;\n  navModel: NavModel;\n  titleTooltip: string;\n\n  /** @ngInject */\n  constructor(private $scope, private dashboardSrv, private $location, public playlistSrv) {\n    appEvents.on('save-dashboard', this.saveDashboard.bind(this), $scope);\n\n    if (this.dashboard.meta.isSnapshot) {\n      const meta = this.dashboard.meta;\n      this.titleTooltip = '创建于: &nbsp;' + moment(meta.created).calendar();\n      if (meta.expires) {\n        this.titleTooltip += '<br>失效于: &nbsp;' + moment(meta.expires).fromNow() + '<br>';\n      }\n    }\n  }\n\n  toggleSettings() {\n    const search = this.$location.search();\n    if (search.editview) {\n      delete search.editview;\n    } else {\n      search.editview = 'settings';\n    }\n    this.$location.search(search);\n  }\n\n  toggleViewMode() {\n    appEvents.emit('toggle-kiosk-mode');\n  }\n\n  close() {\n    const search = this.$location.search();\n    if (search.editview) {\n      delete search.editview;\n    } else if (search.fullscreen) {\n      delete search.fullscreen;\n      delete search.edit;\n    }\n    this.$location.search(search);\n  }\n\n  starDashboard() {\n    this.dashboardSrv.starDashboard(this.dashboard.id, this.dashboard.meta.isStarred).then(newState => {\n      this.dashboard.meta.isStarred = newState;\n    });\n  }\n\n  shareDashboard(tabIndex) {\n    const modalScope = this.$scope.$new();\n    modalScope.tabIndex = tabIndex;\n    modalScope.dashboard = this.dashboard;\n\n    appEvents.emit('show-modal', {\n      src: 'public/app/features/dashboard/partials/shareModal.html',\n      scope: modalScope,\n    });\n  }\n\n  hideTooltip(evt) {\n    angular.element(evt.currentTarget).tooltip('hide');\n  }\n\n  saveDashboard() {\n    return this.dashboardSrv.saveDashboard();\n  }\n\n  showSearch() {\n    appEvents.emit('show-dash-search');\n  }\n\n  addPanel() {\n    appEvents.emit('dash-scroll', { animate: true, evt: 0 });\n\n    if (this.dashboard.panels.length > 0 && this.dashboard.panels[0].type === 'add-panel') {\n      return; // Return if the \"Add panel\" exists already\n    }\n\n    this.dashboard.addPanel({\n      type: 'add-panel',\n      gridPos: { x: 0, y: 0, w: 12, h: 9 },\n      title: '面板标题',\n    });\n  }\n\n  navItemClicked(navItem, evt) {\n    if (navItem.clickHandler) {\n      navItem.clickHandler();\n      evt.preventDefault();\n    }\n  }\n}\n\nexport function dashNavDirective() {\n  return {\n    restrict: 'E',\n    templateUrl: 'public/app/features/dashboard/dashnav/dashnav.html',\n    controller: DashNavCtrl,\n    bindToController: true,\n    controllerAs: 'ctrl',\n    transclude: true,\n    scope: { dashboard: '=' },\n  };\n}\n\nangular.module('grafana.directives').directive('dashnav', dashNavDirective);\n","import angular from 'angular';\nimport _ from 'lodash';\n\nexport class SubmenuCtrl {\n  annotations: any;\n  variables: any;\n  dashboard: any;\n\n  /** @ngInject */\n  constructor(private $rootScope, private variableSrv, private $location) {\n    this.annotations = this.dashboard.templating.list;\n    this.variables = this.variableSrv.variables;\n  }\n\n  annotationStateChanged() {\n    this.$rootScope.$broadcast('refresh');\n  }\n\n  variableUpdated(variable) {\n    this.variableSrv.variableUpdated(variable, true);\n  }\n\n  openEditView(editview) {\n    const search = _.extend(this.$location.search(), { editview: editview });\n    this.$location.search(search);\n  }\n}\n\nexport function submenuDirective() {\n  return {\n    restrict: 'E',\n    templateUrl: 'public/app/features/dashboard/submenu/submenu.html',\n    controller: SubmenuCtrl,\n    bindToController: true,\n    controllerAs: 'ctrl',\n    scope: {\n      dashboard: '=',\n    },\n  };\n}\n\nangular.module('grafana.directives').directive('dashboardSubmenu', submenuDirective);\n","import coreModule from 'app/core/core_module';\n\nconst template = `\n<div class=\"modal-body\">\n\t<div class=\"modal-header\">\n\t\t<h2 class=\"modal-header-title\">\n\t\t\t<i class=\"fa fa-copy\"></i>\n\t\t\t<span class=\"p-l-1\">另存为...</span>\n\t\t</h2>\n\n\t\t<a class=\"modal-header-close\" ng-click=\"ctrl.dismiss();\">\n\t\t\t<i class=\"fa fa-remove\"></i>\n\t\t</a>\n\t</div>\n\n\t<form name=\"ctrl.saveForm\" class=\"modal-content\" novalidate>\n\t\t<div class=\"p-t-2\">\n\t\t\t<div class=\"gf-form\">\n\t\t\t\t<label class=\"gf-form-label width-7\">新名称</label>\n\t\t\t\t<input type=\"text\" class=\"gf-form-input\" ng-model=\"ctrl.clone.title\" give-focus=\"true\" required>\n\t\t\t</div>\n      <div class=\"gf-form\">\n        <folder-picker initial-folder-id=\"ctrl.folderId\"\n                       on-change=\"ctrl.onFolderChange($folder)\"\n                       enter-folder-creation=\"ctrl.onEnterFolderCreation()\"\n                       exit-folder-creation=\"ctrl.onExitFolderCreation()\"\n                       enable-create-new=\"true\"\n                       label-class=\"width-7\">\n        </folder-picker>\n      </div>\n\t\t</div>\n\n\t\t<div class=\"gf-form-button-row text-center\">\n\t\t\t<button type=\"submit\" class=\"btn btn-success\" ng-click=\"ctrl.save()\" ng-disabled=\"!ctrl.isValidFolderSelection\">保存</button>\n\t\t\t<a class=\"btn-text\" ng-click=\"ctrl.dismiss();\">取消</a>\n\t\t</div>\n\t</form>\n</div>\n`;\n\nexport class SaveDashboardAsModalCtrl {\n  clone: any;\n  folderId: any;\n  dismiss: () => void;\n  isValidFolderSelection = true;\n\n  /** @ngInject */\n  constructor(private dashboardSrv) {\n    const dashboard = this.dashboardSrv.getCurrent();\n    this.clone = dashboard.getSaveModelClone();\n    this.clone.id = null;\n    this.clone.uid = '';\n    this.clone.title += ' 副本';\n    this.clone.editable = true;\n    this.clone.hideControls = false;\n    this.folderId = dashboard.meta.folderId;\n\n    // remove alerts if source dashboard is already persisted\n    // do not want to create alert dupes\n    if (dashboard.id > 0) {\n      this.clone.panels.forEach(panel => {\n        if (panel.type === 'graph' && panel.alert) {\n          delete panel.thresholds;\n        }\n        delete panel.alert;\n      });\n    }\n\n    delete this.clone.autoUpdate;\n  }\n\n  save() {\n    return this.dashboardSrv.save(this.clone, { folderId: this.folderId }).then(this.dismiss);\n  }\n\n  keyDown(evt) {\n    if (evt.keyCode === 13) {\n      this.save();\n    }\n  }\n\n  onFolderChange(folder) {\n    this.folderId = folder.id;\n  }\n\n  onEnterFolderCreation() {\n    this.isValidFolderSelection = false;\n  }\n\n  onExitFolderCreation() {\n    this.isValidFolderSelection = true;\n  }\n}\n\nexport function saveDashboardAsDirective() {\n  return {\n    restrict: 'E',\n    template: template,\n    controller: SaveDashboardAsModalCtrl,\n    bindToController: true,\n    controllerAs: 'ctrl',\n    scope: { dismiss: '&' },\n  };\n}\n\ncoreModule.directive('saveDashboardAsModal', saveDashboardAsDirective);\n","import coreModule from 'app/core/core_module';\n\nconst template = `\n<div class=\"modal-body\">\n  <div class=\"modal-header\">\n    <h2 class=\"modal-header-title\">\n      <i class=\"fa fa-save\"></i>\n      <span class=\"p-l-1\">保存更改</span>\n    </h2>\n\n    <a class=\"modal-header-close\" ng-click=\"ctrl.dismiss();\">\n      <i class=\"fa fa-remove\"></i>\n    </a>\n  </div>\n\n  <form name=\"ctrl.saveForm\" ng-submit=\"ctrl.save()\" class=\"modal-content\" novalidate>\n    <div class=\"p-t-1\">\n      <div class=\"gf-form-group\" ng-if=\"ctrl.timeChange || ctrl.variableValueChange\">\n\t\t    <gf-form-switch class=\"gf-form\"\n\t\t\t    label=\"保存当前的时间范围\" ng-if=\"ctrl.timeChange\" label-class=\"width-12\" switch-class=\"max-width-6\"\n\t\t\t    checked=\"ctrl.saveTimerange\" on-change=\"buildUrl()\">\n\t\t    </gf-form-switch>\n\t\t    <gf-form-switch class=\"gf-form\"\n\t\t\t    label=\"保存当前的所有变量\" ng-if=\"ctrl.variableValueChange\" label-class=\"width-12\" switch-class=\"max-width-6\"\n\t\t\t    checked=\"ctrl.saveVariables\" on-change=\"buildUrl()\">\n\t\t    </gf-form-switch>\n\t    </div>\n      <div class=\"gf-form\">\n        <label class=\"gf-form-hint\">\n          <input\n            type=\"text\"\n            name=\"message\"\n            class=\"gf-form-input\"\n            placeholder=\"添加备注以描述您的更改 &hellip;\"\n            give-focus=\"true\"\n            ng-model=\"ctrl.message\"\n            ng-model-options=\"{allowInvalid: true}\"\n            ng-maxlength=\"this.max\"\n            maxlength=\"64\"\n            autocomplete=\"off\" />\n          <small class=\"gf-form-hint-text muted\" ng-cloak>\n            <span ng-class=\"{'text-error': ctrl.saveForm.message.$invalid && ctrl.saveForm.message.$dirty }\">\n              {{ctrl.message.length || 0}}\n            </span>\n            / {{ctrl.max}} 字符\n          </small>\n        </label>\n      </div>\n    </div>\n\n    <div class=\"gf-form-button-row text-center\">\n      <button\n        id=\"saveBtn\"\n        type=\"submit\"\n        class=\"btn btn-success\"\n        ng-class=\"{'btn-success--processing': ctrl.isSaving}\"\n        ng-disabled=\"ctrl.saveForm.$invalid || ctrl.isSaving\"\n      >\n        <span ng-if=\"!ctrl.isSaving\">保存</span>\n        <span ng-if=\"ctrl.isSaving === true\">保存中...</span>\n      </button>\n      <button class=\"btn btn-inverse\" ng-click=\"ctrl.dismiss();\">取消</button>\n    </div>\n  </form>\n</div>\n`;\n\nexport class SaveDashboardModalCtrl {\n  message: string;\n  saveVariables = false;\n  saveTimerange = false;\n  time: any;\n  originalTime: any;\n  current = [];\n  originalCurrent = [];\n  max: number;\n  saveForm: any;\n  isSaving: boolean;\n  dismiss: () => void;\n  timeChange = false;\n  variableValueChange = false;\n\n  /** @ngInject */\n  constructor(private dashboardSrv) {\n    this.message = '';\n    this.max = 64;\n    this.isSaving = false;\n    this.timeChange = this.dashboardSrv.getCurrent().hasTimeChanged();\n    this.variableValueChange = this.dashboardSrv.getCurrent().hasVariableValuesChanged();\n  }\n\n  save() {\n    if (!this.saveForm.$valid) {\n      return;\n    }\n\n    const options = {\n      saveVariables: this.saveVariables,\n      saveTimerange: this.saveTimerange,\n      message: this.message,\n    };\n\n    const dashboard = this.dashboardSrv.getCurrent();\n    const saveModel = dashboard.getSaveModelClone(options);\n\n    this.isSaving = true;\n\n    return this.dashboardSrv.save(saveModel, options).then(this.postSave.bind(this, options));\n  }\n\n  postSave(options) {\n    if (options.saveVariables) {\n      this.dashboardSrv.getCurrent().resetOriginalVariables();\n    }\n\n    if (options.saveTimerange) {\n      this.dashboardSrv.getCurrent().resetOriginalTime();\n    }\n\n    this.dismiss();\n  }\n}\n\nexport function saveDashboardModalDirective() {\n  return {\n    restrict: 'E',\n    template: template,\n    controller: SaveDashboardModalCtrl,\n    bindToController: true,\n    controllerAs: 'ctrl',\n    scope: { dismiss: '&' },\n  };\n}\n\ncoreModule.directive('saveDashboardModal', saveDashboardModalDirective);\n","import angular from 'angular';\nimport { saveAs } from 'file-saver';\nimport coreModule from 'app/core/core_module';\n\nconst template = `\n<div class=\"modal-body\">\n  <div class=\"modal-header\">\n    <h2 class=\"modal-header-title\">\n      <i class=\"fa fa-save\"></i><span class=\"p-l-1\">无法保存配置的仪表盘</span>\n    </h2>\n\n    <a class=\"modal-header-close\" ng-click=\"ctrl.dismiss();\">\n      <i class=\"fa fa-remove\"></i>\n    </a>\n  </div>\n\n  <div class=\"modal-content\">\n    <small>\n      此仪表盘无法从Grafana的UI中保存，因为它已从其他来源进行配置。\n      复制JSON或将其保存到下面的文件中。 然后，您可以在相应的配置源中更新仪表盘。<br/>\n      <i>查看 <a class=\"external-link\" href=\"http://docs.grafana.org/administration/provisioning/#dashboards\" target=\"_blank\">\n      文档</a> 获取有关配置的更多信息。</i>\n    </small>\n    <div class=\"p-t-2\">\n      <div class=\"gf-form\">\n        <code-editor content=\"ctrl.dashboardJson\" data-mode=\"json\" data-max-lines=15></code-editor>\n      </div>\n      <div class=\"gf-form-button-row\">\n        <button class=\"btn btn-success\" clipboard-button=\"ctrl.getJsonForClipboard()\">\n          <i class=\"fa fa-clipboard\"></i>&nbsp;将JSON复制到剪贴板\n        </button>\n        <button class=\"btn btn-secondary\" clipboard-button=\"ctrl.save()\">\n          <i class=\"fa fa-save\"></i>&nbsp;将JSON保存到文件\n        </button>\n        <a class=\"btn btn-link\" ng-click=\"ctrl.dismiss();\">取消</a>\n      </div>\n    </div>\n  </div>\n</div>\n`;\n\nexport class SaveProvisionedDashboardModalCtrl {\n  dash: any;\n  dashboardJson: string;\n  dismiss: () => void;\n\n  /** @ngInject */\n  constructor(dashboardSrv) {\n    this.dash = dashboardSrv.getCurrent().getSaveModelClone();\n    delete this.dash.id;\n    this.dashboardJson = angular.toJson(this.dash, true);\n  }\n\n  save() {\n    const blob = new Blob([angular.toJson(this.dash, true)], {\n      type: 'application/json;charset=utf-8',\n    });\n    saveAs(blob, this.dash.title + '-' + new Date().getTime() + '.json');\n  }\n\n  getJsonForClipboard() {\n    return this.dashboardJson;\n  }\n}\n\nexport function saveProvisionedDashboardModalDirective() {\n  return {\n    restrict: 'E',\n    template: template,\n    controller: SaveProvisionedDashboardModalCtrl,\n    bindToController: true,\n    controllerAs: 'ctrl',\n    scope: { dismiss: '&' },\n  };\n}\n\ncoreModule.directive('saveProvisionedDashboardModal', saveProvisionedDashboardModalDirective);\n","import angular from 'angular';\nimport config from 'app/core/config';\nimport moment from 'moment';\n\n/** @ngInject */\nexport function ShareModalCtrl($scope, $rootScope, $location, $timeout, timeSrv, templateSrv, linkSrv) {\n  $scope.options = {\n    forCurrent: true,\n    includeTemplateVars: true,\n    theme: 'current',\n  };\n  $scope.editor = { index: $scope.tabIndex || 0 };\n\n  $scope.init = function() {\n    $scope.modeSharePanel = $scope.panel ? true : false;\n\n    $scope.tabs = [{ title: '链接', src: 'shareLink.html' }];\n\n    if ($scope.modeSharePanel) {\n      $scope.modalTitle = '共享面板';\n      $scope.tabs.push({ title: '嵌入式', src: 'shareEmbed.html' });\n    } else {\n      $scope.modalTitle = '共享';\n    }\n\n    if (!$scope.dashboard.meta.isSnapshot) {\n      $scope.tabs.push({ title: '快照', src: 'shareSnapshot.html' });\n    }\n\n    if (!$scope.dashboard.meta.isSnapshot && !$scope.modeSharePanel) {\n      $scope.tabs.push({ title: '导出', src: 'shareExport.html' });\n    }\n\n    $scope.buildUrl();\n  };\n\n  $scope.buildUrl = function() {\n    let baseUrl = $location.absUrl();\n    const queryStart = baseUrl.indexOf('?');\n\n    if (queryStart !== -1) {\n      baseUrl = baseUrl.substring(0, queryStart);\n    }\n\n    const params = angular.copy($location.search());\n\n    const range = timeSrv.timeRange();\n    params.from = range.from.valueOf();\n    params.to = range.to.valueOf();\n    params.orgId = config.bootData.user.orgId;\n\n    if ($scope.options.includeTemplateVars) {\n      templateSrv.fillVariableValuesForUrl(params);\n    }\n\n    if (!$scope.options.forCurrent) {\n      delete params.from;\n      delete params.to;\n    }\n\n    if ($scope.options.theme !== 'current') {\n      params.theme = $scope.options.theme;\n    }\n\n    if ($scope.modeSharePanel) {\n      params.panelId = $scope.panel.id;\n      params.fullscreen = true;\n    } else {\n      delete params.panelId;\n      delete params.fullscreen;\n    }\n\n    $scope.shareUrl = linkSrv.addParamsToUrl(baseUrl, params);\n\n    let soloUrl = baseUrl.replace(config.appSubUrl + '/dashboard/', config.appSubUrl + '/dashboard-solo/');\n    soloUrl = soloUrl.replace(config.appSubUrl + '/d/', config.appSubUrl + '/d-solo/');\n    delete params.fullscreen;\n    delete params.edit;\n    soloUrl = linkSrv.addParamsToUrl(soloUrl, params);\n\n    $scope.iframeHtml = '<iframe src=\"' + soloUrl + '\" width=\"450\" height=\"200\" frameborder=\"0\"></iframe>';\n\n    $scope.imageUrl = soloUrl.replace(\n      config.appSubUrl + '/dashboard-solo/',\n      config.appSubUrl + '/render/dashboard-solo/'\n    );\n    $scope.imageUrl = $scope.imageUrl.replace(config.appSubUrl + '/d-solo/', config.appSubUrl + '/render/d-solo/');\n    $scope.imageUrl += '&width=1000&height=500' + $scope.getLocalTimeZone();\n  };\n\n  // This function will try to return the proper full name of the local timezone\n  // Chrome does not handle the timezone offset (but phantomjs does)\n  $scope.getLocalTimeZone = function() {\n    const utcOffset = '&tz=UTC' + encodeURIComponent(moment().format('Z'));\n\n    // Older browser does not the internationalization API\n    if (!(<any>window).Intl) {\n      return utcOffset;\n    }\n\n    const dateFormat = (<any>window).Intl.DateTimeFormat();\n    if (!dateFormat.resolvedOptions) {\n      return utcOffset;\n    }\n\n    const options = dateFormat.resolvedOptions();\n    if (!options.timeZone) {\n      return utcOffset;\n    }\n\n    return '&tz=' + encodeURIComponent(options.timeZone);\n  };\n\n  $scope.getShareUrl = function() {\n    return $scope.shareUrl;\n  };\n}\n\nangular.module('grafana.controllers').controller('ShareModalCtrl', ShareModalCtrl);\n","import angular from 'angular';\nimport _ from 'lodash';\n\nexport class ShareSnapshotCtrl {\n  /** @ngInject */\n  constructor($scope, $rootScope, $location, backendSrv, $timeout, timeSrv) {\n    $scope.snapshot = {\n      name: $scope.dashboard.title,\n      expires: 0,\n      timeoutSeconds: 4,\n    };\n\n    $scope.step = 1;\n\n    $scope.expireOptions = [\n      { text: '1 小时', value: 60 * 60 },\n      { text: '1 天', value: 60 * 60 * 24 },\n      { text: '7 天', value: 60 * 60 * 24 * 7 },\n      { text: '从不', value: 0 },\n    ];\n\n    $scope.accessOptions = [\n      { text: '拥有链接的任何人', value: 1 },\n      { text: '组织用户', value: 2 },\n      { text: '在网上公开', value: 3 },\n    ];\n\n    $scope.init = function() {\n      backendSrv.get('/api/snapshot/shared-options').then(function(options) {\n        $scope.externalUrl = options['externalSnapshotURL'];\n        $scope.sharingButtonText = options['externalSnapshotName'];\n        $scope.externalEnabled = options['externalEnabled'];\n      });\n    };\n\n    $scope.apiUrl = '/api/snapshots';\n\n    $scope.createSnapshot = function(external) {\n      $scope.dashboard.snapshot = {\n        timestamp: new Date(),\n      };\n\n      if (!external) {\n        $scope.dashboard.snapshot.originalUrl = $location.absUrl();\n      }\n\n      $scope.loading = true;\n      $scope.snapshot.external = external;\n\n      $rootScope.$broadcast('refresh');\n\n      $timeout(function() {\n        $scope.saveSnapshot(external);\n      }, $scope.snapshot.timeoutSeconds * 1000);\n    };\n\n    $scope.saveSnapshot = function(external) {\n      const dash = $scope.dashboard.getSaveModelClone();\n      $scope.scrubDashboard(dash);\n\n      const cmdData = {\n        dashboard: dash,\n        name: dash.title,\n        expires: $scope.snapshot.expires,\n      };\n\n      const postUrl = external ? $scope.externalUrl + $scope.apiUrl : $scope.apiUrl;\n\n      backendSrv.post(postUrl, cmdData).then(\n        function(results) {\n          $scope.loading = false;\n\n          if (external) {\n            $scope.deleteUrl = results.deleteUrl;\n            $scope.snapshotUrl = results.url;\n            $scope.saveExternalSnapshotRef(cmdData, results);\n          } else {\n            const url = $location.url();\n            let baseUrl = $location.absUrl();\n\n            if (url !== '/') {\n              baseUrl = baseUrl.replace(url, '') + '/';\n            }\n\n            $scope.snapshotUrl = baseUrl + 'dashboard/snapshot/' + results.key;\n            $scope.deleteUrl = baseUrl + 'api/snapshots-delete/' + results.deleteKey;\n          }\n\n          $scope.step = 2;\n        },\n        function() {\n          $scope.loading = false;\n        }\n      );\n    };\n\n    $scope.getSnapshotUrl = function() {\n      return $scope.snapshotUrl;\n    };\n\n    $scope.scrubDashboard = function(dash) {\n      // change title\n      dash.title = $scope.snapshot.name;\n\n      // make relative times absolute\n      dash.time = timeSrv.timeRange();\n\n      // remove panel queries & links\n      _.each(dash.panels, function(panel) {\n        panel.targets = [];\n        panel.links = [];\n        panel.datasource = null;\n      });\n\n      // remove annotation queries\n      dash.annotations.list = _.chain(dash.annotations.list)\n        .filter(function(annotation) {\n          return annotation.enable;\n        })\n        .map(function(annotation) {\n          return {\n            name: annotation.name,\n            enable: annotation.enable,\n            iconColor: annotation.iconColor,\n            snapshotData: annotation.snapshotData,\n            type: annotation.type,\n            builtIn: annotation.builtIn,\n            hide: annotation.hide,\n          };\n        })\n        .value();\n\n      // remove template queries\n      _.each(dash.templating.list, function(variable) {\n        variable.query = '';\n        variable.options = variable.current;\n        variable.refresh = false;\n      });\n\n      // snapshot single panel\n      if ($scope.modeSharePanel) {\n        const singlePanel = $scope.panel.getSaveModel();\n        singlePanel.gridPos.w = 24;\n        singlePanel.gridPos.x = 0;\n        singlePanel.gridPos.y = 0;\n        singlePanel.gridPos.h = 20;\n        dash.panels = [singlePanel];\n      }\n\n      // cleanup snapshotData\n      delete $scope.dashboard.snapshot;\n      $scope.dashboard.forEachPanel(function(panel) {\n        delete panel.snapshotData;\n      });\n      _.each($scope.dashboard.annotations.list, function(annotation) {\n        delete annotation.snapshotData;\n      });\n    };\n\n    $scope.deleteSnapshot = function() {\n      backendSrv.get($scope.deleteUrl).then(function() {\n        $scope.step = 3;\n      });\n    };\n\n    $scope.saveExternalSnapshotRef = function(cmdData, results) {\n      // save external in local instance as well\n      cmdData.external = true;\n      cmdData.key = results.key;\n      cmdData.deleteKey = results.deleteKey;\n      backendSrv.post('/api/snapshots/', cmdData);\n    };\n  }\n}\n\nangular.module('grafana.controllers').controller('ShareSnapshotCtrl', ShareSnapshotCtrl);\n","import coreModule from 'app/core/core_module';\nimport { DashboardModel } from './dashboard_model';\nimport locationUtil from 'app/core/utils/location_util';\n\nexport class DashboardSrv {\n  dash: any;\n\n  /** @ngInject */\n  constructor(private backendSrv, private $rootScope, private $location) {}\n\n  create(dashboard, meta) {\n    return new DashboardModel(dashboard, meta);\n  }\n\n  setCurrent(dashboard) {\n    this.dash = dashboard;\n  }\n\n  getCurrent() {\n    return this.dash;\n  }\n\n  handleSaveDashboardError(clone, options, err) {\n    options = options || {};\n    options.overwrite = true;\n\n    if (err.data && err.data.status === 'version-mismatch') {\n      err.isHandled = true;\n\n      this.$rootScope.appEvent('confirm-modal', {\n        title: '冲突',\n        text: '其他人已更新此仪表板。',\n        text2: '你还想保存这个仪表板吗?',\n        yesText: '保存并覆盖',\n        icon: 'fa-warning',\n        onConfirm: () => {\n          this.save(clone, options);\n        },\n      });\n    }\n\n    if (err.data && err.data.status === 'name-exists') {\n      err.isHandled = true;\n\n      this.$rootScope.appEvent('confirm-modal', {\n        title: '冲突',\n        text: '所选文件夹中已存在相同名称的仪表板。',\n        text2: '你还想保存这个仪表板吗?',\n        yesText: '保存并覆盖',\n        icon: 'fa-warning',\n        onConfirm: () => {\n          this.save(clone, options);\n        },\n      });\n    }\n\n    if (err.data && err.data.status === 'plugin-dashboard') {\n      err.isHandled = true;\n\n      this.$rootScope.appEvent('confirm-modal', {\n        title: '插件仪表板',\n        text: err.data.message,\n        text2: '更新插件时，您的更改将丢失。 使用“另存为”创建自定义版本。',\n        yesText: '覆盖',\n        icon: 'fa-warning',\n        altActionText: '另存为',\n        onAltAction: () => {\n          this.showSaveAsModal();\n        },\n        onConfirm: () => {\n          this.save(clone, { overwrite: true });\n        },\n      });\n    }\n  }\n\n  postSave(clone, data) {\n    this.dash.version = data.version;\n\n    const newUrl = locationUtil.stripBaseFromUrl(data.url);\n    const currentPath = this.$location.path();\n\n    if (newUrl !== currentPath) {\n      this.$location.url(newUrl).replace();\n    }\n\n    this.$rootScope.appEvent('dashboard-saved', this.dash);\n    this.$rootScope.appEvent('alert-success', ['仪表盘已保存']);\n\n    return this.dash;\n  }\n\n  save(clone, options) {\n    options = options || {};\n    options.folderId = options.folderId >= 0 ? options.folderId : this.dash.meta.folderId || clone.folderId;\n\n    return this.backendSrv\n      .saveDashboard(clone, options)\n      .then(this.postSave.bind(this, clone))\n      .catch(this.handleSaveDashboardError.bind(this, clone, options));\n  }\n\n  saveDashboard(options?, clone?) {\n    if (clone) {\n      this.setCurrent(this.create(clone, this.dash.meta));\n    }\n\n    if (this.dash.meta.provisioned) {\n      return this.showDashboardProvisionedModal();\n    }\n\n    if (!this.dash.meta.canSave && options.makeEditable !== true) {\n      return Promise.resolve();\n    }\n\n    if (this.dash.title === 'New dashboard') {\n      return this.showSaveAsModal();\n    }\n\n    if (this.dash.version > 0) {\n      return this.showSaveModal();\n    }\n\n    return this.save(this.dash.getSaveModelClone(), options);\n  }\n\n  saveJSONDashboard(json: string) {\n    return this.save(JSON.parse(json), {});\n  }\n\n  showDashboardProvisionedModal() {\n    this.$rootScope.appEvent('show-modal', {\n      templateHtml: '<save-provisioned-dashboard-modal dismiss=\"dismiss()\"></save-provisioned-dashboard-modal>',\n    });\n  }\n\n  showSaveAsModal() {\n    this.$rootScope.appEvent('show-modal', {\n      templateHtml: '<save-dashboard-as-modal dismiss=\"dismiss()\"></save-dashboard-as-modal>',\n      modalClass: 'modal--narrow',\n    });\n  }\n\n  showSaveModal() {\n    this.$rootScope.appEvent('show-modal', {\n      templateHtml: '<save-dashboard-modal dismiss=\"dismiss()\"></save-dashboard-modal>',\n      modalClass: 'modal--narrow',\n    });\n  }\n\n  starDashboard(dashboardId, isStarred) {\n    let promise;\n\n    if (isStarred) {\n      promise = this.backendSrv.delete('/api/user/stars/dashboard/' + dashboardId).then(() => {\n        return false;\n      });\n    } else {\n      promise = this.backendSrv.post('/api/user/stars/dashboard/' + dashboardId).then(() => {\n        return true;\n      });\n    }\n\n    return promise.then(res => {\n      if (this.dash && this.dash.id === dashboardId) {\n        this.dash.meta.isStarred = res;\n      }\n      return res;\n    });\n  }\n}\n\ncoreModule.service('dashboardSrv', DashboardSrv);\n","import angular from 'angular';\nimport _ from 'lodash';\nimport config from 'app/core/config';\nimport { DashboardModel } from './dashboard_model';\n\n// represents the transient view state\n// like fullscreen panel & edit\nexport class DashboardViewState {\n  state: any;\n  panelScopes: any;\n  $scope: any;\n  dashboard: DashboardModel;\n  editStateChanged: any;\n  fullscreenPanel: any;\n  oldTimeRange: any;\n\n  /** @ngInject */\n  constructor($scope, private $location, private $timeout, private $rootScope) {\n    const self = this;\n    self.state = {};\n    self.panelScopes = [];\n    self.$scope = $scope;\n    self.dashboard = $scope.dashboard;\n\n    $scope.onAppEvent('$routeUpdate', function() {\n      const urlState = self.getQueryStringState();\n      if (self.needsSync(urlState)) {\n        self.update(urlState, true);\n      }\n    });\n\n    $scope.onAppEvent('panel-change-view', function(evt, payload) {\n      self.update(payload);\n    });\n\n    $scope.onAppEvent('panel-initialized', function(evt, payload) {\n      self.registerPanel(payload.scope);\n    });\n\n    // this marks changes to location during this digest cycle as not to add history item\n    // don't want url changes like adding orgId to add browser history\n    $location.replace();\n    this.update(this.getQueryStringState());\n  }\n\n  needsSync(urlState) {\n    return _.isEqual(this.state, urlState) === false;\n  }\n\n  getQueryStringState() {\n    const state = this.$location.search();\n    state.panelId = parseInt(state.panelId) || null;\n    state.fullscreen = state.fullscreen ? true : null;\n    state.edit = state.edit === 'true' || state.edit === true || null;\n    state.editview = state.editview || null;\n    state.orgId = config.bootData.user.orgId;\n    return state;\n  }\n\n  serializeToUrl() {\n    const urlState = _.clone(this.state);\n    urlState.fullscreen = this.state.fullscreen ? true : null;\n    urlState.edit = this.state.edit ? true : null;\n    return urlState;\n  }\n\n  update(state, fromRouteUpdated?) {\n    // implement toggle logic\n    if (state.toggle) {\n      delete state.toggle;\n      if (this.state.fullscreen && state.fullscreen) {\n        if (this.state.edit === state.edit) {\n          state.fullscreen = !state.fullscreen;\n        }\n      }\n    }\n\n    // remember if editStateChanged\n    this.editStateChanged = (state.edit || false) !== (this.state.edit || false);\n\n    _.extend(this.state, state);\n    this.dashboard.meta.fullscreen = this.state.fullscreen;\n\n    if (!this.state.fullscreen) {\n      this.state.fullscreen = null;\n      this.state.edit = null;\n      // clear panel id unless in solo mode\n      if (!this.dashboard.meta.soloMode) {\n        this.state.panelId = null;\n      }\n    }\n\n    if ((this.state.fullscreen || this.dashboard.meta.soloMode) && this.state.panelId) {\n      // Trying to render panel in fullscreen when it's in the collapsed row causes an issue.\n      // So in this case expand collapsed row first.\n      this.toggleCollapsedPanelRow(this.state.panelId);\n    }\n\n    // if no edit state cleanup tab parm\n    if (!this.state.edit) {\n      delete this.state.tab;\n    }\n\n    // do not update url params if we are here\n    // from routeUpdated event\n    if (fromRouteUpdated !== true) {\n      this.$location.search(this.serializeToUrl());\n    }\n\n    this.syncState();\n  }\n\n  toggleCollapsedPanelRow(panelId) {\n    for (const panel of this.dashboard.panels) {\n      if (panel.collapsed) {\n        for (const rowPanel of panel.panels) {\n          if (rowPanel.id === panelId) {\n            this.dashboard.toggleRow(panel);\n            return;\n          }\n        }\n      }\n    }\n  }\n\n  syncState() {\n    if (this.panelScopes.length === 0) {\n      return;\n    }\n\n    if (this.dashboard.meta.fullscreen) {\n      const panelScope = this.getPanelScope(this.state.panelId);\n      if (!panelScope) {\n        return;\n      }\n\n      if (this.fullscreenPanel) {\n        // if already fullscreen\n        if (this.fullscreenPanel === panelScope && this.editStateChanged === false) {\n          return;\n        } else {\n          this.leaveFullscreen(false);\n        }\n      }\n\n      if (!panelScope.ctrl.editModeInitiated) {\n        panelScope.ctrl.initEditMode();\n      }\n\n      if (!panelScope.ctrl.fullscreen) {\n        this.enterFullscreen(panelScope);\n      }\n    } else if (this.fullscreenPanel) {\n      this.leaveFullscreen(true);\n    }\n  }\n\n  getPanelScope(id) {\n    return _.find(this.panelScopes, function(panelScope) {\n      return panelScope.ctrl.panel.id === id;\n    });\n  }\n\n  leaveFullscreen(render) {\n    const self = this;\n    const ctrl = self.fullscreenPanel.ctrl;\n\n    ctrl.editMode = false;\n    ctrl.fullscreen = false;\n\n    this.dashboard.setViewMode(ctrl.panel, false, false);\n    this.$scope.appEvent('panel-fullscreen-exit', { panelId: ctrl.panel.id });\n    this.$scope.appEvent('dash-scroll', { restore: true });\n\n    if (!render) {\n      return false;\n    }\n\n    this.$timeout(function() {\n      if (self.oldTimeRange !== ctrl.range) {\n        self.$rootScope.$broadcast('refresh');\n      } else {\n        self.$rootScope.$broadcast('render');\n      }\n      delete self.fullscreenPanel;\n    });\n    return true;\n  }\n\n  enterFullscreen(panelScope) {\n    const ctrl = panelScope.ctrl;\n\n    ctrl.editMode = this.state.edit && this.dashboard.meta.canEdit;\n    ctrl.fullscreen = true;\n\n    this.oldTimeRange = ctrl.range;\n    this.fullscreenPanel = panelScope;\n\n    // Firefox doesn't return scrollTop position properly if 'dash-scroll' is emitted after setViewMode()\n    this.$scope.appEvent('dash-scroll', { animate: false, pos: 0 });\n    this.dashboard.setViewMode(ctrl.panel, true, ctrl.editMode);\n    this.$scope.appEvent('panel-fullscreen-enter', { panelId: ctrl.panel.id });\n  }\n\n  registerPanel(panelScope) {\n    const self = this;\n    self.panelScopes.push(panelScope);\n\n    if (!self.dashboard.meta.soloMode) {\n      if (self.state.panelId === panelScope.ctrl.panel.id) {\n        if (self.state.edit) {\n          panelScope.ctrl.editPanel();\n        } else {\n          panelScope.ctrl.viewPanel();\n        }\n      }\n    }\n\n    const unbind = panelScope.$on('$destroy', function() {\n      self.panelScopes = _.without(self.panelScopes, panelScope);\n      unbind();\n    });\n  }\n}\n\n/** @ngInject */\nexport function dashboardViewStateSrv($location, $timeout, $rootScope) {\n  return {\n    create: function($scope) {\n      return new DashboardViewState($scope, $location, $timeout, $rootScope);\n    },\n  };\n}\n\nangular.module('grafana.services').factory('dashboardViewStateSrv', dashboardViewStateSrv);\n","import coreModule from 'app/core/core_module';\n\nconst hitTypes = {\n  FOLDER: 'dash-folder',\n  DASHBOARD: 'dash-db',\n};\n\nexport class ValidationSrv {\n  rootName = 'general';\n\n  /** @ngInject */\n  constructor(private $q, private backendSrv) {}\n\n  validateNewDashboardName(folderId, name) {\n    return this.validate(folderId, name, '此文件夹中已存在同名的仪表盘');\n  }\n\n  validateNewFolderName(name) {\n    return this.validate(0, name, '默认文件夹中已存在同名的仪表盘或文件夹');\n  }\n\n  private validate(folderId, name, existingErrorMessage) {\n    name = (name || '').trim();\n    const nameLowerCased = name.toLowerCase();\n\n    if (name.length === 0) {\n      return this.$q.reject({\n        type: 'REQUIRED',\n        message: '名称是必需的',\n      });\n    }\n\n    if (folderId === 0 && nameLowerCased === this.rootName) {\n      return this.$q.reject({\n        type: 'EXISTING',\n        message: '这是保留名称，不能用于文件夹命名。',\n      });\n    }\n\n    const deferred = this.$q.defer();\n\n    const promises = [];\n    promises.push(this.backendSrv.search({ type: hitTypes.FOLDER, folderIds: [folderId], query: name }));\n    promises.push(this.backendSrv.search({ type: hitTypes.DASHBOARD, folderIds: [folderId], query: name }));\n\n    this.$q.all(promises).then(res => {\n      let hits = [];\n\n      if (res.length > 0 && res[0].length > 0) {\n        hits = res[0];\n      }\n\n      if (res.length > 1 && res[1].length > 0) {\n        hits = hits.concat(res[1]);\n      }\n\n      for (const hit of hits) {\n        if (nameLowerCased === hit.title.toLowerCase()) {\n          deferred.reject({\n            type: 'EXISTING',\n            message: existingErrorMessage,\n          });\n          break;\n        }\n      }\n\n      deferred.resolve();\n    });\n\n    return deferred.promise;\n  }\n}\n\ncoreModule.service('validationSrv', ValidationSrv);\n","import moment from 'moment';\nimport _ from 'lodash';\nimport coreModule from 'app/core/core_module';\nimport kbn from 'app/core/utils/kbn';\nimport * as dateMath from 'app/core/utils/datemath';\n\nexport class TimeSrv {\n  time: any;\n  refreshTimer: any;\n  refresh: boolean;\n  oldRefresh: boolean;\n  dashboard: any;\n  timeAtLoad: any;\n  private autoRefreshBlocked: boolean;\n\n  /** @ngInject */\n  constructor(private $rootScope, private $timeout, private $location, private timer, private contextSrv) {\n    // default time\n    this.time = { from: '6h', to: 'now' };\n\n    $rootScope.$on('zoom-out', this.zoomOut.bind(this));\n    $rootScope.$on('$routeUpdate', this.routeUpdated.bind(this));\n\n    document.addEventListener('visibilitychange', () => {\n      if (this.autoRefreshBlocked && document.visibilityState === 'visible') {\n        this.autoRefreshBlocked = false;\n\n        this.refreshDashboard();\n      }\n    });\n  }\n\n  init(dashboard) {\n    this.timer.cancelAll();\n\n    this.dashboard = dashboard;\n    this.time = dashboard.time;\n    this.refresh = dashboard.refresh;\n\n    this.initTimeFromUrl();\n    this.parseTime();\n\n    // remember time at load so we can go back to it\n    this.timeAtLoad = _.cloneDeep(this.time);\n\n    if (this.refresh) {\n      this.setAutoRefresh(this.refresh);\n    }\n  }\n\n  private parseTime() {\n    // when absolute time is saved in json it is turned to a string\n    if (_.isString(this.time.from) && this.time.from.indexOf('Z') >= 0) {\n      this.time.from = moment(this.time.from).utc();\n    }\n    if (_.isString(this.time.to) && this.time.to.indexOf('Z') >= 0) {\n      this.time.to = moment(this.time.to).utc();\n    }\n  }\n\n  private parseUrlParam(value) {\n    if (value.indexOf('now') !== -1) {\n      return value;\n    }\n    if (value.length === 8) {\n      return moment.utc(value, 'YYYYMMDD');\n    }\n    if (value.length === 15) {\n      return moment.utc(value, 'YYYYMMDDTHHmmss');\n    }\n\n    if (!isNaN(value)) {\n      const epoch = parseInt(value);\n      return moment.utc(epoch);\n    }\n\n    return null;\n  }\n\n  private initTimeFromUrl() {\n    const params = this.$location.search();\n    if (params.from) {\n      this.time.from = this.parseUrlParam(params.from) || this.time.from;\n    }\n    if (params.to) {\n      this.time.to = this.parseUrlParam(params.to) || this.time.to;\n    }\n    if (params.refresh) {\n      this.refresh = params.refresh || this.refresh;\n    }\n  }\n\n  private routeUpdated() {\n    const params = this.$location.search();\n    const urlRange = this.timeRangeForUrl();\n    // check if url has time range\n    if (params.from && params.to) {\n      // is it different from what our current time range?\n      if (params.from !== urlRange.from || params.to !== urlRange.to) {\n        // issue update\n        this.initTimeFromUrl();\n        this.setTime(this.time, true);\n      }\n    } else if (this.timeHasChangedSinceLoad()) {\n      this.setTime(this.timeAtLoad, true);\n    }\n  }\n\n  private timeHasChangedSinceLoad() {\n    return this.timeAtLoad.from !== this.time.from || this.timeAtLoad.to !== this.time.to;\n  }\n\n  setAutoRefresh(interval) {\n    this.dashboard.refresh = interval;\n    this.cancelNextRefresh();\n    if (interval) {\n      const intervalMs = kbn.interval_to_ms(interval);\n\n      this.refreshTimer = this.timer.register(\n        this.$timeout(() => {\n          this.startNextRefreshTimer(intervalMs);\n          this.refreshDashboard();\n        }, intervalMs)\n      );\n    }\n\n    // update url\n    const params = this.$location.search();\n    if (interval) {\n      params.refresh = interval;\n      this.$location.search(params);\n    } else if (params.refresh) {\n      delete params.refresh;\n      this.$location.search(params);\n    }\n  }\n\n  refreshDashboard() {\n    this.$rootScope.$broadcast('refresh');\n  }\n\n  private startNextRefreshTimer(afterMs) {\n    this.cancelNextRefresh();\n    this.refreshTimer = this.timer.register(\n      this.$timeout(() => {\n        this.startNextRefreshTimer(afterMs);\n        if (this.contextSrv.isGrafanaVisible()) {\n          this.refreshDashboard();\n        } else {\n          this.autoRefreshBlocked = true;\n        }\n      }, afterMs)\n    );\n  }\n\n  private cancelNextRefresh() {\n    this.timer.cancel(this.refreshTimer);\n  }\n\n  setTime(time, fromRouteUpdate?) {\n    _.extend(this.time, time);\n\n    // disable refresh if zoom in or zoom out\n    if (moment.isMoment(time.to)) {\n      this.oldRefresh = this.dashboard.refresh || this.oldRefresh;\n      this.setAutoRefresh(false);\n    } else if (this.oldRefresh && this.oldRefresh !== this.dashboard.refresh) {\n      this.setAutoRefresh(this.oldRefresh);\n      this.oldRefresh = null;\n    }\n\n    // update url\n    if (fromRouteUpdate !== true) {\n      const urlRange = this.timeRangeForUrl();\n      const urlParams = this.$location.search();\n      urlParams.from = urlRange.from;\n      urlParams.to = urlRange.to;\n      this.$location.search(urlParams);\n    }\n\n    this.$rootScope.appEvent('time-range-changed', this.time);\n    this.$timeout(this.refreshDashboard.bind(this), 0);\n  }\n\n  timeRangeForUrl() {\n    const range = this.timeRange().raw;\n\n    if (moment.isMoment(range.from)) {\n      range.from = range.from.valueOf().toString();\n    }\n    if (moment.isMoment(range.to)) {\n      range.to = range.to.valueOf().toString();\n    }\n\n    return range;\n  }\n\n  timeRange() {\n    // make copies if they are moment  (do not want to return out internal moment, because they are mutable!)\n    const raw = {\n      from: moment.isMoment(this.time.from) ? moment(this.time.from) : this.time.from,\n      to: moment.isMoment(this.time.to) ? moment(this.time.to) : this.time.to,\n    };\n\n    const timezone = this.dashboard && this.dashboard.getTimezone();\n\n    return {\n      from: dateMath.parse(raw.from, false, timezone),\n      to: dateMath.parse(raw.to, true, timezone),\n      raw: raw,\n    };\n  }\n\n  zoomOut(e, factor) {\n    const range = this.timeRange();\n\n    const timespan = range.to.valueOf() - range.from.valueOf();\n    const center = range.to.valueOf() - timespan / 2;\n\n    let to = center + timespan * factor / 2;\n    let from = center - timespan * factor / 2;\n\n    if (to > Date.now() && range.to <= Date.now()) {\n      const offset = to - Date.now();\n      from = from - offset;\n      to = Date.now();\n    }\n\n    this.setTime({ from: moment.utc(from), to: moment.utc(to) });\n  }\n}\n\ncoreModule.service('timeSrv', TimeSrv);\n","import angular from 'angular';\nimport _ from 'lodash';\nimport { DashboardModel } from './dashboard_model';\n\nexport class ChangeTracker {\n  current: any;\n  originalPath: any;\n  scope: any;\n  original: any;\n  next: any;\n  $window: any;\n\n  /** @ngInject */\n  constructor(\n    dashboard,\n    scope,\n    originalCopyDelay,\n    private $location,\n    $window,\n    private $timeout,\n    private contextSrv,\n    private $rootScope\n  ) {\n    this.$location = $location;\n    this.$window = $window;\n\n    this.current = dashboard;\n    this.originalPath = $location.path();\n    this.scope = scope;\n\n    // register events\n    scope.onAppEvent('dashboard-saved', () => {\n      this.original = this.current.getSaveModelClone();\n      this.originalPath = $location.path();\n    });\n\n    $window.onbeforeunload = () => {\n      if (this.ignoreChanges()) {\n        return undefined;\n      }\n      if (this.hasChanges()) {\n        return '此仪表盘有未保存的更改';\n      }\n      return undefined;\n    };\n\n    scope.$on('$locationChangeStart', (event, next) => {\n      // check if we should look for changes\n      if (this.originalPath === $location.path()) {\n        return true;\n      }\n      if (this.ignoreChanges()) {\n        return true;\n      }\n\n      if (this.hasChanges()) {\n        event.preventDefault();\n        this.next = next;\n\n        this.$timeout(() => {\n          this.open_modal();\n        });\n      }\n      return false;\n    });\n\n    if (originalCopyDelay) {\n      this.$timeout(() => {\n        // wait for different services to patch the dashboard (missing properties)\n        this.original = dashboard.getSaveModelClone();\n      }, originalCopyDelay);\n    } else {\n      this.original = dashboard.getSaveModelClone();\n    }\n  }\n\n  // for some dashboards and users\n  // changes should be ignored\n  ignoreChanges() {\n    if (!this.original) {\n      return true;\n    }\n    if (!this.contextSrv.isEditor) {\n      return true;\n    }\n    if (!this.current || !this.current.meta) {\n      return true;\n    }\n\n    const meta = this.current.meta;\n    return !meta.canSave || meta.fromScript || meta.fromFile;\n  }\n\n  // remove stuff that should not count in diff\n  cleanDashboardFromIgnoredChanges(dashData) {\n    // need to new up the domain model class to get access to expand / collapse row logic\n    const model = new DashboardModel(dashData);\n\n    // Expand all rows before making comparison. This is required because row expand / collapse\n    // change order of panel array and panel positions.\n    model.expandRows();\n\n    const dash = model.getSaveModelClone();\n\n    // ignore time and refresh\n    dash.time = 0;\n    dash.refresh = 0;\n    dash.schemaVersion = 0;\n\n    // ignore iteration property\n    delete dash.iteration;\n\n    dash.panels = _.filter(dash.panels, panel => {\n      if (panel.repeatPanelId) {\n        return false;\n      }\n\n      // remove scopedVars\n      panel.scopedVars = null;\n\n      // ignore panel legend sort\n      if (panel.legend) {\n        delete panel.legend.sort;\n        delete panel.legend.sortDesc;\n      }\n\n      return true;\n    });\n\n    // ignore template variable values\n    _.each(dash.templating.list, function(value) {\n      value.current = null;\n      value.options = null;\n      value.filters = null;\n    });\n\n    return dash;\n  }\n\n  hasChanges() {\n    const current = this.cleanDashboardFromIgnoredChanges(this.current.getSaveModelClone());\n    const original = this.cleanDashboardFromIgnoredChanges(this.original);\n\n    const currentTimepicker = _.find(current.nav, { type: 'timepicker' });\n    const originalTimepicker = _.find(original.nav, { type: 'timepicker' });\n\n    if (currentTimepicker && originalTimepicker) {\n      currentTimepicker.now = originalTimepicker.now;\n    }\n\n    const currentJson = angular.toJson(current, true);\n    const originalJson = angular.toJson(original, true);\n\n    return currentJson !== originalJson;\n  }\n\n  discardChanges() {\n    this.original = null;\n    this.gotoNext();\n  }\n\n  open_modal() {\n    this.$rootScope.appEvent('show-modal', {\n      templateHtml: '<unsaved-changes-modal dismiss=\"dismiss()\"></unsaved-changes-modal>',\n      modalClass: 'modal--narrow confirm-modal',\n    });\n  }\n\n  saveChanges() {\n    const self = this;\n    const cancel = this.$rootScope.$on('dashboard-saved', () => {\n      cancel();\n      this.$timeout(() => {\n        self.gotoNext();\n      });\n    });\n\n    this.$rootScope.appEvent('save-dashboard');\n  }\n\n  gotoNext() {\n    const baseLen = this.$location.absUrl().length - this.$location.url().length;\n    const nextUrl = this.next.substring(baseLen);\n    this.$location.url(nextUrl);\n  }\n}\n","import angular from 'angular';\nimport { ChangeTracker } from './change_tracker';\n\n/** @ngInject */\nexport function unsavedChangesSrv(this: any, $rootScope, $q, $location, $timeout, contextSrv, dashboardSrv, $window) {\n  this.init = function(dashboard, scope) {\n    this.tracker = new ChangeTracker(dashboard, scope, 1000, $location, $window, $timeout, contextSrv, $rootScope);\n    return this.tracker;\n  };\n}\n\nangular.module('grafana.services').service('unsavedChangesSrv', unsavedChangesSrv);\n","import coreModule from 'app/core/core_module';\n\nconst template = `\n<div class=\"modal-body\">\n  <div class=\"modal-header\">\n    <h2 class=\"modal-header-title\">\n      <i class=\"fa fa-exclamation\"></i>\n      <span class=\"p-l-1\">未保存的更改</span>\n    </h2>\n\n    <a class=\"modal-header-close\" ng-click=\"ctrl.dismiss();\">\n      <i class=\"fa fa-remove\"></i>\n    </a>\n  </div>\n\n  <div class=\"modal-content text-center\">\n\n    <div class=\"confirm-modal-text\">\n      要保存更改吗?\n    </div>\n\n    <div class=\"confirm-modal-buttons\">\n      <button type=\"button\" class=\"btn btn-success\" ng-click=\"ctrl.save()\">保存</button>\n      <button type=\"button\" class=\"btn btn-danger\" ng-click=\"ctrl.discard()\">放弃</button>\n      <button type=\"button\" class=\"btn btn-inverse\" ng-click=\"ctrl.dismiss()\">取消</button>\n    </div>\n  </div>\n</div>\n`;\n\nexport class UnsavedChangesModalCtrl {\n  clone: any;\n  dismiss: () => void;\n\n  /** @ngInject */\n  constructor(private unsavedChangesSrv) {}\n\n  discard() {\n    this.dismiss();\n    this.unsavedChangesSrv.tracker.discardChanges();\n  }\n\n  save() {\n    this.dismiss();\n    this.unsavedChangesSrv.tracker.saveChanges();\n  }\n}\n\nexport function unsavedChangesModalDirective() {\n  return {\n    restrict: 'E',\n    template: template,\n    controller: UnsavedChangesModalCtrl,\n    bindToController: true,\n    controllerAs: 'ctrl',\n    scope: { dismiss: '&' },\n  };\n}\n\ncoreModule.directive('unsavedChangesModal', unsavedChangesModalDirective);\n","import moment from 'moment';\nimport * as dateMath from 'app/core/utils/datemath';\n\nexport function inputDateDirective() {\n  return {\n    restrict: 'A',\n    require: 'ngModel',\n    link: function($scope, $elem, attrs, ngModel) {\n      const format = 'YYYY-MM-DD HH:mm:ss';\n\n      const fromUser = function(text) {\n        if (text.indexOf('now') !== -1) {\n          if (!dateMath.isValid(text)) {\n            ngModel.$setValidity('error', false);\n            return undefined;\n          }\n          ngModel.$setValidity('error', true);\n          return text;\n        }\n\n        let parsed;\n        if ($scope.ctrl.isUtc) {\n          parsed = moment.utc(text, format);\n        } else {\n          parsed = moment(text, format);\n        }\n\n        if (!parsed.isValid()) {\n          ngModel.$setValidity('error', false);\n          return undefined;\n        }\n\n        ngModel.$setValidity('error', true);\n        return parsed;\n      };\n\n      const toUser = function(currentValue) {\n        if (moment.isMoment(currentValue)) {\n          return currentValue.format(format);\n        } else {\n          return currentValue;\n        }\n      };\n\n      ngModel.$parsers.push(fromUser);\n      ngModel.$formatters.push(toUser);\n    },\n  };\n}\n","import _ from 'lodash';\nimport angular from 'angular';\nimport moment from 'moment';\n\nimport * as rangeUtil from 'app/core/utils/rangeutil';\n\nexport class TimePickerCtrl {\n  static tooltipFormat = 'MMM D, YYYY HH:mm:ss';\n  static defaults = {\n    time_options: ['5m', '15m', '1h', '6h', '12h', '24h', '2d', '7d', '30d'],\n    refresh_intervals: ['5s', '10s', '30s', '1m', '5m', '15m', '30m', '1h', '2h', '1d'],\n  };\n\n  dashboard: any;\n  panel: any;\n  absolute: any;\n  timeRaw: any;\n  editTimeRaw: any;\n  tooltip: string;\n  rangeString: string;\n  timeOptions: any;\n  refresh: any;\n  isUtc: boolean;\n  firstDayOfWeek: number;\n  isOpen: boolean;\n  isAbsolute: boolean;\n\n  /** @ngInject */\n  constructor(private $scope, private $rootScope, private timeSrv) {\n    this.$scope.ctrl = this;\n\n    $rootScope.onAppEvent('shift-time-forward', () => this.move(1), $scope);\n    $rootScope.onAppEvent('shift-time-backward', () => this.move(-1), $scope);\n    $rootScope.onAppEvent('refresh', this.onRefresh.bind(this), $scope);\n    $rootScope.onAppEvent('closeTimepicker', this.openDropdown.bind(this), $scope);\n\n    // init options\n    this.panel = this.dashboard.timepicker;\n    _.defaults(this.panel, TimePickerCtrl.defaults);\n    this.firstDayOfWeek = moment.localeData().firstDayOfWeek();\n\n    // init time stuff\n    this.onRefresh();\n  }\n\n  onRefresh() {\n    const time = angular.copy(this.timeSrv.timeRange());\n    const timeRaw = angular.copy(time.raw);\n\n    if (!this.dashboard.isTimezoneUtc()) {\n      time.from.local();\n      time.to.local();\n      if (moment.isMoment(timeRaw.from)) {\n        timeRaw.from.local();\n      }\n      if (moment.isMoment(timeRaw.to)) {\n        timeRaw.to.local();\n      }\n      this.isUtc = false;\n    } else {\n      this.isUtc = true;\n    }\n\n    this.rangeString = rangeUtil.describeTimeRange(timeRaw);\n    this.absolute = { fromJs: time.from.toDate(), toJs: time.to.toDate() };\n    this.tooltip = this.dashboard.formatDate(time.from) + ' <br>to<br>';\n    this.tooltip += this.dashboard.formatDate(time.to);\n    this.timeRaw = timeRaw;\n    this.isAbsolute = moment.isMoment(this.timeRaw.to);\n  }\n\n  zoom(factor) {\n    this.$rootScope.appEvent('zoom-out', 2);\n  }\n\n  move(direction) {\n    const range = this.timeSrv.timeRange();\n\n    const timespan = (range.to.valueOf() - range.from.valueOf()) / 2;\n    let to, from;\n    if (direction === -1) {\n      to = range.to.valueOf() - timespan;\n      from = range.from.valueOf() - timespan;\n    } else if (direction === 1) {\n      to = range.to.valueOf() + timespan;\n      from = range.from.valueOf() + timespan;\n      if (to > Date.now() && range.to < Date.now()) {\n        to = Date.now();\n        from = range.from.valueOf();\n      }\n    } else {\n      to = range.to.valueOf();\n      from = range.from.valueOf();\n    }\n\n    this.timeSrv.setTime({ from: moment.utc(from), to: moment.utc(to) });\n  }\n\n  openDropdown() {\n    if (this.isOpen) {\n      this.closeDropdown();\n      return;\n    }\n\n    this.onRefresh();\n    this.editTimeRaw = this.timeRaw;\n    this.timeOptions = rangeUtil.getRelativeTimesList(this.panel, this.rangeString);\n    this.refresh = {\n      value: this.dashboard.refresh,\n      options: _.map(this.panel.refresh_intervals, (interval: any) => {\n        return { text: interval, value: interval };\n      }),\n    };\n\n    this.refresh.options.unshift({ text: 'off' });\n    this.isOpen = true;\n    this.$rootScope.appEvent('timepickerOpen');\n  }\n\n  closeDropdown() {\n    this.isOpen = false;\n    this.$rootScope.appEvent('timepickerClosed');\n  }\n\n  applyCustom() {\n    if (this.refresh.value !== this.dashboard.refresh) {\n      this.timeSrv.setAutoRefresh(this.refresh.value);\n    }\n\n    this.timeSrv.setTime(this.editTimeRaw);\n    this.closeDropdown();\n  }\n\n  absoluteFromChanged() {\n    this.editTimeRaw.from = this.getAbsoluteMomentForTimezone(this.absolute.fromJs);\n  }\n\n  absoluteToChanged() {\n    this.editTimeRaw.to = this.getAbsoluteMomentForTimezone(this.absolute.toJs);\n  }\n\n  getAbsoluteMomentForTimezone(jsDate) {\n    return this.dashboard.isTimezoneUtc() ? moment(jsDate).utc() : moment(jsDate);\n  }\n\n  setRelativeFilter(timespan) {\n    const range = { from: timespan.from, to: timespan.to };\n\n    if (this.panel.nowDelay && range.to === 'now') {\n      range.to = 'now-' + this.panel.nowDelay;\n    }\n\n    this.timeSrv.setTime(range);\n    this.closeDropdown();\n  }\n}\n\nexport function settingsDirective() {\n  return {\n    restrict: 'E',\n    templateUrl: 'public/app/features/dashboard/timepicker/settings.html',\n    controller: TimePickerCtrl,\n    bindToController: true,\n    controllerAs: 'ctrl',\n    scope: {\n      dashboard: '=',\n    },\n  };\n}\n\nexport function timePickerDirective() {\n  return {\n    restrict: 'E',\n    templateUrl: 'public/app/features/dashboard/timepicker/timepicker.html',\n    controller: TimePickerCtrl,\n    bindToController: true,\n    controllerAs: 'ctrl',\n    scope: {\n      dashboard: '=',\n    },\n  };\n}\n\nangular.module('grafana.directives').directive('gfTimePickerSettings', settingsDirective);\nangular.module('grafana.directives').directive('gfTimePicker', timePickerDirective);\n\nimport { inputDateDirective } from './input_date';\nangular.module('grafana.directives').directive('inputDatetime', inputDateDirective);\n","import coreModule from 'app/core/core_module';\n\nconst template = `\n<input type=\"file\" id=\"dashupload\" name=\"dashupload\" class=\"hide\"/>\n<label class=\"btn btn-success\" for=\"dashupload\">\n  <i class=\"fa fa-upload\"></i>\n  上传 .json 文件\n</label>\n`;\n\n/** @ngInject */\nfunction uploadDashboardDirective(timer, alertSrv, $location) {\n  return {\n    restrict: 'E',\n    template: template,\n    scope: {\n      onUpload: '&',\n    },\n    link: function(scope) {\n      function file_selected(evt) {\n        const files = evt.target.files; // FileList object\n        const readerOnload = function() {\n          return function(e) {\n            let dash;\n            try {\n              dash = JSON.parse(e.target.result);\n            } catch (err) {\n              console.log(err);\n              scope.appEvent('alert-error', ['导入失败', 'JSON -> JS序列化失败: ' + err.message]);\n              return;\n            }\n\n            scope.$apply(function() {\n              scope.onUpload({ dash: dash });\n            });\n          };\n        };\n\n        for (let i = 0, f; (f = files[i]); i++) {\n          const reader = new FileReader();\n          reader.onload = readerOnload();\n          reader.readAsText(f);\n        }\n      }\n\n      const wnd: any = window;\n      // Check for the various File API support.\n      if (wnd.File && wnd.FileReader && wnd.FileList && wnd.Blob) {\n        // Something\n        document.getElementById('dashupload').addEventListener('change', file_selected, false);\n      } else {\n        alertSrv.set('Oops', '抱歉，此浏览器不完全支持HTML5文件API', 'error');\n      }\n    },\n  };\n}\n\ncoreModule.directive('dashUpload', uploadDashboardDirective);\n","import config from 'app/core/config';\nimport _ from 'lodash';\nimport { DashboardModel } from '../dashboard_model';\n\nexport class DashboardExporter {\n  constructor(private datasourceSrv) {}\n\n  makeExportable(dashboard: DashboardModel) {\n    // clean up repeated rows and panels,\n    // this is done on the live real dashboard instance, not on a clone\n    // so we need to undo this\n    // this is pretty hacky and needs to be changed\n    dashboard.cleanUpRepeats();\n\n    const saveModel = dashboard.getSaveModelClone();\n    saveModel.id = null;\n\n    // undo repeat cleanup\n    dashboard.processRepeats();\n\n    const inputs = [];\n    const requires = {};\n    const datasources = {};\n    const promises = [];\n    const variableLookup: any = {};\n\n    for (const variable of saveModel.templating.list) {\n      variableLookup[variable.name] = variable;\n    }\n\n    const templateizeDatasourceUsage = obj => {\n      // ignore data source properties that contain a variable\n      if (obj.datasource && obj.datasource.indexOf('$') === 0) {\n        if (variableLookup[obj.datasource.substring(1)]) {\n          return;\n        }\n      }\n\n      promises.push(\n        this.datasourceSrv.get(obj.datasource).then(ds => {\n          if (ds.meta.builtIn) {\n            return;\n          }\n\n          const refName = 'DS_' + ds.name.replace(' ', '_').toUpperCase();\n          datasources[refName] = {\n            name: refName,\n            label: ds.name,\n            description: '',\n            type: 'datasource',\n            pluginId: ds.meta.id,\n            pluginName: ds.meta.name,\n          };\n          obj.datasource = '${' + refName + '}';\n\n          requires['datasource' + ds.meta.id] = {\n            type: 'datasource',\n            id: ds.meta.id,\n            name: ds.meta.name,\n            version: ds.meta.info.version || '1.0.0',\n          };\n        })\n      );\n    };\n\n    const processPanel = panel => {\n      if (panel.datasource !== undefined) {\n        templateizeDatasourceUsage(panel);\n      }\n\n      if (panel.targets) {\n        for (const target of panel.targets) {\n          if (target.datasource !== undefined) {\n            templateizeDatasourceUsage(target);\n          }\n        }\n      }\n\n      const panelDef = config.panels[panel.type];\n      if (panelDef) {\n        requires['panel' + panelDef.id] = {\n          type: 'panel',\n          id: panelDef.id,\n          name: panelDef.name,\n          version: panelDef.info.version,\n        };\n      }\n    };\n\n    // check up panel data sources\n    for (const panel of saveModel.panels) {\n      processPanel(panel);\n\n      // handle collapsed rows\n      if (panel.collapsed !== undefined && panel.collapsed === true && panel.panels) {\n        for (const rowPanel of panel.panels) {\n          processPanel(rowPanel);\n        }\n      }\n    }\n\n    // templatize template vars\n    for (const variable of saveModel.templating.list) {\n      if (variable.type === 'query') {\n        templateizeDatasourceUsage(variable);\n        variable.options = [];\n        variable.current = {};\n        variable.refresh = variable.refresh > 0 ? variable.refresh : 1;\n      }\n    }\n\n    // templatize annotations vars\n    for (const annotationDef of saveModel.annotations.list) {\n      templateizeDatasourceUsage(annotationDef);\n    }\n\n    // add grafana version\n    requires['grafana'] = {\n      type: 'grafana',\n      id: 'grafana',\n      name: 'Grafana',\n      version: config.buildInfo.version,\n    };\n\n    return Promise.all(promises)\n      .then(() => {\n        _.each(datasources, (value, key) => {\n          inputs.push(value);\n        });\n\n        // templatize constants\n        for (const variable of saveModel.templating.list) {\n          if (variable.type === 'constant') {\n            const refName = 'VAR_' + variable.name.replace(' ', '_').toUpperCase();\n            inputs.push({\n              name: refName,\n              type: 'constant',\n              label: variable.label || variable.name,\n              value: variable.current.value,\n              description: '',\n            });\n            // update current and option\n            variable.query = '${' + refName + '}';\n            variable.options[0] = variable.current = {\n              value: variable.query,\n              text: variable.query,\n            };\n          }\n        }\n\n        // make inputs and requires a top thing\n        const newObj = {};\n        newObj['__inputs'] = inputs;\n        newObj['__requires'] = _.sortBy(requires, ['id']);\n\n        _.defaults(newObj, saveModel);\n        return newObj;\n      })\n      .catch(err => {\n        console.log('Export failed:', err);\n        return {\n          error: err,\n        };\n      });\n  }\n}\n","import angular from 'angular';\nimport { saveAs } from 'file-saver';\n\nimport coreModule from 'app/core/core_module';\nimport { DashboardExporter } from './exporter';\n\nexport class DashExportCtrl {\n  dash: any;\n  exporter: DashboardExporter;\n  dismiss: () => void;\n\n  /** @ngInject */\n  constructor(private dashboardSrv, datasourceSrv, private $scope, private $rootScope) {\n    this.exporter = new DashboardExporter(datasourceSrv);\n\n    this.exporter.makeExportable(this.dashboardSrv.getCurrent()).then(dash => {\n      this.$scope.$apply(() => {\n        this.dash = dash;\n      });\n    });\n  }\n\n  save() {\n    const blob = new Blob([angular.toJson(this.dash, true)], {\n      type: 'application/json;charset=utf-8',\n    });\n    saveAs(blob, this.dash.title + '-' + new Date().getTime() + '.json');\n  }\n\n  saveJson() {\n    const clone = this.dash;\n    const editScope = this.$rootScope.$new();\n    editScope.object = clone;\n    editScope.enableCopy = true;\n\n    this.$rootScope.appEvent('show-modal', {\n      src: 'public/app/partials/edit_json.html',\n      scope: editScope,\n    });\n\n    this.dismiss();\n  }\n}\n\nexport function dashExportDirective() {\n  return {\n    restrict: 'E',\n    templateUrl: 'public/app/features/dashboard/export/export_modal.html',\n    controller: DashExportCtrl,\n    bindToController: true,\n    controllerAs: 'ctrl',\n    scope: { dismiss: '&' },\n  };\n}\n\ncoreModule.directive('dashExportModal', dashExportDirective);\n","import angular from 'angular';\nimport * as fileExport from 'app/core/utils/file_export';\nimport appEvents from 'app/core/app_events';\n\nexport class ExportDataModalCtrl {\n  private data: any[];\n  private panel: string;\n  asRows = true;\n  dateTimeFormat = 'YYYY-MM-DDTHH:mm:ssZ';\n  excel = false;\n\n  export() {\n    if (this.panel === 'table') {\n      fileExport.exportTableDataToCsv(this.data, this.excel);\n    } else {\n      if (this.asRows) {\n        fileExport.exportSeriesListToCsv(this.data, this.dateTimeFormat, this.excel);\n      } else {\n        fileExport.exportSeriesListToCsvColumns(this.data, this.dateTimeFormat, this.excel);\n      }\n    }\n\n    this.dismiss();\n  }\n\n  dismiss() {\n    appEvents.emit('hide-modal');\n  }\n}\n\nexport function exportDataModal() {\n  return {\n    restrict: 'E',\n    templateUrl: 'public/app/features/dashboard/export_data/export_data_modal.html',\n    controller: ExportDataModalCtrl,\n    controllerAs: 'ctrl',\n    scope: {\n      panel: '<',\n      data: '<', // The difference to '=' is that the bound properties are not watched\n    },\n    bindToController: true,\n  };\n}\n\nangular.module('grafana.directives').directive('exportDataModal', exportDataModal);\n","import _ from 'lodash';\nimport angular from 'angular';\nimport coreModule from 'app/core/core_module';\n\nexport class AdHocFiltersCtrl {\n  segments: any;\n  variable: any;\n  removeTagFilterSegment: any;\n\n  /** @ngInject */\n  constructor(\n    private uiSegmentSrv,\n    private datasourceSrv,\n    private $q,\n    private variableSrv,\n    $scope,\n    private $rootScope\n  ) {\n    this.removeTagFilterSegment = uiSegmentSrv.newSegment({\n      fake: true,\n      value: '-- remove filter --',\n    });\n    this.buildSegmentModel();\n    this.$rootScope.onAppEvent('template-variable-value-updated', this.buildSegmentModel.bind(this), $scope);\n  }\n\n  buildSegmentModel() {\n    this.segments = [];\n\n    if (this.variable.value && !_.isArray(this.variable.value)) {\n    }\n\n    for (const tag of this.variable.filters) {\n      if (this.segments.length > 0) {\n        this.segments.push(this.uiSegmentSrv.newCondition('AND'));\n      }\n\n      if (tag.key !== undefined && tag.value !== undefined) {\n        this.segments.push(this.uiSegmentSrv.newKey(tag.key));\n        this.segments.push(this.uiSegmentSrv.newOperator(tag.operator));\n        this.segments.push(this.uiSegmentSrv.newKeyValue(tag.value));\n      }\n    }\n\n    this.segments.push(this.uiSegmentSrv.newPlusButton());\n  }\n\n  getOptions(segment, index) {\n    if (segment.type === 'operator') {\n      return this.$q.when(this.uiSegmentSrv.newOperators(['=', '!=', '<', '>', '=~', '!~']));\n    }\n\n    if (segment.type === 'condition') {\n      return this.$q.when([this.uiSegmentSrv.newSegment('AND')]);\n    }\n\n    return this.datasourceSrv.get(this.variable.datasource).then(ds => {\n      const options: any = {};\n      let promise = null;\n\n      if (segment.type !== 'value') {\n        promise = ds.getTagKeys();\n      } else {\n        options.key = this.segments[index - 2].value;\n        promise = ds.getTagValues(options);\n      }\n\n      return promise.then(results => {\n        results = _.map(results, segment => {\n          return this.uiSegmentSrv.newSegment({ value: segment.text });\n        });\n\n        // add remove option for keys\n        if (segment.type === 'key') {\n          results.splice(0, 0, angular.copy(this.removeTagFilterSegment));\n        }\n        return results;\n      });\n    });\n  }\n\n  segmentChanged(segment, index) {\n    this.segments[index] = segment;\n\n    // handle remove tag condition\n    if (segment.value === this.removeTagFilterSegment.value) {\n      this.segments.splice(index, 3);\n      if (this.segments.length === 0) {\n        this.segments.push(this.uiSegmentSrv.newPlusButton());\n      } else if (this.segments.length > 2) {\n        this.segments.splice(Math.max(index - 1, 0), 1);\n        if (this.segments[this.segments.length - 1].type !== 'plus-button') {\n          this.segments.push(this.uiSegmentSrv.newPlusButton());\n        }\n      }\n    } else {\n      if (segment.type === 'plus-button') {\n        if (index > 2) {\n          this.segments.splice(index, 0, this.uiSegmentSrv.newCondition('AND'));\n        }\n        this.segments.push(this.uiSegmentSrv.newOperator('='));\n        this.segments.push(this.uiSegmentSrv.newFake('select tag value', 'value', 'query-segment-value'));\n        segment.type = 'key';\n        segment.cssClass = 'query-segment-key';\n      }\n\n      if (index + 1 === this.segments.length) {\n        this.segments.push(this.uiSegmentSrv.newPlusButton());\n      }\n    }\n\n    this.updateVariableModel();\n  }\n\n  updateVariableModel() {\n    const filters = [];\n    let filterIndex = -1;\n    let hasFakes = false;\n\n    this.segments.forEach(segment => {\n      if (segment.type === 'value' && segment.fake) {\n        hasFakes = true;\n        return;\n      }\n\n      switch (segment.type) {\n        case 'key': {\n          filters.push({ key: segment.value });\n          filterIndex += 1;\n          break;\n        }\n        case 'value': {\n          filters[filterIndex].value = segment.value;\n          break;\n        }\n        case 'operator': {\n          filters[filterIndex].operator = segment.value;\n          break;\n        }\n        case 'condition': {\n          filters[filterIndex].condition = segment.value;\n          break;\n        }\n      }\n    });\n\n    if (hasFakes) {\n      return;\n    }\n\n    this.variable.setFilters(filters);\n    this.variableSrv.variableUpdated(this.variable, true);\n  }\n}\n\nconst template = `\n<div class=\"gf-form-inline\">\n  <div class=\"gf-form\" ng-repeat=\"segment in ctrl.segments\">\n    <metric-segment segment=\"segment\" get-options=\"ctrl.getOptions(segment, $index)\"\n                    on-change=\"ctrl.segmentChanged(segment, $index)\"></metric-segment>\n  </div>\n</div>\n`;\n\nexport function adHocFiltersComponent() {\n  return {\n    restrict: 'E',\n    template: template,\n    controller: AdHocFiltersCtrl,\n    bindToController: true,\n    controllerAs: 'ctrl',\n    scope: {\n      variable: '=',\n    },\n  };\n}\n\ncoreModule.directive('adHocFilters', adHocFiltersComponent);\n","import { coreModule } from 'app/core/core';\n\nconst template = `\n<div class=\"gf-form-select-wrapper max-width-18\">\n  <select class=\"gf-form-input\" ng-model=\"panel.repeat\" ng-options=\"f.value as f.text for f in variables\" ng-change=\"optionChanged()\">\n  <option value=\"\"></option>\n</div>\n`;\n\n/** @ngInject */\nfunction dashRepeatOptionDirective(variableSrv) {\n  return {\n    restrict: 'E',\n    template: template,\n    scope: {\n      panel: '=',\n    },\n    link: function(scope, element) {\n      element.css({ display: 'block', width: '100%' });\n\n      scope.variables = variableSrv.variables.map(item => {\n        return { text: item.name, value: item.name };\n      });\n\n      if (scope.variables.length === 0) {\n        scope.variables.unshift({\n          text: '暂无模板变量',\n          value: null,\n        });\n      }\n\n      scope.variables.unshift({ text: 'Disabled', value: null });\n\n      // if repeat is set and no direction set to horizontal\n      if (scope.panel.repeat && !scope.panel.repeatDirection) {\n        scope.panel.repeatDirection = 'h';\n      }\n\n      scope.optionChanged = function() {\n        if (scope.panel.repeat) {\n          scope.panel.repeatDirection = 'h';\n        }\n      };\n    },\n  };\n}\n\ncoreModule.directive('dashRepeatOption', dashRepeatOptionDirective);\n","import React from 'react';\nimport classNames from 'classnames';\nimport { PanelModel } from '../panel_model';\nimport { PanelContainer } from './PanelContainer';\nimport templateSrv from 'app/features/templating/template_srv';\nimport appEvents from 'app/core/app_events';\n\nexport interface DashboardRowProps {\n  panel: PanelModel;\n  getPanelContainer: () => PanelContainer;\n}\n\nexport class DashboardRow extends React.Component<DashboardRowProps, any> {\n  dashboard: any;\n  panelContainer: any;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      collapsed: this.props.panel.collapsed,\n    };\n\n    this.panelContainer = this.props.getPanelContainer();\n    this.dashboard = this.panelContainer.getDashboard();\n\n    this.toggle = this.toggle.bind(this);\n    this.openSettings = this.openSettings.bind(this);\n    this.delete = this.delete.bind(this);\n    this.update = this.update.bind(this);\n  }\n\n  toggle() {\n    this.dashboard.toggleRow(this.props.panel);\n\n    this.setState(prevState => {\n      return { collapsed: !prevState.collapsed };\n    });\n  }\n\n  update() {\n    this.dashboard.processRepeats();\n    this.forceUpdate();\n  }\n\n  openSettings() {\n    appEvents.emit('show-modal', {\n      templateHtml: `<row-options row=\"model.row\" on-updated=\"model.onUpdated()\" dismiss=\"dismiss()\"></row-options>`,\n      modalClass: 'modal--narrow',\n      model: {\n        row: this.props.panel,\n        onUpdated: this.update.bind(this),\n      },\n    });\n  }\n\n  delete() {\n    appEvents.emit('confirm-modal', {\n      title: '删除行',\n      text: '确定想要删除删除该行及下属所有面板?',\n      altActionText: '只删除行',\n      icon: 'fa-trash',\n      onConfirm: () => {\n        const panelContainer = this.props.getPanelContainer();\n        const dashboard = panelContainer.getDashboard();\n        dashboard.removeRow(this.props.panel, true);\n      },\n      onAltAction: () => {\n        const panelContainer = this.props.getPanelContainer();\n        const dashboard = panelContainer.getDashboard();\n        dashboard.removeRow(this.props.panel, false);\n      },\n    });\n  }\n\n  render() {\n    const classes = classNames({\n      'dashboard-row': true,\n      'dashboard-row--collapsed': this.state.collapsed,\n    });\n    const chevronClass = classNames({\n      fa: true,\n      'fa-chevron-down': !this.state.collapsed,\n      'fa-chevron-right': this.state.collapsed,\n    });\n\n    const title = templateSrv.replaceWithText(this.props.panel.title, this.props.panel.scopedVars);\n    const count = this.props.panel.panels ? this.props.panel.panels.length : 0;\n    const panels = count === 1 ? 'panel' : 'panels';\n\n    return (\n      <div className={classes}>\n        <a className=\"dashboard-row__title pointer\" onClick={this.toggle}>\n          <i className={chevronClass} />\n          {title}\n          <span className=\"dashboard-row__panel_count\">\n            ({count} {panels})\n          </span>\n        </a>\n        {this.dashboard.meta.canEdit === true && (\n          <div className=\"dashboard-row__actions\">\n            <a className=\"pointer\" onClick={this.openSettings}>\n              <i className=\"fa fa-cog\" />\n            </a>\n            <a className=\"pointer\" onClick={this.delete}>\n              <i className=\"fa fa-trash\" />\n            </a>\n          </div>\n        )}\n        {this.state.collapsed === true && (\n          <div className=\"dashboard-row__toggle-target\" onClick={this.toggle}>\n            &nbsp;\n          </div>\n        )}\n        <div className=\"dashboard-row__drag grid-drag-handle\" />\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport baron from 'baron';\n\nexport interface Props {\n  children: any;\n  className: string;\n}\n\nexport default class ScrollBar extends React.Component<Props, any> {\n  private container: any;\n  private scrollbar: baron;\n\n  constructor(props) {\n    super(props);\n  }\n\n  componentDidMount() {\n    this.scrollbar = baron({\n      root: this.container.parentElement,\n      scroller: this.container,\n      bar: '.baron__bar',\n      barOnCls: '_scrollbar',\n      scrollingCls: '_scrolling',\n      track: '.baron__track',\n    });\n  }\n\n  componentDidUpdate() {\n    this.scrollbar.update();\n  }\n\n  componentWillUnmount() {\n    this.scrollbar.dispose();\n  }\n\n  // methods can be invoked by outside\n  setScrollTop(top) {\n    if (this.container) {\n      this.container.scrollTop = top;\n      this.scrollbar.update();\n\n      return true;\n    }\n    return false;\n  }\n\n  setScrollLeft(left) {\n    if (this.container) {\n      this.container.scrollLeft = left;\n      this.scrollbar.update();\n\n      return true;\n    }\n    return false;\n  }\n\n  update() {\n    this.scrollbar.update();\n  }\n\n  handleRef = ref => {\n    this.container = ref;\n  };\n\n  render() {\n    return (\n      <div className=\"baron baron__root baron__clipper\">\n        <div className={this.props.className + ' baron__scroller'} ref={this.handleRef}>\n          {this.props.children}\n        </div>\n\n        <div className=\"baron__track\">\n          <div className=\"baron__bar\" />\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport _ from 'lodash';\nimport classNames from 'classnames';\nimport config from 'app/core/config';\nimport { PanelModel } from '../panel_model';\nimport { PanelContainer } from './PanelContainer';\nimport ScrollBar from 'app/core/components/ScrollBar/ScrollBar';\nimport store from 'app/core/store';\nimport { LS_PANEL_COPY_KEY } from 'app/core/constants';\nimport Highlighter from 'react-highlight-words';\n\nexport interface AddPanelPanelProps {\n  panel: PanelModel;\n  getPanelContainer: () => PanelContainer;\n}\n\nexport interface AddPanelPanelState {\n  filter: string;\n  panelPlugins: any[];\n  copiedPanelPlugins: any[];\n  tab: string;\n}\n\nexport class AddPanelPanel extends React.Component<AddPanelPanelProps, AddPanelPanelState> {\n  private scrollbar: ScrollBar;\n\n  constructor(props) {\n    super(props);\n    this.handleCloseAddPanel = this.handleCloseAddPanel.bind(this);\n    this.renderPanelItem = this.renderPanelItem.bind(this);\n    this.panelSizeChanged = this.panelSizeChanged.bind(this);\n\n    this.state = {\n      panelPlugins: this.getPanelPlugins(''),\n      copiedPanelPlugins: this.getCopiedPanelPlugins(''),\n      filter: '',\n      tab: 'Add',\n    };\n  }\n\n  componentDidMount() {\n    this.props.panel.events.on('panel-size-changed', this.panelSizeChanged);\n  }\n\n  componentWillUnmount() {\n    this.props.panel.events.off('panel-size-changed', this.panelSizeChanged);\n  }\n\n  panelSizeChanged() {\n    setTimeout(() => {\n      this.scrollbar.update();\n    });\n  }\n\n  getPanelPlugins(filter) {\n    let panels = _.chain(config.panels)\n      .filter({ hideFromList: false })\n      .map(item => item)\n      .value();\n\n    // add special row type\n    panels.push({ id: 'row', name: 'Row', sort: 8, info: { logos: { small: 'public/img/icn-row.svg' } } });\n\n    panels = this.filterPanels(panels, filter);\n\n    // add sort by sort property\n    return _.sortBy(panels, 'sort');\n  }\n\n  getCopiedPanelPlugins(filter) {\n    const panels = _.chain(config.panels)\n      .filter({ hideFromList: false })\n      .map(item => item)\n      .value();\n    let copiedPanels = [];\n\n    const copiedPanelJson = store.get(LS_PANEL_COPY_KEY);\n    if (copiedPanelJson) {\n      const copiedPanel = JSON.parse(copiedPanelJson);\n      const pluginInfo = _.find(panels, { id: copiedPanel.type });\n      if (pluginInfo) {\n        const pluginCopy = _.cloneDeep(pluginInfo);\n        pluginCopy.name = copiedPanel.title;\n        pluginCopy.sort = -1;\n        pluginCopy.defaults = copiedPanel;\n        copiedPanels.push(pluginCopy);\n      }\n    }\n\n    copiedPanels = this.filterPanels(copiedPanels, filter);\n\n    return _.sortBy(copiedPanels, 'sort');\n  }\n\n  onAddPanel = panelPluginInfo => {\n    const panelContainer = this.props.getPanelContainer();\n    const dashboard = panelContainer.getDashboard();\n    const { gridPos } = this.props.panel;\n\n    const newPanel: any = {\n      type: panelPluginInfo.id,\n      title: '面板标题',\n      gridPos: { x: gridPos.x, y: gridPos.y, w: gridPos.w, h: gridPos.h },\n    };\n\n    if (panelPluginInfo.id === 'row') {\n      newPanel.title = '行标题';\n      newPanel.gridPos = { x: 0, y: 0 };\n    }\n\n    // apply panel template / defaults\n    if (panelPluginInfo.defaults) {\n      _.defaults(newPanel, panelPluginInfo.defaults);\n      newPanel.gridPos.w = panelPluginInfo.defaults.gridPos.w;\n      newPanel.gridPos.h = panelPluginInfo.defaults.gridPos.h;\n      newPanel.title = panelPluginInfo.defaults.title;\n      store.delete(LS_PANEL_COPY_KEY);\n    }\n\n    dashboard.addPanel(newPanel);\n    dashboard.removePanel(this.props.panel);\n  };\n\n  handleCloseAddPanel(evt) {\n    evt.preventDefault();\n    const panelContainer = this.props.getPanelContainer();\n    const dashboard = panelContainer.getDashboard();\n    dashboard.removePanel(dashboard.panels[0]);\n  }\n\n  renderText(text: string) {\n    const searchWords = this.state.filter.split('');\n    return <Highlighter highlightClassName=\"highlight-search-match\" textToHighlight={text} searchWords={searchWords} />;\n  }\n\n  renderPanelItem(panel, index) {\n    return (\n      <div key={index} className=\"add-panel__item\" onClick={() => this.onAddPanel(panel)} title={panel.name}>\n        <img className=\"add-panel__item-img\" src={panel.info.logos.small} />\n        <div className=\"add-panel__item-name\">{this.renderText(panel.name)}</div>\n      </div>\n    );\n  }\n\n  noCopiedPanelPlugins() {\n    return <div className=\"add-panel__no-panels\">暂无面板副本。</div>;\n  }\n\n  filterChange(evt) {\n    this.setState({\n      filter: evt.target.value,\n      panelPlugins: this.getPanelPlugins(evt.target.value),\n      copiedPanelPlugins: this.getCopiedPanelPlugins(evt.target.value),\n    });\n  }\n\n  filterKeyPress(evt) {\n    if (evt.key === 'Enter') {\n      const panel = _.head(this.state.panelPlugins);\n      if (panel) {\n        this.onAddPanel(panel);\n      }\n    }\n  }\n\n  filterPanels(panels, filter) {\n    const regex = new RegExp(filter, 'i');\n    return panels.filter(panel => {\n      return regex.test(panel.name);\n    });\n  }\n\n  openCopy() {\n    this.setState({\n      tab: 'Copy',\n      filter: '',\n      panelPlugins: this.getPanelPlugins(''),\n      copiedPanelPlugins: this.getCopiedPanelPlugins(''),\n    });\n  }\n\n  openAdd() {\n    this.setState({\n      tab: 'Add',\n      filter: '',\n      panelPlugins: this.getPanelPlugins(''),\n      copiedPanelPlugins: this.getCopiedPanelPlugins(''),\n    });\n  }\n\n  render() {\n    const addClass = classNames({\n      'active active--panel': this.state.tab === 'Add',\n      '': this.state.tab === 'Copy',\n    });\n\n    const copyClass = classNames({\n      '': this.state.tab === 'Add',\n      'active active--panel': this.state.tab === 'Copy',\n    });\n\n    let panelTab;\n\n    if (this.state.tab === 'Add') {\n      panelTab = this.state.panelPlugins.map(this.renderPanelItem);\n    } else if (this.state.tab === 'Copy') {\n      if (this.state.copiedPanelPlugins.length > 0) {\n        panelTab = this.state.copiedPanelPlugins.map(this.renderPanelItem);\n      } else {\n        panelTab = this.noCopiedPanelPlugins();\n      }\n    }\n\n    return (\n      <div className=\"panel-container add-panel-container\">\n        <div className=\"add-panel\">\n          <div className=\"add-panel__header\">\n            <i className=\"gicon gicon-add-panel\" />\n            <span className=\"add-panel__title\">添加面板</span>\n            <ul className=\"gf-tabs\">\n              <li className=\"gf-tabs-item\">\n                <div className={'gf-tabs-link pointer ' + addClass} onClick={this.openAdd.bind(this)}>\n                  添加\n                </div>\n              </li>\n              <li className=\"gf-tabs-item\">\n                <div className={'gf-tabs-link pointer ' + copyClass} onClick={this.openCopy.bind(this)}>\n                  粘贴\n                </div>\n              </li>\n            </ul>\n            <button className=\"add-panel__close\" onClick={this.handleCloseAddPanel}>\n              <i className=\"fa fa-close\" />\n            </button>\n          </div>\n          <ScrollBar ref={element => (this.scrollbar = element)} className=\"add-panel__items\">\n            <div className=\"add-panel__searchbar\">\n              <label className=\"gf-form gf-form--grow gf-form--has-input-icon\">\n                <input\n                  type=\"text\"\n                  autoFocus\n                  className=\"gf-form-input gf-form--grow\"\n                  placeholder=\"过滤搜索面板插件\"\n                  value={this.state.filter}\n                  onChange={this.filterChange.bind(this)}\n                  onKeyPress={this.filterKeyPress.bind(this)}\n                />\n                <i className=\"gf-form-input-icon fa fa-search\" />\n              </label>\n            </div>\n            {panelTab}\n          </ScrollBar>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport {PanelModel} from '../panel_model';\nimport {PanelContainer} from './PanelContainer';\nimport {AttachedPanel} from './PanelLoader';\nimport {DashboardRow} from './DashboardRow';\nimport {AddPanelPanel} from './AddPanelPanel';\n\nexport interface DashboardPanelProps {\n  panel: PanelModel;\n  getPanelContainer: () => PanelContainer;\n}\n\nexport class DashboardPanel extends React.Component<DashboardPanelProps, any> {\n  element: any;\n  attachedPanel: AttachedPanel;\n\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  componentDidMount() {\n    if (!this.element) {\n      return;\n    }\n\n    const panelContainer = this.props.getPanelContainer();\n    const dashboard = panelContainer.getDashboard();\n    const loader = panelContainer.getPanelLoader();\n    this.attachedPanel = loader.load(this.element, this.props.panel, dashboard);\n  }\n\n  componentWillUnmount() {\n    if (this.attachedPanel) {\n      this.attachedPanel.destroy();\n    }\n  }\n\n  render() {\n    // special handling for rows\n    if (this.props.panel.type === 'row') {\n      return <DashboardRow panel={this.props.panel} getPanelContainer={this.props.getPanelContainer} />;\n    }\n\n    if (this.props.panel.type === 'add-panel') {\n      return <AddPanelPanel panel={this.props.panel} getPanelContainer={this.props.getPanelContainer} />;\n    }\n\n    return (\n      <div ref={element => this.element = element} className=\"panel-height-helper\" />\n    );\n  }\n}\n\n","import React from 'react';\nimport ReactGridLayout from 'react-grid-layout';\nimport { GRID_CELL_HEIGHT, GRID_CELL_VMARGIN, GRID_COLUMN_COUNT } from 'app/core/constants';\nimport { DashboardPanel } from './DashboardPanel';\nimport { DashboardModel } from '../dashboard_model';\nimport { PanelContainer } from './PanelContainer';\nimport { PanelModel } from '../panel_model';\nimport classNames from 'classnames';\nimport sizeMe from 'react-sizeme';\n\nlet lastGridWidth = 1200;\n\nfunction GridWrapper({\n  size,\n  layout,\n  onLayoutChange,\n  children,\n  onDragStop,\n  onResize,\n  onResizeStop,\n  onWidthChange,\n  className,\n  isResizable,\n  isDraggable,\n}) {\n  if (size.width === 0) {\n    console.log('size is zero!');\n  }\n\n  const width = size.width > 0 ? size.width : lastGridWidth;\n  if (width !== lastGridWidth) {\n    onWidthChange();\n    lastGridWidth = width;\n  }\n\n  return (\n    <ReactGridLayout\n      width={lastGridWidth}\n      className={className}\n      isDraggable={isDraggable}\n      isResizable={isResizable}\n      measureBeforeMount={false}\n      containerPadding={[0, 0]}\n      useCSSTransforms={true}\n      margin={[GRID_CELL_VMARGIN, GRID_CELL_VMARGIN]}\n      cols={GRID_COLUMN_COUNT}\n      rowHeight={GRID_CELL_HEIGHT}\n      draggableHandle=\".grid-drag-handle\"\n      layout={layout}\n      onResize={onResize}\n      onResizeStop={onResizeStop}\n      onDragStop={onDragStop}\n      onLayoutChange={onLayoutChange}\n    >\n      {children}\n    </ReactGridLayout>\n  );\n}\n\nconst SizedReactLayoutGrid = sizeMe({ monitorWidth: true })(GridWrapper);\n\nexport interface DashboardGridProps {\n  getPanelContainer: () => PanelContainer;\n}\n\nexport class DashboardGrid extends React.Component<DashboardGridProps, any> {\n  gridToPanelMap: any;\n  panelContainer: PanelContainer;\n  dashboard: DashboardModel;\n  panelMap: { [id: string]: PanelModel };\n\n  constructor(props) {\n    super(props);\n    this.panelContainer = this.props.getPanelContainer();\n    this.onLayoutChange = this.onLayoutChange.bind(this);\n    this.onResize = this.onResize.bind(this);\n    this.onResizeStop = this.onResizeStop.bind(this);\n    this.onDragStop = this.onDragStop.bind(this);\n    this.onWidthChange = this.onWidthChange.bind(this);\n\n    this.state = { animated: false };\n\n    // subscribe to dashboard events\n    this.dashboard = this.panelContainer.getDashboard();\n    this.dashboard.on('panel-added', this.triggerForceUpdate.bind(this));\n    this.dashboard.on('panel-removed', this.triggerForceUpdate.bind(this));\n    this.dashboard.on('repeats-processed', this.triggerForceUpdate.bind(this));\n    this.dashboard.on('view-mode-changed', this.triggerForceUpdate.bind(this));\n    this.dashboard.on('row-collapsed', this.triggerForceUpdate.bind(this));\n    this.dashboard.on('row-expanded', this.triggerForceUpdate.bind(this));\n  }\n\n  buildLayout() {\n    const layout = [];\n    this.panelMap = {};\n\n    for (const panel of this.dashboard.panels) {\n      const stringId = panel.id.toString();\n      this.panelMap[stringId] = panel;\n\n      if (!panel.gridPos) {\n        console.log('panel without gridpos');\n        continue;\n      }\n\n      const panelPos: any = {\n        i: stringId,\n        x: panel.gridPos.x,\n        y: panel.gridPos.y,\n        w: panel.gridPos.w,\n        h: panel.gridPos.h,\n      };\n\n      if (panel.type === 'row') {\n        panelPos.w = GRID_COLUMN_COUNT;\n        panelPos.h = 1;\n        panelPos.isResizable = false;\n        panelPos.isDraggable = panel.collapsed;\n      }\n\n      layout.push(panelPos);\n    }\n\n    return layout;\n  }\n\n  onLayoutChange(newLayout) {\n    for (const newPos of newLayout) {\n      this.panelMap[newPos.i].updateGridPos(newPos);\n    }\n\n    this.dashboard.sortPanelsByGridPos();\n  }\n\n  triggerForceUpdate() {\n    this.forceUpdate();\n  }\n\n  onWidthChange() {\n    for (const panel of this.dashboard.panels) {\n      panel.resizeDone();\n    }\n  }\n\n  updateGridPos(item, layout) {\n    this.panelMap[item.i].updateGridPos(item);\n\n    // react-grid-layout has a bug (#670), and onLayoutChange() is only called when the component is mounted.\n    // So it's required to call it explicitly when panel resized or moved to save layout changes.\n    this.onLayoutChange(layout);\n  }\n\n  onResize(layout, oldItem, newItem) {\n    this.panelMap[newItem.i].updateGridPos(newItem);\n  }\n\n  onResizeStop(layout, oldItem, newItem) {\n    this.updateGridPos(newItem, layout);\n    this.panelMap[newItem.i].resizeDone();\n  }\n\n  onDragStop(layout, oldItem, newItem) {\n    this.updateGridPos(newItem, layout);\n  }\n\n  componentDidMount() {\n    setTimeout(() => {\n      this.setState(() => {\n        return { animated: true };\n      });\n    });\n  }\n\n  renderPanels() {\n    const panelElements = [];\n\n    for (const panel of this.dashboard.panels) {\n      const panelClasses = classNames({ panel: true, 'panel--fullscreen': panel.fullscreen });\n      panelElements.push(\n        <div key={panel.id.toString()} className={panelClasses}>\n          <DashboardPanel panel={panel} getPanelContainer={this.props.getPanelContainer} />\n        </div>\n      );\n    }\n\n    return panelElements;\n  }\n\n  render() {\n    return (\n      <SizedReactLayoutGrid\n        className={classNames({ layout: true, animated: this.state.animated })}\n        layout={this.buildLayout()}\n        isResizable={this.dashboard.meta.canEdit}\n        isDraggable={this.dashboard.meta.canEdit}\n        onLayoutChange={this.onLayoutChange}\n        onWidthChange={this.onWidthChange}\n        onDragStop={this.onDragStop}\n        onResize={this.onResize}\n        onResizeStop={this.onResizeStop}\n      >\n        {this.renderPanels()}\n      </SizedReactLayoutGrid>\n    );\n  }\n}\n","import angular from 'angular';\nimport coreModule from 'app/core/core_module';\n\nexport interface AttachedPanel {\n  destroy();\n}\n\nexport class PanelLoader {\n  /** @ngInject */\n  constructor(private $compile, private $rootScope) {}\n\n  load(elem, panel, dashboard): AttachedPanel {\n    const template = '<plugin-component type=\"panel\" class=\"panel-height-helper\"></plugin-component>';\n    const panelScope = this.$rootScope.$new();\n    panelScope.panel = panel;\n    panelScope.dashboard = dashboard;\n\n    const compiledElem = this.$compile(template)(panelScope);\n    const rootNode = angular.element(elem);\n    rootNode.append(compiledElem);\n\n    return {\n      destroy: () => {\n        panelScope.$destroy();\n        compiledElem.remove();\n      },\n    };\n  }\n}\n\ncoreModule.service('panelLoader', PanelLoader);\n","import { react2AngularDirective } from 'app/core/utils/react2angular';\nimport { DashboardGrid } from './DashboardGrid';\n\nreact2AngularDirective('dashboardGrid', DashboardGrid, [\n  ['getPanelContainer', { watchDepth: 'reference', wrapApply: false }],\n]);\n","import { coreModule } from 'app/core/core';\n\nexport class RowOptionsCtrl {\n  row: any;\n  source: any;\n  dismiss: any;\n  onUpdated: any;\n  showDelete: boolean;\n\n  /** @ngInject */\n  constructor() {\n    this.source = this.row;\n    this.row = this.row.getSaveModel();\n  }\n\n  update() {\n    this.source.title = this.row.title;\n    this.source.repeat = this.row.repeat;\n    this.onUpdated();\n    this.dismiss();\n  }\n}\n\nexport function rowOptionsDirective() {\n  return {\n    restrict: 'E',\n    templateUrl: 'public/app/features/dashboard/partials/row_options.html',\n    controller: RowOptionsCtrl,\n    bindToController: true,\n    controllerAs: 'ctrl',\n    scope: {\n      row: '=',\n      dismiss: '&',\n      onUpdated: '&',\n    },\n  };\n}\n\ncoreModule.directive('rowOptions', rowOptionsDirective);\n","import _ from 'lodash';\nimport coreModule from 'app/core/core_module';\nimport appEvents from 'app/core/app_events';\n\nexport class FolderPickerCtrl {\n  initialTitle: string;\n  initialFolderId?: number;\n  labelClass: string;\n  onChange: any;\n  onLoad: any;\n  onCreateFolder: any;\n  enterFolderCreation: any;\n  exitFolderCreation: any;\n  enableCreateNew: boolean;\n  enableReset: boolean;\n  rootName = '通用';\n  folder: any;\n  createNewFolder: boolean;\n  newFolderName: string;\n  newFolderNameTouched: boolean;\n  hasValidationError: boolean;\n  validationError: any;\n  isEditor: boolean;\n\n  /** @ngInject */\n  constructor(private backendSrv, private validationSrv, private contextSrv) {\n    this.isEditor = this.contextSrv.isEditor;\n\n    if (!this.labelClass) {\n      this.labelClass = 'width-7';\n    }\n\n    this.loadInitialValue();\n  }\n\n  getOptions(query) {\n    const params = {\n      query: query,\n      type: 'dash-folder',\n      permission: 'Edit',\n    };\n\n    return this.backendSrv.get('api/search', params).then(result => {\n      if (\n        this.isEditor &&\n        (query === '' ||\n          query.toLowerCase() === 'g' ||\n          query.toLowerCase() === 'ge' ||\n          query.toLowerCase() === 'gen' ||\n          query.toLowerCase() === 'gene' ||\n          query.toLowerCase() === 'gener' ||\n          query.toLowerCase() === 'genera' ||\n          query.toLowerCase() === 'general')\n      ) {\n        result.unshift({ title: this.rootName, id: 0 });\n      }\n\n      if (this.isEditor && this.enableCreateNew && query === '') {\n        result.unshift({ title: '-- 新建文件夹 --', id: -1 });\n      }\n\n      if (this.enableReset && query === '' && this.initialTitle !== '') {\n        result.unshift({ title: this.initialTitle, id: null });\n      }\n\n      return _.map(result, item => {\n        return { text: item.title, value: item.id };\n      });\n    });\n  }\n\n  onFolderChange(option) {\n    if (!option) {\n      option = { value: 0, text: this.rootName };\n    } else if (option.value === -1) {\n      this.createNewFolder = true;\n      this.enterFolderCreation();\n      return;\n    }\n    this.onChange({ $folder: { id: option.value, title: option.text } });\n  }\n\n  newFolderNameChanged() {\n    this.newFolderNameTouched = true;\n\n    this.validationSrv\n      .validateNewFolderName(this.newFolderName)\n      .then(() => {\n        this.hasValidationError = false;\n      })\n      .catch(err => {\n        this.hasValidationError = true;\n        this.validationError = err.message;\n      });\n  }\n\n  createFolder(evt) {\n    if (evt) {\n      evt.stopPropagation();\n      evt.preventDefault();\n    }\n\n    return this.backendSrv.createFolder({ title: this.newFolderName }).then(result => {\n      appEvents.emit('alert-success', ['文件夹已创建', 'OK']);\n\n      this.closeCreateFolder();\n      this.folder = { text: result.title, value: result.id };\n      this.onFolderChange(this.folder);\n    });\n  }\n\n  cancelCreateFolder(evt) {\n    if (evt) {\n      evt.stopPropagation();\n      evt.preventDefault();\n    }\n\n    this.closeCreateFolder();\n    this.loadInitialValue();\n  }\n\n  private closeCreateFolder() {\n    this.exitFolderCreation();\n    this.createNewFolder = false;\n    this.hasValidationError = false;\n    this.validationError = null;\n    this.newFolderName = '';\n    this.newFolderNameTouched = false;\n  }\n\n  private loadInitialValue() {\n    const resetFolder = { text: this.initialTitle, value: null };\n    const rootFolder = { text: this.rootName, value: 0 };\n    this.getOptions('').then(result => {\n      let folder;\n      if (this.initialFolderId) {\n        folder = _.find(result, { value: this.initialFolderId });\n      } else if (this.enableReset && this.initialTitle && this.initialFolderId === null) {\n        folder = resetFolder;\n      }\n\n      if (!folder) {\n        if (this.isEditor) {\n          folder = rootFolder;\n        } else {\n          folder = result.length > 0 ? result[0] : resetFolder;\n        }\n      }\n\n      this.folder = folder;\n\n      // if this is not the same as our initial value notify parent\n      if (this.folder.id !== this.initialFolderId) {\n        this.onChange({ $folder: { id: this.folder.value, title: this.folder.text } });\n      }\n    });\n  }\n}\n\nexport function folderPicker() {\n  return {\n    restrict: 'E',\n    templateUrl: 'public/app/features/dashboard/folder_picker/folder_picker.html',\n    controller: FolderPickerCtrl,\n    bindToController: true,\n    controllerAs: 'ctrl',\n    scope: {\n      initialTitle: '<',\n      initialFolderId: '<',\n      labelClass: '@',\n      rootName: '@',\n      onChange: '&',\n      onCreateFolder: '&',\n      enterFolderCreation: '&',\n      exitFolderCreation: '&',\n      enableCreateNew: '@',\n      enableReset: '@',\n    },\n  };\n}\n\ncoreModule.directive('folderPicker', folderPicker);\n","import coreModule from 'app/core/core_module';\nimport appEvents from 'app/core/app_events';\n\nexport class MoveToFolderCtrl {\n  dashboards: any;\n  folder: any;\n  dismiss: any;\n  afterSave: any;\n  isValidFolderSelection = true;\n\n  /** @ngInject */\n  constructor(private backendSrv) {}\n\n  onFolderChange(folder) {\n    this.folder = folder;\n  }\n\n  save() {\n    return this.backendSrv.moveDashboards(this.dashboards, this.folder).then(result => {\n      if (result.successCount > 0) {\n        const header = `${result.successCount === 1 ? '' : 's'} 个仪表盘已移动`;\n        const msg = `${result.successCount} 个仪表盘 ${result.successCount === 1 ? '' : 's'} 移动到 ${\n          this.folder.title\n        }`;\n        appEvents.emit('alert-success', [header, msg]);\n      }\n\n      if (result.totalCount === result.alreadyInFolderCount) {\n        appEvents.emit('alert-error', ['错误', `该仪表盘已存在文件夹 ${this.folder.title} 中`]);\n      }\n\n      this.dismiss();\n      return this.afterSave();\n    });\n  }\n\n  onEnterFolderCreation() {\n    this.isValidFolderSelection = false;\n  }\n\n  onExitFolderCreation() {\n    this.isValidFolderSelection = true;\n  }\n}\n\nexport function moveToFolderModal() {\n  return {\n    restrict: 'E',\n    templateUrl: 'public/app/features/dashboard/move_to_folder_modal/move_to_folder.html',\n    controller: MoveToFolderCtrl,\n    bindToController: true,\n    controllerAs: 'ctrl',\n    scope: {\n      dismiss: '&',\n      dashboards: '=',\n      afterSave: '&',\n    },\n  };\n}\n\ncoreModule.directive('moveToFolderModal', moveToFolderModal);\n","import { coreModule, appEvents, contextSrv } from 'app/core/core';\nimport { DashboardModel } from '../dashboard_model';\nimport $ from 'jquery';\nimport _ from 'lodash';\nimport angular from 'angular';\nimport config from 'app/core/config';\n\nexport class SettingsCtrl {\n  dashboard: DashboardModel;\n  isOpen: boolean;\n  viewId: string;\n  json: string;\n  alertCount: number;\n  canSaveAs: boolean;\n  canSave: boolean;\n  canDelete: boolean;\n  sections: any[];\n  hasUnsavedFolderChange: boolean;\n\n  /** @ngInject */\n  constructor(\n    private $scope,\n    private $route,\n    private $location,\n    private $rootScope,\n    private backendSrv,\n    private dashboardSrv\n  ) {\n    // temp hack for annotations and variables editors\n    // that rely on inherited scope\n    $scope.dashboard = this.dashboard;\n\n    this.$scope.$on('$destroy', () => {\n      this.dashboard.updateSubmenuVisibility();\n      this.$rootScope.$broadcast('refresh');\n      setTimeout(() => {\n        this.$rootScope.appEvent('dash-scroll', { restore: true });\n      });\n    });\n\n    this.canSaveAs = this.dashboard.meta.canEdit && contextSrv.hasEditPermissionInFolders;\n    this.canSave = this.dashboard.meta.canSave;\n    this.canDelete = this.dashboard.meta.canSave;\n\n    this.buildSectionList();\n    this.onRouteUpdated();\n\n    this.$rootScope.onAppEvent('$routeUpdate', this.onRouteUpdated.bind(this), $scope);\n    this.$rootScope.appEvent('dash-scroll', { animate: false, pos: 0 });\n    this.$rootScope.onAppEvent('dashboard-saved', this.onPostSave.bind(this), $scope);\n  }\n\n  buildSectionList() {\n    this.sections = [];\n\n    if (this.dashboard.meta.canEdit) {\n      this.sections.push({\n        title: '通用',\n        id: 'settings',\n        icon: 'gicon gicon-preferences',\n      });\n      this.sections.push({\n        title: '注释',\n        id: 'annotations',\n        icon: 'gicon gicon-annotation',\n      });\n      this.sections.push({\n        title: '变量',\n        id: 'templating',\n        icon: 'gicon gicon-variable',\n      });\n      this.sections.push({\n        title: '链接',\n        id: 'links',\n        icon: 'gicon gicon-link',\n      });\n    }\n\n    if (this.dashboard.id && this.dashboard.meta.canSave) {\n      this.sections.push({\n        title: '版本',\n        id: 'versions',\n        icon: 'fa fa-fw fa-history',\n      });\n    }\n\n    if (this.dashboard.id && this.dashboard.meta.canAdmin) {\n      this.sections.push({\n        title: '权限',\n        id: 'permissions',\n        icon: 'fa fa-fw fa-lock',\n      });\n    }\n\n    if (this.dashboard.meta.canMakeEditable) {\n      this.sections.push({\n        title: '通用',\n        icon: 'gicon gicon-preferences',\n        id: 'make_editable',\n      });\n    }\n\n    this.sections.push({\n      title: 'JSON 模型',\n      id: 'dashboard_json',\n      icon: 'gicon gicon-json',\n    });\n\n    const params = this.$location.search();\n    const url = this.$location.path();\n\n    for (const section of this.sections) {\n      const sectionParams = _.defaults({ editview: section.id }, params);\n      section.url = config.appSubUrl + url + '?' + $.param(sectionParams);\n    }\n  }\n\n  onRouteUpdated() {\n    this.viewId = this.$location.search().editview;\n\n    if (this.viewId) {\n      this.json = angular.toJson(this.dashboard.getSaveModelClone(), true);\n    }\n\n    if (this.viewId === 'settings' && this.dashboard.meta.canMakeEditable) {\n      this.viewId = 'make_editable';\n    }\n\n    const currentSection = _.find(this.sections, { id: this.viewId });\n    if (!currentSection) {\n      this.sections.unshift({\n        title: '暂无',\n        id: '404',\n        icon: 'fa fa-fw fa-warning',\n      });\n      this.viewId = '404';\n    }\n  }\n\n  openSaveAsModal() {\n    this.dashboardSrv.showSaveAsModal();\n  }\n\n  saveDashboard() {\n    this.dashboardSrv.saveDashboard();\n  }\n\n  saveDashboardJson() {\n    this.dashboardSrv.saveJSONDashboard(this.json).then(() => {\n      this.$route.reload();\n    });\n  }\n\n  onPostSave() {\n    this.hasUnsavedFolderChange = false;\n  }\n\n  hideSettings() {\n    const urlParams = this.$location.search();\n    delete urlParams.editview;\n    setTimeout(() => {\n      this.$rootScope.$apply(() => {\n        this.$location.search(urlParams);\n      });\n    });\n  }\n\n  makeEditable() {\n    this.dashboard.editable = true;\n    this.dashboard.meta.canMakeEditable = false;\n    this.dashboard.meta.canEdit = true;\n    this.dashboard.meta.canSave = true;\n    this.canDelete = true;\n    this.viewId = 'settings';\n    this.buildSectionList();\n\n    const currentSection = _.find(this.sections, { id: this.viewId });\n    this.$location.url(currentSection.url);\n  }\n\n  deleteDashboard() {\n    let confirmText = '';\n    let text2 = this.dashboard.title;\n\n    const alerts = _.sumBy(this.dashboard.panels, panel => {\n      return panel.alert ? 1 : 0;\n    });\n\n    if (alerts > 0) {\n      confirmText = '删除';\n      text2 = `此仪表盘包含 ${alerts} 报警。 删除此仪表板也会删除这些报警`;\n    }\n\n    appEvents.emit('confirm-modal', {\n      title: '删除',\n      text: '希望删除此仪表盘?',\n      text2: text2,\n      icon: 'fa-trash',\n      confirmText: confirmText,\n      yesText: '删除',\n      onConfirm: () => {\n        this.dashboard.meta.canSave = false;\n        this.deleteDashboardConfirmed();\n      },\n    });\n  }\n\n  deleteDashboardConfirmed() {\n    this.backendSrv.deleteDashboard(this.dashboard.uid).then(() => {\n      appEvents.emit('alert-success', ['仪表盘已删除', this.dashboard.title + ' 已删除']);\n      this.$location.url('/');\n    });\n  }\n\n  onFolderChange(folder) {\n    this.dashboard.meta.folderId = folder.id;\n    this.dashboard.meta.folderTitle = folder.title;\n    this.hasUnsavedFolderChange = true;\n  }\n\n  getFolder() {\n    return {\n      id: this.dashboard.meta.folderId,\n      title: this.dashboard.meta.folderTitle,\n      url: this.dashboard.meta.folderUrl,\n    };\n  }\n}\n\nexport function dashboardSettings() {\n  return {\n    restrict: 'E',\n    templateUrl: 'public/app/features/dashboard/settings/settings.html',\n    controller: SettingsCtrl,\n    bindToController: true,\n    controllerAs: 'ctrl',\n    transclude: true,\n    scope: { dashboard: '=' },\n  };\n}\n\ncoreModule.directive('dashboardSettings', dashboardSettings);\n","export class DashboardListCtrl {\n  navModel: any;\n\n  /** @ngInject */\n  constructor(navModelSrv) {\n    this.navModel = navModelSrv.getNav('dashboards', 'manage-dashboards', 0);\n  }\n}\n","export class FolderPageLoader {\n  constructor(private backendSrv) {}\n\n  load(ctrl, uid, activeChildId) {\n    ctrl.navModel = {\n      main: {\n        icon: 'fa fa-folder-open',\n        id: 'manage-folder',\n        subTitle: '管理文件夹仪表盘与权限',\n        url: '',\n        text: '',\n        breadcrumbs: [{ title: '仪表盘', url: 'dashboards' }],\n        children: [\n          {\n            active: activeChildId === 'manage-folder-dashboards',\n            icon: 'fa fa-fw fa-th-large',\n            id: 'manage-folder-dashboards',\n            text: '仪表盘',\n            url: 'dashboards',\n          },\n          {\n            active: activeChildId === 'manage-folder-permissions',\n            icon: 'fa fa-fw fa-lock',\n            id: 'manage-folder-permissions',\n            text: '权限',\n            url: 'dashboards/permissions',\n          },\n          {\n            active: activeChildId === 'manage-folder-settings',\n            icon: 'fa fa-fw fa-cog',\n            id: 'manage-folder-settings',\n            text: '设置',\n            url: 'dashboards/settings',\n          },\n        ],\n      },\n    };\n\n    return this.backendSrv.getFolderByUid(uid).then(folder => {\n      ctrl.folderId = folder.id;\n      const folderTitle = folder.title;\n      const folderUrl = folder.url;\n      ctrl.navModel.main.text = folderTitle;\n\n      const dashTab = ctrl.navModel.main.children.find(child => child.id === 'manage-folder-dashboards');\n      dashTab.url = folderUrl;\n\n      if (folder.canAdmin) {\n        const permTab = ctrl.navModel.main.children.find(child => child.id === 'manage-folder-permissions');\n        permTab.url = folderUrl + '/permissions';\n\n        const settingsTab = ctrl.navModel.main.children.find(child => child.id === 'manage-folder-settings');\n        settingsTab.url = folderUrl + '/settings';\n      } else {\n        ctrl.navModel.main.children = [dashTab];\n      }\n\n      return folder;\n    });\n  }\n}\n","import { FolderPageLoader } from './folder_page_loader';\nimport locationUtil from 'app/core/utils/location_util';\n\nexport class FolderDashboardsCtrl {\n  navModel: any;\n  folderId: number;\n  uid: string;\n\n  /** @ngInject */\n  constructor(private backendSrv, navModelSrv, private $routeParams, $location) {\n    if (this.$routeParams.uid) {\n      this.uid = $routeParams.uid;\n\n      const loader = new FolderPageLoader(this.backendSrv);\n\n      loader.load(this, this.uid, 'manage-folder-dashboards').then(folder => {\n        const url = locationUtil.stripBaseFromUrl(folder.url);\n\n        if (url !== $location.path()) {\n          $location.path(url).replace();\n        }\n      });\n    }\n  }\n}\n","import { FolderPageLoader } from './folder_page_loader';\nimport appEvents from 'app/core/app_events';\n\nexport class FolderSettingsCtrl {\n  folderPageLoader: FolderPageLoader;\n  navModel: any;\n  folderId: number;\n  uid: string;\n  canSave = false;\n  folder: any;\n  title: string;\n  hasChanged: boolean;\n\n  /** @ngInject */\n  constructor(private backendSrv, navModelSrv, private $routeParams, private $location) {\n    if (this.$routeParams.uid) {\n      this.uid = $routeParams.uid;\n\n      this.folderPageLoader = new FolderPageLoader(this.backendSrv);\n      this.folderPageLoader.load(this, this.uid, 'manage-folder-settings').then(folder => {\n        if ($location.path() !== folder.meta.url) {\n          $location.path(`${folder.meta.url}/settings`).replace();\n        }\n\n        this.folder = folder;\n        this.canSave = this.folder.canSave;\n        this.title = this.folder.title;\n      });\n    }\n  }\n\n  save() {\n    this.titleChanged();\n\n    if (!this.hasChanged) {\n      return;\n    }\n\n    this.folder.title = this.title.trim();\n\n    return this.backendSrv\n      .updateFolder(this.folder)\n      .then(result => {\n        if (result.url !== this.$location.path()) {\n          this.$location.url(result.url + '/settings');\n        }\n\n        appEvents.emit('dashboard-saved');\n        appEvents.emit('alert-success', ['文件夹已保存']);\n      })\n      .catch(this.handleSaveFolderError);\n  }\n\n  titleChanged() {\n    this.hasChanged = this.folder.title.toLowerCase() !== this.title.trim().toLowerCase();\n  }\n\n  delete(evt) {\n    if (evt) {\n      evt.stopPropagation();\n      evt.preventDefault();\n    }\n\n    appEvents.emit('confirm-modal', {\n      title: '删除',\n      text: `要删除此文件夹及其所有仪表盘吗?`,\n      icon: 'fa-trash',\n      yesText: '删除',\n      onConfirm: () => {\n        return this.backendSrv.deleteFolder(this.uid).then(() => {\n          appEvents.emit('alert-success', ['文件夹已删除', `${this.folder.title} 已被删除`]);\n          this.$location.url('dashboards');\n        });\n      },\n    });\n  }\n\n  handleSaveFolderError(err) {\n    if (err.data && err.data.status === 'version-mismatch') {\n      err.isHandled = true;\n\n      appEvents.emit('confirm-modal', {\n        title: '冲突',\n        text: '其他人已更新此文件夹。',\n        text2: '你还想保存这个文件夹吗?',\n        yesText: '保存 & 覆盖',\n        icon: 'fa-warning',\n        onConfirm: () => {\n          this.backendSrv.updateFolder(this.folder, { overwrite: true });\n        },\n      });\n    }\n  }\n}\n","import _ from 'lodash';\nimport config from 'app/core/config';\n\nexport class DashboardImportCtrl {\n  navModel: any;\n  step: number;\n  jsonText: string;\n  parseError: string;\n  nameExists: boolean;\n  uidExists: boolean;\n  dash: any;\n  inputs: any[];\n  inputsValid: boolean;\n  gnetUrl: string;\n  gnetError: string;\n  gnetInfo: any;\n  titleTouched: boolean;\n  hasNameValidationError: boolean;\n  nameValidationError: any;\n  hasUidValidationError: boolean;\n  uidValidationError: any;\n  autoGenerateUid: boolean;\n  autoGenerateUidValue: string;\n  folderId: number;\n  initialFolderTitle: string;\n  isValidFolderSelection: boolean;\n\n  /** @ngInject */\n  constructor(private backendSrv, private validationSrv, navModelSrv, private $location, $routeParams) {\n    this.navModel = navModelSrv.getNav('create', 'import');\n\n    this.step = 1;\n    this.nameExists = false;\n    this.uidExists = false;\n    this.autoGenerateUid = true;\n    this.autoGenerateUidValue = 'auto-generated';\n    this.folderId = $routeParams.folderId ? Number($routeParams.folderId) || 0 : null;\n    this.initialFolderTitle = '选择一个文件夹';\n\n    // check gnetId in url\n    if ($routeParams.gnetId) {\n      this.gnetUrl = $routeParams.gnetId;\n      this.checkGnetDashboard();\n    }\n  }\n\n  onUpload(dash) {\n    this.dash = dash;\n    this.dash.id = null;\n    this.step = 2;\n    this.inputs = [];\n\n    if (this.dash.__inputs) {\n      for (const input of this.dash.__inputs) {\n        const inputModel = {\n          name: input.name,\n          label: input.label,\n          info: input.description,\n          value: input.value,\n          type: input.type,\n          pluginId: input.pluginId,\n          options: [],\n        };\n\n        if (input.type === 'datasource') {\n          this.setDatasourceOptions(input, inputModel);\n        } else if (!inputModel.info) {\n          inputModel.info = '指定字符串常量';\n        }\n\n        this.inputs.push(inputModel);\n      }\n    }\n\n    this.inputsValid = this.inputs.length === 0;\n    this.titleChanged();\n    this.uidChanged(true);\n  }\n\n  setDatasourceOptions(input, inputModel) {\n    const sources = _.filter(config.datasources, val => {\n      return val.type === input.pluginId;\n    });\n\n    if (sources.length === 0) {\n      inputModel.info = '没有找到 ' + input.pluginName + ' 类型的数据源';\n    } else if (!inputModel.info) {\n      inputModel.info = '选择一个 ' + input.pluginName + ' 数据源';\n    }\n\n    inputModel.options = sources.map(val => {\n      return { text: val.name, value: val.name };\n    });\n  }\n\n  inputValueChanged() {\n    this.inputsValid = true;\n    for (const input of this.inputs) {\n      if (!input.value) {\n        this.inputsValid = false;\n      }\n    }\n  }\n\n  titleChanged() {\n    this.titleTouched = true;\n    this.nameExists = false;\n\n    this.validationSrv\n      .validateNewDashboardName(this.folderId, this.dash.title)\n      .then(() => {\n        this.nameExists = false;\n        this.hasNameValidationError = false;\n      })\n      .catch(err => {\n        if (err.type === 'EXISTING') {\n          this.nameExists = true;\n        }\n\n        this.hasNameValidationError = true;\n        this.nameValidationError = err.message;\n      });\n  }\n\n  uidChanged(initial) {\n    this.uidExists = false;\n    this.hasUidValidationError = false;\n\n    if (initial === true && this.dash.uid) {\n      this.autoGenerateUidValue = 'value set';\n    }\n\n    this.backendSrv\n      .getDashboardByUid(this.dash.uid)\n      .then(res => {\n        this.uidExists = true;\n        this.hasUidValidationError = true;\n        this.uidValidationError = `名为 '${res.dashboard.title}' 的仪表盘在文件夹 '${\n          res.meta.folderTitle\n        }' 中存在相同的 uid`;\n      })\n      .catch(err => {\n        err.isHandled = true;\n      });\n  }\n\n  onFolderChange(folder) {\n    this.folderId = folder.id;\n    this.titleChanged();\n  }\n\n  onEnterFolderCreation() {\n    this.inputsValid = false;\n  }\n\n  onExitFolderCreation() {\n    this.inputValueChanged();\n  }\n\n  isValid() {\n    return this.inputsValid && this.folderId !== null;\n  }\n\n  saveDashboard() {\n    const inputs = this.inputs.map(input => {\n      return {\n        name: input.name,\n        type: input.type,\n        pluginId: input.pluginId,\n        value: input.value,\n      };\n    });\n\n    return this.backendSrv\n      .post('api/dashboards/import', {\n        dashboard: this.dash,\n        overwrite: true,\n        inputs: inputs,\n        folderId: this.folderId,\n      })\n      .then(res => {\n        this.$location.url(res.importedUrl);\n      });\n  }\n\n  loadJsonText() {\n    try {\n      this.parseError = '';\n      const dash = JSON.parse(this.jsonText);\n      this.onUpload(dash);\n    } catch (err) {\n      console.log(err);\n      this.parseError = err.message;\n      return;\n    }\n  }\n\n  checkGnetDashboard() {\n    this.gnetError = '';\n\n    const match = /(^\\d+$)|dashboards\\/(\\d+)/.exec(this.gnetUrl);\n    let dashboardId;\n\n    if (match && match[1]) {\n      dashboardId = match[1];\n    } else if (match && match[2]) {\n      dashboardId = match[2];\n    } else {\n      this.gnetError = 'Could not find dashboard';\n    }\n\n    return this.backendSrv\n      .get('api/gnet/dashboards/' + dashboardId)\n      .then(res => {\n        this.gnetInfo = res;\n        // store reference to grafana.com\n        res.json.gnetId = res.id;\n        this.onUpload(res.json);\n      })\n      .catch(err => {\n        err.isHandled = true;\n        this.gnetError = err.data.message || err;\n      });\n  }\n\n  back() {\n    this.gnetUrl = '';\n    this.step = 1;\n    this.gnetError = '';\n    this.gnetInfo = '';\n  }\n}\n","import _ from 'lodash';\nimport coreModule from '../../core/core_module';\n\nexport class PlaylistsCtrl {\n  playlists: any;\n  navModel: any;\n\n  /** @ngInject */\n  constructor(private $scope, private backendSrv, navModelSrv) {\n    this.navModel = navModelSrv.getNav('dashboards', 'playlists', 0);\n\n    backendSrv.get('/api/playlists').then(result => {\n      this.playlists = result.map(item => {\n        item.startUrl = `playlists/play/${item.id}`;\n        return item;\n      });\n    });\n  }\n\n  removePlaylistConfirmed(playlist) {\n    _.remove(this.playlists, { id: playlist.id });\n\n    this.backendSrv.delete('/api/playlists/' + playlist.id).then(\n      () => {\n        this.$scope.appEvent('alert-success', ['播放列表已删除', '']);\n      },\n      () => {\n        this.$scope.appEvent('alert-error', ['无法删除播放列表', '']);\n        this.playlists.push(playlist);\n      }\n    );\n  }\n\n  removePlaylist(playlist) {\n    this.$scope.appEvent('confirm-modal', {\n      title: '删除',\n      text: '确定想要删除播放列表 ' + playlist.name + '?',\n      yesText: '删除',\n      icon: 'fa-trash',\n      onConfirm: () => {\n        this.removePlaylistConfirmed(playlist);\n      },\n    });\n  }\n}\n\ncoreModule.controller('PlaylistsCtrl', PlaylistsCtrl);\n","import appEvents from 'app/core/app_events';\nimport locationUtil from 'app/core/utils/location_util';\n\nexport class CreateFolderCtrl {\n  title = '';\n  navModel: any;\n  titleTouched = false;\n  hasValidationError: boolean;\n  validationError: any;\n\n  /** @ngInject */\n  constructor(private backendSrv, private $location, private validationSrv, navModelSrv) {\n    this.navModel = navModelSrv.getNav('dashboards', 'manage-dashboards', 0);\n  }\n\n  create() {\n    if (this.hasValidationError) {\n      return;\n    }\n\n    return this.backendSrv.createFolder({ title: this.title }).then(result => {\n      appEvents.emit('alert-success', ['文件夹已创建', '完成']);\n      this.$location.url(locationUtil.stripBaseFromUrl(result.url));\n    });\n  }\n\n  titleChanged() {\n    this.titleTouched = true;\n\n    this.validationSrv\n      .validateNewFolderName(this.title)\n      .then(() => {\n        this.hasValidationError = false;\n      })\n      .catch(err => {\n        this.hasValidationError = true;\n        this.validationError = err.message;\n      });\n  }\n}\n","import './dashboard_ctrl';\nimport './alerting_srv';\nimport './history/history';\nimport './dashboard_loader_srv';\nimport './dashnav/dashnav';\nimport './submenu/submenu';\nimport './save_as_modal';\nimport './save_modal';\nimport './save_provisioned_modal';\nimport './shareModalCtrl';\nimport './share_snapshot_ctrl';\nimport './dashboard_srv';\nimport './view_state_srv';\nimport './validation_srv';\nimport './time_srv';\nimport './unsaved_changes_srv';\nimport './unsaved_changes_modal';\nimport './timepicker/timepicker';\nimport './upload';\nimport './export/export_modal';\nimport './export_data/export_data_modal';\nimport './ad_hoc_filters';\nimport './repeat_option/repeat_option';\nimport './dashgrid/DashboardGridDirective';\nimport './dashgrid/PanelLoader';\nimport './dashgrid/RowOptions';\nimport './folder_picker/folder_picker';\nimport './move_to_folder_modal/move_to_folder';\nimport './settings/settings';\n\nimport coreModule from 'app/core/core_module';\nimport { DashboardListCtrl } from './dashboard_list_ctrl';\nimport { FolderDashboardsCtrl } from './folder_dashboards_ctrl';\nimport { FolderSettingsCtrl } from './folder_settings_ctrl';\nimport { DashboardImportCtrl } from './dashboard_import_ctrl';\nimport { CreateFolderCtrl } from './create_folder_ctrl';\n\ncoreModule.controller('DashboardListCtrl', DashboardListCtrl);\ncoreModule.controller('FolderDashboardsCtrl', FolderDashboardsCtrl);\ncoreModule.controller('FolderSettingsCtrl', FolderSettingsCtrl);\ncoreModule.controller('DashboardImportCtrl', DashboardImportCtrl);\ncoreModule.controller('CreateFolderCtrl', CreateFolderCtrl);\n","import coreModule from '../../core/core_module';\n\nexport class PlaylistSearchCtrl {\n  query: any;\n  tagsMode: boolean;\n\n  searchStarted: any;\n\n  /** @ngInject */\n  constructor($timeout, private backendSrv) {\n    this.query = { query: '', tag: [], starred: false, limit: 20 };\n\n    $timeout(() => {\n      this.query.query = '';\n      this.query.type = 'dash-db';\n      this.searchDashboards();\n    }, 100);\n  }\n\n  searchDashboards() {\n    this.tagsMode = false;\n    const prom: any = {};\n\n    prom.promise = this.backendSrv.search(this.query).then(result => {\n      return {\n        dashboardResult: result,\n        tagResult: [],\n      };\n    });\n\n    this.searchStarted(prom);\n  }\n\n  showStarred() {\n    this.query.starred = !this.query.starred;\n    this.searchDashboards();\n  }\n\n  queryHasNoFilters() {\n    return this.query.query === '' && this.query.starred === false && this.query.tag.length === 0;\n  }\n\n  filterByTag(tag, evt) {\n    this.query.tag.push(tag);\n    this.searchDashboards();\n    if (evt) {\n      evt.stopPropagation();\n      evt.preventDefault();\n    }\n  }\n\n  getTags() {\n    const prom: any = {};\n    prom.promise = this.backendSrv.get('/api/dashboards/tags').then(result => {\n      return {\n        dashboardResult: [],\n        tagResult: result,\n      };\n    });\n\n    this.searchStarted(prom);\n  }\n}\n\nexport function playlistSearchDirective() {\n  return {\n    restrict: 'E',\n    templateUrl: 'public/app/features/playlist/partials/playlist_search.html',\n    controller: PlaylistSearchCtrl,\n    bindToController: true,\n    controllerAs: 'ctrl',\n    scope: {\n      searchStarted: '&',\n    },\n  };\n}\n\ncoreModule.directive('playlistSearch', playlistSearchDirective);\n","import coreModule from '../../core/core_module';\nimport kbn from 'app/core/utils/kbn';\nimport appEvents from 'app/core/app_events';\nimport _ from 'lodash';\nimport { toUrlParams } from 'app/core/utils/url';\n\nclass PlaylistSrv {\n  private cancelPromise: any;\n  private dashboards: any;\n  private index: number;\n  private interval: any;\n  private startUrl: string;\n  isPlaying: boolean;\n\n  /** @ngInject */\n  constructor(private $location: any, private $timeout: any, private backendSrv: any) {}\n\n  next() {\n    this.$timeout.cancel(this.cancelPromise);\n\n    const playedAllDashboards = this.index > this.dashboards.length - 1;\n    if (playedAllDashboards) {\n      window.location.href = this.startUrl;\n      return;\n    }\n\n    const dash = this.dashboards[this.index];\n    const queryParams = this.$location.search();\n    const filteredParams = _.pickBy(queryParams, value => value !== null);\n\n    this.$location.url('dashboard/' + dash.uri + '?' + toUrlParams(filteredParams));\n\n    this.index++;\n    this.cancelPromise = this.$timeout(() => this.next(), this.interval);\n  }\n\n  prev() {\n    this.index = Math.max(this.index - 2, 0);\n    this.next();\n  }\n\n  start(playlistId) {\n    this.stop();\n\n    this.startUrl = window.location.href;\n    this.index = 0;\n    this.isPlaying = true;\n\n    this.backendSrv.get(`/api/playlists/${playlistId}`).then(playlist => {\n      this.backendSrv.get(`/api/playlists/${playlistId}/dashboards`).then(dashboards => {\n        this.dashboards = dashboards;\n        this.interval = kbn.interval_to_ms(playlist.interval);\n        this.next();\n      });\n    });\n  }\n\n  stop() {\n    if (this.isPlaying) {\n      const queryParams = this.$location.search();\n      if (queryParams.kiosk) {\n        appEvents.emit('toggle-kiosk-mode', { exit: true });\n      }\n    }\n\n    this.index = 0;\n    this.isPlaying = false;\n\n    if (this.cancelPromise) {\n      this.$timeout.cancel(this.cancelPromise);\n    }\n  }\n}\n\ncoreModule.service('playlistSrv', PlaylistSrv);\n","import _ from 'lodash';\nimport coreModule from '../../core/core_module';\n\nexport class PlaylistEditCtrl {\n  filteredDashboards: any = [];\n  filteredTags: any = [];\n  searchQuery = '';\n  loading = false;\n  playlist: any = {\n    interval: '5m',\n  };\n\n  playlistItems: any = [];\n  dashboardresult: any = [];\n  tagresult: any = [];\n  navModel: any;\n  isNew: boolean;\n\n  /** @ngInject */\n  constructor(private $scope, private backendSrv, private $location, $route, navModelSrv) {\n    this.navModel = navModelSrv.getNav('dashboards', 'playlists', 0);\n    this.isNew = !$route.current.params.id;\n\n    if ($route.current.params.id) {\n      const playlistId = $route.current.params.id;\n\n      backendSrv.get('/api/playlists/' + playlistId).then(result => {\n        this.playlist = result;\n      });\n\n      backendSrv.get('/api/playlists/' + playlistId + '/items').then(result => {\n        this.playlistItems = result;\n      });\n    }\n  }\n\n  filterFoundPlaylistItems() {\n    this.filteredDashboards = _.reject(this.dashboardresult, playlistItem => {\n      return _.find(this.playlistItems, listPlaylistItem => {\n        return parseInt(listPlaylistItem.value) === playlistItem.id;\n      });\n    });\n\n    this.filteredTags = _.reject(this.tagresult, tag => {\n      return _.find(this.playlistItems, listPlaylistItem => {\n        return listPlaylistItem.value === tag.term;\n      });\n    });\n  }\n\n  addPlaylistItem(playlistItem) {\n    playlistItem.value = playlistItem.id.toString();\n    playlistItem.type = 'dashboard_by_id';\n    playlistItem.order = this.playlistItems.length + 1;\n\n    this.playlistItems.push(playlistItem);\n    this.filterFoundPlaylistItems();\n  }\n\n  addTagPlaylistItem(tag) {\n    const playlistItem: any = {\n      value: tag.term,\n      type: 'dashboard_by_tag',\n      order: this.playlistItems.length + 1,\n      title: tag.term,\n    };\n\n    this.playlistItems.push(playlistItem);\n    this.filterFoundPlaylistItems();\n  }\n\n  removePlaylistItem(playlistItem) {\n    _.remove(this.playlistItems, listedPlaylistItem => {\n      return playlistItem === listedPlaylistItem;\n    });\n    this.filterFoundPlaylistItems();\n  }\n\n  savePlaylist(playlist, playlistItems) {\n    let savePromise;\n\n    playlist.items = playlistItems;\n\n    savePromise = playlist.id\n      ? this.backendSrv.put('/api/playlists/' + playlist.id, playlist)\n      : this.backendSrv.post('/api/playlists', playlist);\n\n    savePromise.then(\n      () => {\n        this.$scope.appEvent('alert-success', ['播放列表已保存', '']);\n        this.$location.path('/playlists');\n      },\n      () => {\n        this.$scope.appEvent('alert-error', ['无法保存播放列表', '']);\n      }\n    );\n  }\n\n  isPlaylistEmpty() {\n    return !this.playlistItems.length;\n  }\n\n  backToList() {\n    this.$location.path('/playlists');\n  }\n\n  searchStarted(promise) {\n    promise.then(data => {\n      this.dashboardresult = data.dashboardResult;\n      this.tagresult = data.tagResult;\n      this.filterFoundPlaylistItems();\n    });\n  }\n\n  movePlaylistItem(playlistItem, offset) {\n    const currentPosition = this.playlistItems.indexOf(playlistItem);\n    const newPosition = currentPosition + offset;\n\n    if (newPosition >= 0 && newPosition < this.playlistItems.length) {\n      this.playlistItems.splice(currentPosition, 1);\n      this.playlistItems.splice(newPosition, 0, playlistItem);\n    }\n  }\n\n  movePlaylistItemUp(playlistItem) {\n    this.movePlaylistItem(playlistItem, -1);\n  }\n\n  movePlaylistItemDown(playlistItem) {\n    this.movePlaylistItem(playlistItem, 1);\n  }\n}\n\ncoreModule.controller('PlaylistEditCtrl', PlaylistEditCtrl);\n","import angular from 'angular';\n\n/** @ngInject */\nfunction grafanaRoutes($routeProvider) {\n  $routeProvider\n    .when('/playlists', {\n      templateUrl: 'public/app/features/playlist/partials/playlists.html',\n      controllerAs: 'ctrl',\n      controller: 'PlaylistsCtrl',\n    })\n    .when('/playlists/create', {\n      templateUrl: 'public/app/features/playlist/partials/playlist.html',\n      controllerAs: 'ctrl',\n      controller: 'PlaylistEditCtrl',\n    })\n    .when('/playlists/edit/:id', {\n      templateUrl: 'public/app/features/playlist/partials/playlist.html',\n      controllerAs: 'ctrl',\n      controller: 'PlaylistEditCtrl',\n    })\n    .when('/playlists/play/:id', {\n      template: '',\n      resolve: {\n        init: function(playlistSrv, $route) {\n          const playlistId = $route.current.params.id;\n          playlistSrv.start(playlistId);\n        },\n      },\n    });\n}\n\nangular.module('grafana.routes').config(grafanaRoutes);\n","import './playlists_ctrl';\nimport './playlist_search';\nimport './playlist_srv';\nimport './playlist_edit_ctrl';\nimport './playlist_routes';\n","import angular from 'angular';\nimport _ from 'lodash';\n\nexport class SnapshotsCtrl {\n  navModel: any;\n  snapshots: any;\n\n  /** @ngInject */\n  constructor(private $rootScope, private backendSrv, navModelSrv) {\n    this.navModel = navModelSrv.getNav('dashboards', 'snapshots', 0);\n    this.backendSrv.get('/api/dashboard/snapshots').then(result => {\n      this.snapshots = result;\n    });\n  }\n\n  removeSnapshotConfirmed(snapshot) {\n    _.remove(this.snapshots, { key: snapshot.key });\n    this.backendSrv.delete('/api/snapshots/' + snapshot.key).then(\n      () => {},\n      () => {\n        this.snapshots.push(snapshot);\n      }\n    );\n  }\n\n  removeSnapshot(snapshot) {\n    this.$rootScope.appEvent('confirm-modal', {\n      title: '删除',\n      text: '确定要删除快照： ' + snapshot.name + '?',\n      yesText: '删除',\n      icon: 'fa-trash',\n      onConfirm: () => {\n        this.removeSnapshotConfirmed(snapshot);\n      },\n    });\n  }\n}\n\nangular.module('grafana.controllers').controller('SnapshotsCtrl', SnapshotsCtrl);\n","import $ from 'jquery';\nimport { coreModule } from 'app/core/core';\n\nconst template = `\n<span class=\"panel-title\">\n  <span class=\"icon-gf panel-alert-icon\"></span>\n  <span class=\"panel-title-text\">{{ctrl.panel.title | interpolateTemplateVars:this}}</span>\n  <span class=\"panel-menu-container dropdown\">\n    <span class=\"fa fa-caret-down panel-menu-toggle\" data-toggle=\"dropdown\"></span>\n    <ul class=\"dropdown-menu dropdown-menu--menu panel-menu\" role=\"menu\">\n      <li>\n        <a ng-click=\"ctrl.addDataQuery(datasource);\">\n          <i class=\"fa fa-cog\"></i> 编辑 <span class=\"dropdown-menu-item-shortcut\">e</span>\n        </a>\n      </li>\n      <li class=\"dropdown-submenu\">\n        <a ng-click=\"ctrl.addDataQuery(datasource);\"><i class=\"fa fa-cube\"></i> Actions</a>\n        <ul class=\"dropdown-menu panel-menu\">\n          <li><a ng-click=\"ctrl.addDataQuery(datasource);\"><i class=\"fa fa-flash\"></i> 添加注释</a></li>\n          <li><a ng-click=\"ctrl.addDataQuery(datasource);\"><i class=\"fa fa-bullseye\"></i> 切换图例</a></li>\n          <li><a ng-click=\"ctrl.addDataQuery(datasource);\"><i class=\"fa fa-download\"></i> 导出CSV</a></li>\n          <li><a ng-click=\"ctrl.addDataQuery(datasource);\"><i class=\"fa fa-eye\"></i> 查看JSON</a></li>\n        </ul>\n      </li>\n      <li><a ng-click=\"ctrl.addDataQuery(datasource);\"><i class=\"fa fa-trash\"></i> 移除</a></li>\n    </ul>\n  </span>\n  <span class=\"panel-time-info\" ng-if=\"ctrl.timeInfo\"><i class=\"fa fa-clock-o\"></i> {{ctrl.timeInfo}}</span>\n</span>`;\n\nfunction renderMenuItem(item, ctrl) {\n  let html = '';\n  let listItemClass = '';\n\n  if (item.divider) {\n    return '<li class=\"divider\"></li>';\n  }\n\n  if (item.submenu) {\n    listItemClass = 'dropdown-submenu';\n  }\n\n  html += `<li class=\"${listItemClass}\"><a `;\n\n  if (item.click) {\n    html += ` ng-click=\"${item.click}\"`;\n  }\n  if (item.href) {\n    html += ` href=\"${item.href}\"`;\n  }\n\n  html += `><i class=\"${item.icon}\"></i>`;\n  html += `<span class=\"dropdown-item-text\">${item.text}</span>`;\n\n  if (item.shortcut) {\n    html += `<span class=\"dropdown-menu-item-shortcut\">${item.shortcut}</span>`;\n  }\n\n  html += `</a>`;\n\n  if (item.submenu) {\n    html += '<ul class=\"dropdown-menu dropdown-menu--menu panel-menu\">';\n    for (const subitem of item.submenu) {\n      html += renderMenuItem(subitem, ctrl);\n    }\n    html += '</ul>';\n  }\n\n  html += `</li>`;\n  return html;\n}\n\nfunction createMenuTemplate(ctrl) {\n  let html = '';\n\n  for (const item of ctrl.getMenu()) {\n    html += renderMenuItem(item, ctrl);\n  }\n\n  return html;\n}\n\n/** @ngInject */\nfunction panelHeader($compile) {\n  return {\n    restrict: 'E',\n    template: template,\n    link: function(scope, elem, attrs) {\n      const menuElem = elem.find('.panel-menu');\n      let menuScope;\n      let isDragged;\n\n      elem.click(function(evt) {\n        const targetClass = evt.target.className;\n\n        // remove existing scope\n        if (menuScope) {\n          menuScope.$destroy();\n        }\n\n        menuScope = scope.$new();\n        const menuHtml = createMenuTemplate(scope.ctrl);\n        menuElem.html(menuHtml);\n        $compile(menuElem)(menuScope);\n\n        if (targetClass.indexOf('panel-title-text') >= 0 || targetClass.indexOf('panel-title') >= 0) {\n          togglePanelMenu(evt);\n        }\n      });\n\n      elem.find('.panel-menu-toggle').click(() => {\n        togglePanelStackPosition();\n      });\n\n      function togglePanelMenu(e) {\n        if (!isDragged) {\n          e.stopPropagation();\n          togglePanelStackPosition();\n          elem.find('[data-toggle=dropdown]').dropdown('toggle');\n        }\n      }\n\n      /**\n       * Hack for adding special class 'dropdown-menu-open' to the panel.\n       * This class sets z-index for panel and prevents menu overlapping.\n       */\n      function togglePanelStackPosition() {\n        const menuOpenClass = 'dropdown-menu-open';\n        const panelGridClass = '.react-grid-item.panel';\n\n        let panelElem = elem\n          .find('[data-toggle=dropdown]')\n          .parentsUntil('.panel')\n          .parent();\n        const menuElem = elem.find('[data-toggle=dropdown]').parent();\n        panelElem = panelElem && panelElem.length ? panelElem[0] : undefined;\n        if (panelElem) {\n          panelElem = $(panelElem);\n          $(panelGridClass).removeClass(menuOpenClass);\n          const state = !menuElem.hasClass('open');\n          panelElem.toggleClass(menuOpenClass, state);\n        }\n      }\n\n      let mouseX, mouseY;\n      elem.mousedown(e => {\n        mouseX = e.pageX;\n        mouseY = e.pageY;\n      });\n\n      elem.mouseup(e => {\n        if (mouseX === e.pageX && mouseY === e.pageY) {\n          isDragged = false;\n        } else {\n          isDragged = true;\n        }\n      });\n    },\n  };\n}\n\ncoreModule.directive('panelHeader', panelHeader);\n","import './snapshot_ctrl';\n","import angular from 'angular';\nimport $ from 'jquery';\nimport Drop from 'tether-drop';\nimport baron from 'baron';\n\nconst module = angular.module('grafana.directives');\n\nconst panelTemplate = `\n  <div class=\"panel-container\">\n    <div class=\"panel-header\" ng-class=\"{'grid-drag-handle': !ctrl.fullscreen}\">\n      <span class=\"panel-info-corner\">\n        <i class=\"fa\"></i>\n        <span class=\"panel-info-corner-inner\"></span>\n      </span>\n\n      <span class=\"panel-loading\" ng-show=\"ctrl.loading\">\n        <i class=\"fa fa-spinner fa-spin\"></i>\n      </span>\n\n      <panel-header class=\"panel-title-container\" panel-ctrl=\"ctrl\"></panel-header>\n    </div>\n\n    <div class=\"panel-content\">\n      <ng-transclude class=\"panel-height-helper\"></ng-transclude>\n    </div>\n  </div>\n\n  <div class=\"panel-full-edit\" ng-if=\"ctrl.editMode\">\n    <div class=\"tabbed-view tabbed-view--panel-edit\">\n      <div class=\"tabbed-view-header\">\n        <h3 class=\"tabbed-view-panel-title\">\n          {{ctrl.pluginName}}\n        </h3>\n\n        <ul class=\"gf-tabs\">\n          <li class=\"gf-tabs-item\" ng-repeat=\"tab in ::ctrl.editorTabs\">\n            <a class=\"gf-tabs-link\" ng-click=\"ctrl.changeTab($index)\" ng-class=\"{active: ctrl.editorTabIndex === $index}\">\n              {{::tab.title}}\n            </a>\n          </li>\n        </ul>\n\n        <button class=\"tabbed-view-close-btn\" ng-click=\"ctrl.exitFullscreen();\">\n          <i class=\"fa fa-remove\"></i>\n        </button>\n      </div>\n\n      <div class=\"tabbed-view-body\">\n        <div ng-repeat=\"tab in ctrl.editorTabs\" ng-if=\"ctrl.editorTabIndex === $index\">\n          <panel-editor-tab editor-tab=\"tab\" ctrl=\"ctrl\" index=\"$index\"></panel-editor-tab>\n        </div>\n      </div>\n    </div>\n  </div>\n`;\n\nmodule.directive('grafanaPanel', function($rootScope, $document, $timeout) {\n  return {\n    restrict: 'E',\n    template: panelTemplate,\n    transclude: true,\n    scope: { ctrl: '=' },\n    link: function(scope, elem) {\n      const panelContainer = elem.find('.panel-container');\n      const panelContent = elem.find('.panel-content');\n      const cornerInfoElem = elem.find('.panel-info-corner');\n      const ctrl = scope.ctrl;\n      let infoDrop;\n      let panelScrollbar;\n\n      // the reason for handling these classes this way is for performance\n      // limit the watchers on panels etc\n      let transparentLastState = false;\n      let lastHasAlertRule = false;\n      let lastAlertState;\n      let hasAlertRule;\n\n      function mouseEnter() {\n        panelContainer.toggleClass('panel-hover-highlight', true);\n        ctrl.dashboard.setPanelFocus(ctrl.panel.id);\n      }\n\n      function mouseLeave() {\n        panelContainer.toggleClass('panel-hover-highlight', false);\n        ctrl.dashboard.setPanelFocus(0);\n      }\n\n      function panelHeightUpdated() {\n        panelContent.css({ height: ctrl.height + 'px' });\n      }\n\n      function resizeScrollableContent() {\n        if (panelScrollbar) {\n          panelScrollbar.update();\n        }\n      }\n\n      // set initial transparency\n      if (ctrl.panel.transparent) {\n        transparentLastState = true;\n        panelContainer.addClass('panel-transparent', true);\n      }\n\n      // update scrollbar after mounting\n      ctrl.events.on('component-did-mount', () => {\n        if (ctrl.__proto__.constructor.scrollable) {\n          const scrollRootClass = 'baron baron__root baron__clipper panel-content--scrollable';\n          const scrollerClass = 'baron__scroller';\n          const scrollBarHTML = `\n            <div class=\"baron__track\">\n              <div class=\"baron__bar\"></div>\n            </div>\n          `;\n\n          const scrollRoot = panelContent;\n          const scroller = panelContent.find(':first').find(':first');\n\n          scrollRoot.addClass(scrollRootClass);\n          $(scrollBarHTML).appendTo(scrollRoot);\n          scroller.addClass(scrollerClass);\n\n          panelScrollbar = baron({\n            root: scrollRoot[0],\n            scroller: scroller[0],\n            bar: '.baron__bar',\n            barOnCls: '_scrollbar',\n            scrollingCls: '_scrolling',\n          });\n\n          panelScrollbar.scroll();\n        }\n      });\n\n      ctrl.events.on('panel-size-changed', () => {\n        ctrl.calculatePanelHeight();\n        panelHeightUpdated();\n        $timeout(() => {\n          resizeScrollableContent();\n          ctrl.render();\n        });\n      });\n\n      // set initial height\n      ctrl.calculatePanelHeight();\n      panelHeightUpdated();\n\n      ctrl.events.on('render', () => {\n        if (transparentLastState !== ctrl.panel.transparent) {\n          panelContainer.toggleClass('panel-transparent', ctrl.panel.transparent === true);\n          transparentLastState = ctrl.panel.transparent;\n        }\n\n        hasAlertRule = ctrl.panel.alert !== undefined;\n        if (lastHasAlertRule !== hasAlertRule) {\n          panelContainer.toggleClass('panel-has-alert', hasAlertRule);\n\n          lastHasAlertRule = hasAlertRule;\n        }\n\n        if (ctrl.alertState) {\n          if (lastAlertState) {\n            panelContainer.removeClass('panel-alert-state--' + lastAlertState);\n          }\n\n          if (ctrl.alertState.state === 'ok' || ctrl.alertState.state === 'alerting') {\n            panelContainer.addClass('panel-alert-state--' + ctrl.alertState.state);\n          }\n\n          lastAlertState = ctrl.alertState.state;\n        } else if (lastAlertState) {\n          panelContainer.removeClass('panel-alert-state--' + lastAlertState);\n          lastAlertState = null;\n        }\n      });\n\n      function updatePanelCornerInfo() {\n        const cornerMode = ctrl.getInfoMode();\n        cornerInfoElem[0].className = 'panel-info-corner panel-info-corner--' + cornerMode;\n\n        if (cornerMode) {\n          if (infoDrop) {\n            infoDrop.destroy();\n          }\n\n          infoDrop = new Drop({\n            target: cornerInfoElem[0],\n            content: function() {\n              return ctrl.getInfoContent({ mode: 'tooltip' });\n            },\n            classes: ctrl.error ? 'drop-error' : 'drop-help',\n            openOn: 'hover',\n            hoverOpenDelay: 100,\n            tetherOptions: {\n              attachment: 'bottom left',\n              targetAttachment: 'top left',\n              constraints: [\n                {\n                  to: 'window',\n                  attachment: 'together',\n                  pin: true,\n                },\n              ],\n            },\n          });\n        }\n      }\n\n      scope.$watchGroup(['ctrl.error', 'ctrl.panel.description'], updatePanelCornerInfo);\n      scope.$watchCollection('ctrl.panel.links', updatePanelCornerInfo);\n\n      cornerInfoElem.on('click', function() {\n        infoDrop.close();\n        scope.$apply(ctrl.openInspector.bind(ctrl));\n      });\n\n      elem.on('mouseenter', mouseEnter);\n      elem.on('mouseleave', mouseLeave);\n\n      scope.$on('$destroy', function() {\n        elem.off();\n        cornerInfoElem.off();\n\n        if (infoDrop) {\n          infoDrop.destroy();\n        }\n\n        if (panelScrollbar) {\n          panelScrollbar.dispose();\n        }\n      });\n    },\n  };\n});\n\nmodule.directive('panelHelpCorner', function($rootScope) {\n  return {\n    restrict: 'E',\n    template: `\n    <span class=\"alert-error panel-error small pointer\" ng-if=\"ctrl.error\" ng-click=\"ctrl.openInspector()\">\n    <span data-placement=\"top\" bs-tooltip=\"ctrl.error\">\n    <i class=\"fa fa-exclamation\"></i><span class=\"panel-error-arrow\"></span>\n    </span>\n    </span>\n    `,\n    link: function(scope, elem) {},\n  };\n});\n","import angular from 'angular';\nimport locationUtil from 'app/core/utils/location_util';\nimport appEvents from 'app/core/app_events';\n\nexport class SoloPanelCtrl {\n  /** @ngInject */\n  constructor($scope, $routeParams, $location, dashboardLoaderSrv, contextSrv, backendSrv) {\n    let panelId;\n\n    $scope.init = function() {\n      contextSrv.sidemenu = false;\n      appEvents.emit('toggle-sidemenu-hidden');\n\n      const params = $location.search();\n      panelId = parseInt(params.panelId);\n\n      $scope.onAppEvent('dashboard-initialized', $scope.initPanelScope);\n\n      // if no uid, redirect to new route based on slug\n      if (!($routeParams.type === 'script' || $routeParams.type === 'snapshot') && !$routeParams.uid) {\n        backendSrv.getDashboardBySlug($routeParams.slug).then(res => {\n          if (res) {\n            const url = locationUtil.stripBaseFromUrl(res.meta.url.replace('/d/', '/d-solo/'));\n            $location.path(url).replace();\n          }\n        });\n        return;\n      }\n\n      dashboardLoaderSrv.loadDashboard($routeParams.type, $routeParams.slug, $routeParams.uid).then(function(result) {\n        result.meta.soloMode = true;\n        $scope.initDashboard(result, $scope);\n      });\n    };\n\n    $scope.initPanelScope = function() {\n      const panelInfo = $scope.dashboard.getPanelInfoById(panelId);\n\n      // fake row ctrl scope\n      $scope.ctrl = {\n        dashboard: $scope.dashboard,\n      };\n\n      $scope.panel = panelInfo.panel;\n      $scope.panel.soloMode = true;\n      $scope.$index = 0;\n\n      if (!$scope.panel) {\n        $scope.appEvent('alert-error', ['未找到面板', '']);\n        return;\n      }\n    };\n\n    $scope.init();\n  }\n}\n\nangular.module('grafana.routes').controller('SoloPanelCtrl', SoloPanelCtrl);\n","import angular from 'angular';\n\nconst directiveModule = angular.module('grafana.directives');\n\n/** @ngInject */\nfunction panelEditorTab(dynamicDirectiveSrv) {\n  return dynamicDirectiveSrv.create({\n    scope: {\n      ctrl: '=',\n      editorTab: '=',\n      index: '=',\n    },\n    directive: scope => {\n      const pluginId = scope.ctrl.pluginId;\n      const tabIndex = scope.index;\n      // create a wrapper for directiveFn\n      // required for metrics tab directive\n      // that is the same for many panels but\n      // given different names in this function\n      const fn = () => scope.editorTab.directiveFn();\n\n      return Promise.resolve({\n        name: `panel-editor-tab-${pluginId}${tabIndex}`,\n        fn: fn,\n      });\n    },\n  });\n}\n\ndirectiveModule.directive('panelEditorTab', panelEditorTab);\n","import angular from 'angular';\n\nconst module = angular.module('grafana.directives');\n\nexport class QueryRowCtrl {\n  collapsedText: string;\n  canCollapse: boolean;\n  getCollapsedText: any;\n  target: any;\n  queryCtrl: any;\n  panelCtrl: any;\n  panel: any;\n  collapsed: any;\n\n  constructor() {\n    this.panelCtrl = this.queryCtrl.panelCtrl;\n    this.target = this.queryCtrl.target;\n    this.panel = this.panelCtrl.panel;\n\n    if (!this.target.refId) {\n      this.target.refId = this.panelCtrl.dashboard.getNextQueryLetter(this.panel);\n    }\n\n    this.toggleCollapse(true);\n    if (this.target.isNew) {\n      delete this.target.isNew;\n      this.toggleCollapse(false);\n    }\n\n    if (this.panel.targets.length < 4) {\n      this.collapsed = false;\n    }\n  }\n\n  toggleHideQuery() {\n    this.target.hide = !this.target.hide;\n    this.panelCtrl.refresh();\n  }\n\n  toggleCollapse(init) {\n    if (!this.canCollapse) {\n      return;\n    }\n\n    if (!this.panelCtrl.__collapsedQueryCache) {\n      this.panelCtrl.__collapsedQueryCache = {};\n    }\n\n    if (init) {\n      this.collapsed = this.panelCtrl.__collapsedQueryCache[this.target.refId] !== false;\n    } else {\n      this.collapsed = !this.collapsed;\n      this.panelCtrl.__collapsedQueryCache[this.target.refId] = this.collapsed;\n    }\n\n    try {\n      this.collapsedText = this.queryCtrl.getCollapsedText();\n    } catch (e) {\n      const err = e.message || e.toString();\n      this.collapsedText = 'Error: ' + err;\n    }\n  }\n\n  toggleEditorMode() {\n    if (this.canCollapse && this.collapsed) {\n      this.collapsed = false;\n    }\n\n    this.queryCtrl.toggleEditorMode();\n  }\n\n  removeQuery() {\n    if (this.panelCtrl.__collapsedQueryCache) {\n      delete this.panelCtrl.__collapsedQueryCache[this.target.refId];\n    }\n\n    this.panelCtrl.removeQuery(this.target);\n  }\n\n  duplicateQuery() {\n    const clone = angular.copy(this.target);\n    this.panelCtrl.addQuery(clone);\n  }\n\n  moveQuery(direction) {\n    this.panelCtrl.moveQuery(this.target, direction);\n  }\n}\n\n/** @ngInject */\nfunction queryEditorRowDirective() {\n  return {\n    restrict: 'E',\n    controller: QueryRowCtrl,\n    bindToController: true,\n    controllerAs: 'ctrl',\n    templateUrl: 'public/app/features/panel/partials/query_editor_row.html',\n    transclude: true,\n    scope: {\n      queryCtrl: '=',\n      canCollapse: '=',\n      hasTextEditMode: '=',\n    },\n  };\n}\n\nmodule.directive('queryEditorRow', queryEditorRowDirective);\n","import _ from 'lodash';\nimport appEvents from 'app/core/app_events';\nimport { coreModule, JsonExplorer } from 'app/core/core';\n\nconst template = `\n<div class=\"query-troubleshooter\" ng-if=\"ctrl.isOpen\">\n  <div class=\"query-troubleshooter__header\">\n    <a class=\"pointer\" ng-click=\"ctrl.toggleMocking()\">模拟响应</a>\n    <a class=\"pointer\" ng-click=\"ctrl.toggleExpand()\" ng-hide=\"ctrl.allNodesExpanded\">\n      <i class=\"fa fa-plus-square-o\"></i> 展开全部\n    </a>\n    <a class=\"pointer\" ng-click=\"ctrl.toggleExpand()\" ng-show=\"ctrl.allNodesExpanded\">\n      <i class=\"fa fa-minus-square-o\"></i> 折叠全部\n    </a>\n    <a class=\"pointer\" clipboard-button=\"ctrl.getClipboardText()\"><i class=\"fa fa-clipboard\"></i> 复制到剪贴板</a>\n  </div>\n  <div class=\"query-troubleshooter__body\" ng-hide=\"ctrl.isMocking\">\n    <i class=\"fa fa-spinner fa-spin\" ng-show=\"ctrl.isLoading\"></i>\n    <div class=\"query-troubleshooter-json\"></div>\n  </div>\n  <div class=\"query-troubleshooter__body\" ng-show=\"ctrl.isMocking\">\n    <div class=\"gf-form p-l-1 gf-form--v-stretch\">\n\t\t\t<textarea class=\"gf-form-input\" style=\"width: 95%\" rows=\"10\" ng-model=\"ctrl.mockedResponse\"  placeholder=\"JSON\"></textarea>\n    </div>\n  </div>\n</div>\n`;\n\nexport class QueryTroubleshooterCtrl {\n  isOpen: any;\n  isLoading: boolean;\n  showResponse: boolean;\n  panelCtrl: any;\n  renderJsonExplorer: (data) => void;\n  onRequestErrorEventListener: any;\n  onRequestResponseEventListener: any;\n  hasError: boolean;\n  allNodesExpanded: boolean;\n  isMocking: boolean;\n  mockedResponse: string;\n  jsonExplorer: JsonExplorer;\n\n  /** @ngInject */\n  constructor($scope, private $timeout) {\n    this.onRequestErrorEventListener = this.onRequestError.bind(this);\n    this.onRequestResponseEventListener = this.onRequestResponse.bind(this);\n\n    appEvents.on('ds-request-response', this.onRequestResponseEventListener);\n    appEvents.on('ds-request-error', this.onRequestErrorEventListener);\n\n    $scope.$on('$destroy', this.removeEventsListeners.bind(this));\n    $scope.$watch('ctrl.isOpen', this.stateChanged.bind(this));\n  }\n\n  removeEventsListeners() {\n    appEvents.off('ds-request-response', this.onRequestResponseEventListener);\n    appEvents.off('ds-request-error', this.onRequestErrorEventListener);\n  }\n\n  toggleMocking() {\n    this.isMocking = !this.isMocking;\n  }\n\n  onRequestError(err) {\n    // ignore if closed\n    if (!this.isOpen) {\n      return;\n    }\n\n    this.isOpen = true;\n    this.hasError = true;\n    this.onRequestResponse(err);\n  }\n\n  stateChanged() {\n    if (this.isOpen) {\n      this.panelCtrl.refresh();\n      this.isLoading = true;\n    }\n  }\n\n  getClipboardText(): string {\n    if (this.jsonExplorer) {\n      return JSON.stringify(this.jsonExplorer.json, null, 2);\n    }\n    return '';\n  }\n\n  handleMocking(data) {\n    let mockedData;\n    try {\n      mockedData = JSON.parse(this.mockedResponse);\n    } catch (err) {\n      appEvents.emit('alert-error', ['无法解析模拟的响应']);\n      return;\n    }\n\n    data.data = mockedData;\n  }\n\n  onRequestResponse(data) {\n    // ignore if closed\n    if (!this.isOpen) {\n      return;\n    }\n\n    if (this.isMocking) {\n      this.handleMocking(data);\n      return;\n    }\n\n    this.isLoading = false;\n    data = _.cloneDeep(data);\n\n    if (data.headers) {\n      delete data.headers;\n    }\n\n    if (data.config) {\n      data.request = data.config;\n      delete data.config;\n      delete data.request.transformRequest;\n      delete data.request.transformResponse;\n      delete data.request.paramSerializer;\n      delete data.request.jsonpCallbackParam;\n      delete data.request.headers;\n      delete data.request.requestId;\n      delete data.request.inspect;\n      delete data.request.retry;\n      delete data.request.timeout;\n    }\n\n    if (data.data) {\n      data.response = data.data;\n\n      if (data.status === 200) {\n        // if we are in error state, assume we automatically opened\n        // and auto close it again\n        if (this.hasError) {\n          this.hasError = false;\n          this.isOpen = false;\n        }\n      }\n\n      delete data.data;\n      delete data.status;\n      delete data.statusText;\n      delete data.$$config;\n    }\n\n    this.$timeout(_.partial(this.renderJsonExplorer, data));\n  }\n\n  toggleExpand(depth) {\n    if (this.jsonExplorer) {\n      this.allNodesExpanded = !this.allNodesExpanded;\n      this.jsonExplorer.openAtDepth(this.allNodesExpanded ? 20 : 1);\n    }\n  }\n}\n\nexport function queryTroubleshooter() {\n  return {\n    restrict: 'E',\n    template: template,\n    controller: QueryTroubleshooterCtrl,\n    bindToController: true,\n    controllerAs: 'ctrl',\n    scope: {\n      panelCtrl: '=',\n      isOpen: '=',\n    },\n    link: function(scope, elem, attrs, ctrl) {\n      ctrl.renderJsonExplorer = function(data) {\n        const jsonElem = elem.find('.query-troubleshooter-json');\n\n        ctrl.jsonExplorer = new JsonExplorer(data, 3, {\n          animateOpen: true,\n        });\n\n        const html = ctrl.jsonExplorer.render(true);\n        jsonElem.html(html);\n      };\n    },\n  };\n}\n\ncoreModule.directive('queryTroubleshooter', queryTroubleshooter);\n","import './panel_header';\nimport './panel_directive';\nimport './solo_panel_ctrl';\nimport './query_ctrl';\nimport './panel_editor_tab';\nimport './query_editor_row';\nimport './query_troubleshooter';\n","import config from 'app/core/config';\nimport coreModule from 'app/core/core_module';\nimport Remarkable from 'remarkable';\nimport _ from 'lodash';\n\nexport class OrgUsersCtrl {\n  unfiltered: any;\n  users: any;\n  pendingInvites: any;\n  editor: any;\n  navModel: any;\n  externalUserMngLinkUrl: string;\n  externalUserMngLinkName: string;\n  externalUserMngInfo: string;\n  canInvite: boolean;\n  searchQuery: string;\n  showInvites: boolean;\n\n  /** @ngInject */\n  constructor(private $scope, private backendSrv, navModelSrv, $sce) {\n    this.navModel = navModelSrv.getNav('cfg', 'users', 0);\n\n    this.get();\n    this.externalUserMngLinkUrl = config.externalUserMngLinkUrl;\n    this.externalUserMngLinkName = config.externalUserMngLinkName;\n    this.canInvite = !config.disableLoginForm && !config.externalUserMngLinkName;\n\n    // render external user management info markdown\n    if (config.externalUserMngInfo) {\n      this.externalUserMngInfo = new Remarkable({\n        linkTarget: '__blank',\n      }).render(config.externalUserMngInfo);\n    }\n  }\n\n  get() {\n    this.backendSrv.get('/api/org/users').then(users => {\n      this.users = users;\n      this.unfiltered = users;\n    });\n    this.backendSrv.get('/api/org/invites').then(pendingInvites => {\n      this.pendingInvites = pendingInvites;\n    });\n  }\n\n  onQueryUpdated() {\n    const regex = new RegExp(this.searchQuery, 'ig');\n    this.users = _.filter(this.unfiltered, item => {\n      return regex.test(item.email) || regex.test(item.login);\n    });\n  }\n\n  updateOrgUser(user) {\n    this.backendSrv.patch('/api/org/users/' + user.userId, user);\n  }\n\n  removeUser(user) {\n    this.$scope.appEvent('confirm-modal', {\n      title: '删除',\n      text: '您确定要删除用户 ' + user.login + '?',\n      yesText: '删除',\n      icon: 'fa-warning',\n      onConfirm: () => {\n        this.removeUserConfirmed(user);\n      },\n    });\n  }\n\n  removeUserConfirmed(user) {\n    this.backendSrv.delete('/api/org/users/' + user.userId).then(this.get.bind(this));\n  }\n\n  revokeInvite(invite, evt) {\n    evt.stopPropagation();\n    this.backendSrv.patch('/api/org/invites/' + invite.code + '/revoke').then(this.get.bind(this));\n  }\n\n  copyInviteToClipboard(evt) {\n    evt.stopPropagation();\n  }\n\n  getInviteUrl(invite) {\n    return invite.url;\n  }\n}\n\ncoreModule.controller('OrgUsersCtrl', OrgUsersCtrl);\n","import config from 'app/core/config';\nimport { coreModule } from 'app/core/core';\n\nexport class ProfileCtrl {\n  user: any;\n  old_theme: any;\n  teams: any = [];\n  orgs: any = [];\n  userForm: any;\n  showTeamsList = false;\n  showOrgsList = false;\n  readonlyLoginFields = config.disableLoginForm;\n  navModel: any;\n\n  /** @ngInject */\n  constructor(private backendSrv, private contextSrv, private $location, navModelSrv) {\n    this.getUser();\n    this.getUserTeams();\n    this.getUserOrgs();\n    this.navModel = navModelSrv.getNav('profile', 'profile-settings', 0);\n  }\n\n  getUser() {\n    this.backendSrv.get('/api/user').then(user => {\n      this.user = user;\n      this.user.theme = user.theme || 'dark';\n    });\n  }\n\n  getUserTeams() {\n    this.backendSrv.get('/api/user/teams').then(teams => {\n      this.teams = teams;\n      this.showTeamsList = this.teams.length > 0;\n    });\n  }\n\n  getUserOrgs() {\n    this.backendSrv.get('/api/user/orgs').then(orgs => {\n      this.orgs = orgs;\n      this.showOrgsList = orgs.length > 1;\n    });\n  }\n\n  setUsingOrg(org) {\n    this.backendSrv.post('/api/user/using/' + org.orgId).then(() => {\n      window.location.href = config.appSubUrl + '/profile';\n    });\n  }\n\n  update() {\n    if (!this.userForm.$valid) {\n      return;\n    }\n\n    this.backendSrv.put('/api/user/', this.user).then(() => {\n      this.contextSrv.user.name = this.user.name || this.user.login;\n      if (this.old_theme !== this.user.theme) {\n        window.location.href = config.appSubUrl + this.$location.path();\n      }\n    });\n  }\n}\n\ncoreModule.controller('ProfileCtrl', ProfileCtrl);\n","import angular from 'angular';\nimport config from 'app/core/config';\n\nexport class SelectOrgCtrl {\n  /** @ngInject */\n  constructor($scope, backendSrv, contextSrv) {\n    contextSrv.sidemenu = false;\n\n    $scope.navModel = {\n      main: {\n        icon: 'gicon gicon-branding',\n        subTitle: '偏好',\n        text: '选择活跃组织',\n      },\n    };\n\n    $scope.init = function() {\n      $scope.getUserOrgs();\n    };\n\n    $scope.getUserOrgs = function() {\n      backendSrv.get('/api/user/orgs').then(function(orgs) {\n        $scope.orgs = orgs;\n      });\n    };\n\n    $scope.setUsingOrg = function(org) {\n      backendSrv.post('/api/user/using/' + org.orgId).then(function() {\n        window.location.href = config.appSubUrl + '/';\n      });\n    };\n\n    $scope.init();\n  }\n}\n\nangular.module('grafana.controllers').controller('SelectOrgCtrl', SelectOrgCtrl);\n","import angular from 'angular';\nimport config from 'app/core/config';\n\nexport class NewOrgCtrl {\n  /** @ngInject */\n  constructor($scope, $http, backendSrv, navModelSrv) {\n    $scope.navModel = navModelSrv.getNav('cfg', 'admin', 'global-orgs', 1);\n    $scope.newOrg = { name: '' };\n\n    $scope.createOrg = function() {\n      backendSrv.post('/api/orgs/', $scope.newOrg).then(function(result) {\n        backendSrv.post('/api/user/using/' + result.orgId).then(function() {\n          window.location.href = config.appSubUrl + '/org';\n        });\n      });\n    };\n  }\n}\n\nangular.module('grafana.controllers').controller('NewOrgCtrl', NewOrgCtrl);\n","import angular from 'angular';\nimport config from 'app/core/config';\n\nexport class ChangePasswordCtrl {\n  /** @ngInject */\n  constructor($scope, backendSrv, $location, navModelSrv) {\n    $scope.command = {};\n    $scope.authProxyEnabled = config.authProxyEnabled;\n    $scope.ldapEnabled = config.ldapEnabled;\n    $scope.navModel = navModelSrv.getNav('profile', 'change-password', 0);\n\n    $scope.changePassword = function() {\n      if (!$scope.userForm.$valid) {\n        return;\n      }\n\n      if ($scope.command.newPassword !== $scope.command.confirmNew) {\n        $scope.appEvent('alert-warning', ['新旧密码不匹配', '']);\n        return;\n      }\n\n      backendSrv.put('/api/user/password', $scope.command).then(function() {\n        $location.path('profile');\n      });\n    };\n  }\n}\n\nangular.module('grafana.controllers').controller('ChangePasswordCtrl', ChangePasswordCtrl);\n","import coreModule from 'app/core/core_module';\n\nexport class UserInviteCtrl {\n  navModel: any;\n  invite: any;\n  inviteForm: any;\n\n  /** @ngInject */\n  constructor(private backendSrv, navModelSrv, private $location) {\n    this.navModel = navModelSrv.getNav('cfg', 'users', 0);\n\n    this.invite = {\n      name: '',\n      email: '',\n      role: 'Editor',\n      sendEmail: true,\n    };\n  }\n\n  sendInvite() {\n    if (!this.inviteForm.$valid) {\n      return;\n    }\n\n    return this.backendSrv.post('/api/org/invites', this.invite).then(() => {\n      this.$location.path('org/users/');\n    });\n  }\n}\n\ncoreModule.controller('UserInviteCtrl', UserInviteCtrl);\n","import coreModule from 'app/core/core_module';\n\nexport default class CreateTeamCtrl {\n  name: string;\n  email: string;\n  navModel: any;\n\n  /** @ngInject */\n  constructor(private backendSrv, private $location, navModelSrv) {\n    this.navModel = navModelSrv.getNav('cfg', 'teams', 0);\n  }\n\n  create() {\n    const payload = {\n      name: this.name,\n      email: this.email,\n    };\n    this.backendSrv.post('/api/teams', payload).then(result => {\n      if (result.teamId) {\n        this.$location.path('/org/teams/edit/' + result.teamId);\n      }\n    });\n  }\n}\n\ncoreModule.controller('CreateTeamCtrl', CreateTeamCtrl);\n","import angular from 'angular';\n\nexport class OrgApiKeysCtrl {\n  /** @ngInject */\n  constructor($scope, $http, backendSrv, navModelSrv) {\n    $scope.navModel = navModelSrv.getNav('cfg', 'apikeys', 0);\n\n    $scope.roleTypes = [{text: '观看者', value: 'Viewer'}, {text: '编辑者', value: 'Editor'},{text: '管理员', value: 'Admin'}];\n    $scope.token = { role: 'Viewer' };\n\n    $scope.init = function() {\n      $scope.getTokens();\n    };\n\n    $scope.getTokens = function() {\n      backendSrv.get('/api/auth/keys').then(function(tokens) {\n        angular.forEach(tokens, (obj, index) => {\n          angular.forEach($scope.roleTypes, (obj2, index2) => {\n            if (obj.role === obj2.value) {\n              tokens[index].roleText = obj2.text;\n            }\n          });\n        });\n        $scope.tokens = tokens;\n      });\n    };\n\n    $scope.removeToken = function(id) {\n      backendSrv.delete('/api/auth/keys/' + id).then($scope.getTokens);\n    };\n\n    $scope.addToken = function() {\n      backendSrv.post('/api/auth/keys', $scope.token).then(function(result) {\n        const modalScope = $scope.$new(true);\n        modalScope.key = result.key;\n        modalScope.rootPath = window.location.origin + $scope.$root.appSubUrl;\n\n        $scope.appEvent('show-modal', {\n          src: 'public/app/features/org/partials/apikeyModal.html',\n          scope: modalScope,\n        });\n\n        $scope.getTokens();\n      });\n    };\n\n    $scope.init();\n  }\n}\n\nangular.module('grafana.controllers').controller('OrgApiKeysCtrl', OrgApiKeysCtrl);\n","import angular from 'angular';\n\nexport class OrgDetailsCtrl {\n  /** @ngInject */\n  constructor($scope, $http, backendSrv, contextSrv, navModelSrv) {\n    $scope.init = function() {\n      $scope.getOrgInfo();\n      $scope.navModel = navModelSrv.getNav('cfg', 'org-settings', 0);\n    };\n\n    $scope.getOrgInfo = function() {\n      backendSrv.get('/api/org').then(function(org) {\n        $scope.org = org;\n        $scope.address = org.address;\n        contextSrv.user.orgName = org.name;\n      });\n    };\n\n    $scope.update = function() {\n      if (!$scope.orgForm.$valid) {\n        return;\n      }\n      const data = { name: $scope.org.name };\n      backendSrv.put('/api/org', data).then($scope.getOrgInfo);\n    };\n\n    $scope.updateAddress = function() {\n      if (!$scope.addressForm.$valid) {\n        return;\n      }\n      backendSrv.put('/api/org/address', $scope.address).then($scope.getOrgInfo);\n    };\n\n    $scope.init();\n  }\n}\n\nangular.module('grafana.controllers').controller('OrgDetailsCtrl', OrgDetailsCtrl);\n","import config from 'app/core/config';\nimport coreModule from 'app/core/core_module';\n\nexport class PrefsControlCtrl {\n  prefs: any;\n  oldTheme: any;\n  prefsForm: any;\n  mode: string;\n\n  timezones: any = [\n    { value: '', text: '默认' },\n    { value: 'browser', text: '本地浏览器时间' },\n    { value: 'utc', text: 'UTC' },\n  ];\n  themes: any = [{ value: '', text: '默认' }, { value: 'dark', text: 'Dark' }, { value: 'light', text: 'Light' }];\n\n  /** @ngInject */\n  constructor(private backendSrv, private $location) {}\n\n  $onInit() {\n    return this.backendSrv.get(`/api/${this.mode}/preferences`).then(prefs => {\n      this.prefs = prefs;\n      this.oldTheme = prefs.theme;\n    });\n  }\n\n  updatePrefs() {\n    if (!this.prefsForm.$valid) {\n      return;\n    }\n\n    const cmd = {\n      theme: this.prefs.theme,\n      timezone: this.prefs.timezone,\n      homeDashboardId: this.prefs.homeDashboardId,\n    };\n\n    this.backendSrv.put(`/api/${this.mode}/preferences`, cmd).then(() => {\n      window.location.href = config.appSubUrl + this.$location.path();\n    });\n  }\n}\n\nconst template = `\n<form name=\"ctrl.prefsForm\" class=\"section gf-form-group\">\n  <h3 class=\"page-heading\">偏好</h3>\n\n  <div class=\"gf-form\">\n    <span class=\"gf-form-label width-11\">UI主题</span>\n    <div class=\"gf-form-select-wrapper max-width-20\">\n      <select class=\"gf-form-input\" ng-model=\"ctrl.prefs.theme\" ng-options=\"f.value as f.text for f in ctrl.themes\"></select>\n    </div>\n  </div>\n\n  <div class=\"gf-form\">\n    <span class=\"gf-form-label width-11\">\n      主页仪表盘\n      <info-popover mode=\"right-normal\">\n        找不到你想要的仪表板？ 首先加注星标收藏，然后它将出现在此下拉框中。\n      </info-popover>\n    </span>\n    <dashboard-selector class=\"gf-form-select-wrapper max-width-20\" model=\"ctrl.prefs.homeDashboardId\">\n    </dashboard-selector>\n  </div>\n\n  <div class=\"gf-form\">\n    <label class=\"gf-form-label width-11\">时区</label>\n    <div class=\"gf-form-select-wrapper max-width-20\">\n      <select class=\"gf-form-input\" ng-model=\"ctrl.prefs.timezone\" ng-options=\"f.value as f.text for f in ctrl.timezones\"></select>\n    </div>\n  </div>\n\n  <div class=\"gf-form-button-row\">\n    <button type=\"submit\" class=\"btn btn-success\" ng-click=\"ctrl.updatePrefs()\">保存</button>\n  </div>\n</form>\n`;\n\nexport function prefsControlDirective() {\n  return {\n    restrict: 'E',\n    controller: PrefsControlCtrl,\n    bindToController: true,\n    controllerAs: 'ctrl',\n    template: template,\n    scope: {\n      mode: '@',\n    },\n  };\n}\n\ncoreModule.directive('prefsControl', prefsControlDirective);\n","import './org_users_ctrl';\nimport './profile_ctrl';\nimport './org_users_ctrl';\nimport './select_org_ctrl';\nimport './change_password_ctrl';\nimport './new_org_ctrl';\nimport './user_invite_ctrl';\nimport './create_team_ctrl';\nimport './org_api_keys_ctrl';\nimport './org_details_ctrl';\nimport './prefs_control';\n","export default class AdminListUsersCtrl {\n  users: any;\n  pages = [];\n  perPage = 50;\n  page = 1;\n  totalPages: number;\n  showPaging = false;\n  query: any;\n  navModel: any;\n\n  /** @ngInject */\n  constructor(private $scope, private backendSrv, navModelSrv) {\n    this.navModel = navModelSrv.getNav('cfg', 'admin', 'global-users', 1);\n    this.query = '';\n    this.getUsers();\n  }\n\n  getUsers() {\n    this.backendSrv\n      .get(`/api/users/search?perpage=${this.perPage}&page=${this.page}&query=${this.query}`)\n      .then(result => {\n        this.users = result.users;\n        this.page = result.page;\n        this.perPage = result.perPage;\n        this.totalPages = Math.ceil(result.totalCount / result.perPage);\n        this.showPaging = this.totalPages > 1;\n        this.pages = [];\n\n        for (let i = 1; i < this.totalPages + 1; i++) {\n          this.pages.push({ page: i, current: i === this.page });\n        }\n      });\n  }\n\n  navigateToPage(page) {\n    this.page = page.page;\n    this.getUsers();\n  }\n\n  deleteUser(user) {\n    this.$scope.appEvent('confirm-modal', {\n      title: '删除',\n      text: '确定希望删除 ' + user.login + '?',\n      icon: 'fa-trash',\n      yesText: '删除',\n      onConfirm: () => {\n        this.backendSrv.delete('/api/admin/users/' + user.id).then(() => {\n          this.getUsers();\n        });\n      },\n    });\n  }\n}\n","import angular from 'angular';\n\nexport class AdminListOrgsCtrl {\n  /** @ngInject */\n  constructor($scope, backendSrv, navModelSrv) {\n    $scope.init = function() {\n      $scope.navModel = navModelSrv.getNav('cfg', 'admin', 'global-orgs', 1);\n      $scope.getOrgs();\n    };\n\n    $scope.getOrgs = function() {\n      backendSrv.get('/api/orgs').then(function(orgs) {\n        $scope.orgs = orgs;\n      });\n    };\n\n    $scope.deleteOrg = function(org) {\n      $scope.appEvent('confirm-modal', {\n        title: '删除',\n        text: '希望删除组织 ' + org.name + '?',\n        text2: '该组织下的所有仪表盘也会被删除!',\n        icon: 'fa-trash',\n        yesText: '删除',\n        onConfirm: function() {\n          backendSrv.delete('/api/orgs/' + org.id).then(function() {\n            $scope.getOrgs();\n          });\n        },\n      });\n    };\n\n    $scope.init();\n  }\n}\n\nangular.module('grafana.controllers').controller('AdminListOrgsCtrl', AdminListOrgsCtrl);\n","import angular from 'angular';\n\nexport class AdminEditOrgCtrl {\n  /** @ngInject */\n  constructor($scope, $routeParams, backendSrv, $location, navModelSrv) {\n    $scope.init = function() {\n      $scope.navModel = navModelSrv.getNav('cfg', 'admin', 'global-orgs', 1);\n\n      if ($routeParams.id) {\n        $scope.getOrg($routeParams.id);\n        $scope.getOrgUsers($routeParams.id);\n      }\n    };\n\n    $scope.getOrg = function(id) {\n      backendSrv.get('/api/orgs/' + id).then(function(org) {\n        $scope.org = org;\n      });\n    };\n\n    $scope.getOrgUsers = function(id) {\n      backendSrv.get('/api/orgs/' + id + '/users').then(function(orgUsers) {\n        $scope.orgUsers = orgUsers;\n      });\n    };\n\n    $scope.update = function() {\n      if (!$scope.orgDetailsForm.$valid) {\n        return;\n      }\n\n      backendSrv.put('/api/orgs/' + $scope.org.id, $scope.org).then(function() {\n        $location.path('/admin/orgs');\n      });\n    };\n\n    $scope.updateOrgUser = function(orgUser) {\n      backendSrv.patch('/api/orgs/' + orgUser.orgId + '/users/' + orgUser.userId, orgUser);\n    };\n\n    $scope.removeOrgUser = function(orgUser) {\n      backendSrv.delete('/api/orgs/' + orgUser.orgId + '/users/' + orgUser.userId).then(function() {\n        $scope.getOrgUsers($scope.org.id);\n      });\n    };\n\n    $scope.init();\n  }\n}\n\nangular.module('grafana.controllers').controller('AdminEditOrgCtrl', AdminEditOrgCtrl);\n","import angular from 'angular';\nimport _ from 'lodash';\n\nexport class AdminEditUserCtrl {\n  /** @ngInject */\n  constructor($scope, $routeParams, backendSrv, $location, navModelSrv) {\n    $scope.user = {};\n    $scope.newOrg = { name: '', role: 'Editor' };\n    $scope.permissions = {};\n    $scope.navModel = navModelSrv.getNav('cfg', 'admin', 'global-users', 1);\n\n    $scope.init = function() {\n      if ($routeParams.id) {\n        $scope.getUser($routeParams.id);\n        $scope.getUserOrgs($routeParams.id);\n      }\n    };\n\n    $scope.getUser = function(id) {\n      backendSrv.get('/api/users/' + id).then(function(user) {\n        $scope.user = user;\n        $scope.user_id = id;\n        $scope.permissions.isGrafanaAdmin = user.isGrafanaAdmin;\n      });\n    };\n\n    $scope.setPassword = function() {\n      if (!$scope.passwordForm.$valid) {\n        return;\n      }\n\n      const payload = { password: $scope.password };\n      backendSrv.put('/api/admin/users/' + $scope.user_id + '/password', payload).then(function() {\n        $location.path('/admin/users');\n      });\n    };\n\n    $scope.updatePermissions = function() {\n      const payload = $scope.permissions;\n\n      backendSrv.put('/api/admin/users/' + $scope.user_id + '/permissions', payload).then(function() {\n        $location.path('/admin/users');\n      });\n    };\n\n    $scope.create = function() {\n      if (!$scope.userForm.$valid) {\n        return;\n      }\n\n      backendSrv.post('/api/admin/users', $scope.user).then(function() {\n        $location.path('/admin/users');\n      });\n    };\n\n    $scope.getUserOrgs = function(id) {\n      backendSrv.get('/api/users/' + id + '/orgs').then(function(orgs) {\n        $scope.orgs = orgs;\n      });\n    };\n\n    $scope.update = function() {\n      if (!$scope.userForm.$valid) {\n        return;\n      }\n\n      backendSrv.put('/api/users/' + $scope.user_id, $scope.user).then(function() {\n        $location.path('/admin/users');\n      });\n    };\n\n    $scope.updateOrgUser = function(orgUser) {\n      backendSrv.patch('/api/orgs/' + orgUser.orgId + '/users/' + $scope.user_id, orgUser).then(function() {});\n    };\n\n    $scope.removeOrgUser = function(orgUser) {\n      backendSrv.delete('/api/orgs/' + orgUser.orgId + '/users/' + $scope.user_id).then(function() {\n        $scope.getUser($scope.user_id);\n        $scope.getUserOrgs($scope.user_id);\n      });\n    };\n\n    $scope.orgsSearchCache = [];\n\n    $scope.searchOrgs = function(queryStr, callback) {\n      if ($scope.orgsSearchCache.length > 0) {\n        callback(_.map($scope.orgsSearchCache, 'name'));\n        return;\n      }\n\n      backendSrv.get('/api/orgs', { query: '' }).then(function(result) {\n        $scope.orgsSearchCache = result;\n        callback(_.map(result, 'name'));\n      });\n    };\n\n    $scope.addOrgUser = function() {\n      if (!$scope.addOrgForm.$valid) {\n        return;\n      }\n\n      const orgInfo = _.find($scope.orgsSearchCache, {\n        name: $scope.newOrg.name,\n      });\n      if (!orgInfo) {\n        return;\n      }\n\n      $scope.newOrg.loginOrEmail = $scope.user.login;\n\n      backendSrv.post('/api/orgs/' + orgInfo.id + '/users/', $scope.newOrg).then(function() {\n        $scope.getUser($scope.user_id);\n        $scope.getUserOrgs($scope.user_id);\n      });\n    };\n\n    $scope.init();\n  }\n}\n\nangular.module('grafana.controllers').controller('AdminEditUserCtrl', AdminEditUserCtrl);\n","import AdminListUsersCtrl from './admin_list_users_ctrl';\nimport './admin_list_orgs_ctrl';\nimport './admin_edit_org_ctrl';\nimport './admin_edit_user_ctrl';\n\nimport coreModule from 'app/core/core_module';\n\nclass AdminSettingsCtrl {\n  navModel: any;\n\n  /** @ngInject */\n  constructor($scope, backendSrv, navModelSrv) {\n    this.navModel = navModelSrv.getNav('cfg', 'admin', 'server-settings', 1);\n\n    backendSrv.get('/api/admin/settings').then(function(settings) {\n      $scope.settings = settings;\n    });\n  }\n}\n\nclass AdminHomeCtrl {\n  navModel: any;\n\n  /** @ngInject */\n  constructor(navModelSrv) {\n    this.navModel = navModelSrv.getNav('cfg', 'admin', 1);\n  }\n}\n\nexport class AdminStatsCtrl {\n  stats: any;\n  navModel: any;\n\n  /** @ngInject */\n  constructor(backendSrv: any, navModelSrv) {\n    this.navModel = navModelSrv.getNav('cfg', 'admin', 'server-stats', 1);\n\n    backendSrv.get('/api/admin/stats').then(stats => {\n      this.stats = stats;\n    });\n  }\n}\n\ncoreModule.controller('AdminSettingsCtrl', AdminSettingsCtrl);\ncoreModule.controller('AdminHomeCtrl', AdminHomeCtrl);\ncoreModule.controller('AdminStatsCtrl', AdminStatsCtrl);\ncoreModule.controller('AdminListUsersCtrl', AdminListUsersCtrl);\n","import { coreModule } from 'app/core/core';\n\nexport class AlertNotificationsListCtrl {\n  notifications: any;\n  navModel: any;\n\n  /** @ngInject */\n  constructor(private backendSrv, navModelSrv) {\n    this.loadNotifications();\n    this.navModel = navModelSrv.getNav('alerting', 'channels', 0);\n  }\n\n  loadNotifications() {\n    this.backendSrv.get(`/api/alert-notifications`).then(result => {\n      this.notifications = result;\n    });\n  }\n\n  deleteNotification(id) {\n    this.backendSrv.delete(`/api/alert-notifications/${id}`).then(() => {\n      this.notifications = this.notifications.filter(notification => {\n        return notification.id !== id;\n      });\n    });\n  }\n}\n\ncoreModule.controller('AlertNotificationsListCtrl', AlertNotificationsListCtrl);\n","import _ from 'lodash';\nimport { appEvents, coreModule } from 'app/core/core';\n\nexport class AlertNotificationEditCtrl {\n  theForm: any;\n  navModel: any;\n  testSeverity = 'critical';\n  notifiers: any;\n  notifierTemplateId: string;\n  isNew: boolean;\n  model: any;\n  defaults: any = {\n    type: 'email',\n    settings: {\n      httpMethod: 'POST',\n      autoResolve: true,\n      uploadImage: true,\n    },\n    isDefault: false,\n  };\n\n  /** @ngInject */\n  constructor(private $routeParams, private backendSrv, private $location, private $templateCache, navModelSrv) {\n    this.navModel = navModelSrv.getNav('alerting', 'channels', 0);\n    this.isNew = !this.$routeParams.id;\n\n    this.backendSrv\n      .get(`/api/alert-notifiers`)\n      .then(notifiers => {\n        this.notifiers = notifiers;\n\n        // add option templates\n        for (const notifier of this.notifiers) {\n          this.$templateCache.put(this.getNotifierTemplateId(notifier.type), notifier.optionsTemplate);\n        }\n\n        if (!this.$routeParams.id) {\n          this.navModel.breadcrumbs.push({ text: 'New channel' });\n          this.navModel.node = { text: 'New channel' };\n          return _.defaults(this.model, this.defaults);\n        }\n\n        return this.backendSrv.get(`/api/alert-notifications/${this.$routeParams.id}`).then(result => {\n          this.navModel.breadcrumbs.push({ text: result.name });\n          this.navModel.node = { text: result.name };\n          result.settings = _.defaults(result.settings, this.defaults.settings);\n          return result;\n        });\n      })\n      .then(model => {\n        this.model = model;\n        this.notifierTemplateId = this.getNotifierTemplateId(this.model.type);\n      });\n  }\n\n  save() {\n    if (!this.theForm.$valid) {\n      return;\n    }\n\n    if (this.model.id) {\n      this.backendSrv\n        .put(`/api/alert-notifications/${this.model.id}`, this.model)\n        .then(res => {\n          this.model = res;\n          appEvents.emit('alert-success', ['通知已更新', '']);\n        })\n        .catch(err => {\n          if (err.data && err.data.error) {\n            appEvents.emit('alert-error', [err.data.error]);\n          }\n        });\n    } else {\n      this.backendSrv\n        .post(`/api/alert-notifications`, this.model)\n        .then(res => {\n          appEvents.emit('alert-success', ['通知已创建', '']);\n          this.$location.path('alerting/notifications');\n        })\n        .catch(err => {\n          if (err.data && err.data.error) {\n            appEvents.emit('alert-error', [err.data.error]);\n          }\n        });\n    }\n  }\n\n  getNotifierTemplateId(type) {\n    return `notifier-options-${type}`;\n  }\n\n  typeChanged() {\n    this.model.settings = _.defaults({}, this.defaults.settings);\n    this.notifierTemplateId = this.getNotifierTemplateId(this.model.type);\n  }\n\n  testNotification() {\n    if (!this.theForm.$valid) {\n      return;\n    }\n\n    const payload = {\n      name: this.model.name,\n      type: this.model.type,\n      settings: this.model.settings,\n    };\n\n    this.backendSrv.post(`/api/alert-notifications/test`, payload).then(res => {\n      appEvents.emit('alert-success', ['通知测试已发出', '']);\n    });\n  }\n}\n\ncoreModule.controller('AlertNotificationEditCtrl', AlertNotificationEditCtrl);\n","import './notifications_list_ctrl';\nimport './notification_edit_ctrl';\n","import coreModule from 'app/core/core_module';\nimport config from 'app/core/config';\n\nclass StyleGuideCtrl {\n  theme: string;\n  buttonNames = ['primary', 'secondary', 'inverse', 'success', 'warning', 'danger'];\n  buttonSizes = ['btn-small', '', 'btn-large'];\n  buttonVariants = ['-'];\n  navModel: any;\n\n  /** @ngInject */\n  constructor(private $routeParams, private backendSrv, navModelSrv) {\n    this.navModel = navModelSrv.getNav('cfg', 'admin', 'styleguide', 1);\n    this.theme = config.bootData.user.lightTheme ? 'light' : 'dark';\n  }\n\n  switchTheme() {\n    this.$routeParams.theme = this.theme === 'dark' ? 'light' : 'dark';\n\n    const cmd = {\n      theme: this.$routeParams.theme,\n    };\n\n    this.backendSrv.put('/api/user/preferences', cmd).then(() => {\n      window.location.href = window.location.href;\n    });\n  }\n}\n\ncoreModule.controller('StyleGuideCtrl', StyleGuideCtrl);\n","import './panellinks/module';\nimport './dashlinks/module';\nimport './annotations/all';\nimport './templating/all';\nimport './plugins/all';\nimport './dashboard/all';\nimport './playlist/all';\nimport './snapshot/all';\nimport './panel/all';\nimport './org/all';\nimport './admin/admin';\nimport './alerting/all';\nimport './styleguide/styleguide';\n"],"sourceRoot":""}