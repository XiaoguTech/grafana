{"version":3,"file":"explore.6b4e578487905110ad7c.hot-update.js","sources":["webpack:///./public/app/containers/Explore/Graph.tsx"],"sourcesContent":["import $ from 'jquery';\nimport React, { Component } from 'react';\nimport moment from 'moment';\n\nimport 'vendor/flot/jquery.flot';\nimport 'vendor/flot/jquery.flot.time';\nimport * as dateMath from 'app/core/utils/datemath';\nimport TimeSeries from 'app/core/time_series2';\n\nimport Legend from './Legend';\n\n// Copied from graph.ts\nfunction time_format(ticks, min, max) {\n  if (min && max && ticks) {\n    var range = max - min;\n    var secPerTick = range / ticks / 1000;\n    var oneDay = 86400000;\n    var oneYear = 31536000000;\n\n    if (secPerTick <= 45) {\n      return '%H:%M:%S';\n    }\n    if (secPerTick <= 7200 || range <= oneDay) {\n      return '%H:%M';\n    }\n    if (secPerTick <= 80000) {\n      return '%m/%d %H:%M';\n    }\n    if (secPerTick <= 2419200 || range <= oneYear) {\n      return '%m/%d';\n    }\n    return '%Y-%m';\n  }\n\n  return '%H:%M';\n}\n\nconst FLOT_OPTIONS = {\n  legend: {\n    show: false,\n  },\n  series: {\n    lines: {\n      linewidth: 1,\n      zero: false,\n    },\n    shadowSize: 0,\n  },\n  grid: {\n    minBorderMargin: 0,\n    markings: [],\n    backgroundColor: null,\n    borderWidth: 0,\n    // hoverable: true,\n    clickable: true,\n    color: '#a1a1a1',\n    margin: { left: 0, right: 0 },\n    labelMarginX: 0,\n  },\n  // selection: {\n  //   mode: 'x',\n  //   color: '#666',\n  // },\n  // crosshair: {\n  //   mode: 'x',\n  // },\n};\n\nclass Graph extends Component<any, any> {\n  componentDidMount() {\n    this.draw();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (\n      prevProps.data !== this.props.data ||\n      prevProps.options !== this.props.options ||\n      prevProps.split !== this.props.split ||\n      prevProps.height !== this.props.height\n    ) {\n      this.draw();\n    }\n  }\n\n  draw() {\n    const { data, options: userOptions } = this.props;\n    if (!data) {\n      return;\n    }\n    const series = data.map((ts: TimeSeries) => ({\n      color: ts.color,\n      label: ts.label,\n      data: ts.getFlotPairs('null'),\n    }));\n\n    const $el = $(`#${this.props.id}`);\n    const ticks = $el.width() / 100;\n    let { from, to } = userOptions.range;\n    if (!moment.isMoment(from)) {\n      from = dateMath.parse(from, false);\n    }\n    if (!moment.isMoment(to)) {\n      to = dateMath.parse(to, true);\n    }\n    const min = from.valueOf();\n    const max = to.valueOf();\n    const dynamicOptions = {\n      xaxis: {\n        mode: 'time',\n        min: min,\n        max: max,\n        label: 'Datetime',\n        ticks: ticks,\n        timeformat: time_format(ticks, min, max),\n      },\n    };\n    const options = {\n      ...FLOT_OPTIONS,\n      ...dynamicOptions,\n      ...userOptions,\n    };\n    $.plot($el, series, options);\n  }\n\n  render() {\n    const { data, height } = this.props;\n    return (\n      <div className=\"panel-container\">\n        <div id={this.props.id} className=\"explore-graph\" style={{ height }} />\n        <Legend data={data} />\n      </div>\n    );\n  }\n}\n\nexport default Graph;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AAEA;AAAA;AAAA;;AAiEA;AAhEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAGA;AACA;AAAA;AAEA;;;;;A","sourceRoot":""}