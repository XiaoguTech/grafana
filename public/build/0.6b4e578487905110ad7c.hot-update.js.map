{"version":3,"file":"0.6b4e578487905110ad7c.hot-update.js","sources":["webpack:///./public/app/features/annotations/annotation_tooltip.ts","webpack:///./public/app/features/annotations/editor_ctrl.ts","webpack:///./public/app/features/dashboard/dashboard_loader_srv.ts","webpack:///./public/app/features/dashboard/settings/settings.ts","webpack:///./public/app/features/panel/metrics_panel_ctrl.ts","webpack:///./public/app/features/panel/panel_ctrl.ts","webpack:///./public/app/features/panel/panel_directive.ts","webpack:///./public/app/features/panel/panel_header.ts","webpack:///./public/app/features/plugins/plugin_loader.ts","webpack:///./public/app/plugins/datasource/graphite/add_graphite_func.ts","webpack:///./public/app/plugins/datasource/graphite/func_editor.ts","webpack:///./public/app/plugins/datasource/prometheus/datasource.ts","webpack:///./public/app/plugins/panel/graph/graph.ts","webpack:///./public/app/plugins/panel/graph/graph_tooltip.ts","webpack:///./public/app/plugins/panel/graph/jquery.flot.events.ts","webpack:///./public/app/plugins/panel/graph/legend.ts","webpack:///./public/app/plugins/panel/graph/threshold_manager.ts","webpack:///./public/app/plugins/panel/heatmap/color_legend.ts","webpack:///./public/app/plugins/panel/heatmap/heatmap_tooltip.ts","webpack:///./public/app/plugins/panel/heatmap/rendering.ts","webpack:///./public/app/plugins/panel/singlestat/module.ts","webpack:///./public/app/plugins/panel/table/module.ts"],"sourcesContent":["import _ from 'lodash';\nimport $ from 'jquery';\nimport coreModule from 'app/core/core_module';\nimport alertDef from '../alerting/alert_def';\n\n/** @ngInject **/\nexport function annotationTooltipDirective($sanitize, dashboardSrv, contextSrv, $compile) {\n  function sanitizeString(str) {\n    try {\n      return $sanitize(str);\n    } catch (err) {\n      console.log('Could not sanitize annotation string, html escaping instead');\n      return _.escape(str);\n    }\n  }\n\n  return {\n    restrict: 'E',\n    scope: {\n      event: '=',\n      onEdit: '&',\n    },\n    link: function(scope, element) {\n      var event = scope.event;\n      var title = event.title;\n      var text = event.text;\n      var dashboard = dashboardSrv.getCurrent();\n\n      var tooltip = '<div class=\"graph-annotation\">';\n      var titleStateClass = '';\n\n      if (event.alertId) {\n        var stateModel = alertDef.getStateDisplayModel(event.newState);\n        titleStateClass = stateModel.stateClass;\n        title = `<i class=\"icon-gf ${stateModel.iconClass}\"></i> ${stateModel.text}`;\n        text = alertDef.getAlertAnnotationInfo(event);\n        if (event.text) {\n          text = text + '<br />' + event.text;\n        }\n      } else if (title) {\n        text = title + '<br />' + (_.isString(text) ? text : '');\n        title = '';\n      }\n\n      var header = `<div class=\"graph-annotation__header\">`;\n      if (event.login) {\n        header += `<div class=\"graph-annotation__user\" bs-tooltip=\"'Created by ${event.login}'\"><img src=\"${\n          event.avatarUrl\n        }\" /></div>`;\n      }\n      header += `\n          <span class=\"graph-annotation__title ${titleStateClass}\">${sanitizeString(title)}</span>\n          <span class=\"graph-annotation__time\">${dashboard.formatDate(event.min)}</span>\n      `;\n\n      // Show edit icon only for users with at least Editor role\n      if (event.id && dashboard.meta.canEdit) {\n        header += `\n          <span class=\"pointer graph-annotation__edit-icon\" ng-click=\"onEdit()\">\n            <i class=\"fa fa-pencil-square\"></i>\n          </span>\n        `;\n      }\n\n      header += `</div>`;\n      tooltip += header;\n      tooltip += '<div class=\"graph-annotation__body\">';\n\n      if (text) {\n        tooltip += '<div>' + sanitizeString(text.replace(/\\n/g, '<br>')) + '</div>';\n      }\n\n      var tags = event.tags;\n\n      if (tags && tags.length) {\n        scope.tags = tags;\n        tooltip +=\n          '<span class=\"label label-tag small\" ng-repeat=\"tag in tags\" tag-color-from-name=\"tag\">{{tag}}</span><br/>';\n      }\n\n      tooltip += '</div>';\n      tooltip += '</div>';\n\n      var $tooltip = $(tooltip);\n      $tooltip.appendTo(element);\n\n      $compile(element.contents())(scope);\n    },\n  };\n}\n\ncoreModule.directive('annotationTooltip', annotationTooltipDirective);\n","import angular from 'angular';\nimport _ from 'lodash';\nimport $ from 'jquery';\nimport coreModule from 'app/core/core_module';\n\nexport class AnnotationsEditorCtrl {\n  mode: any;\n  datasources: any;\n  annotations: any;\n  currentAnnotation: any;\n  currentDatasource: any;\n  currentIsNew: any;\n\n  annotationDefaults: any = {\n    name: '',\n    datasource: null,\n    iconColor: 'rgba(255, 96, 96, 1)',\n    enable: true,\n    showIn: 0,\n    hide: false,\n  };\n\n  showOptions: any = [{ text: 'All Panels', value: 0 }, { text: 'Specific Panels', value: 1 }];\n\n  /** @ngInject */\n  constructor($scope, private datasourceSrv) {\n    $scope.ctrl = this;\n\n    this.mode = 'list';\n    this.datasources = datasourceSrv.getAnnotationSources();\n    this.annotations = $scope.dashboard.annotations.list;\n    this.reset();\n\n    this.onColorChange = this.onColorChange.bind(this);\n  }\n\n  datasourceChanged() {\n    return this.datasourceSrv.get(this.currentAnnotation.datasource).then(ds => {\n      this.currentDatasource = ds;\n    });\n  }\n\n  edit(annotation) {\n    this.currentAnnotation = annotation;\n    this.currentAnnotation.showIn = this.currentAnnotation.showIn || 0;\n    this.currentIsNew = false;\n    this.datasourceChanged();\n    this.mode = 'edit';\n    $('.tooltip.in').remove();\n  }\n\n  reset() {\n    this.currentAnnotation = angular.copy(this.annotationDefaults);\n    this.currentAnnotation.datasource = this.datasources[0].name;\n    this.currentIsNew = true;\n    this.datasourceChanged();\n  }\n\n  update() {\n    this.reset();\n    this.mode = 'list';\n  }\n\n  setupNew() {\n    this.mode = 'new';\n    this.reset();\n  }\n\n  backToList() {\n    this.mode = 'list';\n  }\n\n  move(index, dir) {\n    _.move(this.annotations, index, index + dir);\n  }\n\n  add() {\n    this.annotations.push(this.currentAnnotation);\n    this.reset();\n    this.mode = 'list';\n  }\n\n  removeAnnotation(annotation) {\n    var index = _.indexOf(this.annotations, annotation);\n    this.annotations.splice(index, 1);\n  }\n\n  onColorChange(newColor) {\n    this.currentAnnotation.iconColor = newColor;\n  }\n}\n\ncoreModule.controller('AnnotationsEditorCtrl', AnnotationsEditorCtrl);\n","import angular from 'angular';\nimport moment from 'moment';\nimport _ from 'lodash';\nimport $ from 'jquery';\nimport kbn from 'app/core/utils/kbn';\nimport * as dateMath from 'app/core/utils/datemath';\nimport impressionSrv from 'app/core/services/impression_srv';\n\nexport class DashboardLoaderSrv {\n  /** @ngInject */\n  constructor(\n    private backendSrv,\n    private dashboardSrv,\n    private datasourceSrv,\n    private $http,\n    private $q,\n    private $timeout,\n    contextSrv,\n    private $routeParams,\n    private $rootScope\n  ) {}\n\n  _dashboardLoadFailed(title, snapshot?) {\n    snapshot = snapshot || false;\n    return {\n      meta: {\n        canStar: false,\n        isSnapshot: snapshot,\n        canDelete: false,\n        canSave: false,\n        canEdit: false,\n        dashboardNotFound: true,\n      },\n      dashboard: { title: title },\n    };\n  }\n\n  loadDashboard(type, slug, uid) {\n    var promise;\n\n    if (type === 'script') {\n      promise = this._loadScriptedDashboard(slug);\n    } else if (type === 'snapshot') {\n      promise = this.backendSrv.get('/api/snapshots/' + slug).catch(() => {\n        return this._dashboardLoadFailed('Snapshot not found', true);\n      });\n    } else {\n      promise = this.backendSrv\n        .getDashboardByUid(uid)\n        .then(result => {\n          if (result.meta.isFolder) {\n            this.$rootScope.appEvent('alert-error', ['Dashboard not found']);\n            throw new Error('Dashboard not found');\n          }\n          return result;\n        })\n        .catch(() => {\n          return this._dashboardLoadFailed('Not found', true);\n        });\n    }\n\n    promise.then(function(result) {\n      if (result.meta.dashboardNotFound !== true) {\n        impressionSrv.addDashboardImpression(result.dashboard.id);\n      }\n\n      return result;\n    });\n\n    return promise;\n  }\n\n  _loadScriptedDashboard(file) {\n    var url = 'public/dashboards/' + file.replace(/\\.(?!js)/, '/') + '?' + new Date().getTime();\n\n    return this.$http({ url: url, method: 'GET' })\n      .then(this._executeScript.bind(this))\n      .then(\n        result => {\n          return {\n            meta: {\n              fromScript: true,\n              canDelete: false,\n              canSave: false,\n              canStar: false,\n            },\n            dashboard: result.data,\n          };\n        },\n        err => {\n          console.log('Script dashboard error ' + err);\n          this.$rootScope.appEvent('alert-error', [\n            'Script Error',\n            'Please make sure it exists and returns a valid dashboard',\n          ]);\n          return this._dashboardLoadFailed('Scripted dashboard');\n        }\n      );\n  }\n\n  _executeScript(result) {\n    var services = {\n      dashboardSrv: this.dashboardSrv,\n      datasourceSrv: this.datasourceSrv,\n      $q: this.$q,\n    };\n\n    /*jshint -W054 */\n    var script_func = new Function(\n      'ARGS',\n      'kbn',\n      'dateMath',\n      '_',\n      'moment',\n      'window',\n      'document',\n      '$',\n      'jQuery',\n      'services',\n      result.data\n    );\n    var script_result = script_func(this.$routeParams, kbn, dateMath, _, moment, window, document, $, $, services);\n\n    // Handle async dashboard scripts\n    if (_.isFunction(script_result)) {\n      var deferred = this.$q.defer();\n      script_result(dashboard => {\n        this.$timeout(() => {\n          deferred.resolve({ data: dashboard });\n        });\n      });\n      return deferred.promise;\n    }\n\n    return { data: script_result };\n  }\n}\n\nangular.module('grafana.services').service('dashboardLoaderSrv', DashboardLoaderSrv);\n","import { coreModule, appEvents, contextSrv } from 'app/core/core';\nimport { DashboardModel } from '../dashboard_model';\nimport $ from 'jquery';\nimport _ from 'lodash';\nimport angular from 'angular';\nimport config from 'app/core/config';\n\nexport class SettingsCtrl {\n  dashboard: DashboardModel;\n  isOpen: boolean;\n  viewId: string;\n  json: string;\n  alertCount: number;\n  canSaveAs: boolean;\n  canSave: boolean;\n  canDelete: boolean;\n  sections: any[];\n  hasUnsavedFolderChange: boolean;\n\n  /** @ngInject */\n  constructor(\n    private $scope,\n    private $route,\n    private $location,\n    private $rootScope,\n    private backendSrv,\n    private dashboardSrv\n  ) {\n    // temp hack for annotations and variables editors\n    // that rely on inherited scope\n    $scope.dashboard = this.dashboard;\n\n    this.$scope.$on('$destroy', () => {\n      this.dashboard.updateSubmenuVisibility();\n      this.$rootScope.$broadcast('refresh');\n      setTimeout(() => {\n        this.$rootScope.appEvent('dash-scroll', { restore: true });\n      });\n    });\n\n    this.canSaveAs = this.dashboard.meta.canEdit && contextSrv.hasEditPermissionInFolders;\n    this.canSave = this.dashboard.meta.canSave;\n    this.canDelete = this.dashboard.meta.canSave;\n\n    this.buildSectionList();\n    this.onRouteUpdated();\n\n    this.$rootScope.onAppEvent('$routeUpdate', this.onRouteUpdated.bind(this), $scope);\n    this.$rootScope.appEvent('dash-scroll', { animate: false, pos: 0 });\n    this.$rootScope.onAppEvent('dashboard-saved', this.onPostSave.bind(this), $scope);\n  }\n\n  buildSectionList() {\n    this.sections = [];\n\n    if (this.dashboard.meta.canEdit) {\n      this.sections.push({\n        title: 'General',\n        id: 'settings',\n        icon: 'gicon gicon-preferences',\n      });\n      this.sections.push({\n        title: 'Annotations',\n        id: 'annotations',\n        icon: 'gicon gicon-annotation',\n      });\n      this.sections.push({\n        title: 'Variables',\n        id: 'templating',\n        icon: 'gicon gicon-variable',\n      });\n      this.sections.push({\n        title: 'Links',\n        id: 'links',\n        icon: 'gicon gicon-link',\n      });\n    }\n\n    if (this.dashboard.id && this.dashboard.meta.canSave) {\n      this.sections.push({\n        title: 'Versions',\n        id: 'versions',\n        icon: 'fa fa-fw fa-history',\n      });\n    }\n\n    if (this.dashboard.id && this.dashboard.meta.canAdmin) {\n      this.sections.push({\n        title: 'Permissions',\n        id: 'permissions',\n        icon: 'fa fa-fw fa-lock',\n      });\n    }\n\n    if (this.dashboard.meta.canMakeEditable) {\n      this.sections.push({\n        title: 'General',\n        icon: 'gicon gicon-preferences',\n        id: 'make_editable',\n      });\n    }\n\n    this.sections.push({\n      title: 'JSON Model',\n      id: 'dashboard_json',\n      icon: 'gicon gicon-json',\n    });\n\n    const params = this.$location.search();\n    const url = this.$location.path();\n\n    for (let section of this.sections) {\n      const sectionParams = _.defaults({ editview: section.id }, params);\n      section.url = config.appSubUrl + url + '?' + $.param(sectionParams);\n    }\n  }\n\n  onRouteUpdated() {\n    this.viewId = this.$location.search().editview;\n\n    if (this.viewId) {\n      this.json = angular.toJson(this.dashboard.getSaveModelClone(), true);\n    }\n\n    if (this.viewId === 'settings' && this.dashboard.meta.canMakeEditable) {\n      this.viewId = 'make_editable';\n    }\n\n    const currentSection = _.find(this.sections, { id: this.viewId });\n    if (!currentSection) {\n      this.sections.unshift({\n        title: 'Not found',\n        id: '404',\n        icon: 'fa fa-fw fa-warning',\n      });\n      this.viewId = '404';\n    }\n  }\n\n  openSaveAsModal() {\n    this.dashboardSrv.showSaveAsModal();\n  }\n\n  saveDashboard() {\n    this.dashboardSrv.saveDashboard();\n  }\n\n  saveDashboardJson() {\n    this.dashboardSrv.saveJSONDashboard(this.json).then(() => {\n      this.$route.reload();\n    });\n  }\n\n  onPostSave() {\n    this.hasUnsavedFolderChange = false;\n  }\n\n  hideSettings() {\n    var urlParams = this.$location.search();\n    delete urlParams.editview;\n    setTimeout(() => {\n      this.$rootScope.$apply(() => {\n        this.$location.search(urlParams);\n      });\n    });\n  }\n\n  makeEditable() {\n    this.dashboard.editable = true;\n    this.dashboard.meta.canMakeEditable = false;\n    this.dashboard.meta.canEdit = true;\n    this.dashboard.meta.canSave = true;\n    this.canDelete = true;\n    this.viewId = 'settings';\n    this.buildSectionList();\n\n    const currentSection = _.find(this.sections, { id: this.viewId });\n    this.$location.url(currentSection.url);\n  }\n\n  deleteDashboard() {\n    var confirmText = '';\n    var text2 = this.dashboard.title;\n\n    const alerts = _.sumBy(this.dashboard.panels, panel => {\n      return panel.alert ? 1 : 0;\n    });\n\n    if (alerts > 0) {\n      confirmText = 'DELETE';\n      text2 = `This dashboard contains ${alerts} alerts. Deleting this dashboard will also delete those alerts`;\n    }\n\n    appEvents.emit('confirm-modal', {\n      title: 'Delete',\n      text: 'Do you want to delete this dashboard?',\n      text2: text2,\n      icon: 'fa-trash',\n      confirmText: confirmText,\n      yesText: 'Delete',\n      onConfirm: () => {\n        this.dashboard.meta.canSave = false;\n        this.deleteDashboardConfirmed();\n      },\n    });\n  }\n\n  deleteDashboardConfirmed() {\n    this.backendSrv.deleteDashboard(this.dashboard.uid).then(() => {\n      appEvents.emit('alert-success', ['Dashboard Deleted', this.dashboard.title + ' has been deleted']);\n      this.$location.url('/');\n    });\n  }\n\n  onFolderChange(folder) {\n    this.dashboard.meta.folderId = folder.id;\n    this.dashboard.meta.folderTitle = folder.title;\n    this.hasUnsavedFolderChange = true;\n  }\n\n  getFolder() {\n    return {\n      id: this.dashboard.meta.folderId,\n      title: this.dashboard.meta.folderTitle,\n      url: this.dashboard.meta.folderUrl,\n    };\n  }\n}\n\nexport function dashboardSettings() {\n  return {\n    restrict: 'E',\n    templateUrl: 'public/app/features/dashboard/settings/settings.html',\n    controller: SettingsCtrl,\n    bindToController: true,\n    controllerAs: 'ctrl',\n    transclude: true,\n    scope: { dashboard: '=' },\n  };\n}\n\ncoreModule.directive('dashboardSettings', dashboardSettings);\n","import $ from 'jquery';\nimport _ from 'lodash';\n\nimport config from 'app/core/config';\nimport kbn from 'app/core/utils/kbn';\nimport { PanelCtrl } from 'app/features/panel/panel_ctrl';\nimport * as rangeUtil from 'app/core/utils/rangeutil';\nimport * as dateMath from 'app/core/utils/datemath';\nimport { encodePathComponent } from 'app/core/utils/location_util';\n\nimport { metricsTabDirective } from './metrics_tab';\n\nclass MetricsPanelCtrl extends PanelCtrl {\n  scope: any;\n  datasource: any;\n  datasourceName: any;\n  $q: any;\n  $timeout: any;\n  contextSrv: any;\n  datasourceSrv: any;\n  timeSrv: any;\n  templateSrv: any;\n  timing: any;\n  range: any;\n  interval: any;\n  intervalMs: any;\n  resolution: any;\n  timeInfo: any;\n  skipDataOnInit: boolean;\n  dataStream: any;\n  dataSubscription: any;\n  dataList: any;\n  nextRefId: string;\n\n  constructor($scope, $injector) {\n    super($scope, $injector);\n\n    // make metrics tab the default\n    this.editorTabIndex = 1;\n    this.$q = $injector.get('$q');\n    this.contextSrv = $injector.get('contextSrv');\n    this.datasourceSrv = $injector.get('datasourceSrv');\n    this.timeSrv = $injector.get('timeSrv');\n    this.templateSrv = $injector.get('templateSrv');\n    this.scope = $scope;\n    this.panel.datasource = this.panel.datasource || null;\n\n    if (!this.panel.targets) {\n      this.panel.targets = [{}];\n    }\n\n    this.events.on('refresh', this.onMetricsPanelRefresh.bind(this));\n    this.events.on('init-edit-mode', this.onInitMetricsPanelEditMode.bind(this));\n    this.events.on('panel-teardown', this.onPanelTearDown.bind(this));\n  }\n\n  private onPanelTearDown() {\n    if (this.dataSubscription) {\n      this.dataSubscription.unsubscribe();\n      this.dataSubscription = null;\n    }\n  }\n\n  private onInitMetricsPanelEditMode() {\n    this.addEditorTab('Metrics', metricsTabDirective);\n    this.addEditorTab('Time range', 'public/app/features/panel/partials/panelTime.html');\n  }\n\n  private onMetricsPanelRefresh() {\n    // ignore fetching data if another panel is in fullscreen\n    if (this.otherPanelInFullscreenMode()) {\n      return;\n    }\n\n    // if we have snapshot data use that\n    if (this.panel.snapshotData) {\n      this.updateTimeRange();\n      var data = this.panel.snapshotData;\n      // backward compatibility\n      if (!_.isArray(data)) {\n        data = data.data;\n      }\n\n      // Defer panel rendering till the next digest cycle.\n      // For some reason snapshot panels don't init at this time, so this helps to avoid rendering issues.\n      return this.$timeout(() => {\n        this.events.emit('data-snapshot-load', data);\n      });\n    }\n\n    // // ignore if we have data stream\n    if (this.dataStream) {\n      return;\n    }\n\n    // clear loading/error state\n    delete this.error;\n    this.loading = true;\n\n    // load datasource service\n    this.setTimeQueryStart();\n    this.datasourceSrv\n      .get(this.panel.datasource)\n      .then(this.updateTimeRange.bind(this))\n      .then(this.issueQueries.bind(this))\n      .then(this.handleQueryResult.bind(this))\n      .catch(err => {\n        // if cancelled  keep loading set to true\n        if (err.cancelled) {\n          console.log('Panel request cancelled', err);\n          return;\n        }\n\n        this.loading = false;\n        this.error = err.message || 'Request Error';\n        this.inspector = { error: err };\n\n        if (err.data) {\n          if (err.data.message) {\n            this.error = err.data.message;\n          }\n          if (err.data.error) {\n            this.error = err.data.error;\n          }\n        }\n\n        this.events.emit('data-error', err);\n        console.log('Panel data error:', err);\n      });\n  }\n\n  setTimeQueryStart() {\n    this.timing.queryStart = new Date().getTime();\n  }\n\n  setTimeQueryEnd() {\n    this.timing.queryEnd = new Date().getTime();\n  }\n\n  updateTimeRange(datasource?) {\n    this.datasource = datasource || this.datasource;\n    this.range = this.timeSrv.timeRange();\n\n    this.applyPanelTimeOverrides();\n\n    if (this.panel.maxDataPoints) {\n      this.resolution = this.panel.maxDataPoints;\n    } else {\n      this.resolution = Math.ceil($(window).width() * (this.panel.gridPos.w / 24));\n    }\n\n    this.calculateInterval();\n\n    return this.datasource;\n  }\n\n  calculateInterval() {\n    var intervalOverride = this.panel.interval;\n\n    // if no panel interval check datasource\n    if (intervalOverride) {\n      intervalOverride = this.templateSrv.replace(intervalOverride, this.panel.scopedVars);\n    } else if (this.datasource && this.datasource.interval) {\n      intervalOverride = this.datasource.interval;\n    }\n\n    var res = kbn.calculateInterval(this.range, this.resolution, intervalOverride);\n    this.interval = res.interval;\n    this.intervalMs = res.intervalMs;\n  }\n\n  applyPanelTimeOverrides() {\n    this.timeInfo = '';\n\n    // check panel time overrrides\n    if (this.panel.timeFrom) {\n      var timeFromInterpolated = this.templateSrv.replace(this.panel.timeFrom, this.panel.scopedVars);\n      var timeFromInfo = rangeUtil.describeTextRange(timeFromInterpolated);\n      if (timeFromInfo.invalid) {\n        this.timeInfo = 'invalid time override';\n        return;\n      }\n\n      if (_.isString(this.range.raw.from)) {\n        var timeFromDate = dateMath.parse(timeFromInfo.from);\n        this.timeInfo = timeFromInfo.display;\n        this.range.from = timeFromDate;\n        this.range.to = dateMath.parse(timeFromInfo.to);\n        this.range.raw.from = timeFromInfo.from;\n        this.range.raw.to = timeFromInfo.to;\n      }\n    }\n\n    if (this.panel.timeShift) {\n      var timeShiftInterpolated = this.templateSrv.replace(this.panel.timeShift, this.panel.scopedVars);\n      var timeShiftInfo = rangeUtil.describeTextRange(timeShiftInterpolated);\n      if (timeShiftInfo.invalid) {\n        this.timeInfo = 'invalid timeshift';\n        return;\n      }\n\n      var timeShift = '-' + timeShiftInterpolated;\n      this.timeInfo += ' timeshift ' + timeShift;\n      this.range.from = dateMath.parseDateMath(timeShift, this.range.from, false);\n      this.range.to = dateMath.parseDateMath(timeShift, this.range.to, true);\n      this.range.raw = { from: this.range.from, to: this.range.to };\n    }\n\n    if (this.panel.hideTimeOverride) {\n      this.timeInfo = '';\n    }\n  }\n\n  issueQueries(datasource) {\n    this.datasource = datasource;\n\n    if (!this.panel.targets || this.panel.targets.length === 0) {\n      return this.$q.when([]);\n    }\n\n    // make shallow copy of scoped vars,\n    // and add built in variables interval and interval_ms\n    var scopedVars = Object.assign({}, this.panel.scopedVars, {\n      __interval: { text: this.interval, value: this.interval },\n      __interval_ms: { text: this.intervalMs, value: this.intervalMs },\n    });\n\n    var metricsQuery = {\n      timezone: this.dashboard.getTimezone(),\n      panelId: this.panel.id,\n      dashboardId: this.dashboard.id,\n      range: this.range,\n      rangeRaw: this.range.raw,\n      interval: this.interval,\n      intervalMs: this.intervalMs,\n      targets: this.panel.targets,\n      maxDataPoints: this.resolution,\n      scopedVars: scopedVars,\n      cacheTimeout: this.panel.cacheTimeout,\n    };\n\n    return datasource.query(metricsQuery);\n  }\n\n  handleQueryResult(result) {\n    this.setTimeQueryEnd();\n    this.loading = false;\n\n    // check for if data source returns subject\n    if (result && result.subscribe) {\n      this.handleDataStream(result);\n      return;\n    }\n\n    if (this.dashboard.snapshot) {\n      this.panel.snapshotData = result.data;\n    }\n\n    if (!result || !result.data) {\n      console.log('Data source query result invalid, missing data field:', result);\n      result = { data: [] };\n    }\n\n    this.events.emit('data-received', result.data);\n  }\n\n  handleDataStream(stream) {\n    // if we already have a connection\n    if (this.dataStream) {\n      console.log('two stream observables!');\n      return;\n    }\n\n    this.dataStream = stream;\n    this.dataSubscription = stream.subscribe({\n      next: data => {\n        console.log('dataSubject next!');\n        if (data.range) {\n          this.range = data.range;\n        }\n        this.events.emit('data-received', data.data);\n      },\n      error: error => {\n        this.events.emit('data-error', error);\n        console.log('panel: observer got error');\n      },\n      complete: () => {\n        console.log('panel: observer got complete');\n        this.dataStream = null;\n      },\n    });\n  }\n\n  setDatasource(datasource) {\n    // switching to mixed\n    if (datasource.meta.mixed) {\n      _.each(this.panel.targets, target => {\n        target.datasource = this.panel.datasource;\n        if (!target.datasource) {\n          target.datasource = config.defaultDatasource;\n        }\n      });\n    } else if (this.datasource && this.datasource.meta.mixed) {\n      _.each(this.panel.targets, target => {\n        delete target.datasource;\n      });\n    }\n\n    this.panel.datasource = datasource.value;\n    this.datasourceName = datasource.name;\n    this.datasource = null;\n    this.refresh();\n  }\n\n  getAdditionalMenuItems() {\n    const items = [];\n    if (config.exploreEnabled && this.contextSrv.isEditor && this.datasource && this.datasource.supportsExplore) {\n      items.push({\n        text: 'Explore',\n        click: 'ctrl.explore();',\n        icon: 'fa fa-fw fa-rocket',\n        shortcut: 'x',\n      });\n    }\n    return items;\n  }\n\n  explore() {\n    const range = this.timeSrv.timeRangeForUrl();\n    const state = {\n      ...this.datasource.getExploreState(this.panel),\n      range,\n    };\n    const exploreState = encodePathComponent(JSON.stringify(state));\n    this.$location.url(`/explore?state=${exploreState}`);\n  }\n\n  addQuery(target) {\n    target.refId = this.dashboard.getNextQueryLetter(this.panel);\n\n    this.panel.targets.push(target);\n    this.nextRefId = this.dashboard.getNextQueryLetter(this.panel);\n  }\n\n  removeQuery(target) {\n    var index = _.indexOf(this.panel.targets, target);\n    this.panel.targets.splice(index, 1);\n    this.nextRefId = this.dashboard.getNextQueryLetter(this.panel);\n    this.refresh();\n  }\n\n  moveQuery(target, direction) {\n    var index = _.indexOf(this.panel.targets, target);\n    _.move(this.panel.targets, index, index + direction);\n  }\n}\n\nexport { MetricsPanelCtrl };\n","import config from 'app/core/config';\nimport _ from 'lodash';\nimport $ from 'jquery';\nimport { appEvents, profiler } from 'app/core/core';\nimport { PanelModel } from 'app/features/dashboard/panel_model';\nimport Remarkable from 'remarkable';\nimport { GRID_CELL_HEIGHT, GRID_CELL_VMARGIN, LS_PANEL_COPY_KEY } from 'app/core/constants';\nimport store from 'app/core/store';\n\nconst TITLE_HEIGHT = 27;\nconst PANEL_BORDER = 2;\n\nimport { Emitter } from 'app/core/core';\n\nexport class PanelCtrl {\n  panel: any;\n  error: any;\n  dashboard: any;\n  editorTabIndex: number;\n  pluginName: string;\n  pluginId: string;\n  editorTabs: any;\n  $scope: any;\n  $injector: any;\n  $location: any;\n  $timeout: any;\n  fullscreen: boolean;\n  inspector: any;\n  editModeInitiated: boolean;\n  editMode: any;\n  height: any;\n  containerHeight: any;\n  events: Emitter;\n  timing: any;\n  loading: boolean;\n\n  constructor($scope, $injector) {\n    this.$injector = $injector;\n    this.$location = $injector.get('$location');\n    this.$scope = $scope;\n    this.$timeout = $injector.get('$timeout');\n    this.editorTabIndex = 0;\n    this.events = this.panel.events;\n    this.timing = {};\n\n    var plugin = config.panels[this.panel.type];\n    if (plugin) {\n      this.pluginId = plugin.id;\n      this.pluginName = plugin.name;\n    }\n\n    $scope.$on('refresh', () => this.refresh());\n    $scope.$on('component-did-mount', () => this.panelDidMount());\n\n    $scope.$on('$destroy', () => {\n      this.events.emit('panel-teardown');\n      this.events.removeAllListeners();\n    });\n  }\n\n  init() {\n    this.events.emit('panel-initialized');\n    this.publishAppEvent('panel-initialized', { scope: this.$scope });\n  }\n\n  panelDidMount() {\n    this.events.emit('component-did-mount');\n  }\n\n  renderingCompleted() {\n    profiler.renderingCompleted(this.panel.id, this.timing);\n  }\n\n  refresh() {\n    this.events.emit('refresh', null);\n  }\n\n  publishAppEvent(evtName, evt) {\n    this.$scope.$root.appEvent(evtName, evt);\n  }\n\n  changeView(fullscreen, edit) {\n    this.publishAppEvent('panel-change-view', {\n      fullscreen: fullscreen,\n      edit: edit,\n      panelId: this.panel.id,\n    });\n  }\n\n  viewPanel() {\n    this.changeView(true, false);\n  }\n\n  editPanel() {\n    this.changeView(true, true);\n  }\n\n  exitFullscreen() {\n    this.changeView(false, false);\n  }\n\n  initEditMode() {\n    this.editorTabs = [];\n    this.addEditorTab('General', 'public/app/partials/panelgeneral.html');\n    this.editModeInitiated = true;\n    this.events.emit('init-edit-mode', null);\n\n    var urlTab = (this.$injector.get('$routeParams').tab || '').toLowerCase();\n    if (urlTab) {\n      this.editorTabs.forEach((tab, i) => {\n        if (tab.title.toLowerCase() === urlTab) {\n          this.editorTabIndex = i;\n        }\n      });\n    }\n  }\n\n  changeTab(newIndex) {\n    this.editorTabIndex = newIndex;\n    var route = this.$injector.get('$route');\n    route.current.params.tab = this.editorTabs[newIndex].title.toLowerCase();\n    route.updateParams();\n  }\n\n  addEditorTab(title, directiveFn, index?) {\n    var editorTab = { title, directiveFn };\n\n    if (_.isString(directiveFn)) {\n      editorTab.directiveFn = function() {\n        return { templateUrl: directiveFn };\n      };\n    }\n    if (index) {\n      this.editorTabs.splice(index, 0, editorTab);\n    } else {\n      this.editorTabs.push(editorTab);\n    }\n  }\n\n  getMenu() {\n    let menu = [];\n    menu.push({\n      text: 'View',\n      click: 'ctrl.viewPanel();',\n      icon: 'fa fa-fw fa-eye',\n      shortcut: 'v',\n    });\n\n    if (this.dashboard.meta.canEdit) {\n      menu.push({\n        text: 'Edit',\n        click: 'ctrl.editPanel();',\n        role: 'Editor',\n        icon: 'fa fa-fw fa-edit',\n        shortcut: 'e',\n      });\n    }\n\n    menu.push({\n      text: 'Share',\n      click: 'ctrl.sharePanel();',\n      icon: 'fa fa-fw fa-share',\n      shortcut: 'p s',\n    });\n\n    // Additional items from sub-class\n    menu.push(...this.getAdditionalMenuItems());\n\n    let extendedMenu = this.getExtendedMenu();\n    menu.push({\n      text: 'More ...',\n      click: '',\n      icon: 'fa fa-fw fa-cube',\n      submenu: extendedMenu,\n    });\n\n    if (this.dashboard.meta.canEdit) {\n      menu.push({ divider: true, role: 'Editor' });\n      menu.push({\n        text: 'Remove',\n        click: 'ctrl.removePanel();',\n        role: 'Editor',\n        icon: 'fa fa-fw fa-trash',\n        shortcut: 'p r',\n      });\n    }\n\n    return menu;\n  }\n\n  getExtendedMenu() {\n    let menu = [];\n    if (!this.fullscreen && this.dashboard.meta.canEdit) {\n      menu.push({\n        text: 'Duplicate',\n        click: 'ctrl.duplicate()',\n        role: 'Editor',\n        shortcut: 'p d',\n      });\n\n      menu.push({\n        text: 'Copy',\n        click: 'ctrl.copyPanel()',\n        role: 'Editor',\n      });\n    }\n\n    menu.push({\n      text: 'Panel JSON',\n      click: 'ctrl.editPanelJson(); dismiss();',\n    });\n\n    this.events.emit('init-panel-actions', menu);\n    return menu;\n  }\n\n  // Override in sub-class to add items before extended menu\n  getAdditionalMenuItems() {\n    return [];\n  }\n\n  otherPanelInFullscreenMode() {\n    return this.dashboard.meta.fullscreen && !this.fullscreen;\n  }\n\n  calculatePanelHeight() {\n    if (this.fullscreen) {\n      var docHeight = $(window).height();\n      var editHeight = Math.floor(docHeight * 0.4);\n      var fullscreenHeight = Math.floor(docHeight * 0.8);\n      this.containerHeight = this.editMode ? editHeight : fullscreenHeight;\n    } else {\n      this.containerHeight = this.panel.gridPos.h * GRID_CELL_HEIGHT + (this.panel.gridPos.h - 1) * GRID_CELL_VMARGIN;\n    }\n\n    if (this.panel.soloMode) {\n      this.containerHeight = $(window).height();\n    }\n\n    this.height = this.containerHeight - (PANEL_BORDER + TITLE_HEIGHT);\n  }\n\n  render(payload?) {\n    this.timing.renderStart = new Date().getTime();\n    this.events.emit('render', payload);\n  }\n\n  duplicate() {\n    this.dashboard.duplicatePanel(this.panel);\n    this.$timeout(() => {\n      this.$scope.$root.$broadcast('render');\n    });\n  }\n\n  removePanel() {\n    this.publishAppEvent('panel-remove', {\n      panelId: this.panel.id,\n    });\n  }\n\n  editPanelJson() {\n    let editScope = this.$scope.$root.$new();\n    editScope.object = this.panel.getSaveModel();\n    editScope.updateHandler = this.replacePanel.bind(this);\n    editScope.enableCopy = true;\n\n    this.publishAppEvent('show-modal', {\n      src: 'public/app/partials/edit_json.html',\n      scope: editScope,\n    });\n  }\n\n  copyPanel() {\n    store.set(LS_PANEL_COPY_KEY, JSON.stringify(this.panel.getSaveModel()));\n    appEvents.emit('alert-success', ['Panel copied. Open Add Panel to paste']);\n  }\n\n  replacePanel(newPanel, oldPanel) {\n    let dashboard = this.dashboard;\n    let index = _.findIndex(dashboard.panels, panel => {\n      return panel.id === oldPanel.id;\n    });\n\n    let deletedPanel = dashboard.panels.splice(index, 1);\n    this.dashboard.events.emit('panel-removed', deletedPanel);\n\n    newPanel = new PanelModel(newPanel);\n    newPanel.id = oldPanel.id;\n\n    dashboard.panels.splice(index, 0, newPanel);\n    dashboard.sortPanelsByGridPos();\n    dashboard.events.emit('panel-added', newPanel);\n  }\n\n  sharePanel() {\n    var shareScope = this.$scope.$new();\n    shareScope.panel = this.panel;\n    shareScope.dashboard = this.dashboard;\n\n    this.publishAppEvent('show-modal', {\n      src: 'public/app/features/dashboard/partials/shareModal.html',\n      scope: shareScope,\n    });\n  }\n\n  getInfoMode() {\n    if (this.error) {\n      return 'error';\n    }\n    if (!!this.panel.description) {\n      return 'info';\n    }\n    if (this.panel.links && this.panel.links.length) {\n      return 'links';\n    }\n    return '';\n  }\n\n  getInfoContent(options) {\n    var markdown = this.panel.description;\n\n    if (options.mode === 'tooltip') {\n      markdown = this.error || this.panel.description;\n    }\n\n    var linkSrv = this.$injector.get('linkSrv');\n    var sanitize = this.$injector.get('$sanitize');\n    var templateSrv = this.$injector.get('templateSrv');\n    var interpolatedMarkdown = templateSrv.replace(markdown, this.panel.scopedVars);\n    var html = '<div class=\"markdown-html\">';\n\n    html += new Remarkable().render(interpolatedMarkdown);\n\n    if (this.panel.links && this.panel.links.length > 0) {\n      html += '<ul>';\n      for (let link of this.panel.links) {\n        var info = linkSrv.getPanelLinkAnchorInfo(link, this.panel.scopedVars);\n        html +=\n          '<li><a class=\"panel-menu-link\" href=\"' +\n          info.href +\n          '\" target=\"' +\n          info.target +\n          '\">' +\n          info.title +\n          '</a></li>';\n      }\n      html += '</ul>';\n    }\n\n    html += '</div>';\n    return sanitize(html);\n  }\n\n  openInspector() {\n    var modalScope = this.$scope.$new();\n    modalScope.panel = this.panel;\n    modalScope.dashboard = this.dashboard;\n    modalScope.panelInfoHtml = this.getInfoContent({ mode: 'inspector' });\n\n    modalScope.inspector = $.extend(true, {}, this.inspector);\n    this.publishAppEvent('show-modal', {\n      src: 'public/app/features/dashboard/partials/inspector.html',\n      scope: modalScope,\n    });\n  }\n}\n","import angular from 'angular';\nimport $ from 'jquery';\nimport Drop from 'tether-drop';\nimport baron from 'baron';\n\nvar module = angular.module('grafana.directives');\n\nvar panelTemplate = `\n  <div class=\"panel-container\">\n    <div class=\"panel-header\" ng-class=\"{'grid-drag-handle': !ctrl.fullscreen}\">\n      <span class=\"panel-info-corner\">\n        <i class=\"fa\"></i>\n        <span class=\"panel-info-corner-inner\"></span>\n      </span>\n\n      <span class=\"panel-loading\" ng-show=\"ctrl.loading\">\n        <i class=\"fa fa-spinner fa-spin\"></i>\n      </span>\n\n      <panel-header class=\"panel-title-container\" panel-ctrl=\"ctrl\"></panel-header>\n    </div>\n\n    <div class=\"panel-content\">\n      <ng-transclude class=\"panel-height-helper\"></ng-transclude>\n    </div>\n  </div>\n\n  <div class=\"panel-full-edit\" ng-if=\"ctrl.editMode\">\n    <div class=\"tabbed-view tabbed-view--panel-edit\">\n      <div class=\"tabbed-view-header\">\n        <h3 class=\"tabbed-view-panel-title\">\n          {{ctrl.pluginName}}\n        </h3>\n\n        <ul class=\"gf-tabs\">\n          <li class=\"gf-tabs-item\" ng-repeat=\"tab in ::ctrl.editorTabs\">\n            <a class=\"gf-tabs-link\" ng-click=\"ctrl.changeTab($index)\" ng-class=\"{active: ctrl.editorTabIndex === $index}\">\n              {{::tab.title}}\n            </a>\n          </li>\n        </ul>\n\n        <button class=\"tabbed-view-close-btn\" ng-click=\"ctrl.exitFullscreen();\">\n          <i class=\"fa fa-remove\"></i>\n        </button>\n      </div>\n\n      <div class=\"tabbed-view-body\">\n        <div ng-repeat=\"tab in ctrl.editorTabs\" ng-if=\"ctrl.editorTabIndex === $index\">\n          <panel-editor-tab editor-tab=\"tab\" ctrl=\"ctrl\" index=\"$index\"></panel-editor-tab>\n        </div>\n      </div>\n    </div>\n  </div>\n`;\n\nmodule.directive('grafanaPanel', function($rootScope, $document, $timeout) {\n  return {\n    restrict: 'E',\n    template: panelTemplate,\n    transclude: true,\n    scope: { ctrl: '=' },\n    link: function(scope, elem) {\n      var panelContainer = elem.find('.panel-container');\n      var panelContent = elem.find('.panel-content');\n      var cornerInfoElem = elem.find('.panel-info-corner');\n      var ctrl = scope.ctrl;\n      var infoDrop;\n      var panelScrollbar;\n\n      // the reason for handling these classes this way is for performance\n      // limit the watchers on panels etc\n      var transparentLastState = false;\n      var lastHasAlertRule = false;\n      var lastAlertState;\n      var hasAlertRule;\n\n      function mouseEnter() {\n        panelContainer.toggleClass('panel-hover-highlight', true);\n        ctrl.dashboard.setPanelFocus(ctrl.panel.id);\n      }\n\n      function mouseLeave() {\n        panelContainer.toggleClass('panel-hover-highlight', false);\n        ctrl.dashboard.setPanelFocus(0);\n      }\n\n      function panelHeightUpdated() {\n        panelContent.css({ height: ctrl.height + 'px' });\n      }\n\n      function resizeScrollableContent() {\n        if (panelScrollbar) {\n          panelScrollbar.update();\n        }\n      }\n\n      // set initial transparency\n      if (ctrl.panel.transparent) {\n        transparentLastState = true;\n        panelContainer.addClass('panel-transparent', true);\n      }\n\n      // update scrollbar after mounting\n      ctrl.events.on('component-did-mount', () => {\n        if (ctrl.__proto__.constructor.scrollable) {\n          const scrollRootClass = 'baron baron__root baron__clipper panel-content--scrollable';\n          const scrollerClass = 'baron__scroller';\n          const scrollBarHTML = `\n            <div class=\"baron__track\">\n              <div class=\"baron__bar\"></div>\n            </div>\n          `;\n\n          let scrollRoot = panelContent;\n          let scroller = panelContent.find(':first').find(':first');\n\n          scrollRoot.addClass(scrollRootClass);\n          $(scrollBarHTML).appendTo(scrollRoot);\n          scroller.addClass(scrollerClass);\n\n          panelScrollbar = baron({\n            root: scrollRoot[0],\n            scroller: scroller[0],\n            bar: '.baron__bar',\n            barOnCls: '_scrollbar',\n            scrollingCls: '_scrolling',\n          });\n\n          panelScrollbar.scroll();\n        }\n      });\n\n      ctrl.events.on('panel-size-changed', () => {\n        ctrl.calculatePanelHeight();\n        panelHeightUpdated();\n        $timeout(() => {\n          resizeScrollableContent();\n          ctrl.render();\n        });\n      });\n\n      // set initial height\n      ctrl.calculatePanelHeight();\n      panelHeightUpdated();\n\n      ctrl.events.on('render', () => {\n        if (transparentLastState !== ctrl.panel.transparent) {\n          panelContainer.toggleClass('panel-transparent', ctrl.panel.transparent === true);\n          transparentLastState = ctrl.panel.transparent;\n        }\n\n        hasAlertRule = ctrl.panel.alert !== undefined;\n        if (lastHasAlertRule !== hasAlertRule) {\n          panelContainer.toggleClass('panel-has-alert', hasAlertRule);\n\n          lastHasAlertRule = hasAlertRule;\n        }\n\n        if (ctrl.alertState) {\n          if (lastAlertState) {\n            panelContainer.removeClass('panel-alert-state--' + lastAlertState);\n          }\n\n          if (ctrl.alertState.state === 'ok' || ctrl.alertState.state === 'alerting') {\n            panelContainer.addClass('panel-alert-state--' + ctrl.alertState.state);\n          }\n\n          lastAlertState = ctrl.alertState.state;\n        } else if (lastAlertState) {\n          panelContainer.removeClass('panel-alert-state--' + lastAlertState);\n          lastAlertState = null;\n        }\n      });\n\n      function updatePanelCornerInfo() {\n        var cornerMode = ctrl.getInfoMode();\n        cornerInfoElem[0].className = 'panel-info-corner panel-info-corner--' + cornerMode;\n\n        if (cornerMode) {\n          if (infoDrop) {\n            infoDrop.destroy();\n          }\n\n          infoDrop = new Drop({\n            target: cornerInfoElem[0],\n            content: function() {\n              return ctrl.getInfoContent({ mode: 'tooltip' });\n            },\n            classes: ctrl.error ? 'drop-error' : 'drop-help',\n            openOn: 'hover',\n            hoverOpenDelay: 100,\n            tetherOptions: {\n              attachment: 'bottom left',\n              targetAttachment: 'top left',\n              constraints: [\n                {\n                  to: 'window',\n                  attachment: 'together',\n                  pin: true,\n                },\n              ],\n            },\n          });\n        }\n      }\n\n      scope.$watchGroup(['ctrl.error', 'ctrl.panel.description'], updatePanelCornerInfo);\n      scope.$watchCollection('ctrl.panel.links', updatePanelCornerInfo);\n\n      cornerInfoElem.on('click', function() {\n        infoDrop.close();\n        scope.$apply(ctrl.openInspector.bind(ctrl));\n      });\n\n      elem.on('mouseenter', mouseEnter);\n      elem.on('mouseleave', mouseLeave);\n\n      scope.$on('$destroy', function() {\n        elem.off();\n        cornerInfoElem.off();\n\n        if (infoDrop) {\n          infoDrop.destroy();\n        }\n\n        if (panelScrollbar) {\n          panelScrollbar.dispose();\n        }\n      });\n    },\n  };\n});\n\nmodule.directive('panelHelpCorner', function($rootScope) {\n  return {\n    restrict: 'E',\n    template: `\n    <span class=\"alert-error panel-error small pointer\" ng-if=\"ctrl.error\" ng-click=\"ctrl.openInspector()\">\n    <span data-placement=\"top\" bs-tooltip=\"ctrl.error\">\n    <i class=\"fa fa-exclamation\"></i><span class=\"panel-error-arrow\"></span>\n    </span>\n    </span>\n    `,\n    link: function(scope, elem) {},\n  };\n});\n","import $ from 'jquery';\nimport { coreModule } from 'app/core/core';\n\nvar template = `\n<span class=\"panel-title\">\n  <span class=\"icon-gf panel-alert-icon\"></span>\n  <span class=\"panel-title-text\">{{ctrl.panel.title | interpolateTemplateVars:this}}</span>\n  <span class=\"panel-menu-container dropdown\">\n    <span class=\"fa fa-caret-down panel-menu-toggle\" data-toggle=\"dropdown\"></span>\n    <ul class=\"dropdown-menu dropdown-menu--menu panel-menu\" role=\"menu\">\n      <li>\n        <a ng-click=\"ctrl.addDataQuery(datasource);\">\n          <i class=\"fa fa-cog\"></i> Edit <span class=\"dropdown-menu-item-shortcut\">e</span>\n        </a>\n      </li>\n      <li class=\"dropdown-submenu\">\n        <a ng-click=\"ctrl.addDataQuery(datasource);\"><i class=\"fa fa-cube\"></i> Actions</a>\n        <ul class=\"dropdown-menu panel-menu\">\n          <li><a ng-click=\"ctrl.addDataQuery(datasource);\"><i class=\"fa fa-flash\"></i> Add Annotation</a></li>\n          <li><a ng-click=\"ctrl.addDataQuery(datasource);\"><i class=\"fa fa-bullseye\"></i> Toggle Legend</a></li>\n          <li><a ng-click=\"ctrl.addDataQuery(datasource);\"><i class=\"fa fa-download\"></i> Export to CSV</a></li>\n          <li><a ng-click=\"ctrl.addDataQuery(datasource);\"><i class=\"fa fa-eye\"></i> View JSON</a></li>\n        </ul>\n      </li>\n      <li><a ng-click=\"ctrl.addDataQuery(datasource);\"><i class=\"fa fa-trash\"></i> Remove</a></li>\n    </ul>\n  </span>\n  <span class=\"panel-time-info\" ng-if=\"ctrl.timeInfo\"><i class=\"fa fa-clock-o\"></i> {{ctrl.timeInfo}}</span>\n</span>`;\n\nfunction renderMenuItem(item, ctrl) {\n  let html = '';\n  let listItemClass = '';\n\n  if (item.divider) {\n    return '<li class=\"divider\"></li>';\n  }\n\n  if (item.submenu) {\n    listItemClass = 'dropdown-submenu';\n  }\n\n  html += `<li class=\"${listItemClass}\"><a `;\n\n  if (item.click) {\n    html += ` ng-click=\"${item.click}\"`;\n  }\n  if (item.href) {\n    html += ` href=\"${item.href}\"`;\n  }\n\n  html += `><i class=\"${item.icon}\"></i>`;\n  html += `<span class=\"dropdown-item-text\">${item.text}</span>`;\n\n  if (item.shortcut) {\n    html += `<span class=\"dropdown-menu-item-shortcut\">${item.shortcut}</span>`;\n  }\n\n  html += `</a>`;\n\n  if (item.submenu) {\n    html += '<ul class=\"dropdown-menu dropdown-menu--menu panel-menu\">';\n    for (let subitem of item.submenu) {\n      html += renderMenuItem(subitem, ctrl);\n    }\n    html += '</ul>';\n  }\n\n  html += `</li>`;\n  return html;\n}\n\nfunction createMenuTemplate(ctrl) {\n  let html = '';\n\n  for (let item of ctrl.getMenu()) {\n    html += renderMenuItem(item, ctrl);\n  }\n\n  return html;\n}\n\n/** @ngInject **/\nfunction panelHeader($compile) {\n  return {\n    restrict: 'E',\n    template: template,\n    link: function(scope, elem, attrs) {\n      let menuElem = elem.find('.panel-menu');\n      let menuScope;\n      let isDragged;\n\n      elem.click(function(evt) {\n        const targetClass = evt.target.className;\n\n        // remove existing scope\n        if (menuScope) {\n          menuScope.$destroy();\n        }\n\n        menuScope = scope.$new();\n        let menuHtml = createMenuTemplate(scope.ctrl);\n        menuElem.html(menuHtml);\n        $compile(menuElem)(menuScope);\n\n        if (targetClass.indexOf('panel-title-text') >= 0 || targetClass.indexOf('panel-title') >= 0) {\n          togglePanelMenu(evt);\n        }\n      });\n\n      elem.find('.panel-menu-toggle').click(() => {\n        togglePanelStackPosition();\n      });\n\n      function togglePanelMenu(e) {\n        if (!isDragged) {\n          e.stopPropagation();\n          togglePanelStackPosition();\n          elem.find('[data-toggle=dropdown]').dropdown('toggle');\n        }\n      }\n\n      /**\n       * Hack for adding special class 'dropdown-menu-open' to the panel.\n       * This class sets z-index for panel and prevents menu overlapping.\n       */\n      function togglePanelStackPosition() {\n        const menuOpenClass = 'dropdown-menu-open';\n        const panelGridClass = '.react-grid-item.panel';\n\n        let panelElem = elem\n          .find('[data-toggle=dropdown]')\n          .parentsUntil('.panel')\n          .parent();\n        let menuElem = elem.find('[data-toggle=dropdown]').parent();\n        panelElem = panelElem && panelElem.length ? panelElem[0] : undefined;\n        if (panelElem) {\n          panelElem = $(panelElem);\n          $(panelGridClass).removeClass(menuOpenClass);\n          let state = !menuElem.hasClass('open');\n          panelElem.toggleClass(menuOpenClass, state);\n        }\n      }\n\n      let mouseX, mouseY;\n      elem.mousedown(e => {\n        mouseX = e.pageX;\n        mouseY = e.pageY;\n      });\n\n      elem.mouseup(e => {\n        if (mouseX === e.pageX && mouseY === e.pageY) {\n          isDragged = false;\n        } else {\n          isDragged = true;\n        }\n      });\n    },\n  };\n}\n\ncoreModule.directive('panelHeader', panelHeader);\n","import System from 'systemjs/dist/system.js';\nimport _ from 'lodash';\nimport * as sdk from 'app/plugins/sdk';\nimport kbn from 'app/core/utils/kbn';\nimport moment from 'moment';\nimport angular from 'angular';\nimport jquery from 'jquery';\n\n// Experimental module exports\nimport prismjs from 'prismjs';\nimport slate from 'slate';\nimport slateReact from 'slate-react';\nimport slatePlain from 'slate-plain-serializer';\nimport react from 'react';\nimport reactDom from 'react-dom';\n\nimport config from 'app/core/config';\nimport TimeSeries from 'app/core/time_series2';\nimport TableModel from 'app/core/table_model';\nimport { coreModule, appEvents, contextSrv } from 'app/core/core';\nimport * as datemath from 'app/core/utils/datemath';\nimport * as fileExport from 'app/core/utils/file_export';\nimport * as flatten from 'app/core/utils/flatten';\nimport * as ticks from 'app/core/utils/ticks';\nimport impressionSrv from 'app/core/services/impression_srv';\nimport builtInPlugins from './built_in_plugins';\nimport * as d3 from 'd3';\n\n// rxjs\nimport { Observable } from 'rxjs/Observable';\nimport { Subject } from 'rxjs/Subject';\n\n// these imports add functions to Observable\nimport 'rxjs/add/observable/empty';\nimport 'rxjs/add/observable/from';\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/operator/combineAll';\n\n// add cache busting\nconst bust = `?_cache=${Date.now()}`;\nfunction locate(load) {\n  return load.address + bust;\n}\nSystem.registry.set('plugin-loader', System.newModule({ locate: locate }));\n\nSystem.config({\n  baseURL: 'public',\n  defaultExtension: 'js',\n  packages: {\n    plugins: {\n      defaultExtension: 'js',\n    },\n  },\n  map: {\n    text: 'vendor/plugin-text/text.js',\n    css: 'vendor/plugin-css/css.js',\n  },\n  meta: {\n    '/*': {\n      esModule: true,\n      authorization: true,\n      loader: 'plugin-loader',\n    },\n  },\n});\n\nfunction exposeToPlugin(name: string, component: any) {\n  System.registerDynamic(name, [], true, function(require, exports, module) {\n    module.exports = component;\n  });\n}\n\nexposeToPlugin('lodash', _);\nexposeToPlugin('moment', moment);\nexposeToPlugin('jquery', jquery);\nexposeToPlugin('angular', angular);\nexposeToPlugin('d3', d3);\nexposeToPlugin('rxjs/Subject', Subject);\nexposeToPlugin('rxjs/Observable', Observable);\n\n// Experimental modules\nexposeToPlugin('prismjs', prismjs);\nexposeToPlugin('slate', slate);\nexposeToPlugin('slate-react', slateReact);\nexposeToPlugin('slate-plain-serializer', slatePlain);\nexposeToPlugin('react', react);\nexposeToPlugin('react-dom', reactDom);\n\n// backward compatible path\nexposeToPlugin('vendor/npm/rxjs/Rx', {\n  Subject: Subject,\n  Observable: Observable,\n});\n\nexposeToPlugin('app/features/dashboard/impression_store', {\n  impressions: impressionSrv,\n  __esModule: true,\n});\n\nexposeToPlugin('app/plugins/sdk', sdk);\nexposeToPlugin('app/core/utils/datemath', datemath);\nexposeToPlugin('app/core/utils/file_export', fileExport);\nexposeToPlugin('app/core/utils/flatten', flatten);\nexposeToPlugin('app/core/utils/kbn', kbn);\nexposeToPlugin('app/core/utils/ticks', ticks);\n\nexposeToPlugin('app/core/config', config);\nexposeToPlugin('app/core/time_series', TimeSeries);\nexposeToPlugin('app/core/time_series2', TimeSeries);\nexposeToPlugin('app/core/table_model', TableModel);\nexposeToPlugin('app/core/app_events', appEvents);\nexposeToPlugin('app/core/core_module', coreModule);\nexposeToPlugin('app/core/core', {\n  coreModule: coreModule,\n  appEvents: appEvents,\n  contextSrv: contextSrv,\n  __esModule: true,\n});\n\nimport 'vendor/flot/jquery.flot';\nimport 'vendor/flot/jquery.flot.selection';\nimport 'vendor/flot/jquery.flot.time';\nimport 'vendor/flot/jquery.flot.stack';\nimport 'vendor/flot/jquery.flot.pie';\nimport 'vendor/flot/jquery.flot.stackpercent';\nimport 'vendor/flot/jquery.flot.fillbelow';\nimport 'vendor/flot/jquery.flot.crosshair';\nimport 'vendor/flot/jquery.flot.dashes';\nimport 'vendor/flot/jquery.flot.gauge';\n\nconst flotDeps = [\n  'jquery.flot',\n  'jquery.flot.pie',\n  'jquery.flot.time',\n  'jquery.flot.fillbelow',\n  'jquery.flot.crosshair',\n  'jquery.flot.stack',\n  'jquery.flot.selection',\n  'jquery.flot.stackpercent',\n  'jquery.flot.events',\n  'jquery.flot.gauge',\n];\nfor (let flotDep of flotDeps) {\n  exposeToPlugin(flotDep, { fakeDep: 1 });\n}\n\nexport function importPluginModule(path: string): Promise<any> {\n  let builtIn = builtInPlugins[path];\n  if (builtIn) {\n    return Promise.resolve(builtIn);\n  }\n  return System.import(path);\n}\n\nexport function loadPluginCss(options) {\n  if (config.bootData.user.lightTheme) {\n    System.import(options.light + '!css');\n  } else {\n    System.import(options.dark + '!css');\n  }\n}\n","import angular from 'angular';\nimport _ from 'lodash';\nimport $ from 'jquery';\nimport rst2html from 'rst2html';\nimport Drop from 'tether-drop';\n\n/** @ngInject */\nexport function graphiteAddFunc($compile) {\n  const inputTemplate =\n    '<input type=\"text\"' + ' class=\"gf-form-input\"' + ' spellcheck=\"false\" style=\"display:none\"></input>';\n\n  const buttonTemplate =\n    '<a class=\"gf-form-label query-part dropdown-toggle\"' +\n    ' tabindex=\"1\" gf-dropdown=\"functionMenu\" data-toggle=\"dropdown\">' +\n    '<i class=\"fa fa-plus\"></i></a>';\n\n  return {\n    link: function($scope, elem) {\n      var ctrl = $scope.ctrl;\n\n      var $input = $(inputTemplate);\n      var $button = $(buttonTemplate);\n\n      $input.appendTo(elem);\n      $button.appendTo(elem);\n\n      ctrl.datasource.getFuncDefs().then(function(funcDefs) {\n        var allFunctions = _.map(funcDefs, 'name').sort();\n\n        $scope.functionMenu = createFunctionDropDownMenu(funcDefs);\n\n        $input.attr('data-provide', 'typeahead');\n        $input.typeahead({\n          source: allFunctions,\n          minLength: 1,\n          items: 10,\n          updater: function(value) {\n            var funcDef = ctrl.datasource.getFuncDef(value);\n            if (!funcDef) {\n              // try find close match\n              value = value.toLowerCase();\n              funcDef = _.find(allFunctions, function(funcName) {\n                return funcName.toLowerCase().indexOf(value) === 0;\n              });\n\n              if (!funcDef) {\n                return '';\n              }\n            }\n\n            $scope.$apply(function() {\n              ctrl.addFunction(funcDef);\n            });\n\n            $input.trigger('blur');\n            return '';\n          },\n        });\n\n        $button.click(function() {\n          $button.hide();\n          $input.show();\n          $input.focus();\n        });\n\n        $input.keyup(function() {\n          elem.toggleClass('open', $input.val() === '');\n        });\n\n        $input.blur(function() {\n          // clicking the function dropdown menu won't\n          // work if you remove class at once\n          setTimeout(function() {\n            $input.val('');\n            $input.hide();\n            $button.show();\n            elem.removeClass('open');\n          }, 200);\n        });\n\n        $compile(elem.contents())($scope);\n      });\n\n      var drop;\n      var cleanUpDrop = function() {\n        if (drop) {\n          drop.destroy();\n          drop = null;\n        }\n      };\n\n      $(elem)\n        .on('mouseenter', 'ul.dropdown-menu li', function() {\n          cleanUpDrop();\n\n          var funcDef;\n          try {\n            funcDef = ctrl.datasource.getFuncDef($('a', this).text());\n          } catch (e) {\n            // ignore\n          }\n\n          if (funcDef && funcDef.description) {\n            var shortDesc = funcDef.description;\n            if (shortDesc.length > 500) {\n              shortDesc = shortDesc.substring(0, 497) + '...';\n            }\n\n            var contentElement = document.createElement('div');\n            contentElement.innerHTML = '<h4>' + funcDef.name + '</h4>' + rst2html(shortDesc);\n\n            drop = new Drop({\n              target: this,\n              content: contentElement,\n              classes: 'drop-popover',\n              openOn: 'always',\n              tetherOptions: {\n                attachment: 'bottom left',\n                targetAttachment: 'bottom right',\n              },\n            });\n          }\n        })\n        .on('mouseout', 'ul.dropdown-menu li', function() {\n          cleanUpDrop();\n        });\n\n      $scope.$on('$destroy', cleanUpDrop);\n    },\n  };\n}\n\nangular.module('grafana.directives').directive('graphiteAddFunc', graphiteAddFunc);\n\nfunction createFunctionDropDownMenu(funcDefs) {\n  var categories = {};\n\n  _.forEach(funcDefs, function(funcDef) {\n    if (!funcDef.category) {\n      return;\n    }\n    if (!categories[funcDef.category]) {\n      categories[funcDef.category] = [];\n    }\n    categories[funcDef.category].push({\n      text: funcDef.name,\n      click: \"ctrl.addFunction('\" + funcDef.name + \"')\",\n    });\n  });\n\n  return _.sortBy(\n    _.map(categories, function(submenu, category) {\n      return {\n        text: category,\n        submenu: _.sortBy(submenu, 'text'),\n      };\n    }),\n    'text'\n  );\n}\n","import angular from 'angular';\nimport _ from 'lodash';\nimport $ from 'jquery';\nimport rst2html from 'rst2html';\n\n/** @ngInject */\nexport function graphiteFuncEditor($compile, templateSrv, popoverSrv) {\n  const funcSpanTemplate = '<a ng-click=\"\">{{func.def.name}}</a><span>(</span>';\n  const paramTemplate =\n    '<input type=\"text\" style=\"display:none\"' + ' class=\"input-small tight-form-func-param\"></input>';\n\n  const funcControlsTemplate = `\n    <div class=\"tight-form-func-controls\">\n      <span class=\"pointer fa fa-arrow-left\"></span>\n      <span class=\"pointer fa fa-question-circle\"></span>\n      <span class=\"pointer fa fa-remove\" ></span>\n      <span class=\"pointer fa fa-arrow-right\"></span>\n    </div>`;\n\n  return {\n    restrict: 'A',\n    link: function postLink($scope, elem) {\n      var $funcLink = $(funcSpanTemplate);\n      var $funcControls = $(funcControlsTemplate);\n      var ctrl = $scope.ctrl;\n      var func = $scope.func;\n      var scheduledRelink = false;\n      var paramCountAtLink = 0;\n      var cancelBlur = null;\n\n      function clickFuncParam(paramIndex) {\n        /*jshint validthis:true */\n\n        var $link = $(this);\n        var $comma = $link.prev('.comma');\n        var $input = $link.next();\n\n        $input.val(func.params[paramIndex]);\n\n        $comma.removeClass('query-part__last');\n        $link.hide();\n        $input.show();\n        $input.focus();\n        $input.select();\n\n        var typeahead = $input.data('typeahead');\n        if (typeahead) {\n          $input.val('');\n          typeahead.lookup();\n        }\n      }\n\n      function scheduledRelinkIfNeeded() {\n        if (paramCountAtLink === func.params.length) {\n          return;\n        }\n\n        if (!scheduledRelink) {\n          scheduledRelink = true;\n          setTimeout(function() {\n            relink();\n            scheduledRelink = false;\n          }, 200);\n        }\n      }\n\n      function paramDef(index) {\n        if (index < func.def.params.length) {\n          return func.def.params[index];\n        }\n        if (_.last(func.def.params).multiple) {\n          return _.assign({}, _.last(func.def.params), { optional: true });\n        }\n        return {};\n      }\n\n      function switchToLink(inputElem, paramIndex) {\n        /*jshint validthis:true */\n        var $input = $(inputElem);\n\n        clearTimeout(cancelBlur);\n        cancelBlur = null;\n\n        var $link = $input.prev();\n        var $comma = $link.prev('.comma');\n        var newValue = $input.val();\n\n        // remove optional empty params\n        if (newValue !== '' || paramDef(paramIndex).optional) {\n          func.updateParam(newValue, paramIndex);\n          $link.html(newValue ? templateSrv.highlightVariablesAsHtml(newValue) : '&nbsp;');\n        }\n\n        scheduledRelinkIfNeeded();\n\n        $scope.$apply(function() {\n          ctrl.targetChanged();\n        });\n\n        if ($link.hasClass('query-part__last') && newValue === '') {\n          $comma.addClass('query-part__last');\n        } else {\n          $link.removeClass('query-part__last');\n        }\n\n        $input.hide();\n        $link.show();\n      }\n\n      // this = input element\n      function inputBlur(paramIndex) {\n        /*jshint validthis:true */\n        var inputElem = this;\n        // happens long before the click event on the typeahead options\n        // need to have long delay because the blur\n        cancelBlur = setTimeout(function() {\n          switchToLink(inputElem, paramIndex);\n        }, 200);\n      }\n\n      function inputKeyPress(paramIndex, e) {\n        /*jshint validthis:true */\n        if (e.which === 13) {\n          $(this).blur();\n        }\n      }\n\n      function inputKeyDown() {\n        /*jshint validthis:true */\n        this.style.width = (3 + this.value.length) * 8 + 'px';\n      }\n\n      function addTypeahead($input, paramIndex) {\n        $input.attr('data-provide', 'typeahead');\n\n        var options = paramDef(paramIndex).options;\n        if (paramDef(paramIndex).type === 'int') {\n          options = _.map(options, function(val) {\n            return val.toString();\n          });\n        }\n\n        $input.typeahead({\n          source: options,\n          minLength: 0,\n          items: 20,\n          updater: function(value) {\n            $input.val(value);\n            switchToLink($input[0], paramIndex);\n            return value;\n          },\n        });\n\n        var typeahead = $input.data('typeahead');\n        typeahead.lookup = function() {\n          this.query = this.$element.val() || '';\n          return this.process(this.source);\n        };\n      }\n\n      function toggleFuncControls() {\n        var targetDiv = elem.closest('.tight-form');\n\n        if (elem.hasClass('show-function-controls')) {\n          elem.removeClass('show-function-controls');\n          targetDiv.removeClass('has-open-function');\n          $funcControls.hide();\n          return;\n        }\n\n        elem.addClass('show-function-controls');\n        targetDiv.addClass('has-open-function');\n\n        $funcControls.show();\n      }\n\n      function addElementsAndCompile() {\n        $funcControls.appendTo(elem);\n        $funcLink.appendTo(elem);\n\n        var defParams = _.clone(func.def.params);\n        var lastParam = _.last(func.def.params);\n\n        while (func.params.length >= defParams.length && lastParam && lastParam.multiple) {\n          defParams.push(_.assign({}, lastParam, { optional: true }));\n        }\n\n        _.each(defParams, function(param, index) {\n          if (param.optional && func.params.length < index) {\n            return false;\n          }\n\n          var paramValue = templateSrv.highlightVariablesAsHtml(func.params[index]);\n\n          var last = index >= func.params.length - 1 && param.optional && !paramValue;\n          if (last && param.multiple) {\n            paramValue = '+';\n          }\n\n          if (index > 0) {\n            $('<span class=\"comma' + (last ? ' query-part__last' : '') + '\">, </span>').appendTo(elem);\n          }\n\n          var $paramLink = $(\n            '<a ng-click=\"\" class=\"graphite-func-param-link' +\n              (last ? ' query-part__last' : '') +\n              '\">' +\n              (paramValue || '&nbsp;') +\n              '</a>'\n          );\n          var $input = $(paramTemplate);\n          $input.attr('placeholder', param.name);\n\n          paramCountAtLink++;\n\n          $paramLink.appendTo(elem);\n          $input.appendTo(elem);\n\n          $input.blur(_.partial(inputBlur, index));\n          $input.keyup(inputKeyDown);\n          $input.keypress(_.partial(inputKeyPress, index));\n          $paramLink.click(_.partial(clickFuncParam, index));\n\n          if (param.options) {\n            addTypeahead($input, index);\n          }\n\n          return true;\n        });\n\n        $('<span>)</span>').appendTo(elem);\n\n        $compile(elem.contents())($scope);\n      }\n\n      function ifJustAddedFocusFirstParam() {\n        if ($scope.func.added) {\n          $scope.func.added = false;\n          setTimeout(function() {\n            elem\n              .find('.graphite-func-param-link')\n              .first()\n              .click();\n          }, 10);\n        }\n      }\n\n      function registerFuncControlsToggle() {\n        $funcLink.click(toggleFuncControls);\n      }\n\n      function registerFuncControlsActions() {\n        $funcControls.click(function(e) {\n          var $target = $(e.target);\n          if ($target.hasClass('fa-remove')) {\n            toggleFuncControls();\n            $scope.$apply(function() {\n              ctrl.removeFunction($scope.func);\n            });\n            return;\n          }\n\n          if ($target.hasClass('fa-arrow-left')) {\n            $scope.$apply(function() {\n              _.move(ctrl.queryModel.functions, $scope.$index, $scope.$index - 1);\n              ctrl.targetChanged();\n            });\n            return;\n          }\n\n          if ($target.hasClass('fa-arrow-right')) {\n            $scope.$apply(function() {\n              _.move(ctrl.queryModel.functions, $scope.$index, $scope.$index + 1);\n              ctrl.targetChanged();\n            });\n            return;\n          }\n\n          if ($target.hasClass('fa-question-circle')) {\n            var funcDef = ctrl.datasource.getFuncDef(func.def.name);\n            if (funcDef && funcDef.description) {\n              popoverSrv.show({\n                element: e.target,\n                position: 'bottom left',\n                classNames: 'drop-popover drop-function-def',\n                template: `\n                  <div style=\"overflow:auto;max-height:30rem;\">\n                    <h4> ${funcDef.name} </h4>\n                    ${rst2html(funcDef.description)}\n                  </div>`,\n                openOn: 'click',\n              });\n            } else {\n              window.open(\n                'http://graphite.readthedocs.org/en/latest/functions.html#graphite.render.functions.' + func.def.name,\n                '_blank'\n              );\n            }\n            return;\n          }\n        });\n      }\n\n      function relink() {\n        elem.children().remove();\n\n        addElementsAndCompile();\n        ifJustAddedFocusFirstParam();\n        registerFuncControlsToggle();\n        registerFuncControlsActions();\n      }\n\n      relink();\n    },\n  };\n}\n\nangular.module('grafana.directives').directive('graphiteFuncEditor', graphiteFuncEditor);\n","import _ from 'lodash';\n\nimport $ from 'jquery';\nimport kbn from 'app/core/utils/kbn';\nimport * as dateMath from 'app/core/utils/datemath';\nimport PrometheusMetricFindQuery from './metric_find_query';\nimport { ResultTransformer } from './result_transformer';\nimport { BackendSrv } from 'app/core/services/backend_srv';\n\nexport function alignRange(start, end, step) {\n  const alignedEnd = Math.ceil(end / step) * step;\n  const alignedStart = Math.floor(start / step) * step;\n  return {\n    end: alignedEnd,\n    start: alignedStart,\n  };\n}\n\nexport function prometheusRegularEscape(value) {\n  if (typeof value === 'string') {\n    return value.replace(/'/g, \"\\\\\\\\'\");\n  }\n  return value;\n}\n\nexport function prometheusSpecialRegexEscape(value) {\n  if (typeof value === 'string') {\n    return prometheusRegularEscape(value.replace(/\\\\/g, '\\\\\\\\\\\\\\\\').replace(/[$^*{}\\[\\]+?.()]/g, '\\\\\\\\$&'));\n  }\n  return value;\n}\n\nexport class PrometheusDatasource {\n  type: string;\n  editorSrc: string;\n  name: string;\n  supportsExplore: boolean;\n  supportMetrics: boolean;\n  url: string;\n  directUrl: string;\n  basicAuth: any;\n  withCredentials: any;\n  metricsNameCache: any;\n  interval: string;\n  queryTimeout: string;\n  httpMethod: string;\n  resultTransformer: ResultTransformer;\n\n  /** @ngInject */\n  constructor(instanceSettings, private $q, private backendSrv: BackendSrv, private templateSrv, private timeSrv) {\n    this.type = 'prometheus';\n    this.editorSrc = 'app/features/prometheus/partials/query.editor.html';\n    this.name = instanceSettings.name;\n    this.supportsExplore = true;\n    this.supportMetrics = true;\n    this.url = instanceSettings.url;\n    this.directUrl = instanceSettings.directUrl;\n    this.basicAuth = instanceSettings.basicAuth;\n    this.withCredentials = instanceSettings.withCredentials;\n    this.interval = instanceSettings.jsonData.timeInterval || '15s';\n    this.queryTimeout = instanceSettings.jsonData.queryTimeout;\n    this.httpMethod = instanceSettings.jsonData.httpMethod || 'GET';\n    this.resultTransformer = new ResultTransformer(templateSrv);\n  }\n\n  _request(url, data?, options?: any) {\n    var options: any = {\n      url: this.url + url,\n      method: this.httpMethod,\n      ...options,\n    };\n    if (options.method === 'GET') {\n      if (!_.isEmpty(data)) {\n        options.url =\n          options.url +\n          '?' +\n          _.map(data, (v, k) => {\n            return encodeURIComponent(k) + '=' + encodeURIComponent(v);\n          }).join('&');\n      }\n    } else {\n      options.headers = {\n        'Content-Type': 'application/x-www-form-urlencoded',\n      };\n      options.transformRequest = data => {\n        return $.param(data);\n      };\n      options.data = data;\n    }\n\n    if (this.basicAuth || this.withCredentials) {\n      options.withCredentials = true;\n    }\n\n    if (this.basicAuth) {\n      options.headers = {\n        Authorization: this.basicAuth,\n      };\n    }\n\n    return this.backendSrv.datasourceRequest(options);\n  }\n\n  // Use this for tab completion features, wont publish response to other components\n  metadataRequest(url) {\n    return this._request(url, null, { method: 'GET', silent: true });\n  }\n\n  interpolateQueryExpr(value, variable, defaultFormatFn) {\n    // if no multi or include all do not regexEscape\n    if (!variable.multi && !variable.includeAll) {\n      return prometheusRegularEscape(value);\n    }\n\n    if (typeof value === 'string') {\n      return prometheusSpecialRegexEscape(value);\n    }\n\n    var escapedValues = _.map(value, prometheusSpecialRegexEscape);\n    return escapedValues.join('|');\n  }\n\n  targetContainsTemplate(target) {\n    return this.templateSrv.variableExists(target.expr);\n  }\n\n  query(options) {\n    var start = this.getPrometheusTime(options.range.from, false);\n    var end = this.getPrometheusTime(options.range.to, true);\n\n    var queries = [];\n    var activeTargets = [];\n\n    options = _.clone(options);\n\n    for (let target of options.targets) {\n      if (!target.expr || target.hide) {\n        continue;\n      }\n\n      activeTargets.push(target);\n      queries.push(this.createQuery(target, options, start, end));\n    }\n\n    // No valid targets, return the empty result to save a round trip.\n    if (_.isEmpty(queries)) {\n      return this.$q.when({ data: [] });\n    }\n\n    var allQueryPromise = _.map(queries, query => {\n      if (!query.instant) {\n        return this.performTimeSeriesQuery(query, query.start, query.end);\n      } else {\n        return this.performInstantQuery(query, end);\n      }\n    });\n\n    return this.$q.all(allQueryPromise).then(responseList => {\n      let result = [];\n\n      _.each(responseList, (response, index) => {\n        if (response.status === 'error') {\n          throw response.error;\n        }\n\n        // Keeping original start/end for transformers\n        const transformerOptions = {\n          format: activeTargets[index].format,\n          step: queries[index].step,\n          legendFormat: activeTargets[index].legendFormat,\n          start: queries[index].start,\n          end: queries[index].end,\n          query: queries[index].expr,\n          responseListLength: responseList.length,\n          responseIndex: index,\n          refId: activeTargets[index].refId,\n        };\n\n        this.resultTransformer.transform(result, response, transformerOptions);\n      });\n\n      return { data: result };\n    });\n  }\n\n  createQuery(target, options, start, end) {\n    var query: any = {};\n    query.instant = target.instant;\n    var range = Math.ceil(end - start);\n\n    var interval = kbn.interval_to_seconds(options.interval);\n    // Minimum interval (\"Min step\"), if specified for the query. or same as interval otherwise\n    var minInterval = kbn.interval_to_seconds(\n      this.templateSrv.replace(target.interval, options.scopedVars) || options.interval\n    );\n    var intervalFactor = target.intervalFactor || 1;\n    // Adjust the interval to take into account any specified minimum and interval factor plus Prometheus limits\n    var adjustedInterval = this.adjustInterval(interval, minInterval, range, intervalFactor);\n    var scopedVars = { ...options.scopedVars, ...this.getRangeScopedVars() };\n    // If the interval was adjusted, make a shallow copy of scopedVars with updated interval vars\n    if (interval !== adjustedInterval) {\n      interval = adjustedInterval;\n      scopedVars = Object.assign({}, options.scopedVars, {\n        __interval: { text: interval + 's', value: interval + 's' },\n        __interval_ms: { text: interval * 1000, value: interval * 1000 },\n        ...this.getRangeScopedVars(),\n      });\n    }\n    query.step = interval;\n\n    // Only replace vars in expression after having (possibly) updated interval vars\n    query.expr = this.templateSrv.replace(target.expr, scopedVars, this.interpolateQueryExpr);\n    query.requestId = options.panelId + target.refId;\n\n    // Align query interval with step\n    const adjusted = alignRange(start, end, query.step);\n    query.start = adjusted.start;\n    query.end = adjusted.end;\n\n    return query;\n  }\n\n  adjustInterval(interval, minInterval, range, intervalFactor) {\n    // Prometheus will drop queries that might return more than 11000 data points.\n    // Calibrate interval if it is too small.\n    if (interval !== 0 && range / intervalFactor / interval > 11000) {\n      interval = Math.ceil(range / intervalFactor / 11000);\n    }\n    return Math.max(interval * intervalFactor, minInterval, 1);\n  }\n\n  performTimeSeriesQuery(query, start, end) {\n    if (start > end) {\n      throw { message: 'Invalid time range' };\n    }\n\n    var url = '/api/v1/query_range';\n    var data = {\n      query: query.expr,\n      start: start,\n      end: end,\n      step: query.step,\n    };\n    if (this.queryTimeout) {\n      data['timeout'] = this.queryTimeout;\n    }\n    return this._request(url, data, { requestId: query.requestId });\n  }\n\n  performInstantQuery(query, time) {\n    var url = '/api/v1/query';\n    var data = {\n      query: query.expr,\n      time: time,\n    };\n    if (this.queryTimeout) {\n      data['timeout'] = this.queryTimeout;\n    }\n    return this._request(url, data, { requestId: query.requestId });\n  }\n\n  performSuggestQuery(query, cache = false) {\n    var url = '/api/v1/label/__name__/values';\n\n    if (cache && this.metricsNameCache && this.metricsNameCache.expire > Date.now()) {\n      return this.$q.when(\n        _.filter(this.metricsNameCache.data, metricName => {\n          return metricName.indexOf(query) !== 1;\n        })\n      );\n    }\n\n    return this.metadataRequest(url).then(result => {\n      this.metricsNameCache = {\n        data: result.data.data,\n        expire: Date.now() + 60 * 1000,\n      };\n      return _.filter(result.data.data, metricName => {\n        return metricName.indexOf(query) !== 1;\n      });\n    });\n  }\n\n  metricFindQuery(query) {\n    if (!query) {\n      return this.$q.when([]);\n    }\n\n    let scopedVars = {\n      __interval: { text: this.interval, value: this.interval },\n      __interval_ms: { text: kbn.interval_to_ms(this.interval), value: kbn.interval_to_ms(this.interval) },\n      ...this.getRangeScopedVars(),\n    };\n    let interpolated = this.templateSrv.replace(query, scopedVars, this.interpolateQueryExpr);\n    var metricFindQuery = new PrometheusMetricFindQuery(this, interpolated, this.timeSrv);\n    return metricFindQuery.process();\n  }\n\n  getRangeScopedVars() {\n    let range = this.timeSrv.timeRange();\n    let msRange = range.to.diff(range.from);\n    let regularRange = kbn.secondsToHms(msRange / 1000);\n    return {\n      __range_ms: { text: msRange, value: msRange },\n      __range: { text: regularRange, value: regularRange },\n    };\n  }\n\n  annotationQuery(options) {\n    var annotation = options.annotation;\n    var expr = annotation.expr || '';\n    var tagKeys = annotation.tagKeys || '';\n    var titleFormat = annotation.titleFormat || '';\n    var textFormat = annotation.textFormat || '';\n\n    if (!expr) {\n      return this.$q.when([]);\n    }\n\n    var step = annotation.step || '60s';\n    var start = this.getPrometheusTime(options.range.from, false);\n    var end = this.getPrometheusTime(options.range.to, true);\n    // Unsetting min interval\n    const queryOptions = {\n      ...options,\n      interval: '0s',\n    };\n    const query = this.createQuery({ expr, interval: step }, queryOptions, start, end);\n\n    var self = this;\n    return this.performTimeSeriesQuery(query, query.start, query.end).then(function(results) {\n      var eventList = [];\n      tagKeys = tagKeys.split(',');\n\n      _.each(results.data.data.result, function(series) {\n        var tags = _.chain(series.metric)\n          .filter(function(v, k) {\n            return _.includes(tagKeys, k);\n          })\n          .value();\n\n        for (let value of series.values) {\n          if (value[1] === '1') {\n            var event = {\n              annotation: annotation,\n              time: Math.floor(parseFloat(value[0])) * 1000,\n              title: self.resultTransformer.renderTemplate(titleFormat, series.metric),\n              tags: tags,\n              text: self.resultTransformer.renderTemplate(textFormat, series.metric),\n            };\n\n            eventList.push(event);\n          }\n        }\n      });\n\n      return eventList;\n    });\n  }\n\n  testDatasource() {\n    let now = new Date().getTime();\n    return this.performInstantQuery({ expr: '1+1' }, now / 1000).then(response => {\n      if (response.data.status === 'success') {\n        return { status: 'success', message: 'Data source is working' };\n      } else {\n        return { status: 'error', message: response.error };\n      }\n    });\n  }\n\n  getExploreState(panel) {\n    let state = {};\n    if (panel.targets) {\n      const queries = panel.targets.map(t => ({\n        query: this.templateSrv.replace(t.expr, {}, this.interpolateQueryExpr),\n        format: t.format,\n      }));\n      state = {\n        ...state,\n        queries,\n        datasource: this.name,\n      };\n    }\n    return state;\n  }\n\n  getPrometheusTime(date, roundUp) {\n    if (_.isString(date)) {\n      date = dateMath.parse(date, roundUp);\n    }\n    return Math.ceil(date.valueOf() / 1000);\n  }\n\n  getOriginalMetricName(labelData) {\n    return this.resultTransformer.getOriginalMetricName(labelData);\n  }\n}\n","import 'vendor/flot/jquery.flot';\nimport 'vendor/flot/jquery.flot.selection';\nimport 'vendor/flot/jquery.flot.time';\nimport 'vendor/flot/jquery.flot.stack';\nimport 'vendor/flot/jquery.flot.stackpercent';\nimport 'vendor/flot/jquery.flot.fillbelow';\nimport 'vendor/flot/jquery.flot.crosshair';\nimport 'vendor/flot/jquery.flot.dashes';\nimport './jquery.flot.events';\n\nimport $ from 'jquery';\nimport _ from 'lodash';\nimport moment from 'moment';\nimport kbn from 'app/core/utils/kbn';\nimport { tickStep } from 'app/core/utils/ticks';\nimport { appEvents, coreModule, updateLegendValues } from 'app/core/core';\nimport GraphTooltip from './graph_tooltip';\nimport { ThresholdManager } from './threshold_manager';\nimport { EventManager } from 'app/features/annotations/all';\nimport { convertToHistogramData } from './histogram';\nimport { alignYLevel } from './align_yaxes';\nimport config from 'app/core/config';\n\n/** @ngInject **/\nfunction graphDirective(timeSrv, popoverSrv, contextSrv) {\n  return {\n    restrict: 'A',\n    template: '',\n    link: function(scope, elem) {\n      var ctrl = scope.ctrl;\n      var dashboard = ctrl.dashboard;\n      var panel = ctrl.panel;\n      var annotations = [];\n      var data;\n      var plot;\n      var sortedSeries;\n      var panelWidth = 0;\n      var eventManager = new EventManager(ctrl);\n      var thresholdManager = new ThresholdManager(ctrl);\n      var tooltip = new GraphTooltip(elem, dashboard, scope, function() {\n        return sortedSeries;\n      });\n\n      // panel events\n      ctrl.events.on('panel-teardown', () => {\n        thresholdManager = null;\n\n        if (plot) {\n          plot.destroy();\n          plot = null;\n        }\n      });\n\n      /**\n       * Split graph rendering into two parts.\n       * First, calculate series stats in buildFlotPairs() function. Then legend rendering started\n       * (see ctrl.events.on('render') in legend.ts).\n       * When legend is rendered it emits 'legend-rendering-complete' and graph rendered.\n       */\n      ctrl.events.on('render', renderData => {\n        data = renderData || data;\n        if (!data) {\n          return;\n        }\n        annotations = ctrl.annotations || [];\n        buildFlotPairs(data);\n        const graphHeight = elem.height();\n        updateLegendValues(data, panel, graphHeight);\n\n        ctrl.events.emit('render-legend');\n      });\n\n      ctrl.events.on('legend-rendering-complete', () => {\n        render_panel();\n      });\n\n      // global events\n      appEvents.on(\n        'graph-hover',\n        evt => {\n          // ignore other graph hover events if shared tooltip is disabled\n          if (!dashboard.sharedTooltipModeEnabled()) {\n            return;\n          }\n\n          // ignore if we are the emitter\n          if (!plot || evt.panel.id === panel.id || ctrl.otherPanelInFullscreenMode()) {\n            return;\n          }\n\n          tooltip.show(evt.pos);\n        },\n        scope\n      );\n\n      appEvents.on(\n        'graph-hover-clear',\n        (event, info) => {\n          if (plot) {\n            tooltip.clear(plot);\n          }\n        },\n        scope\n      );\n\n      function shouldAbortRender() {\n        if (!data) {\n          return true;\n        }\n\n        if (panelWidth === 0) {\n          return true;\n        }\n\n        return false;\n      }\n\n      function drawHook(plot) {\n        // add left axis labels\n        if (panel.yaxes[0].label && panel.yaxes[0].show) {\n          $(\"<div class='axisLabel left-yaxis-label flot-temp-elem'></div>\")\n            .text(panel.yaxes[0].label)\n            .appendTo(elem);\n        }\n\n        // add right axis labels\n        if (panel.yaxes[1].label && panel.yaxes[1].show) {\n          $(\"<div class='axisLabel right-yaxis-label flot-temp-elem'></div>\")\n            .text(panel.yaxes[1].label)\n            .appendTo(elem);\n        }\n\n        if (ctrl.dataWarning) {\n          $(`<div class=\"datapoints-warning flot-temp-elem\">${ctrl.dataWarning.title}</div>`).appendTo(elem);\n        }\n\n        thresholdManager.draw(plot);\n      }\n\n      function processOffsetHook(plot, gridMargin) {\n        var left = panel.yaxes[0];\n        var right = panel.yaxes[1];\n        if (left.show && left.label) {\n          gridMargin.left = 20;\n        }\n        if (right.show && right.label) {\n          gridMargin.right = 20;\n        }\n\n        // apply y-axis min/max options\n        var yaxis = plot.getYAxes();\n        for (var i = 0; i < yaxis.length; i++) {\n          var axis = yaxis[i];\n          var panelOptions = panel.yaxes[i];\n          axis.options.max = axis.options.max !== null ? axis.options.max : panelOptions.max;\n          axis.options.min = axis.options.min !== null ? axis.options.min : panelOptions.min;\n        }\n      }\n\n      function processRangeHook(plot) {\n        var yAxes = plot.getYAxes();\n        const align = panel.yaxis.align || false;\n\n        if (yAxes.length > 1 && align === true) {\n          const level = panel.yaxis.alignLevel || 0;\n          alignYLevel(yAxes, parseFloat(level));\n        }\n      }\n\n      // Series could have different timeSteps,\n      // let's find the smallest one so that bars are correctly rendered.\n      // In addition, only take series which are rendered as bars for this.\n      function getMinTimeStepOfSeries(data) {\n        var min = Number.MAX_VALUE;\n\n        for (let i = 0; i < data.length; i++) {\n          if (!data[i].stats.timeStep) {\n            continue;\n          }\n          if (panel.bars) {\n            if (data[i].bars && data[i].bars.show === false) {\n              continue;\n            }\n          } else {\n            if (typeof data[i].bars === 'undefined' || typeof data[i].bars.show === 'undefined' || !data[i].bars.show) {\n              continue;\n            }\n          }\n\n          if (data[i].stats.timeStep < min) {\n            min = data[i].stats.timeStep;\n          }\n        }\n\n        return min;\n      }\n\n      // Function for rendering panel\n      function render_panel() {\n        panelWidth = elem.width();\n        if (shouldAbortRender()) {\n          return;\n        }\n\n        // give space to alert editing\n        thresholdManager.prepare(elem, data);\n\n        // un-check dashes if lines are unchecked\n        panel.dashes = panel.lines ? panel.dashes : false;\n\n        // Populate element\n        let options: any = buildFlotOptions(panel);\n        prepareXAxis(options, panel);\n        configureYAxisOptions(data, options);\n        thresholdManager.addFlotOptions(options, panel);\n        eventManager.addFlotEvents(annotations, options);\n\n        sortedSeries = sortSeries(data, panel);\n        callPlot(options, true);\n      }\n\n      function buildFlotPairs(data) {\n        for (let i = 0; i < data.length; i++) {\n          let series = data[i];\n          series.data = series.getFlotPairs(series.nullPointMode || panel.nullPointMode);\n\n          // if hidden remove points and disable stack\n          if (ctrl.hiddenSeries[series.alias]) {\n            series.data = [];\n            series.stack = false;\n          }\n        }\n      }\n\n      function prepareXAxis(options, panel) {\n        switch (panel.xaxis.mode) {\n          case 'series': {\n            options.series.bars.barWidth = 0.7;\n            options.series.bars.align = 'center';\n\n            for (let i = 0; i < data.length; i++) {\n              let series = data[i];\n              series.data = [[i + 1, series.stats[panel.xaxis.values[0]]]];\n            }\n\n            addXSeriesAxis(options);\n            break;\n          }\n          case 'histogram': {\n            let bucketSize: number;\n\n            if (data.length) {\n              let histMin = _.min(_.map(data, s => s.stats.min));\n              let histMax = _.max(_.map(data, s => s.stats.max));\n              let ticks = panel.xaxis.buckets || panelWidth / 50;\n              bucketSize = tickStep(histMin, histMax, ticks);\n              options.series.bars.barWidth = bucketSize * 0.8;\n              data = convertToHistogramData(data, bucketSize, ctrl.hiddenSeries, histMin, histMax);\n            } else {\n              bucketSize = 0;\n            }\n\n            addXHistogramAxis(options, bucketSize);\n            break;\n          }\n          case 'table': {\n            options.series.bars.barWidth = 0.7;\n            options.series.bars.align = 'center';\n            addXTableAxis(options);\n            break;\n          }\n          default: {\n            options.series.bars.barWidth = getMinTimeStepOfSeries(data) / 1.5;\n            addTimeAxis(options);\n            break;\n          }\n        }\n      }\n\n      function callPlot(options, incrementRenderCounter) {\n        try {\n          plot = $.plot(elem, sortedSeries, options);\n          if (ctrl.renderError) {\n            delete ctrl.error;\n            delete ctrl.inspector;\n          }\n        } catch (e) {\n          console.log('flotcharts error', e);\n          ctrl.error = e.message || 'Render Error';\n          ctrl.renderError = true;\n          ctrl.inspector = { error: e };\n        }\n\n        if (incrementRenderCounter) {\n          ctrl.renderingCompleted();\n        }\n      }\n\n      function buildFlotOptions(panel) {\n        let gridColor = '#c8c8c8';\n        if (config.bootData.user.lightTheme === true) {\n          gridColor = '#a1a1a1';\n        }\n        const stack = panel.stack ? true : null;\n        let options = {\n          hooks: {\n            draw: [drawHook],\n            processOffset: [processOffsetHook],\n            processRange: [processRangeHook],\n          },\n          legend: { show: false },\n          series: {\n            stackpercent: panel.stack ? panel.percentage : false,\n            stack: panel.percentage ? null : stack,\n            lines: {\n              show: panel.lines,\n              zero: false,\n              fill: translateFillOption(panel.fill),\n              lineWidth: panel.dashes ? 0 : panel.linewidth,\n              steps: panel.steppedLine,\n            },\n            dashes: {\n              show: panel.dashes,\n              lineWidth: panel.linewidth,\n              dashLength: [panel.dashLength, panel.spaceLength],\n            },\n            bars: {\n              show: panel.bars,\n              fill: 1,\n              barWidth: 1,\n              zero: false,\n              lineWidth: 0,\n            },\n            points: {\n              show: panel.points,\n              fill: 1,\n              fillColor: false,\n              radius: panel.points ? panel.pointradius : 2,\n            },\n            shadowSize: 0,\n          },\n          yaxes: [],\n          xaxis: {},\n          grid: {\n            minBorderMargin: 0,\n            markings: [],\n            backgroundColor: null,\n            borderWidth: 0,\n            hoverable: true,\n            clickable: true,\n            color: gridColor,\n            margin: { left: 0, right: 0 },\n            labelMarginX: 0,\n          },\n          selection: {\n            mode: 'x',\n            color: '#666',\n          },\n          crosshair: {\n            mode: 'x',\n          },\n        };\n        return options;\n      }\n\n      function sortSeries(series, panel) {\n        var sortBy = panel.legend.sort;\n        var sortOrder = panel.legend.sortDesc;\n        var haveSortBy = sortBy !== null && sortBy !== undefined;\n        var haveSortOrder = sortOrder !== null && sortOrder !== undefined;\n        var shouldSortBy = panel.stack && haveSortBy && haveSortOrder;\n        var sortDesc = panel.legend.sortDesc === true ? -1 : 1;\n\n        if (shouldSortBy) {\n          return _.sortBy(series, s => s.stats[sortBy] * sortDesc);\n        } else {\n          return _.sortBy(series, s => s.zindex);\n        }\n      }\n\n      function translateFillOption(fill) {\n        if (panel.percentage && panel.stack) {\n          return fill === 0 ? 0.001 : fill / 10;\n        } else {\n          return fill / 10;\n        }\n      }\n\n      function addTimeAxis(options) {\n        var ticks = panelWidth / 100;\n        var min = _.isUndefined(ctrl.range.from) ? null : ctrl.range.from.valueOf();\n        var max = _.isUndefined(ctrl.range.to) ? null : ctrl.range.to.valueOf();\n\n        options.xaxis = {\n          timezone: dashboard.getTimezone(),\n          show: panel.xaxis.show,\n          mode: 'time',\n          min: min,\n          max: max,\n          label: 'Datetime',\n          ticks: ticks,\n          timeformat: time_format(ticks, min, max),\n        };\n      }\n\n      function addXSeriesAxis(options) {\n        var ticks = _.map(data, function(series, index) {\n          return [index + 1, series.alias];\n        });\n\n        options.xaxis = {\n          timezone: dashboard.getTimezone(),\n          show: panel.xaxis.show,\n          mode: null,\n          min: 0,\n          max: ticks.length + 1,\n          label: 'Datetime',\n          ticks: ticks,\n        };\n      }\n\n      function addXHistogramAxis(options, bucketSize) {\n        let ticks, min, max;\n        let defaultTicks = panelWidth / 50;\n\n        if (data.length && bucketSize) {\n          let tick_values = [];\n          for (let d of data) {\n            for (let point of d.data) {\n              tick_values[point[0]] = true;\n            }\n          }\n          ticks = Object.keys(tick_values).map(v => Number(v));\n          min = _.min(ticks);\n          max = _.max(ticks);\n\n          // Adjust tick step\n          let tickStep = bucketSize;\n          let ticks_num = Math.floor((max - min) / tickStep);\n          while (ticks_num > defaultTicks) {\n            tickStep = tickStep * 2;\n            ticks_num = Math.ceil((max - min) / tickStep);\n          }\n\n          // Expand ticks for pretty view\n          min = Math.floor(min / tickStep) * tickStep;\n          // 1.01 is 101% - ensure we have enough space for last bar\n          max = Math.ceil(max * 1.01 / tickStep) * tickStep;\n\n          ticks = [];\n          for (let i = min; i <= max; i += tickStep) {\n            ticks.push(i);\n          }\n        } else {\n          // Set defaults if no data\n          ticks = defaultTicks / 2;\n          min = 0;\n          max = 1;\n        }\n\n        options.xaxis = {\n          timezone: dashboard.getTimezone(),\n          show: panel.xaxis.show,\n          mode: null,\n          min: min,\n          max: max,\n          label: 'Histogram',\n          ticks: ticks,\n        };\n\n        // Use 'short' format for histogram values\n        configureAxisMode(options.xaxis, 'short');\n      }\n\n      function addXTableAxis(options) {\n        var ticks = _.map(data, function(series, seriesIndex) {\n          return _.map(series.datapoints, function(point, pointIndex) {\n            var tickIndex = seriesIndex * series.datapoints.length + pointIndex;\n            return [tickIndex + 1, point[1]];\n          });\n        });\n        ticks = _.flatten(ticks, true);\n\n        options.xaxis = {\n          timezone: dashboard.getTimezone(),\n          show: panel.xaxis.show,\n          mode: null,\n          min: 0,\n          max: ticks.length + 1,\n          label: 'Datetime',\n          ticks: ticks,\n        };\n      }\n\n      function configureYAxisOptions(data, options) {\n        var defaults = {\n          position: 'left',\n          show: panel.yaxes[0].show,\n          index: 1,\n          logBase: panel.yaxes[0].logBase || 1,\n          min: parseNumber(panel.yaxes[0].min),\n          max: parseNumber(panel.yaxes[0].max),\n          tickDecimals: panel.yaxes[0].decimals,\n        };\n\n        options.yaxes.push(defaults);\n\n        if (_.find(data, { yaxis: 2 })) {\n          var secondY = _.clone(defaults);\n          secondY.index = 2;\n          secondY.show = panel.yaxes[1].show;\n          secondY.logBase = panel.yaxes[1].logBase || 1;\n          secondY.position = 'right';\n          secondY.min = parseNumber(panel.yaxes[1].min);\n          secondY.max = parseNumber(panel.yaxes[1].max);\n          secondY.tickDecimals = panel.yaxes[1].decimals;\n          options.yaxes.push(secondY);\n\n          applyLogScale(options.yaxes[1], data);\n          configureAxisMode(options.yaxes[1], panel.percentage && panel.stack ? 'percent' : panel.yaxes[1].format);\n        }\n        applyLogScale(options.yaxes[0], data);\n        configureAxisMode(options.yaxes[0], panel.percentage && panel.stack ? 'percent' : panel.yaxes[0].format);\n      }\n\n      function parseNumber(value: any) {\n        if (value === null || typeof value === 'undefined') {\n          return null;\n        }\n\n        return _.toNumber(value);\n      }\n\n      function applyLogScale(axis, data) {\n        if (axis.logBase === 1) {\n          return;\n        }\n\n        const minSetToZero = axis.min === 0;\n\n        if (axis.min < Number.MIN_VALUE) {\n          axis.min = null;\n        }\n        if (axis.max < Number.MIN_VALUE) {\n          axis.max = null;\n        }\n\n        var series, i;\n        var max = axis.max,\n          min = axis.min;\n\n        for (i = 0; i < data.length; i++) {\n          series = data[i];\n          if (series.yaxis === axis.index) {\n            if (!max || max < series.stats.max) {\n              max = series.stats.max;\n            }\n            if (!min || min > series.stats.logmin) {\n              min = series.stats.logmin;\n            }\n          }\n        }\n\n        axis.transform = function(v) {\n          return v < Number.MIN_VALUE ? null : Math.log(v) / Math.log(axis.logBase);\n        };\n        axis.inverseTransform = function(v) {\n          return Math.pow(axis.logBase, v);\n        };\n\n        if (!max && !min) {\n          max = axis.inverseTransform(+2);\n          min = axis.inverseTransform(-2);\n        } else if (!max) {\n          max = min * axis.inverseTransform(+4);\n        } else if (!min) {\n          min = max * axis.inverseTransform(-4);\n        }\n\n        if (axis.min) {\n          min = axis.inverseTransform(Math.ceil(axis.transform(axis.min)));\n        } else {\n          min = axis.min = axis.inverseTransform(Math.floor(axis.transform(min)));\n        }\n        if (axis.max) {\n          max = axis.inverseTransform(Math.floor(axis.transform(axis.max)));\n        } else {\n          max = axis.max = axis.inverseTransform(Math.ceil(axis.transform(max)));\n        }\n\n        if (!min || min < Number.MIN_VALUE || !max || max < Number.MIN_VALUE) {\n          return;\n        }\n\n        if (Number.isFinite(min) && Number.isFinite(max)) {\n          if (minSetToZero) {\n            axis.min = 0.1;\n            min = 1;\n          }\n\n          axis.ticks = generateTicksForLogScaleYAxis(min, max, axis.logBase);\n          if (minSetToZero) {\n            axis.ticks.unshift(0.1);\n          }\n          if (axis.ticks[axis.ticks.length - 1] > axis.max) {\n            axis.max = axis.ticks[axis.ticks.length - 1];\n          }\n        } else {\n          axis.ticks = [1, 2];\n          delete axis.min;\n          delete axis.max;\n        }\n      }\n\n      function generateTicksForLogScaleYAxis(min, max, logBase) {\n        let ticks = [];\n\n        var nextTick;\n        for (nextTick = min; nextTick <= max; nextTick *= logBase) {\n          ticks.push(nextTick);\n        }\n\n        const maxNumTicks = Math.ceil(ctrl.height / 25);\n        const numTicks = ticks.length;\n        if (numTicks > maxNumTicks) {\n          const factor = Math.ceil(numTicks / maxNumTicks) * logBase;\n          ticks = [];\n\n          for (nextTick = min; nextTick <= max * factor; nextTick *= factor) {\n            ticks.push(nextTick);\n          }\n        }\n\n        return ticks;\n      }\n\n      function configureAxisMode(axis, format) {\n        axis.tickFormatter = function(val, axis) {\n          if (!kbn.valueFormats[format]) {\n            throw new Error(`Unit '${format}' is not supported`);\n          }\n          return kbn.valueFormats[format](val, axis.tickDecimals, axis.scaledDecimals);\n        };\n      }\n\n      function time_format(ticks, min, max) {\n        if (min && max && ticks) {\n          var range = max - min;\n          var secPerTick = range / ticks / 1000;\n          var oneDay = 86400000;\n          var oneYear = 31536000000;\n\n          if (secPerTick <= 45) {\n            return '%H:%M:%S';\n          }\n          if (secPerTick <= 7200 || range <= oneDay) {\n            return '%H:%M';\n          }\n          if (secPerTick <= 80000) {\n            return '%m/%d %H:%M';\n          }\n          if (secPerTick <= 2419200 || range <= oneYear) {\n            return '%m/%d';\n          }\n          return '%Y-%m';\n        }\n\n        return '%H:%M';\n      }\n\n      elem.bind('plotselected', function(event, ranges) {\n        if (panel.xaxis.mode !== 'time') {\n          // Skip if panel in histogram or series mode\n          plot.clearSelection();\n          return;\n        }\n\n        if ((ranges.ctrlKey || ranges.metaKey) && (dashboard.meta.canEdit || dashboard.meta.canMakeEditable)) {\n          // Add annotation\n          setTimeout(() => {\n            eventManager.updateTime(ranges.xaxis);\n          }, 100);\n        } else {\n          scope.$apply(function() {\n            timeSrv.setTime({\n              from: moment.utc(ranges.xaxis.from),\n              to: moment.utc(ranges.xaxis.to),\n            });\n          });\n        }\n      });\n\n      elem.bind('plotclick', function(event, pos, item) {\n        if (panel.xaxis.mode !== 'time') {\n          // Skip if panel in histogram or series mode\n          return;\n        }\n\n        if ((pos.ctrlKey || pos.metaKey) && (dashboard.meta.canEdit || dashboard.meta.canMakeEditable)) {\n          // Skip if range selected (added in \"plotselected\" event handler)\n          let isRangeSelection = pos.x !== pos.x1;\n          if (!isRangeSelection) {\n            setTimeout(() => {\n              eventManager.updateTime({ from: pos.x, to: null });\n            }, 100);\n          }\n        }\n      });\n\n      scope.$on('$destroy', function() {\n        tooltip.destroy();\n        elem.off();\n        elem.remove();\n      });\n    },\n  };\n}\n\ncoreModule.directive('grafanaGraph', graphDirective);\n","import $ from 'jquery';\nimport { appEvents } from 'app/core/core';\n\nexport default function GraphTooltip(elem, dashboard, scope, getSeriesFn) {\n  let self = this;\n  let ctrl = scope.ctrl;\n  let panel = ctrl.panel;\n\n  let $tooltip = $('<div class=\"graph-tooltip\">');\n\n  this.destroy = function() {\n    $tooltip.remove();\n  };\n\n  this.findHoverIndexFromDataPoints = function(posX, series, last) {\n    let ps = series.datapoints.pointsize;\n    let initial = last * ps;\n    let len = series.datapoints.points.length;\n    let j;\n    for (j = initial; j < len; j += ps) {\n      // Special case of a non stepped line, highlight the very last point just before a null point\n      if (\n        (!series.lines.steps && series.datapoints.points[initial] != null && series.datapoints.points[j] == null) ||\n        //normal case\n        series.datapoints.points[j] > posX\n      ) {\n        return Math.max(j - ps, 0) / ps;\n      }\n    }\n    return j / ps - 1;\n  };\n\n  this.findHoverIndexFromData = function(posX, series) {\n    let lower = 0;\n    let upper = series.data.length - 1;\n    let middle;\n    while (true) {\n      if (lower > upper) {\n        return Math.max(upper, 0);\n      }\n      middle = Math.floor((lower + upper) / 2);\n      if (series.data[middle][0] === posX) {\n        return middle;\n      } else if (series.data[middle][0] < posX) {\n        lower = middle + 1;\n      } else {\n        upper = middle - 1;\n      }\n    }\n  };\n\n  this.renderAndShow = function(absoluteTime, innerHtml, pos, xMode) {\n    if (xMode === 'time') {\n      innerHtml = '<div class=\"graph-tooltip-time\">' + absoluteTime + '</div>' + innerHtml;\n    }\n    $tooltip.html(innerHtml).place_tt(pos.pageX + 20, pos.pageY);\n  };\n\n  this.getMultiSeriesPlotHoverInfo = function(seriesList, pos) {\n    let value, i, series, hoverIndex, hoverDistance, pointTime, yaxis;\n    // 3 sub-arrays, 1st for hidden series, 2nd for left yaxis, 3rd for right yaxis.\n    let results: any = [[], [], []];\n\n    //now we know the current X (j) position for X and Y values\n    let last_value = 0; //needed for stacked values\n\n    let minDistance, minTime;\n\n    for (i = 0; i < seriesList.length; i++) {\n      series = seriesList[i];\n\n      if (!series.data.length || (panel.legend.hideEmpty && series.allIsNull)) {\n        // Init value so that it does not brake series sorting\n        results[0].push({ hidden: true, value: 0 });\n        continue;\n      }\n\n      if (!series.data.length || (panel.legend.hideZero && series.allIsZero)) {\n        // Init value so that it does not brake series sorting\n        results[0].push({ hidden: true, value: 0 });\n        continue;\n      }\n\n      hoverIndex = this.findHoverIndexFromData(pos.x, series);\n      hoverDistance = pos.x - series.data[hoverIndex][0];\n      pointTime = series.data[hoverIndex][0];\n\n      // Take the closest point before the cursor, or if it does not exist, the closest after\n      if (\n        !minDistance ||\n        (hoverDistance >= 0 && (hoverDistance < minDistance || minDistance < 0)) ||\n        (hoverDistance < 0 && hoverDistance > minDistance)\n      ) {\n        minDistance = hoverDistance;\n        minTime = pointTime;\n      }\n\n      if (series.stack) {\n        if (panel.tooltip.value_type === 'individual') {\n          value = series.data[hoverIndex][1];\n        } else if (!series.stack) {\n          value = series.data[hoverIndex][1];\n        } else {\n          last_value += series.data[hoverIndex][1];\n          value = last_value;\n        }\n      } else {\n        value = series.data[hoverIndex][1];\n      }\n\n      // Highlighting multiple Points depending on the plot type\n      if (series.lines.steps || series.stack) {\n        // stacked and steppedLine plots can have series with different length.\n        // Stacked series can increase its length on each new stacked serie if null points found,\n        // to speed the index search we begin always on the last found hoverIndex.\n        hoverIndex = this.findHoverIndexFromDataPoints(pos.x, series, hoverIndex);\n      }\n\n      // Be sure we have a yaxis so that it does not brake series sorting\n      yaxis = 0;\n      if (series.yaxis) {\n        yaxis = series.yaxis.n;\n      }\n\n      results[yaxis].push({\n        value: value,\n        hoverIndex: hoverIndex,\n        color: series.color,\n        label: series.aliasEscaped,\n        time: pointTime,\n        distance: hoverDistance,\n        index: i,\n      });\n    }\n\n    // Contat the 3 sub-arrays\n    results = results[0].concat(results[1], results[2]);\n\n    // Time of the point closer to pointer\n    results.time = minTime;\n\n    return results;\n  };\n\n  elem.mouseleave(function() {\n    if (panel.tooltip.shared) {\n      let plot = elem.data().plot;\n      if (plot) {\n        $tooltip.detach();\n        plot.unhighlight();\n      }\n    }\n    appEvents.emit('graph-hover-clear');\n  });\n\n  elem.bind('plothover', function(event, pos, item) {\n    self.show(pos, item);\n\n    // broadcast to other graph panels that we are hovering!\n    pos.panelRelY = (pos.pageY - elem.offset().top) / elem.height();\n    appEvents.emit('graph-hover', { pos: pos, panel: panel });\n  });\n\n  elem.bind('plotclick', function(event, pos, item) {\n    appEvents.emit('graph-click', { pos: pos, panel: panel, item: item });\n  });\n\n  this.clear = function(plot) {\n    $tooltip.detach();\n    plot.clearCrosshair();\n    plot.unhighlight();\n  };\n\n  this.show = function(pos, item) {\n    let plot = elem.data().plot;\n    let plotData = plot.getData();\n    let xAxes = plot.getXAxes();\n    let xMode = xAxes[0].options.mode;\n    let seriesList = getSeriesFn();\n    let allSeriesMode = panel.tooltip.shared;\n    let group, value, absoluteTime, hoverInfo, i, series, seriesHtml, tooltipFormat;\n\n    // if panelRelY is defined another panel wants us to show a tooltip\n    // get pageX from position on x axis and pageY from relative position in original panel\n    if (pos.panelRelY) {\n      let pointOffset = plot.pointOffset({ x: pos.x });\n      if (Number.isNaN(pointOffset.left) || pointOffset.left < 0 || pointOffset.left > elem.width()) {\n        self.clear(plot);\n        return;\n      }\n      pos.pageX = elem.offset().left + pointOffset.left;\n      pos.pageY = elem.offset().top + elem.height() * pos.panelRelY;\n      let isVisible =\n        pos.pageY >= $(window).scrollTop() && pos.pageY <= $(window).innerHeight() + $(window).scrollTop();\n      if (!isVisible) {\n        self.clear(plot);\n        return;\n      }\n      plot.setCrosshair(pos);\n      allSeriesMode = true;\n\n      if (dashboard.sharedCrosshairModeOnly()) {\n        // if only crosshair mode we are done\n        return;\n      }\n    }\n\n    if (seriesList.length === 0) {\n      return;\n    }\n\n    if (seriesList[0].hasMsResolution) {\n      tooltipFormat = 'YYYY-MM-DD HH:mm:ss.SSS';\n    } else {\n      tooltipFormat = 'YYYY-MM-DD HH:mm:ss';\n    }\n\n    if (allSeriesMode) {\n      plot.unhighlight();\n\n      let seriesHoverInfo = self.getMultiSeriesPlotHoverInfo(plotData, pos);\n\n      seriesHtml = '';\n\n      absoluteTime = dashboard.formatDate(seriesHoverInfo.time, tooltipFormat);\n\n      // Dynamically reorder the hovercard for the current time point if the\n      // option is enabled.\n      if (panel.tooltip.sort === 2) {\n        seriesHoverInfo.sort(function(a, b) {\n          return b.value - a.value;\n        });\n      } else if (panel.tooltip.sort === 1) {\n        seriesHoverInfo.sort(function(a, b) {\n          return a.value - b.value;\n        });\n      }\n\n      for (i = 0; i < seriesHoverInfo.length; i++) {\n        hoverInfo = seriesHoverInfo[i];\n\n        if (hoverInfo.hidden) {\n          continue;\n        }\n\n        let highlightClass = '';\n        if (item && hoverInfo.index === item.seriesIndex) {\n          highlightClass = 'graph-tooltip-list-item--highlight';\n        }\n\n        series = seriesList[hoverInfo.index];\n\n        value = series.formatValue(hoverInfo.value);\n\n        seriesHtml +=\n          '<div class=\"graph-tooltip-list-item ' + highlightClass + '\"><div class=\"graph-tooltip-series-name\">';\n        seriesHtml +=\n          '<i class=\"fa fa-minus\" style=\"color:' + hoverInfo.color + ';\"></i> ' + hoverInfo.label + ':</div>';\n        seriesHtml += '<div class=\"graph-tooltip-value\">' + value + '</div></div>';\n        plot.highlight(hoverInfo.index, hoverInfo.hoverIndex);\n      }\n\n      self.renderAndShow(absoluteTime, seriesHtml, pos, xMode);\n    } else if (item) {\n      // single series tooltip\n      series = seriesList[item.seriesIndex];\n      group = '<div class=\"graph-tooltip-list-item\"><div class=\"graph-tooltip-series-name\">';\n      group +=\n        '<i class=\"fa fa-minus\" style=\"color:' + item.series.color + ';\"></i> ' + series.aliasEscaped + ':</div>';\n\n      if (panel.stack && panel.tooltip.value_type === 'individual') {\n        value = item.datapoint[1] - item.datapoint[2];\n      } else {\n        value = item.datapoint[1];\n      }\n\n      value = series.formatValue(value);\n\n      absoluteTime = dashboard.formatDate(item.datapoint[0], tooltipFormat);\n\n      group += '<div class=\"graph-tooltip-value\">' + value + '</div>';\n\n      self.renderAndShow(absoluteTime, group, pos, xMode);\n    } else {\n      // no hit\n      $tooltip.detach();\n    }\n  };\n}\n","import angular from 'angular';\nimport $ from 'jquery';\nimport _ from 'lodash';\nimport Drop from 'tether-drop';\n\n/** @ngInject */\nexport function createAnnotationToolip(element, event, plot) {\n  let injector = angular.element(document).injector();\n  let content = document.createElement('div');\n  content.innerHTML = '<annotation-tooltip event=\"event\" on-edit=\"onEdit()\"></annotation-tooltip>';\n\n  injector.invoke([\n    '$compile',\n    '$rootScope',\n    function($compile, $rootScope) {\n      let eventManager = plot.getOptions().events.manager;\n      let tmpScope = $rootScope.$new(true);\n      tmpScope.event = event;\n      tmpScope.onEdit = function() {\n        eventManager.editEvent(event);\n      };\n\n      $compile(content)(tmpScope);\n      tmpScope.$digest();\n      tmpScope.$destroy();\n\n      let drop = new Drop({\n        target: element[0],\n        content: content,\n        position: 'bottom center',\n        classes: 'drop-popover drop-popover--annotation',\n        openOn: 'hover',\n        hoverCloseDelay: 200,\n        tetherOptions: {\n          constraints: [{ to: 'window', pin: true, attachment: 'both' }],\n        },\n      });\n\n      drop.open();\n\n      drop.on('close', function() {\n        setTimeout(function() {\n          drop.destroy();\n        });\n      });\n    },\n  ]);\n}\n\nlet markerElementToAttachTo = null;\n\n/** @ngInject */\nexport function createEditPopover(element, event, plot) {\n  let eventManager = plot.getOptions().events.manager;\n  if (eventManager.editorOpen) {\n    // update marker element to attach to (needed in case of legend on the right\n    // when there is a double render pass and the inital marker element is removed)\n    markerElementToAttachTo = element;\n    return;\n  }\n\n  // mark as openend\n  eventManager.editorOpened();\n  // set marker elment to attache to\n  markerElementToAttachTo = element;\n\n  // wait for element to be attached and positioned\n  setTimeout(function() {\n    let injector = angular.element(document).injector();\n    let content = document.createElement('div');\n    content.innerHTML = '<event-editor panel-ctrl=\"panelCtrl\" event=\"event\" close=\"close()\"></event-editor>';\n\n    injector.invoke([\n      '$compile',\n      '$rootScope',\n      function($compile, $rootScope) {\n        let scope = $rootScope.$new(true);\n        let drop;\n\n        scope.event = event;\n        scope.panelCtrl = eventManager.panelCtrl;\n        scope.close = function() {\n          drop.close();\n        };\n\n        $compile(content)(scope);\n        scope.$digest();\n\n        drop = new Drop({\n          target: markerElementToAttachTo[0],\n          content: content,\n          position: 'bottom center',\n          classes: 'drop-popover drop-popover--form',\n          openOn: 'click',\n          tetherOptions: {\n            constraints: [{ to: 'window', pin: true, attachment: 'both' }],\n          },\n        });\n\n        drop.open();\n        eventManager.editorOpened();\n\n        drop.on('close', function() {\n          // need timeout here in order call drop.destroy\n          setTimeout(function() {\n            eventManager.editorClosed();\n            scope.$destroy();\n            drop.destroy();\n          });\n        });\n      },\n    ]);\n  }, 100);\n}\n\n/*\n * jquery.flot.events\n *\n * description: Flot plugin for adding events/markers to the plot\n * version: 0.2.5\n * authors:\n *    Alexander Wunschik <alex@wunschik.net>\n *    Joel Oughton <joeloughton@gmail.com>\n *    Nicolas Joseph <www.nicolasjoseph.com>\n *\n * website: https://github.com/mojoaxel/flot-events\n *\n * released under MIT License and GPLv2+\n */\n\n/**\n * A class that allows for the drawing an remove of some object\n */\nexport class DrawableEvent {\n  _object: any;\n  _drawFunc: any;\n  _clearFunc: any;\n  _moveFunc: any;\n  _position: any;\n  _width: any;\n  _height: any;\n\n  /** @ngInject */\n  constructor(object, drawFunc, clearFunc, moveFunc, left, top, width, height) {\n    this._object = object;\n    this._drawFunc = drawFunc;\n    this._clearFunc = clearFunc;\n    this._moveFunc = moveFunc;\n    this._position = { left: left, top: top };\n    this._width = width;\n    this._height = height;\n  }\n\n  width() {\n    return this._width;\n  }\n  height() {\n    return this._height;\n  }\n  position() {\n    return this._position;\n  }\n  draw() {\n    this._drawFunc(this._object);\n  }\n  clear() {\n    this._clearFunc(this._object);\n  }\n  getObject() {\n    return this._object;\n  }\n  moveTo(position) {\n    this._position = position;\n    this._moveFunc(this._object, this._position);\n  }\n}\n\n/**\n * Event class that stores options (eventType, min, max, title, description) and the object to draw.\n */\nexport class VisualEvent {\n  _parent: any;\n  _options: any;\n  _drawableEvent: any;\n  _hidden: any;\n\n  /** @ngInject */\n  constructor(options, drawableEvent) {\n    this._options = options;\n    this._drawableEvent = drawableEvent;\n    this._hidden = false;\n  }\n\n  visual() {\n    return this._drawableEvent;\n  }\n  getOptions() {\n    return this._options;\n  }\n  getParent() {\n    return this._parent;\n  }\n  isHidden() {\n    return this._hidden;\n  }\n  hide() {\n    this._hidden = true;\n  }\n  unhide() {\n    this._hidden = false;\n  }\n}\n\n/**\n * A Class that handles the event-markers inside the given plot\n */\nexport class EventMarkers {\n  _events: any;\n  _types: any;\n  _plot: any;\n  eventsEnabled: any;\n\n  /** @ngInject */\n  constructor(plot) {\n    this._events = [];\n    this._types = [];\n    this._plot = plot;\n    this.eventsEnabled = false;\n  }\n\n  getEvents() {\n    return this._events;\n  }\n\n  setTypes(types) {\n    return (this._types = types);\n  }\n\n  /**\n   * create internal objects for the given events\n   */\n  setupEvents(events) {\n    let parts = _.partition(events, 'isRegion');\n    let regions = parts[0];\n    events = parts[1];\n\n    $.each(events, (index, event) => {\n      let ve = new VisualEvent(event, this._buildDiv(event));\n      this._events.push(ve);\n    });\n\n    $.each(regions, (index, event) => {\n      let vre = new VisualEvent(event, this._buildRegDiv(event));\n      this._events.push(vre);\n    });\n\n    this._events.sort((a, b) => {\n      let ao = a.getOptions(),\n        bo = b.getOptions();\n      if (ao.min > bo.min) {\n        return 1;\n      }\n      if (ao.min < bo.min) {\n        return -1;\n      }\n      return 0;\n    });\n  }\n\n  /**\n   * draw the events to the plot\n   */\n  drawEvents() {\n    // var o = this._plot.getPlotOffset();\n\n    $.each(this._events, (index, event) => {\n      // check event is inside the graph range\n      if (this._insidePlot(event.getOptions().min) && !event.isHidden()) {\n        event.visual().draw();\n      } else {\n        event\n          .visual()\n          .getObject()\n          .hide();\n      }\n    });\n  }\n\n  /**\n   * update the position of the event-markers (e.g. after scrolling or zooming)\n   */\n  updateEvents() {\n    let o = this._plot.getPlotOffset(),\n      left,\n      top;\n    let xaxis = this._plot.getXAxes()[this._plot.getOptions().events.xaxis - 1];\n\n    $.each(this._events, (index, event) => {\n      top = o.top + this._plot.height() - event.visual().height();\n      left = xaxis.p2c(event.getOptions().min) + o.left - event.visual().width() / 2;\n      event.visual().moveTo({ top: top, left: left });\n    });\n  }\n\n  /**\n   * remove all events from the plot\n   */\n  _clearEvents() {\n    $.each(this._events, (index, val) => {\n      val.visual().clear();\n    });\n    this._events = [];\n  }\n\n  /**\n   * create a DOM element for the given event\n   */\n  _buildDiv(event) {\n    let that = this;\n\n    let container = this._plot.getPlaceholder();\n    let o = this._plot.getPlotOffset();\n    let xaxis = this._plot.getXAxes()[this._plot.getOptions().events.xaxis - 1];\n    let top, left, color, markerSize, markerShow, lineStyle, lineWidth;\n    let markerTooltip;\n\n    // map the eventType to a types object\n    let eventTypeId = event.eventType;\n\n    if (this._types === null || !this._types[eventTypeId] || !this._types[eventTypeId].color) {\n      color = '#666';\n    } else {\n      color = this._types[eventTypeId].color;\n    }\n\n    if (this._types === null || !this._types[eventTypeId] || !this._types[eventTypeId].markerSize) {\n      markerSize = 8; //default marker size\n    } else {\n      markerSize = this._types[eventTypeId].markerSize;\n    }\n\n    if (this._types === null || !this._types[eventTypeId] || this._types[eventTypeId].markerShow === undefined) {\n      markerShow = true;\n    } else {\n      markerShow = this._types[eventTypeId].markerShow;\n    }\n\n    if (this._types === null || !this._types[eventTypeId] || this._types[eventTypeId].markerTooltip === undefined) {\n      markerTooltip = true;\n    } else {\n      markerTooltip = this._types[eventTypeId].markerTooltip;\n    }\n\n    if (this._types == null || !this._types[eventTypeId] || !this._types[eventTypeId].lineStyle) {\n      lineStyle = 'dashed'; //default line style\n    } else {\n      lineStyle = this._types[eventTypeId].lineStyle.toLowerCase();\n    }\n\n    if (this._types == null || !this._types[eventTypeId] || this._types[eventTypeId].lineWidth === undefined) {\n      lineWidth = 1; //default line width\n    } else {\n      lineWidth = this._types[eventTypeId].lineWidth;\n    }\n\n    let topOffset = xaxis.options.eventSectionHeight || 0;\n    topOffset = topOffset / 3;\n\n    top = o.top + this._plot.height() + topOffset;\n    left = xaxis.p2c(event.min) + o.left;\n\n    let line = $('<div class=\"events_line flot-temp-elem\"></div>')\n      .css({\n        position: 'absolute',\n        opacity: 0.8,\n        left: left + 'px',\n        top: 8,\n        width: lineWidth + 'px',\n        height: this._plot.height() + topOffset * 0.8,\n        'border-left-width': lineWidth + 'px',\n        'border-left-style': lineStyle,\n        'border-left-color': color,\n        color: color,\n      })\n      .appendTo(container);\n\n    if (markerShow) {\n      let marker = $('<div class=\"events_marker\"></div>').css({\n        position: 'absolute',\n        left: -markerSize - Math.round(lineWidth / 2) + 'px',\n        'font-size': 0,\n        'line-height': 0,\n        width: 0,\n        height: 0,\n        'border-left': markerSize + 'px solid transparent',\n        'border-right': markerSize + 'px solid transparent',\n      });\n\n      marker.appendTo(line);\n\n      if (\n        this._types[eventTypeId] &&\n        this._types[eventTypeId].position &&\n        this._types[eventTypeId].position.toUpperCase() === 'BOTTOM'\n      ) {\n        marker.css({\n          top: top - markerSize - 8 + 'px',\n          'border-top': 'none',\n          'border-bottom': markerSize + 'px solid ' + color,\n        });\n      } else {\n        marker.css({\n          top: '0px',\n          'border-top': markerSize + 'px solid ' + color,\n          'border-bottom': 'none',\n        });\n      }\n\n      marker.data({\n        event: event,\n      });\n\n      let mouseenter = function() {\n        createAnnotationToolip(marker, $(this).data('event'), that._plot);\n      };\n\n      if (event.editModel) {\n        createEditPopover(marker, event.editModel, that._plot);\n      }\n\n      let mouseleave = function() {\n        that._plot.clearSelection();\n      };\n\n      if (markerTooltip) {\n        marker.css({ cursor: 'help' });\n        marker.hover(mouseenter, mouseleave);\n      }\n    }\n\n    let drawableEvent = new DrawableEvent(\n      line,\n      function drawFunc(obj) {\n        obj.show();\n      },\n      function(obj) {\n        obj.remove();\n      },\n      function(obj, position) {\n        obj.css({\n          top: position.top,\n          left: position.left,\n        });\n      },\n      left,\n      top,\n      line.width(),\n      line.height()\n    );\n\n    return drawableEvent;\n  }\n\n  /**\n   * create a DOM element for the given region\n   */\n  _buildRegDiv(event) {\n    let that = this;\n\n    let container = this._plot.getPlaceholder();\n    let o = this._plot.getPlotOffset();\n    let xaxis = this._plot.getXAxes()[this._plot.getOptions().events.xaxis - 1];\n    let top, left, lineWidth, regionWidth, lineStyle, color, markerTooltip;\n\n    // map the eventType to a types object\n    let eventTypeId = event.eventType;\n\n    if (this._types === null || !this._types[eventTypeId] || !this._types[eventTypeId].color) {\n      color = '#666';\n    } else {\n      color = this._types[eventTypeId].color;\n    }\n\n    if (this._types === null || !this._types[eventTypeId] || this._types[eventTypeId].markerTooltip === undefined) {\n      markerTooltip = true;\n    } else {\n      markerTooltip = this._types[eventTypeId].markerTooltip;\n    }\n\n    if (this._types == null || !this._types[eventTypeId] || this._types[eventTypeId].lineWidth === undefined) {\n      lineWidth = 1; //default line width\n    } else {\n      lineWidth = this._types[eventTypeId].lineWidth;\n    }\n\n    if (this._types == null || !this._types[eventTypeId] || !this._types[eventTypeId].lineStyle) {\n      lineStyle = 'dashed'; //default line style\n    } else {\n      lineStyle = this._types[eventTypeId].lineStyle.toLowerCase();\n    }\n\n    let topOffset = 2;\n    top = o.top + this._plot.height() + topOffset;\n\n    let timeFrom = Math.min(event.min, event.timeEnd);\n    let timeTo = Math.max(event.min, event.timeEnd);\n    left = xaxis.p2c(timeFrom) + o.left;\n    let right = xaxis.p2c(timeTo) + o.left;\n    regionWidth = right - left;\n\n    _.each([left, right], position => {\n      let line = $('<div class=\"events_line flot-temp-elem\"></div>').css({\n        position: 'absolute',\n        opacity: 0.8,\n        left: position + 'px',\n        top: 8,\n        width: lineWidth + 'px',\n        height: this._plot.height() + topOffset,\n        'border-left-width': lineWidth + 'px',\n        'border-left-style': lineStyle,\n        'border-left-color': color,\n        color: color,\n      });\n      line.appendTo(container);\n    });\n\n    let region = $('<div class=\"events_marker region_marker flot-temp-elem\"></div>').css({\n      position: 'absolute',\n      opacity: 0.5,\n      left: left + 'px',\n      top: top,\n      width: Math.round(regionWidth + lineWidth) + 'px',\n      height: '0.5rem',\n      'border-left-color': color,\n      color: color,\n      'background-color': color,\n    });\n    region.appendTo(container);\n\n    region.data({\n      event: event,\n    });\n\n    let mouseenter = function() {\n      createAnnotationToolip(region, $(this).data('event'), that._plot);\n    };\n\n    if (event.editModel) {\n      createEditPopover(region, event.editModel, that._plot);\n    }\n\n    let mouseleave = function() {\n      that._plot.clearSelection();\n    };\n\n    if (markerTooltip) {\n      region.css({ cursor: 'help' });\n      region.hover(mouseenter, mouseleave);\n    }\n\n    let drawableEvent = new DrawableEvent(\n      region,\n      function drawFunc(obj) {\n        obj.show();\n      },\n      function(obj) {\n        obj.remove();\n      },\n      function(obj, position) {\n        obj.css({\n          top: position.top,\n          left: position.left,\n        });\n      },\n      left,\n      top,\n      region.width(),\n      region.height()\n    );\n\n    return drawableEvent;\n  }\n\n  /**\n   * check if the event is inside visible range\n   */\n  _insidePlot(x) {\n    let xaxis = this._plot.getXAxes()[this._plot.getOptions().events.xaxis - 1];\n    let xc = xaxis.p2c(x);\n    return xc > 0 && xc < xaxis.p2c(xaxis.max);\n  }\n}\n\n/**\n * initialize the plugin for the given plot\n */\n\n/** @ngInject */\nexport function init(plot) {\n  /*jshint validthis:true */\n  let that = this;\n  let eventMarkers = new EventMarkers(plot);\n\n  plot.getEvents = function() {\n    return eventMarkers._events;\n  };\n\n  plot.hideEvents = function() {\n    $.each(eventMarkers._events, (index, event) => {\n      event\n        .visual()\n        .getObject()\n        .hide();\n    });\n  };\n\n  plot.showEvents = function() {\n    plot.hideEvents();\n    $.each(eventMarkers._events, (index, event) => {\n      event.hide();\n    });\n\n    that.eventMarkers.drawEvents();\n  };\n\n  // change events on an existing plot\n  plot.setEvents = function(events) {\n    if (eventMarkers.eventsEnabled) {\n      eventMarkers.setupEvents(events);\n    }\n  };\n\n  plot.hooks.processOptions.push(function(plot, options) {\n    // enable the plugin\n    if (options.events.data != null) {\n      eventMarkers.eventsEnabled = true;\n    }\n  });\n\n  plot.hooks.draw.push(function(plot) {\n    let options = plot.getOptions();\n\n    if (eventMarkers.eventsEnabled) {\n      // check for first run\n      if (eventMarkers.getEvents().length < 1) {\n        eventMarkers.setTypes(options.events.types);\n        eventMarkers.setupEvents(options.events.data);\n      } else {\n        eventMarkers.updateEvents();\n      }\n    }\n\n    eventMarkers.drawEvents();\n  });\n}\n\nlet defaultOptions = {\n  events: {\n    data: null,\n    types: null,\n    xaxis: 1,\n    position: 'BOTTOM',\n  },\n};\n\n$.plot.plugins.push({\n  init: init,\n  options: defaultOptions,\n  name: 'events',\n  version: '0.2.5',\n});\n","import angular from 'angular';\nimport _ from 'lodash';\nimport $ from 'jquery';\nimport baron from 'baron';\n\nvar module = angular.module('grafana.directives');\n\nmodule.directive('graphLegend', function(popoverSrv, $timeout) {\n  return {\n    link: function(scope, elem) {\n      var firstRender = true;\n      var ctrl = scope.ctrl;\n      var panel = ctrl.panel;\n      var data;\n      var seriesList;\n      var i;\n      var legendScrollbar;\n      const legendRightDefaultWidth = 10;\n      let legendElem = elem.parent();\n\n      scope.$on('$destroy', function() {\n        destroyScrollbar();\n      });\n\n      ctrl.events.on('render-legend', () => {\n        data = ctrl.seriesList;\n        if (data) {\n          render();\n        }\n        ctrl.events.emit('legend-rendering-complete');\n      });\n\n      function getSeriesIndexForElement(el) {\n        return el.parents('[data-series-index]').data('series-index');\n      }\n\n      function openColorSelector(e) {\n        // if we clicked inside poup container ignore click\n        if ($(e.target).parents('.popover').length) {\n          return;\n        }\n\n        var el = $(e.currentTarget).find('.fa-minus');\n        var index = getSeriesIndexForElement(el);\n        var series = seriesList[index];\n\n        $timeout(function() {\n          popoverSrv.show({\n            element: el[0],\n            position: 'bottom left',\n            targetAttachment: 'top left',\n            template:\n              '<series-color-picker series=\"series\" onToggleAxis=\"toggleAxis\" onColorChange=\"colorSelected\">' +\n              '</series-color-picker>',\n            openOn: 'hover',\n            model: {\n              series: series,\n              toggleAxis: function() {\n                ctrl.toggleAxis(series);\n              },\n              colorSelected: function(color) {\n                ctrl.changeSeriesColor(series, color);\n              },\n            },\n          });\n        });\n      }\n\n      function toggleSeries(e) {\n        var el = $(e.currentTarget);\n        var index = getSeriesIndexForElement(el);\n        var seriesInfo = seriesList[index];\n        var scrollPosition = $(elem.children('tbody')).scrollTop();\n        ctrl.toggleSeries(seriesInfo, e);\n        $(elem.children('tbody')).scrollTop(scrollPosition);\n      }\n\n      function sortLegend(e) {\n        var el = $(e.currentTarget);\n        var stat = el.data('stat');\n\n        if (stat !== panel.legend.sort) {\n          panel.legend.sortDesc = null;\n        }\n\n        // if already sort ascending, disable sorting\n        if (panel.legend.sortDesc === false) {\n          panel.legend.sort = null;\n          panel.legend.sortDesc = null;\n          ctrl.render();\n          return;\n        }\n\n        panel.legend.sortDesc = !panel.legend.sortDesc;\n        panel.legend.sort = stat;\n        ctrl.render();\n      }\n\n      function getTableHeaderHtml(statName) {\n        if (!panel.legend[statName]) {\n          return '';\n        }\n        var html = '<th class=\"pointer\" data-stat=\"' + statName + '\">' + statName;\n\n        if (panel.legend.sort === statName) {\n          var cssClass = panel.legend.sortDesc ? 'fa fa-caret-down' : 'fa fa-caret-up';\n          html += ' <span class=\"' + cssClass + '\"></span>';\n        }\n\n        return html + '</th>';\n      }\n\n      function render() {\n        let legendWidth = legendElem.width();\n        if (!ctrl.panel.legend.show) {\n          elem.empty();\n          firstRender = true;\n          return;\n        }\n\n        if (firstRender) {\n          elem.on('click', '.graph-legend-icon', openColorSelector);\n          elem.on('click', '.graph-legend-alias', toggleSeries);\n          elem.on('click', 'th', sortLegend);\n          firstRender = false;\n        }\n\n        seriesList = data;\n\n        elem.empty();\n\n        // Set min-width if side style and there is a value, otherwise remove the CSS property\n        // Set width so it works with IE11\n        var width: any = panel.legend.rightSide && panel.legend.sideWidth ? panel.legend.sideWidth + 'px' : '';\n        var ieWidth: any = panel.legend.rightSide && panel.legend.sideWidth ? panel.legend.sideWidth - 1 + 'px' : '';\n        legendElem.css('min-width', width);\n        legendElem.css('width', ieWidth);\n\n        elem.toggleClass('graph-legend-table', panel.legend.alignAsTable === true);\n\n        var tableHeaderElem;\n        if (panel.legend.alignAsTable) {\n          var header = '<tr>';\n          header += '<th colspan=\"2\" style=\"text-align:left\"></th>';\n          if (panel.legend.values) {\n            header += getTableHeaderHtml('min');\n            header += getTableHeaderHtml('max');\n            header += getTableHeaderHtml('avg');\n            header += getTableHeaderHtml('current');\n            header += getTableHeaderHtml('total');\n          }\n          header += '</tr>';\n          tableHeaderElem = $(header);\n        }\n\n        if (panel.legend.sort) {\n          seriesList = _.sortBy(seriesList, function(series) {\n            let sort = series.stats[panel.legend.sort];\n            if (sort === null) {\n              sort = -Infinity;\n            }\n            return sort;\n          });\n          if (panel.legend.sortDesc) {\n            seriesList = seriesList.reverse();\n          }\n        }\n\n        // render first time for getting proper legend height\n        if (!panel.legend.rightSide || (panel.legend.rightSide && legendWidth !== legendRightDefaultWidth)) {\n          renderLegendElement(tableHeaderElem);\n          elem.empty();\n        }\n\n        renderLegendElement(tableHeaderElem);\n      }\n\n      function renderSeriesLegendElements() {\n        let seriesElements = [];\n        for (i = 0; i < seriesList.length; i++) {\n          var series = seriesList[i];\n\n          if (series.hideFromLegend(panel.legend)) {\n            continue;\n          }\n\n          var html = '<div class=\"graph-legend-series';\n\n          if (series.yaxis === 2) {\n            html += ' graph-legend-series--right-y';\n          }\n          if (ctrl.hiddenSeries[series.alias]) {\n            html += ' graph-legend-series-hidden';\n          }\n          html += '\" data-series-index=\"' + i + '\">';\n          html += '<div class=\"graph-legend-icon\">';\n          html += '<i class=\"fa fa-minus pointer\" style=\"color:' + series.color + '\"></i>';\n          html += '</div>';\n\n          html +=\n            '<a class=\"graph-legend-alias pointer\" title=\"' + series.aliasEscaped + '\">' + series.aliasEscaped + '</a>';\n\n          if (panel.legend.values) {\n            var avg = series.formatValue(series.stats.avg);\n            var current = series.formatValue(series.stats.current);\n            var min = series.formatValue(series.stats.min);\n            var max = series.formatValue(series.stats.max);\n            var total = series.formatValue(series.stats.total);\n\n            if (panel.legend.min) {\n              html += '<div class=\"graph-legend-value min\">' + min + '</div>';\n            }\n            if (panel.legend.max) {\n              html += '<div class=\"graph-legend-value max\">' + max + '</div>';\n            }\n            if (panel.legend.avg) {\n              html += '<div class=\"graph-legend-value avg\">' + avg + '</div>';\n            }\n            if (panel.legend.current) {\n              html += '<div class=\"graph-legend-value current\">' + current + '</div>';\n            }\n            if (panel.legend.total) {\n              html += '<div class=\"graph-legend-value total\">' + total + '</div>';\n            }\n          }\n\n          html += '</div>';\n          seriesElements.push($(html));\n        }\n        return seriesElements;\n      }\n\n      function renderLegendElement(tableHeaderElem) {\n        let legendWidth = elem.width();\n\n        var seriesElements = renderSeriesLegendElements();\n\n        if (panel.legend.alignAsTable) {\n          var tbodyElem = $('<tbody></tbody>');\n          tbodyElem.append(tableHeaderElem);\n          tbodyElem.append(seriesElements);\n          elem.append(tbodyElem);\n          tbodyElem.wrap('<div class=\"graph-legend-scroll\"></div>');\n        } else {\n          elem.append('<div class=\"graph-legend-scroll\"></div>');\n          elem.find('.graph-legend-scroll').append(seriesElements);\n        }\n\n        if (!panel.legend.rightSide || (panel.legend.rightSide && legendWidth !== legendRightDefaultWidth)) {\n          addScrollbar();\n        } else {\n          destroyScrollbar();\n        }\n      }\n\n      function addScrollbar() {\n        const scrollRootClass = 'baron baron__root';\n        const scrollerClass = 'baron__scroller';\n        const scrollBarHTML = `\n          <div class=\"baron__track\">\n            <div class=\"baron__bar\"></div>\n          </div>\n        `;\n\n        let scrollRoot = elem;\n        let scroller = elem.find('.graph-legend-scroll');\n\n        // clear existing scroll bar track to prevent duplication\n        scrollRoot.find('.baron__track').remove();\n\n        scrollRoot.addClass(scrollRootClass);\n        $(scrollBarHTML).appendTo(scrollRoot);\n        scroller.addClass(scrollerClass);\n\n        let scrollbarParams = {\n          root: scrollRoot[0],\n          scroller: scroller[0],\n          bar: '.baron__bar',\n          track: '.baron__track',\n          barOnCls: '_scrollbar',\n          scrollingCls: '_scrolling',\n        };\n\n        if (!legendScrollbar) {\n          legendScrollbar = baron(scrollbarParams);\n        } else {\n          destroyScrollbar();\n          legendScrollbar = baron(scrollbarParams);\n        }\n\n        // #11830 - compensates for Firefox scrollbar calculation error in the baron framework\n        scroller[0].style.marginRight = '-' + (scroller[0].offsetWidth - scroller[0].clientWidth) + 'px';\n\n        legendScrollbar.scroll();\n      }\n\n      function destroyScrollbar() {\n        if (legendScrollbar) {\n          legendScrollbar.dispose();\n          legendScrollbar = undefined;\n        }\n      }\n    },\n  };\n});\n","import 'vendor/flot/jquery.flot';\nimport $ from 'jquery';\nimport _ from 'lodash';\n\nexport class ThresholdManager {\n  plot: any;\n  placeholder: any;\n  height: any;\n  thresholds: any;\n  needsCleanup: boolean;\n  hasSecondYAxis: any;\n\n  constructor(private panelCtrl) {}\n\n  getHandleHtml(handleIndex, model, valueStr) {\n    var stateClass = model.colorMode;\n    if (model.colorMode === 'custom') {\n      stateClass = 'critical';\n    }\n\n    return `\n    <div class=\"alert-handle-wrapper alert-handle-wrapper--T${handleIndex}\">\n      <div class=\"alert-handle-line alert-handle-line--${stateClass}\">\n      </div>\n      <div class=\"alert-handle\" data-handle-index=\"${handleIndex}\">\n        <i class=\"icon-gf icon-gf-${stateClass} alert-state-${stateClass}\"></i>\n        <span class=\"alert-handle-value\">${valueStr}<i class=\"alert-handle-grip\"></i></span>\n      </div>\n    </div>`;\n  }\n\n  initDragging(evt) {\n    var handleElem = $(evt.currentTarget).parents('.alert-handle-wrapper');\n    var handleIndex = $(evt.currentTarget).data('handleIndex');\n\n    var lastY = null;\n    var posTop;\n    var plot = this.plot;\n    var panelCtrl = this.panelCtrl;\n    var model = this.thresholds[handleIndex];\n\n    function dragging(evt) {\n      if (lastY === null) {\n        lastY = evt.clientY;\n      } else {\n        var diff = evt.clientY - lastY;\n        posTop = posTop + diff;\n        lastY = evt.clientY;\n        handleElem.css({ top: posTop + diff });\n      }\n    }\n\n    function stopped() {\n      // calculate graph level\n      var graphValue = plot.c2p({ left: 0, top: posTop }).y;\n      graphValue = parseInt(graphValue.toFixed(0));\n      model.value = graphValue;\n\n      handleElem.off('mousemove', dragging);\n      handleElem.off('mouseup', dragging);\n      handleElem.off('mouseleave', dragging);\n\n      // trigger digest and render\n      panelCtrl.$scope.$apply(function() {\n        panelCtrl.render();\n        panelCtrl.events.emit('threshold-changed', {\n          threshold: model,\n          handleIndex: handleIndex,\n        });\n      });\n    }\n\n    lastY = null;\n    posTop = handleElem.position().top;\n\n    handleElem.on('mousemove', dragging);\n    handleElem.on('mouseup', stopped);\n    handleElem.on('mouseleave', stopped);\n  }\n\n  cleanUp() {\n    this.placeholder.find('.alert-handle-wrapper').remove();\n    this.needsCleanup = false;\n  }\n\n  renderHandle(handleIndex, defaultHandleTopPos) {\n    var model = this.thresholds[handleIndex];\n    var value = model.value;\n    var valueStr = value;\n    var handleTopPos = 0;\n\n    // handle no value\n    if (!_.isNumber(value)) {\n      valueStr = '';\n      handleTopPos = defaultHandleTopPos;\n    } else {\n      var valueCanvasPos = this.plot.p2c({ x: 0, y: value });\n      handleTopPos = Math.round(Math.min(Math.max(valueCanvasPos.top, 0), this.height) - 6);\n    }\n\n    var handleElem = $(this.getHandleHtml(handleIndex, model, valueStr));\n    this.placeholder.append(handleElem);\n\n    handleElem.toggleClass('alert-handle-wrapper--no-value', valueStr === '');\n    handleElem.css({ top: handleTopPos });\n  }\n\n  shouldDrawHandles() {\n    return !this.hasSecondYAxis && this.panelCtrl.editingThresholds && this.panelCtrl.panel.thresholds.length > 0;\n  }\n\n  prepare(elem, data) {\n    this.hasSecondYAxis = false;\n    for (var i = 0; i < data.length; i++) {\n      if (data[i].yaxis > 1) {\n        this.hasSecondYAxis = true;\n        break;\n      }\n    }\n\n    if (this.shouldDrawHandles()) {\n      var thresholdMargin = this.panelCtrl.panel.thresholds.length > 1 ? '220px' : '110px';\n      elem.css('margin-right', thresholdMargin);\n    } else if (this.needsCleanup) {\n      elem.css('margin-right', '0');\n    }\n  }\n\n  draw(plot) {\n    this.thresholds = this.panelCtrl.panel.thresholds;\n    this.plot = plot;\n    this.placeholder = plot.getPlaceholder();\n\n    if (this.needsCleanup) {\n      this.cleanUp();\n    }\n\n    if (!this.shouldDrawHandles()) {\n      return;\n    }\n\n    this.height = plot.height();\n\n    if (this.thresholds.length > 0) {\n      this.renderHandle(0, 10);\n    }\n    if (this.thresholds.length > 1) {\n      this.renderHandle(1, this.height - 30);\n    }\n\n    this.placeholder.off('mousedown', '.alert-handle');\n    this.placeholder.on('mousedown', '.alert-handle', this.initDragging.bind(this));\n    this.needsCleanup = true;\n  }\n\n  addFlotOptions(options, panel) {\n    if (!panel.thresholds || panel.thresholds.length === 0) {\n      return;\n    }\n\n    var gtLimit = Infinity;\n    var ltLimit = -Infinity;\n    var i, threshold, other;\n\n    for (i = 0; i < panel.thresholds.length; i++) {\n      threshold = panel.thresholds[i];\n      if (!_.isNumber(threshold.value)) {\n        continue;\n      }\n\n      var limit;\n      switch (threshold.op) {\n        case 'gt': {\n          limit = gtLimit;\n          // if next threshold is less then op and greater value, then use that as limit\n          if (panel.thresholds.length > i + 1) {\n            other = panel.thresholds[i + 1];\n            if (other.value > threshold.value) {\n              limit = other.value;\n              ltLimit = limit;\n            }\n          }\n          break;\n        }\n        case 'lt': {\n          limit = ltLimit;\n          // if next threshold is less then op and greater value, then use that as limit\n          if (panel.thresholds.length > i + 1) {\n            other = panel.thresholds[i + 1];\n            if (other.value < threshold.value) {\n              limit = other.value;\n              gtLimit = limit;\n            }\n          }\n          break;\n        }\n      }\n\n      var fillColor, lineColor;\n      switch (threshold.colorMode) {\n        case 'critical': {\n          fillColor = 'rgba(234, 112, 112, 0.12)';\n          lineColor = 'rgba(237, 46, 24, 0.60)';\n          break;\n        }\n        case 'warning': {\n          fillColor = 'rgba(235, 138, 14, 0.12)';\n          lineColor = 'rgba(247, 149, 32, 0.60)';\n          break;\n        }\n        case 'ok': {\n          fillColor = 'rgba(11, 237, 50, 0.090)';\n          lineColor = 'rgba(6,163,69, 0.60)';\n          break;\n        }\n        case 'custom': {\n          fillColor = threshold.fillColor;\n          lineColor = threshold.lineColor;\n          break;\n        }\n      }\n\n      // fill\n      if (threshold.fill) {\n        if (threshold.yaxis === 'right' && this.hasSecondYAxis) {\n          options.grid.markings.push({\n            y2axis: { from: threshold.value, to: limit },\n            color: fillColor,\n          });\n        } else {\n          options.grid.markings.push({\n            yaxis: { from: threshold.value, to: limit },\n            color: fillColor,\n          });\n        }\n      }\n      if (threshold.line) {\n        if (threshold.yaxis === 'right' && this.hasSecondYAxis) {\n          options.grid.markings.push({\n            y2axis: { from: threshold.value, to: threshold.value },\n            color: lineColor,\n          });\n        } else {\n          options.grid.markings.push({\n            yaxis: { from: threshold.value, to: threshold.value },\n            color: lineColor,\n          });\n        }\n      }\n    }\n  }\n}\n","import angular from 'angular';\nimport _ from 'lodash';\nimport $ from 'jquery';\nimport * as d3 from 'd3';\nimport { contextSrv } from 'app/core/core';\nimport { tickStep } from 'app/core/utils/ticks';\nimport { getColorScale, getOpacityScale } from './color_scale';\n\nlet module = angular.module('grafana.directives');\n\nconst LEGEND_HEIGHT_PX = 6;\nconst LEGEND_WIDTH_PX = 100;\nconst LEGEND_TICK_SIZE = 0;\nconst LEGEND_VALUE_MARGIN = 0;\n\n/**\n * Color legend for heatmap editor.\n */\nmodule.directive('colorLegend', function() {\n  return {\n    restrict: 'E',\n    template: '<div class=\"heatmap-color-legend\"><svg width=\"16.5rem\" height=\"24px\"></svg></div>',\n    link: function(scope, elem, attrs) {\n      let ctrl = scope.ctrl;\n      let panel = scope.ctrl.panel;\n\n      render();\n\n      ctrl.events.on('render', function() {\n        render();\n      });\n\n      function render() {\n        let legendElem = $(elem).find('svg');\n        let legendWidth = Math.floor(legendElem.outerWidth());\n\n        if (panel.color.mode === 'spectrum') {\n          let colorScheme = _.find(ctrl.colorSchemes, {\n            value: panel.color.colorScheme,\n          });\n          let colorScale = getColorScale(colorScheme, contextSrv.user.lightTheme, legendWidth);\n          drawSimpleColorLegend(elem, colorScale);\n        } else if (panel.color.mode === 'opacity') {\n          let colorOptions = panel.color;\n          drawSimpleOpacityLegend(elem, colorOptions);\n        }\n      }\n    },\n  };\n});\n\n/**\n * Heatmap legend with scale values.\n */\nmodule.directive('heatmapLegend', function() {\n  return {\n    restrict: 'E',\n    template: `<div class=\"heatmap-color-legend\"><svg width=\"${LEGEND_WIDTH_PX}px\" height=\"${LEGEND_HEIGHT_PX}px\"></svg></div>`,\n    link: function(scope, elem, attrs) {\n      let ctrl = scope.ctrl;\n      let panel = scope.ctrl.panel;\n\n      render();\n      ctrl.events.on('render', function() {\n        render();\n      });\n\n      function render() {\n        clearLegend(elem);\n        if (!_.isEmpty(ctrl.data) && !_.isEmpty(ctrl.data.cards)) {\n          let rangeFrom = 0;\n          let rangeTo = ctrl.data.cardStats.max;\n          let maxValue = panel.color.max || rangeTo;\n          let minValue = panel.color.min || 0;\n\n          if (panel.color.mode === 'spectrum') {\n            let colorScheme = _.find(ctrl.colorSchemes, {\n              value: panel.color.colorScheme,\n            });\n            drawColorLegend(elem, colorScheme, rangeFrom, rangeTo, maxValue, minValue);\n          } else if (panel.color.mode === 'opacity') {\n            let colorOptions = panel.color;\n            drawOpacityLegend(elem, colorOptions, rangeFrom, rangeTo, maxValue, minValue);\n          }\n        }\n      }\n    },\n  };\n});\n\nfunction drawColorLegend(elem, colorScheme, rangeFrom, rangeTo, maxValue, minValue) {\n  let legendElem = $(elem).find('svg');\n  let legend = d3.select(legendElem.get(0));\n  clearLegend(elem);\n\n  let legendWidth = Math.floor(legendElem.outerWidth()) - 30;\n  let legendHeight = legendElem.attr('height');\n\n  let rangeStep = 1;\n  if (rangeTo - rangeFrom > legendWidth) {\n    rangeStep = Math.floor((rangeTo - rangeFrom) / legendWidth);\n  }\n  let widthFactor = legendWidth / (rangeTo - rangeFrom);\n  let valuesRange = d3.range(rangeFrom, rangeTo, rangeStep);\n\n  let colorScale = getColorScale(colorScheme, contextSrv.user.lightTheme, maxValue, minValue);\n  legend\n    .selectAll('.heatmap-color-legend-rect')\n    .data(valuesRange)\n    .enter()\n    .append('rect')\n    .attr('x', d => d * widthFactor)\n    .attr('y', 0)\n    .attr('width', rangeStep * widthFactor + 1) // Overlap rectangles to prevent gaps\n    .attr('height', legendHeight)\n    .attr('stroke-width', 0)\n    .attr('fill', d => colorScale(d));\n\n  drawLegendValues(elem, colorScale, rangeFrom, rangeTo, maxValue, minValue, legendWidth);\n}\n\nfunction drawOpacityLegend(elem, options, rangeFrom, rangeTo, maxValue, minValue) {\n  let legendElem = $(elem).find('svg');\n  let legend = d3.select(legendElem.get(0));\n  clearLegend(elem);\n\n  let legendWidth = Math.floor(legendElem.outerWidth()) - 30;\n  let legendHeight = legendElem.attr('height');\n\n  let rangeStep = 1;\n  if (rangeTo - rangeFrom > legendWidth) {\n    rangeStep = Math.floor((rangeTo - rangeFrom) / legendWidth);\n  }\n  let widthFactor = legendWidth / (rangeTo - rangeFrom);\n  let valuesRange = d3.range(rangeFrom, rangeTo, rangeStep);\n\n  let opacityScale = getOpacityScale(options, maxValue, minValue);\n  legend\n    .selectAll('.heatmap-opacity-legend-rect')\n    .data(valuesRange)\n    .enter()\n    .append('rect')\n    .attr('x', d => d * widthFactor)\n    .attr('y', 0)\n    .attr('width', rangeStep * widthFactor)\n    .attr('height', legendHeight)\n    .attr('stroke-width', 0)\n    .attr('fill', options.cardColor)\n    .style('opacity', d => opacityScale(d));\n\n  drawLegendValues(elem, opacityScale, rangeFrom, rangeTo, maxValue, minValue, legendWidth);\n}\n\nfunction drawLegendValues(elem, colorScale, rangeFrom, rangeTo, maxValue, minValue, legendWidth) {\n  let legendElem = $(elem).find('svg');\n  let legend = d3.select(legendElem.get(0));\n\n  if (legendWidth <= 0 || legendElem.get(0).childNodes.length === 0) {\n    return;\n  }\n\n  let legendValueScale = d3\n    .scaleLinear()\n    .domain([0, rangeTo])\n    .range([0, legendWidth]);\n\n  let ticks = buildLegendTicks(0, rangeTo, maxValue, minValue);\n  let xAxis = d3\n    .axisBottom(legendValueScale)\n    .tickValues(ticks)\n    .tickSize(LEGEND_TICK_SIZE);\n\n  let colorRect = legendElem.find(':first-child');\n  let posY = getSvgElemHeight(legendElem) + LEGEND_VALUE_MARGIN;\n  let posX = getSvgElemX(colorRect);\n\n  d3\n    .select(legendElem.get(0))\n    .append('g')\n    .attr('class', 'axis')\n    .attr('transform', 'translate(' + posX + ',' + posY + ')')\n    .call(xAxis);\n\n  legend\n    .select('.axis')\n    .select('.domain')\n    .remove();\n}\n\nfunction drawSimpleColorLegend(elem, colorScale) {\n  let legendElem = $(elem).find('svg');\n  clearLegend(elem);\n\n  let legendWidth = Math.floor(legendElem.outerWidth());\n  let legendHeight = legendElem.attr('height');\n\n  if (legendWidth) {\n    let valuesNumber = Math.floor(legendWidth / 2);\n    let rangeStep = Math.floor(legendWidth / valuesNumber);\n    let valuesRange = d3.range(0, legendWidth, rangeStep);\n\n    let legend = d3.select(legendElem.get(0));\n    var legendRects = legend.selectAll('.heatmap-color-legend-rect').data(valuesRange);\n\n    legendRects\n      .enter()\n      .append('rect')\n      .attr('x', d => d)\n      .attr('y', 0)\n      .attr('width', rangeStep + 1) // Overlap rectangles to prevent gaps\n      .attr('height', legendHeight)\n      .attr('stroke-width', 0)\n      .attr('fill', d => colorScale(d));\n  }\n}\n\nfunction drawSimpleOpacityLegend(elem, options) {\n  let legendElem = $(elem).find('svg');\n  clearLegend(elem);\n\n  let legend = d3.select(legendElem.get(0));\n  let legendWidth = Math.floor(legendElem.outerWidth());\n  let legendHeight = legendElem.attr('height');\n\n  if (legendWidth) {\n    let legendOpacityScale;\n    if (options.colorScale === 'linear') {\n      legendOpacityScale = d3\n        .scaleLinear()\n        .domain([0, legendWidth])\n        .range([0, 1]);\n    } else if (options.colorScale === 'sqrt') {\n      legendOpacityScale = d3\n        .scalePow()\n        .exponent(options.exponent)\n        .domain([0, legendWidth])\n        .range([0, 1]);\n    }\n\n    let rangeStep = 10;\n    let valuesRange = d3.range(0, legendWidth, rangeStep);\n    var legendRects = legend.selectAll('.heatmap-opacity-legend-rect').data(valuesRange);\n\n    legendRects\n      .enter()\n      .append('rect')\n      .attr('x', d => d)\n      .attr('y', 0)\n      .attr('width', rangeStep)\n      .attr('height', legendHeight)\n      .attr('stroke-width', 0)\n      .attr('fill', options.cardColor)\n      .style('opacity', d => legendOpacityScale(d));\n  }\n}\n\nfunction clearLegend(elem) {\n  let legendElem = $(elem).find('svg');\n  legendElem.empty();\n}\n\nfunction getSvgElemX(elem) {\n  let svgElem = elem.get(0);\n  if (svgElem && svgElem.x && svgElem.x.baseVal) {\n    return svgElem.x.baseVal.value;\n  } else {\n    return 0;\n  }\n}\n\nfunction getSvgElemHeight(elem) {\n  let svgElem = elem.get(0);\n  if (svgElem && svgElem.height && svgElem.height.baseVal) {\n    return svgElem.height.baseVal.value;\n  } else {\n    return 0;\n  }\n}\n\nfunction buildLegendTicks(rangeFrom, rangeTo, maxValue, minValue) {\n  let range = rangeTo - rangeFrom;\n  let tickStepSize = tickStep(rangeFrom, rangeTo, 3);\n  let ticksNum = Math.round(range / tickStepSize);\n  let ticks = [];\n\n  for (let i = 0; i < ticksNum; i++) {\n    let current = tickStepSize * i;\n    // Add user-defined min and max if it had been set\n    if (isValueCloseTo(minValue, current, tickStepSize)) {\n      ticks.push(minValue);\n      continue;\n    } else if (minValue < current) {\n      ticks.push(minValue);\n    }\n    if (isValueCloseTo(maxValue, current, tickStepSize)) {\n      ticks.push(maxValue);\n      continue;\n    } else if (maxValue < current) {\n      ticks.push(maxValue);\n    }\n    ticks.push(tickStepSize * i);\n  }\n  if (!isValueCloseTo(maxValue, rangeTo, tickStepSize)) {\n    ticks.push(maxValue);\n  }\n  ticks.push(rangeTo);\n  ticks = _.sortBy(_.uniq(ticks));\n  return ticks;\n}\n\nfunction isValueCloseTo(val, valueTo, step) {\n  let diff = Math.abs(val - valueTo);\n  return diff < step * 0.3;\n}\n","import * as d3 from 'd3';\nimport $ from 'jquery';\nimport _ from 'lodash';\nimport kbn from 'app/core/utils/kbn';\nimport { getValueBucketBound } from './heatmap_data_converter';\n\nlet TOOLTIP_PADDING_X = 30;\nlet TOOLTIP_PADDING_Y = 5;\nlet HISTOGRAM_WIDTH = 160;\nlet HISTOGRAM_HEIGHT = 40;\n\nexport class HeatmapTooltip {\n  tooltip: any;\n  scope: any;\n  dashboard: any;\n  panelCtrl: any;\n  panel: any;\n  heatmapPanel: any;\n  mouseOverBucket: boolean;\n  originalFillColor: any;\n\n  constructor(elem, scope) {\n    this.scope = scope;\n    this.dashboard = scope.ctrl.dashboard;\n    this.panelCtrl = scope.ctrl;\n    this.panel = scope.ctrl.panel;\n    this.heatmapPanel = elem;\n    this.mouseOverBucket = false;\n    this.originalFillColor = null;\n\n    elem.on('mouseover', this.onMouseOver.bind(this));\n    elem.on('mouseleave', this.onMouseLeave.bind(this));\n  }\n\n  onMouseOver(e) {\n    if (!this.panel.tooltip.show || !this.scope.ctrl.data || _.isEmpty(this.scope.ctrl.data.buckets)) {\n      return;\n    }\n\n    if (!this.tooltip) {\n      this.add();\n      this.move(e);\n    }\n  }\n\n  onMouseLeave() {\n    this.destroy();\n  }\n\n  onMouseMove(e) {\n    if (!this.panel.tooltip.show) {\n      return;\n    }\n\n    this.move(e);\n  }\n\n  add() {\n    this.tooltip = d3\n      .select('body')\n      .append('div')\n      .attr('class', 'heatmap-tooltip graph-tooltip grafana-tooltip');\n  }\n\n  destroy() {\n    if (this.tooltip) {\n      this.tooltip.remove();\n    }\n\n    this.tooltip = null;\n  }\n\n  show(pos, data) {\n    if (!this.panel.tooltip.show || !data) {\n      return;\n    }\n    // shared tooltip mode\n    if (pos.panelRelY) {\n      return;\n    }\n\n    let { xBucketIndex, yBucketIndex } = this.getBucketIndexes(pos, data);\n\n    if (!data.buckets[xBucketIndex] || !this.tooltip) {\n      this.destroy();\n      return;\n    }\n\n    let boundBottom, boundTop, valuesNumber;\n    let xData = data.buckets[xBucketIndex];\n    // Search in special 'zero' bucket also\n    let yData = _.find(xData.buckets, (bucket, bucketIndex) => {\n      return bucket.bounds.bottom === yBucketIndex || bucketIndex === yBucketIndex.toString();\n    });\n\n    let tooltipTimeFormat = 'YYYY-MM-DD HH:mm:ss';\n    let time = this.dashboard.formatDate(xData.x, tooltipTimeFormat);\n\n    // Decimals override. Code from panel/graph/graph.ts\n    let countValueFormatter, bucketBoundFormatter;\n    if (_.isNumber(this.panel.tooltipDecimals)) {\n      countValueFormatter = this.countValueFormatter(this.panel.tooltipDecimals, null);\n      bucketBoundFormatter = this.panelCtrl.tickValueFormatter(this.panelCtrl.decimals, null);\n    } else {\n      // auto decimals\n      // legend and tooltip gets one more decimal precision\n      // than graph legend ticks\n      let decimals = (this.panelCtrl.decimals || -1) + 1;\n      countValueFormatter = this.countValueFormatter(decimals, this.panelCtrl.scaledDecimals + 2);\n      bucketBoundFormatter = this.panelCtrl.tickValueFormatter(decimals, this.panelCtrl.scaledDecimals + 2);\n    }\n\n    let tooltipHtml = `<div class=\"graph-tooltip-time\">${time}</div>\n      <div class=\"heatmap-histogram\"></div>`;\n\n    if (yData) {\n      if (yData.bounds) {\n        if (data.tsBuckets) {\n          // Use Y-axis labels\n          const tickFormatter = valIndex => {\n            return data.tsBucketsFormatted ? data.tsBucketsFormatted[valIndex] : data.tsBuckets[valIndex];\n          };\n\n          boundBottom = tickFormatter(yBucketIndex);\n          boundTop = yBucketIndex < data.tsBuckets.length - 1 ? tickFormatter(yBucketIndex + 1) : '';\n        } else {\n          // Display 0 if bucket is a special 'zero' bucket\n          let bottom = yData.y ? yData.bounds.bottom : 0;\n          boundBottom = bucketBoundFormatter(bottom);\n          boundTop = bucketBoundFormatter(yData.bounds.top);\n        }\n        valuesNumber = countValueFormatter(yData.count);\n        tooltipHtml += `<div>\n          bucket: <b>${boundBottom} - ${boundTop}</b> <br>\n          count: <b>${valuesNumber}</b> <br>\n        </div>`;\n      } else {\n        // currently no bounds for pre bucketed data\n        tooltipHtml += `<div>count: <b>${yData.count}</b><br></div>`;\n      }\n    } else {\n      if (!this.panel.tooltip.showHistogram) {\n        this.destroy();\n        return;\n      }\n      boundBottom = yBucketIndex;\n      boundTop = '';\n      valuesNumber = 0;\n    }\n\n    this.tooltip.html(tooltipHtml);\n\n    if (this.panel.tooltip.showHistogram) {\n      this.addHistogram(xData);\n    }\n\n    this.move(pos);\n  }\n\n  getBucketIndexes(pos, data) {\n    const xBucketIndex = this.getXBucketIndex(pos.offsetX, data);\n    const yBucketIndex = this.getYBucketIndex(pos.offsetY, data);\n    return { xBucketIndex, yBucketIndex };\n  }\n\n  getXBucketIndex(offsetX, data) {\n    let x = this.scope.xScale.invert(offsetX - this.scope.yAxisWidth).valueOf();\n    // First try to find X bucket by checking x pos is in the\n    // [bucket.x, bucket.x + xBucketSize] interval\n    let xBucket = _.find(data.buckets, bucket => {\n      return x > bucket.x && x - bucket.x <= data.xBucketSize;\n    });\n    return xBucket ? xBucket.x : getValueBucketBound(x, data.xBucketSize, 1);\n  }\n\n  getYBucketIndex(offsetY, data) {\n    let y = this.scope.yScale.invert(offsetY - this.scope.chartTop);\n    if (data.tsBuckets) {\n      return Math.floor(y);\n    }\n    let yBucketIndex = getValueBucketBound(y, data.yBucketSize, this.panel.yAxis.logBase);\n    return yBucketIndex;\n  }\n\n  getSharedTooltipPos(pos) {\n    // get pageX from position on x axis and pageY from relative position in original panel\n    pos.pageX = this.heatmapPanel.offset().left + this.scope.xScale(pos.x);\n    pos.pageY = this.heatmapPanel.offset().top + this.scope.chartHeight * pos.panelRelY;\n    return pos;\n  }\n\n  addHistogram(data) {\n    let xBucket = this.scope.ctrl.data.buckets[data.x];\n    let yBucketSize = this.scope.ctrl.data.yBucketSize;\n    let min, max, ticks;\n    if (this.scope.ctrl.data.tsBuckets) {\n      min = 0;\n      max = this.scope.ctrl.data.tsBuckets.length - 1;\n      ticks = this.scope.ctrl.data.tsBuckets.length;\n    } else {\n      min = this.scope.ctrl.data.yAxis.min;\n      max = this.scope.ctrl.data.yAxis.max;\n      ticks = this.scope.ctrl.data.yAxis.ticks;\n    }\n    let histogramData = _.map(xBucket.buckets, bucket => {\n      let count = bucket.count !== undefined ? bucket.count : bucket.values.length;\n      return [bucket.bounds.bottom, count];\n    });\n    histogramData = _.filter(histogramData, d => {\n      return d[0] >= min && d[0] <= max;\n    });\n\n    let scale = this.scope.yScale.copy();\n    let histXScale = scale.domain([min, max]).range([0, HISTOGRAM_WIDTH]);\n\n    let barWidth;\n    if (this.panel.yAxis.logBase === 1) {\n      barWidth = Math.floor(HISTOGRAM_WIDTH / (max - min) * yBucketSize * 0.9);\n    } else {\n      let barNumberFactor = yBucketSize ? yBucketSize : 1;\n      barWidth = Math.floor(HISTOGRAM_WIDTH / ticks / barNumberFactor * 0.9);\n    }\n    barWidth = Math.max(barWidth, 1);\n\n    // Normalize histogram Y axis\n    let histogramDomain = _.reduce(_.map(histogramData, d => d[1]), (sum, val) => sum + val, 0);\n    let histYScale = d3\n      .scaleLinear()\n      .domain([0, histogramDomain])\n      .range([0, HISTOGRAM_HEIGHT]);\n\n    let histogram = this.tooltip\n      .select('.heatmap-histogram')\n      .append('svg')\n      .attr('width', HISTOGRAM_WIDTH)\n      .attr('height', HISTOGRAM_HEIGHT);\n\n    histogram\n      .selectAll('.bar')\n      .data(histogramData)\n      .enter()\n      .append('rect')\n      .attr('x', d => {\n        return histXScale(d[0]);\n      })\n      .attr('width', barWidth)\n      .attr('y', d => {\n        return HISTOGRAM_HEIGHT - histYScale(d[1]);\n      })\n      .attr('height', d => {\n        return histYScale(d[1]);\n      });\n  }\n\n  move(pos) {\n    if (!this.tooltip) {\n      return;\n    }\n\n    let elem = $(this.tooltip.node())[0];\n    let tooltipWidth = elem.clientWidth;\n    let tooltipHeight = elem.clientHeight;\n\n    let left = pos.pageX + TOOLTIP_PADDING_X;\n    let top = pos.pageY + TOOLTIP_PADDING_Y;\n\n    if (pos.pageX + tooltipWidth + 40 > window.innerWidth) {\n      left = pos.pageX - tooltipWidth - TOOLTIP_PADDING_X;\n    }\n\n    if (pos.pageY - window.pageYOffset + tooltipHeight + 20 > window.innerHeight) {\n      top = pos.pageY - tooltipHeight - TOOLTIP_PADDING_Y;\n    }\n\n    return this.tooltip.style('left', left + 'px').style('top', top + 'px');\n  }\n\n  countValueFormatter(decimals, scaledDecimals = null) {\n    let format = 'short';\n    return function(value) {\n      return kbn.valueFormats[format](value, decimals, scaledDecimals);\n    };\n  }\n}\n","import _ from 'lodash';\nimport $ from 'jquery';\nimport moment from 'moment';\nimport * as d3 from 'd3';\nimport kbn from 'app/core/utils/kbn';\nimport { appEvents, contextSrv } from 'app/core/core';\nimport * as ticksUtils from 'app/core/utils/ticks';\nimport { HeatmapTooltip } from './heatmap_tooltip';\nimport { mergeZeroBuckets } from './heatmap_data_converter';\nimport { getColorScale, getOpacityScale } from './color_scale';\n\nlet MIN_CARD_SIZE = 1,\n  CARD_PADDING = 1,\n  CARD_ROUND = 0,\n  DATA_RANGE_WIDING_FACTOR = 1.2,\n  DEFAULT_X_TICK_SIZE_PX = 100,\n  DEFAULT_Y_TICK_SIZE_PX = 50,\n  X_AXIS_TICK_PADDING = 10,\n  Y_AXIS_TICK_PADDING = 5,\n  MIN_SELECTION_WIDTH = 2;\n\nexport default function link(scope, elem, attrs, ctrl) {\n  let data, timeRange, panel, heatmap;\n\n  // $heatmap is JQuery object, but heatmap is D3\n  let $heatmap = elem.find('.heatmap-panel');\n  let tooltip = new HeatmapTooltip($heatmap, scope);\n\n  let width,\n    height,\n    yScale,\n    xScale,\n    chartWidth,\n    chartHeight,\n    chartTop,\n    chartBottom,\n    yAxisWidth,\n    xAxisHeight,\n    cardPadding,\n    cardRound,\n    cardWidth,\n    cardHeight,\n    colorScale,\n    opacityScale,\n    mouseUpHandler;\n\n  let selection = {\n    active: false,\n    x1: -1,\n    x2: -1,\n  };\n\n  let padding = { left: 0, right: 0, top: 0, bottom: 0 },\n    margin = { left: 25, right: 15, top: 10, bottom: 20 },\n    dataRangeWidingFactor = DATA_RANGE_WIDING_FACTOR;\n\n  ctrl.events.on('render', () => {\n    render();\n    ctrl.renderingCompleted();\n  });\n\n  function setElementHeight() {\n    try {\n      var height = ctrl.height || panel.height || ctrl.row.height;\n      if (_.isString(height)) {\n        height = parseInt(height.replace('px', ''), 10);\n      }\n\n      height -= panel.legend.show ? 28 : 11; // bottom padding and space for legend\n\n      $heatmap.css('height', height + 'px');\n\n      return true;\n    } catch (e) {\n      // IE throws errors sometimes\n      return false;\n    }\n  }\n\n  function getYAxisWidth(elem) {\n    let axis_text = elem.selectAll('.axis-y text').nodes();\n    let max_text_width = _.max(\n      _.map(axis_text, text => {\n        // Use SVG getBBox method\n        return text.getBBox().width;\n      })\n    );\n\n    return max_text_width;\n  }\n\n  function getXAxisHeight(elem) {\n    let axis_line = elem.select('.axis-x line');\n    if (!axis_line.empty()) {\n      let axis_line_position = parseFloat(elem.select('.axis-x line').attr('y2'));\n      let canvas_width = parseFloat(elem.attr('height'));\n      return canvas_width - axis_line_position;\n    } else {\n      // Default height\n      return 30;\n    }\n  }\n\n  function addXAxis() {\n    scope.xScale = xScale = d3\n      .scaleTime()\n      .domain([timeRange.from, timeRange.to])\n      .range([0, chartWidth]);\n\n    let ticks = chartWidth / DEFAULT_X_TICK_SIZE_PX;\n    let grafanaTimeFormatter = ticksUtils.grafanaTimeFormat(ticks, timeRange.from, timeRange.to);\n    let timeFormat;\n    let dashboardTimeZone = ctrl.dashboard.getTimezone();\n    if (dashboardTimeZone === 'utc') {\n      timeFormat = d3.utcFormat(grafanaTimeFormatter);\n    } else {\n      timeFormat = d3.timeFormat(grafanaTimeFormatter);\n    }\n\n    let xAxis = d3\n      .axisBottom(xScale)\n      .ticks(ticks)\n      .tickFormat(timeFormat)\n      .tickPadding(X_AXIS_TICK_PADDING)\n      .tickSize(chartHeight);\n\n    let posY = margin.top;\n    let posX = yAxisWidth;\n    heatmap\n      .append('g')\n      .attr('class', 'axis axis-x')\n      .attr('transform', 'translate(' + posX + ',' + posY + ')')\n      .call(xAxis);\n\n    // Remove horizontal line in the top of axis labels (called domain in d3)\n    heatmap\n      .select('.axis-x')\n      .select('.domain')\n      .remove();\n  }\n\n  function addYAxis() {\n    let ticks = Math.ceil(chartHeight / DEFAULT_Y_TICK_SIZE_PX);\n    let tick_interval = ticksUtils.tickStep(data.heatmapStats.min, data.heatmapStats.max, ticks);\n    let { y_min, y_max } = wideYAxisRange(data.heatmapStats.min, data.heatmapStats.max, tick_interval);\n\n    // Rewrite min and max if it have been set explicitly\n    y_min = panel.yAxis.min !== null ? panel.yAxis.min : y_min;\n    y_max = panel.yAxis.max !== null ? panel.yAxis.max : y_max;\n\n    // Adjust ticks after Y range widening\n    tick_interval = ticksUtils.tickStep(y_min, y_max, ticks);\n    ticks = Math.ceil((y_max - y_min) / tick_interval);\n\n    let decimalsAuto = ticksUtils.getPrecision(tick_interval);\n    let decimals = panel.yAxis.decimals === null ? decimalsAuto : panel.yAxis.decimals;\n    // Calculate scaledDecimals for log scales using tick size (as in jquery.flot.js)\n    let flot_tick_size = ticksUtils.getFlotTickSize(y_min, y_max, ticks, decimalsAuto);\n    let scaledDecimals = ticksUtils.getScaledDecimals(decimals, flot_tick_size);\n    ctrl.decimals = decimals;\n    ctrl.scaledDecimals = scaledDecimals;\n\n    // Set default Y min and max if no data\n    if (_.isEmpty(data.buckets)) {\n      y_max = 1;\n      y_min = -1;\n      ticks = 3;\n      decimals = 1;\n    }\n\n    data.yAxis = {\n      min: y_min,\n      max: y_max,\n      ticks: ticks,\n    };\n\n    scope.yScale = yScale = d3\n      .scaleLinear()\n      .domain([y_min, y_max])\n      .range([chartHeight, 0]);\n\n    let yAxis = d3\n      .axisLeft(yScale)\n      .ticks(ticks)\n      .tickFormat(tickValueFormatter(decimals, scaledDecimals))\n      .tickSizeInner(0 - width)\n      .tickSizeOuter(0)\n      .tickPadding(Y_AXIS_TICK_PADDING);\n\n    heatmap\n      .append('g')\n      .attr('class', 'axis axis-y')\n      .call(yAxis);\n\n    // Calculate Y axis width first, then move axis into visible area\n    let posY = margin.top;\n    let posX = getYAxisWidth(heatmap) + Y_AXIS_TICK_PADDING;\n    heatmap.select('.axis-y').attr('transform', 'translate(' + posX + ',' + posY + ')');\n\n    // Remove vertical line in the right of axis labels (called domain in d3)\n    heatmap\n      .select('.axis-y')\n      .select('.domain')\n      .remove();\n  }\n\n  // Wide Y values range and anjust to bucket size\n  function wideYAxisRange(min, max, tickInterval) {\n    let y_widing = (max * (dataRangeWidingFactor - 1) - min * (dataRangeWidingFactor - 1)) / 2;\n    let y_min, y_max;\n\n    if (tickInterval === 0) {\n      y_max = max * dataRangeWidingFactor;\n      y_min = min - min * (dataRangeWidingFactor - 1);\n      tickInterval = (y_max - y_min) / 2;\n    } else {\n      y_max = Math.ceil((max + y_widing) / tickInterval) * tickInterval;\n      y_min = Math.floor((min - y_widing) / tickInterval) * tickInterval;\n    }\n\n    // Don't wide axis below 0 if all values are positive\n    if (min >= 0 && y_min < 0) {\n      y_min = 0;\n    }\n\n    return { y_min, y_max };\n  }\n\n  function addLogYAxis() {\n    let log_base = panel.yAxis.logBase;\n    let { y_min, y_max } = adjustLogRange(data.heatmapStats.minLog, data.heatmapStats.max, log_base);\n\n    y_min = panel.yAxis.min && panel.yAxis.min !== '0' ? adjustLogMin(panel.yAxis.min, log_base) : y_min;\n    y_max = panel.yAxis.max !== null ? adjustLogMax(panel.yAxis.max, log_base) : y_max;\n\n    // Set default Y min and max if no data\n    if (_.isEmpty(data.buckets)) {\n      y_max = Math.pow(log_base, 2);\n      y_min = 1;\n    }\n\n    scope.yScale = yScale = d3\n      .scaleLog()\n      .base(panel.yAxis.logBase)\n      .domain([y_min, y_max])\n      .range([chartHeight, 0]);\n\n    let domain = yScale.domain();\n    let tick_values = logScaleTickValues(domain, log_base);\n\n    let decimalsAuto = ticksUtils.getPrecision(y_min);\n    let decimals = panel.yAxis.decimals || decimalsAuto;\n\n    // Calculate scaledDecimals for log scales using tick size (as in jquery.flot.js)\n    let flot_tick_size = ticksUtils.getFlotTickSize(y_min, y_max, tick_values.length, decimalsAuto);\n    let scaledDecimals = ticksUtils.getScaledDecimals(decimals, flot_tick_size);\n    ctrl.decimals = decimals;\n    ctrl.scaledDecimals = scaledDecimals;\n\n    data.yAxis = {\n      min: y_min,\n      max: y_max,\n      ticks: tick_values.length,\n    };\n\n    let yAxis = d3\n      .axisLeft(yScale)\n      .tickValues(tick_values)\n      .tickFormat(tickValueFormatter(decimals, scaledDecimals))\n      .tickSizeInner(0 - width)\n      .tickSizeOuter(0)\n      .tickPadding(Y_AXIS_TICK_PADDING);\n\n    heatmap\n      .append('g')\n      .attr('class', 'axis axis-y')\n      .call(yAxis);\n\n    // Calculate Y axis width first, then move axis into visible area\n    let posY = margin.top;\n    let posX = getYAxisWidth(heatmap) + Y_AXIS_TICK_PADDING;\n    heatmap.select('.axis-y').attr('transform', 'translate(' + posX + ',' + posY + ')');\n\n    // Set first tick as pseudo 0\n    if (y_min < 1) {\n      heatmap\n        .select('.axis-y')\n        .select('.tick text')\n        .text('0');\n    }\n\n    // Remove vertical line in the right of axis labels (called domain in d3)\n    heatmap\n      .select('.axis-y')\n      .select('.domain')\n      .remove();\n  }\n\n  function addYAxisFromBuckets() {\n    const tsBuckets = data.tsBuckets;\n\n    scope.yScale = yScale = d3\n      .scaleLinear()\n      .domain([0, tsBuckets.length - 1])\n      .range([chartHeight, 0]);\n\n    const tick_values = _.map(tsBuckets, (b, i) => i);\n    const decimalsAuto = _.max(_.map(tsBuckets, ticksUtils.getStringPrecision));\n    const decimals = panel.yAxis.decimals === null ? decimalsAuto : panel.yAxis.decimals;\n    ctrl.decimals = decimals;\n\n    function tickFormatter(valIndex) {\n      let valueFormatted = tsBuckets[valIndex];\n      if (!_.isNaN(_.toNumber(valueFormatted)) && valueFormatted !== '') {\n        // Try to format numeric tick labels\n        valueFormatted = tickValueFormatter(decimals)(_.toNumber(valueFormatted));\n      }\n      return valueFormatted;\n    }\n\n    const tsBucketsFormatted = _.map(tsBuckets, (v, i) => tickFormatter(i));\n    data.tsBucketsFormatted = tsBucketsFormatted;\n\n    let yAxis = d3\n      .axisLeft(yScale)\n      .tickValues(tick_values)\n      .tickFormat(tickFormatter)\n      .tickSizeInner(0 - width)\n      .tickSizeOuter(0)\n      .tickPadding(Y_AXIS_TICK_PADDING);\n\n    heatmap\n      .append('g')\n      .attr('class', 'axis axis-y')\n      .call(yAxis);\n\n    // Calculate Y axis width first, then move axis into visible area\n    const posY = margin.top;\n    const posX = getYAxisWidth(heatmap) + Y_AXIS_TICK_PADDING;\n    heatmap.select('.axis-y').attr('transform', 'translate(' + posX + ',' + posY + ')');\n\n    // Remove vertical line in the right of axis labels (called domain in d3)\n    heatmap\n      .select('.axis-y')\n      .select('.domain')\n      .remove();\n  }\n\n  // Adjust data range to log base\n  function adjustLogRange(min, max, logBase) {\n    let y_min, y_max;\n\n    y_min = data.heatmapStats.minLog;\n    if (data.heatmapStats.minLog > 1 || !data.heatmapStats.minLog) {\n      y_min = 1;\n    } else {\n      y_min = adjustLogMin(data.heatmapStats.minLog, logBase);\n    }\n\n    // Adjust max Y value to log base\n    y_max = adjustLogMax(data.heatmapStats.max, logBase);\n\n    return { y_min, y_max };\n  }\n\n  function adjustLogMax(max, base) {\n    return Math.pow(base, Math.ceil(ticksUtils.logp(max, base)));\n  }\n\n  function adjustLogMin(min, base) {\n    return Math.pow(base, Math.floor(ticksUtils.logp(min, base)));\n  }\n\n  function logScaleTickValues(domain, base) {\n    let domainMin = domain[0];\n    let domainMax = domain[1];\n    let tickValues = [];\n\n    if (domainMin < 1) {\n      let under_one_ticks = Math.floor(ticksUtils.logp(domainMin, base));\n      for (let i = under_one_ticks; i < 0; i++) {\n        let tick_value = Math.pow(base, i);\n        tickValues.push(tick_value);\n      }\n    }\n\n    let ticks = Math.ceil(ticksUtils.logp(domainMax, base));\n    for (let i = 0; i <= ticks; i++) {\n      let tick_value = Math.pow(base, i);\n      tickValues.push(tick_value);\n    }\n\n    return tickValues;\n  }\n\n  function tickValueFormatter(decimals, scaledDecimals = null) {\n    let format = panel.yAxis.format;\n    return function(value) {\n      try {\n        return format !== 'none' ? kbn.valueFormats[format](value, decimals, scaledDecimals) : value;\n      } catch (err) {\n        console.error(err.message || err);\n        return value;\n      }\n    };\n  }\n\n  ctrl.tickValueFormatter = tickValueFormatter;\n\n  function fixYAxisTickSize() {\n    heatmap\n      .select('.axis-y')\n      .selectAll('.tick line')\n      .attr('x2', chartWidth);\n  }\n\n  function addAxes() {\n    chartHeight = height - margin.top - margin.bottom;\n    chartTop = margin.top;\n    chartBottom = chartTop + chartHeight;\n\n    if (panel.dataFormat === 'tsbuckets') {\n      addYAxisFromBuckets();\n    } else {\n      if (panel.yAxis.logBase === 1) {\n        addYAxis();\n      } else {\n        addLogYAxis();\n      }\n    }\n\n    yAxisWidth = getYAxisWidth(heatmap) + Y_AXIS_TICK_PADDING;\n    chartWidth = width - yAxisWidth - margin.right;\n    fixYAxisTickSize();\n\n    addXAxis();\n    xAxisHeight = getXAxisHeight(heatmap);\n\n    if (!panel.yAxis.show) {\n      heatmap\n        .select('.axis-y')\n        .selectAll('line')\n        .style('opacity', 0);\n    }\n\n    if (!panel.xAxis.show) {\n      heatmap\n        .select('.axis-x')\n        .selectAll('line')\n        .style('opacity', 0);\n    }\n  }\n\n  function addHeatmapCanvas() {\n    let heatmap_elem = $heatmap[0];\n\n    width = Math.floor($heatmap.width()) - padding.right;\n    height = Math.floor($heatmap.height()) - padding.bottom;\n\n    cardPadding = panel.cards.cardPadding !== null ? panel.cards.cardPadding : CARD_PADDING;\n    cardRound = panel.cards.cardRound !== null ? panel.cards.cardRound : CARD_ROUND;\n\n    if (heatmap) {\n      heatmap.remove();\n    }\n\n    heatmap = d3\n      .select(heatmap_elem)\n      .append('svg')\n      .attr('width', width)\n      .attr('height', height);\n  }\n\n  function addHeatmap() {\n    addHeatmapCanvas();\n    addAxes();\n\n    if (panel.yAxis.logBase !== 1 && panel.dataFormat !== 'tsbuckets') {\n      let log_base = panel.yAxis.logBase;\n      let domain = yScale.domain();\n      let tick_values = logScaleTickValues(domain, log_base);\n      data.buckets = mergeZeroBuckets(data.buckets, _.min(tick_values));\n    }\n\n    let cardsData = data.cards;\n    let maxValueAuto = data.cardStats.max;\n    let maxValue = panel.color.max || maxValueAuto;\n    let minValue = panel.color.min || 0;\n\n    let colorScheme = _.find(ctrl.colorSchemes, {\n      value: panel.color.colorScheme,\n    });\n    colorScale = getColorScale(colorScheme, contextSrv.user.lightTheme, maxValue, minValue);\n    opacityScale = getOpacityScale(panel.color, maxValue);\n    setCardSize();\n\n    let cards = heatmap.selectAll('.heatmap-card').data(cardsData);\n    cards.append('title');\n    cards = cards\n      .enter()\n      .append('rect')\n      .attr('x', getCardX)\n      .attr('width', getCardWidth)\n      .attr('y', getCardY)\n      .attr('height', getCardHeight)\n      .attr('rx', cardRound)\n      .attr('ry', cardRound)\n      .attr('class', 'bordered heatmap-card')\n      .style('fill', getCardColor)\n      .style('stroke', getCardColor)\n      .style('stroke-width', 0)\n      .style('opacity', getCardOpacity);\n\n    let $cards = $heatmap.find('.heatmap-card');\n    $cards\n      .on('mouseenter', event => {\n        tooltip.mouseOverBucket = true;\n        highlightCard(event);\n      })\n      .on('mouseleave', event => {\n        tooltip.mouseOverBucket = false;\n        resetCardHighLight(event);\n      });\n  }\n\n  function highlightCard(event) {\n    let color = d3.select(event.target).style('fill');\n    let highlightColor = d3.color(color).darker(2);\n    let strokeColor = d3.color(color).brighter(4);\n    let current_card = d3.select(event.target);\n    tooltip.originalFillColor = color;\n    current_card\n      .style('fill', highlightColor.toString())\n      .style('stroke', strokeColor.toString())\n      .style('stroke-width', 1);\n  }\n\n  function resetCardHighLight(event) {\n    d3\n      .select(event.target)\n      .style('fill', tooltip.originalFillColor)\n      .style('stroke', tooltip.originalFillColor)\n      .style('stroke-width', 0);\n  }\n\n  function setCardSize() {\n    let xGridSize = Math.floor(xScale(data.xBucketSize) - xScale(0));\n    let yGridSize = Math.floor(yScale(yScale.invert(0) - data.yBucketSize));\n\n    if (panel.yAxis.logBase !== 1) {\n      let base = panel.yAxis.logBase;\n      let splitFactor = data.yBucketSize || 1;\n      yGridSize = Math.floor((yScale(1) - yScale(base)) / splitFactor);\n    }\n\n    cardWidth = xGridSize - cardPadding * 2;\n    cardHeight = yGridSize ? yGridSize - cardPadding * 2 : 0;\n  }\n\n  function getCardX(d) {\n    let x;\n    if (xScale(d.x) < 0) {\n      // Cut card left to prevent overlay\n      x = yAxisWidth + cardPadding;\n    } else {\n      x = xScale(d.x) + yAxisWidth + cardPadding;\n    }\n\n    return x;\n  }\n\n  function getCardWidth(d) {\n    let w;\n    if (xScale(d.x) < 0) {\n      // Cut card left to prevent overlay\n      let cutted_width = xScale(d.x) + cardWidth;\n      w = cutted_width > 0 ? cutted_width : 0;\n    } else if (xScale(d.x) + cardWidth > chartWidth) {\n      // Cut card right to prevent overlay\n      w = chartWidth - xScale(d.x) - cardPadding;\n    } else {\n      w = cardWidth;\n    }\n\n    // Card width should be MIN_CARD_SIZE at least\n    w = Math.max(w, MIN_CARD_SIZE);\n    return w;\n  }\n\n  function getCardY(d) {\n    let y = yScale(d.y) + chartTop - cardHeight - cardPadding;\n    if (panel.yAxis.logBase !== 1 && d.y === 0) {\n      y = chartBottom - cardHeight - cardPadding;\n    } else {\n      if (y < chartTop) {\n        y = chartTop;\n      }\n    }\n\n    return y;\n  }\n\n  function getCardHeight(d) {\n    let y = yScale(d.y) + chartTop - cardHeight - cardPadding;\n    let h = cardHeight;\n\n    if (panel.yAxis.logBase !== 1 && d.y === 0) {\n      return cardHeight;\n    }\n\n    // Cut card height to prevent overlay\n    if (y < chartTop) {\n      h = yScale(d.y) - cardPadding;\n    } else if (yScale(d.y) > chartBottom) {\n      h = chartBottom - y;\n    } else if (y + cardHeight > chartBottom) {\n      h = chartBottom - y;\n    }\n\n    // Height can't be more than chart height\n    h = Math.min(h, chartHeight);\n    // Card height should be MIN_CARD_SIZE at least\n    h = Math.max(h, MIN_CARD_SIZE);\n\n    return h;\n  }\n\n  function getCardColor(d) {\n    if (panel.color.mode === 'opacity') {\n      return panel.color.cardColor;\n    } else {\n      return colorScale(d.count);\n    }\n  }\n\n  function getCardOpacity(d) {\n    if (panel.color.mode === 'opacity') {\n      return opacityScale(d.count);\n    } else {\n      return 1;\n    }\n  }\n\n  /////////////////////////////\n  // Selection and crosshair //\n  /////////////////////////////\n\n  // Shared crosshair and tooltip\n  appEvents.on(\n    'graph-hover',\n    event => {\n      drawSharedCrosshair(event.pos);\n    },\n    scope\n  );\n\n  appEvents.on(\n    'graph-hover-clear',\n    () => {\n      clearCrosshair();\n    },\n    scope\n  );\n\n  function onMouseDown(event) {\n    selection.active = true;\n    selection.x1 = event.offsetX;\n\n    mouseUpHandler = function() {\n      onMouseUp();\n    };\n\n    $(document).one('mouseup', mouseUpHandler);\n  }\n\n  function onMouseUp() {\n    $(document).unbind('mouseup', mouseUpHandler);\n    mouseUpHandler = null;\n    selection.active = false;\n\n    let selectionRange = Math.abs(selection.x2 - selection.x1);\n    if (selection.x2 >= 0 && selectionRange > MIN_SELECTION_WIDTH) {\n      let timeFrom = xScale.invert(Math.min(selection.x1, selection.x2) - yAxisWidth);\n      let timeTo = xScale.invert(Math.max(selection.x1, selection.x2) - yAxisWidth);\n\n      ctrl.timeSrv.setTime({\n        from: moment.utc(timeFrom),\n        to: moment.utc(timeTo),\n      });\n    }\n\n    clearSelection();\n  }\n\n  function onMouseLeave() {\n    appEvents.emit('graph-hover-clear');\n    clearCrosshair();\n  }\n\n  function onMouseMove(event) {\n    if (!heatmap) {\n      return;\n    }\n\n    if (selection.active) {\n      // Clear crosshair and tooltip\n      clearCrosshair();\n      tooltip.destroy();\n\n      selection.x2 = limitSelection(event.offsetX);\n      drawSelection(selection.x1, selection.x2);\n    } else {\n      emitGraphHoverEvent(event);\n      drawCrosshair(event.offsetX);\n      tooltip.show(event, data);\n    }\n  }\n\n  function emitGraphHoverEvent(event) {\n    let x = xScale.invert(event.offsetX - yAxisWidth).valueOf();\n    let y = yScale.invert(event.offsetY);\n    let pos = {\n      pageX: event.pageX,\n      pageY: event.pageY,\n      x: x,\n      x1: x,\n      y: y,\n      y1: y,\n      panelRelY: null,\n    };\n\n    // Set minimum offset to prevent showing legend from another panel\n    pos.panelRelY = Math.max(event.offsetY / height, 0.001);\n\n    // broadcast to other graph panels that we are hovering\n    appEvents.emit('graph-hover', { pos: pos, panel: panel });\n  }\n\n  function limitSelection(x2) {\n    x2 = Math.max(x2, yAxisWidth);\n    x2 = Math.min(x2, chartWidth + yAxisWidth);\n    return x2;\n  }\n\n  function drawSelection(posX1, posX2) {\n    if (heatmap) {\n      heatmap.selectAll('.heatmap-selection').remove();\n      let selectionX = Math.min(posX1, posX2);\n      let selectionWidth = Math.abs(posX1 - posX2);\n\n      if (selectionWidth > MIN_SELECTION_WIDTH) {\n        heatmap\n          .append('rect')\n          .attr('class', 'heatmap-selection')\n          .attr('x', selectionX)\n          .attr('width', selectionWidth)\n          .attr('y', chartTop)\n          .attr('height', chartHeight);\n      }\n    }\n  }\n\n  function clearSelection() {\n    selection.x1 = -1;\n    selection.x2 = -1;\n\n    if (heatmap) {\n      heatmap.selectAll('.heatmap-selection').remove();\n    }\n  }\n\n  function drawCrosshair(position) {\n    if (heatmap) {\n      heatmap.selectAll('.heatmap-crosshair').remove();\n\n      let posX = position;\n      posX = Math.max(posX, yAxisWidth);\n      posX = Math.min(posX, chartWidth + yAxisWidth);\n\n      heatmap\n        .append('g')\n        .attr('class', 'heatmap-crosshair')\n        .attr('transform', 'translate(' + posX + ',0)')\n        .append('line')\n        .attr('x1', 1)\n        .attr('y1', chartTop)\n        .attr('x2', 1)\n        .attr('y2', chartBottom)\n        .attr('stroke-width', 1);\n    }\n  }\n\n  function drawSharedCrosshair(pos) {\n    if (heatmap && ctrl.dashboard.graphTooltip !== 0) {\n      let posX = xScale(pos.x) + yAxisWidth;\n      drawCrosshair(posX);\n    }\n  }\n\n  function clearCrosshair() {\n    if (heatmap) {\n      heatmap.selectAll('.heatmap-crosshair').remove();\n    }\n  }\n\n  function render() {\n    data = ctrl.data;\n    panel = ctrl.panel;\n    timeRange = ctrl.range;\n\n    if (!setElementHeight() || !data) {\n      return;\n    }\n\n    // Draw default axes and return if no data\n    if (_.isEmpty(data.buckets)) {\n      addHeatmapCanvas();\n      addAxes();\n      return;\n    }\n\n    addHeatmap();\n    scope.yAxisWidth = yAxisWidth;\n    scope.xAxisHeight = xAxisHeight;\n    scope.chartHeight = chartHeight;\n    scope.chartWidth = chartWidth;\n    scope.chartTop = chartTop;\n  }\n\n  // Register selection listeners\n  $heatmap.on('mousedown', onMouseDown);\n  $heatmap.on('mousemove', onMouseMove);\n  $heatmap.on('mouseleave', onMouseLeave);\n}\n","import _ from 'lodash';\nimport $ from 'jquery';\nimport 'vendor/flot/jquery.flot';\nimport 'vendor/flot/jquery.flot.gauge';\nimport 'app/features/panellinks/link_srv';\n\nimport kbn from 'app/core/utils/kbn';\nimport config from 'app/core/config';\nimport TimeSeries from 'app/core/time_series2';\nimport { MetricsPanelCtrl } from 'app/plugins/sdk';\n\nclass SingleStatCtrl extends MetricsPanelCtrl {\n  static templateUrl = 'module.html';\n\n  dataType = 'timeseries';\n  series: any[];\n  data: any;\n  fontSizes: any[];\n  unitFormats: any[];\n  invalidGaugeRange: boolean;\n  panel: any;\n  events: any;\n  valueNameOptions: any[] = [\n    { value: 'min', text: 'Min' },\n    { value: 'max', text: 'Max' },\n    { value: 'avg', text: 'Average' },\n    { value: 'current', text: 'Current' },\n    { value: 'total', text: 'Total' },\n    { value: 'name', text: 'Name' },\n    { value: 'first', text: 'First' },\n    { value: 'delta', text: 'Delta' },\n    { value: 'diff', text: 'Difference' },\n    { value: 'range', text: 'Range' },\n    { value: 'last_time', text: 'Time of last point' },\n  ];\n  tableColumnOptions: any;\n\n  // Set and populate defaults\n  panelDefaults = {\n    links: [],\n    datasource: null,\n    maxDataPoints: 100,\n    interval: null,\n    targets: [{}],\n    cacheTimeout: null,\n    format: 'none',\n    prefix: '',\n    postfix: '',\n    nullText: null,\n    valueMaps: [{ value: 'null', op: '=', text: 'N/A' }],\n    mappingTypes: [{ name: 'value to text', value: 1 }, { name: 'range to text', value: 2 }],\n    rangeMaps: [{ from: 'null', to: 'null', text: 'N/A' }],\n    mappingType: 1,\n    nullPointMode: 'connected',\n    valueName: 'avg',\n    prefixFontSize: '50%',\n    valueFontSize: '80%',\n    postfixFontSize: '50%',\n    thresholds: '',\n    colorBackground: false,\n    colorValue: false,\n    colors: ['#299c46', 'rgba(237, 129, 40, 0.89)', '#d44a3a'],\n    sparkline: {\n      show: false,\n      full: false,\n      lineColor: 'rgb(31, 120, 193)',\n      fillColor: 'rgba(31, 118, 189, 0.18)',\n    },\n    gauge: {\n      show: false,\n      minValue: 0,\n      maxValue: 100,\n      thresholdMarkers: true,\n      thresholdLabels: false,\n    },\n    tableColumn: '',\n  };\n\n  /** @ngInject */\n  constructor($scope, $injector, private linkSrv) {\n    super($scope, $injector);\n    _.defaults(this.panel, this.panelDefaults);\n\n    this.events.on('data-received', this.onDataReceived.bind(this));\n    this.events.on('data-error', this.onDataError.bind(this));\n    this.events.on('data-snapshot-load', this.onDataReceived.bind(this));\n    this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n\n    this.onSparklineColorChange = this.onSparklineColorChange.bind(this);\n    this.onSparklineFillChange = this.onSparklineFillChange.bind(this);\n  }\n\n  onInitEditMode() {\n    this.fontSizes = ['20%', '30%', '50%', '70%', '80%', '100%', '110%', '120%', '150%', '170%', '200%'];\n    this.addEditorTab('Options', 'public/app/plugins/panel/singlestat/editor.html', 2);\n    this.addEditorTab('Value Mappings', 'public/app/plugins/panel/singlestat/mappings.html', 3);\n    this.unitFormats = kbn.getUnitFormats();\n  }\n\n  setUnitFormat(subItem) {\n    this.panel.format = subItem.value;\n    this.refresh();\n  }\n\n  onDataError(err) {\n    this.onDataReceived([]);\n  }\n\n  onDataReceived(dataList) {\n    const data: any = {};\n    if (dataList.length > 0 && dataList[0].type === 'table') {\n      this.dataType = 'table';\n      const tableData = dataList.map(this.tableHandler.bind(this));\n      this.setTableValues(tableData, data);\n    } else {\n      this.dataType = 'timeseries';\n      this.series = dataList.map(this.seriesHandler.bind(this));\n      this.setValues(data);\n    }\n    this.data = data;\n    this.render();\n  }\n\n  seriesHandler(seriesData) {\n    var series = new TimeSeries({\n      datapoints: seriesData.datapoints || [],\n      alias: seriesData.target,\n    });\n\n    series.flotpairs = series.getFlotPairs(this.panel.nullPointMode);\n    return series;\n  }\n\n  tableHandler(tableData) {\n    const datapoints = [];\n    const columnNames = {};\n\n    tableData.columns.forEach((column, columnIndex) => {\n      columnNames[columnIndex] = column.text;\n    });\n\n    this.tableColumnOptions = columnNames;\n    if (!_.find(tableData.columns, ['text', this.panel.tableColumn])) {\n      this.setTableColumnToSensibleDefault(tableData);\n    }\n\n    tableData.rows.forEach(row => {\n      const datapoint = {};\n\n      row.forEach((value, columnIndex) => {\n        const key = columnNames[columnIndex];\n        datapoint[key] = value;\n      });\n\n      datapoints.push(datapoint);\n    });\n\n    return datapoints;\n  }\n\n  setTableColumnToSensibleDefault(tableData) {\n    if (tableData.columns.length === 1) {\n      this.panel.tableColumn = tableData.columns[0].text;\n    } else {\n      this.panel.tableColumn = _.find(tableData.columns, col => {\n        return col.type !== 'time';\n      }).text;\n    }\n  }\n\n  setTableValues(tableData, data) {\n    if (!tableData || tableData.length === 0) {\n      return;\n    }\n\n    if (tableData[0].length === 0 || tableData[0][0][this.panel.tableColumn] === undefined) {\n      return;\n    }\n\n    const datapoint = tableData[0][0];\n    data.value = datapoint[this.panel.tableColumn];\n\n    if (_.isString(data.value)) {\n      data.valueFormatted = _.escape(data.value);\n      data.value = 0;\n      data.valueRounded = 0;\n    } else {\n      const decimalInfo = this.getDecimalsForValue(data.value);\n      const formatFunc = kbn.valueFormats[this.panel.format];\n      data.valueFormatted = formatFunc(\n        datapoint[this.panel.tableColumn],\n        decimalInfo.decimals,\n        decimalInfo.scaledDecimals\n      );\n      data.valueRounded = kbn.roundValue(data.value, this.panel.decimals || 0);\n    }\n\n    this.setValueMapping(data);\n  }\n\n  canModifyText() {\n    return !this.panel.gauge.show;\n  }\n\n  setColoring(options) {\n    if (options.background) {\n      this.panel.colorValue = false;\n      this.panel.colors = ['rgba(71, 212, 59, 0.4)', 'rgba(245, 150, 40, 0.73)', 'rgba(225, 40, 40, 0.59)'];\n    } else {\n      this.panel.colorBackground = false;\n      this.panel.colors = ['rgba(50, 172, 45, 0.97)', 'rgba(237, 129, 40, 0.89)', 'rgba(245, 54, 54, 0.9)'];\n    }\n    this.render();\n  }\n\n  invertColorOrder() {\n    var tmp = this.panel.colors[0];\n    this.panel.colors[0] = this.panel.colors[2];\n    this.panel.colors[2] = tmp;\n    this.render();\n  }\n\n  onColorChange(panelColorIndex) {\n    return color => {\n      this.panel.colors[panelColorIndex] = color;\n      this.render();\n    };\n  }\n\n  onSparklineColorChange(newColor) {\n    this.panel.sparkline.lineColor = newColor;\n    this.render();\n  }\n\n  onSparklineFillChange(newColor) {\n    this.panel.sparkline.fillColor = newColor;\n    this.render();\n  }\n\n  getDecimalsForValue(value) {\n    if (_.isNumber(this.panel.decimals)) {\n      return { decimals: this.panel.decimals, scaledDecimals: null };\n    }\n\n    var delta = value / 2;\n    var dec = -Math.floor(Math.log(delta) / Math.LN10);\n\n    var magn = Math.pow(10, -dec),\n      norm = delta / magn, // norm is between 1.0 and 10.0\n      size;\n\n    if (norm < 1.5) {\n      size = 1;\n    } else if (norm < 3) {\n      size = 2;\n      // special case for 2.5, requires an extra decimal\n      if (norm > 2.25) {\n        size = 2.5;\n        ++dec;\n      }\n    } else if (norm < 7.5) {\n      size = 5;\n    } else {\n      size = 10;\n    }\n\n    size *= magn;\n\n    // reduce starting decimals if not needed\n    if (Math.floor(value) === value) {\n      dec = 0;\n    }\n\n    var result: any = {};\n    result.decimals = Math.max(0, dec);\n    result.scaledDecimals = result.decimals - Math.floor(Math.log(size) / Math.LN10) + 2;\n\n    return result;\n  }\n\n  setValues(data) {\n    data.flotpairs = [];\n\n    if (this.series.length > 1) {\n      var error: any = new Error();\n      error.message = 'Multiple Series Error';\n      error.data =\n        'Metric query returns ' +\n        this.series.length +\n        ' series. Single Stat Panel expects a single series.\\n\\nResponse:\\n' +\n        JSON.stringify(this.series);\n      throw error;\n    }\n\n    if (this.series && this.series.length > 0) {\n      let lastPoint = _.last(this.series[0].datapoints);\n      let lastValue = _.isArray(lastPoint) ? lastPoint[0] : null;\n\n      if (this.panel.valueName === 'name') {\n        data.value = 0;\n        data.valueRounded = 0;\n        data.valueFormatted = this.series[0].alias;\n      } else if (_.isString(lastValue)) {\n        data.value = 0;\n        data.valueFormatted = _.escape(lastValue);\n        data.valueRounded = 0;\n      } else if (this.panel.valueName === 'last_time') {\n        let formatFunc = kbn.valueFormats[this.panel.format];\n        data.value = lastPoint[1];\n        data.valueRounded = data.value;\n        data.valueFormatted = formatFunc(data.value, this.dashboard.isTimezoneUtc());\n      } else {\n        data.value = this.series[0].stats[this.panel.valueName];\n        data.flotpairs = this.series[0].flotpairs;\n\n        let decimalInfo = this.getDecimalsForValue(data.value);\n        let formatFunc = kbn.valueFormats[this.panel.format];\n        data.valueFormatted = formatFunc(data.value, decimalInfo.decimals, decimalInfo.scaledDecimals);\n        data.valueRounded = kbn.roundValue(data.value, decimalInfo.decimals);\n      }\n\n      // Add $__name variable for using in prefix or postfix\n      data.scopedVars = _.extend({}, this.panel.scopedVars);\n      data.scopedVars['__name'] = { value: this.series[0].label };\n    }\n    this.setValueMapping(data);\n  }\n\n  setValueMapping(data) {\n    // check value to text mappings if its enabled\n    if (this.panel.mappingType === 1) {\n      for (let i = 0; i < this.panel.valueMaps.length; i++) {\n        let map = this.panel.valueMaps[i];\n        // special null case\n        if (map.value === 'null') {\n          if (data.value === null || data.value === void 0) {\n            data.valueFormatted = map.text;\n            return;\n          }\n          continue;\n        }\n\n        // value/number to text mapping\n        var value = parseFloat(map.value);\n        if (value === data.valueRounded) {\n          data.valueFormatted = map.text;\n          return;\n        }\n      }\n    } else if (this.panel.mappingType === 2) {\n      for (let i = 0; i < this.panel.rangeMaps.length; i++) {\n        let map = this.panel.rangeMaps[i];\n        // special null case\n        if (map.from === 'null' && map.to === 'null') {\n          if (data.value === null || data.value === void 0) {\n            data.valueFormatted = map.text;\n            return;\n          }\n          continue;\n        }\n\n        // value/number to range mapping\n        var from = parseFloat(map.from);\n        var to = parseFloat(map.to);\n        if (to >= data.valueRounded && from <= data.valueRounded) {\n          data.valueFormatted = map.text;\n          return;\n        }\n      }\n    }\n\n    if (data.value === null || data.value === void 0) {\n      data.valueFormatted = 'no value';\n    }\n  }\n\n  removeValueMap(map) {\n    var index = _.indexOf(this.panel.valueMaps, map);\n    this.panel.valueMaps.splice(index, 1);\n    this.render();\n  }\n\n  addValueMap() {\n    this.panel.valueMaps.push({ value: '', op: '=', text: '' });\n  }\n\n  removeRangeMap(rangeMap) {\n    var index = _.indexOf(this.panel.rangeMaps, rangeMap);\n    this.panel.rangeMaps.splice(index, 1);\n    this.render();\n  }\n\n  addRangeMap() {\n    this.panel.rangeMaps.push({ from: '', to: '', text: '' });\n  }\n\n  link(scope, elem, attrs, ctrl) {\n    var $location = this.$location;\n    var linkSrv = this.linkSrv;\n    var $timeout = this.$timeout;\n    var panel = ctrl.panel;\n    var templateSrv = this.templateSrv;\n    var data, linkInfo;\n    var $panelContainer = elem.find('.panel-container');\n    elem = elem.find('.singlestat-panel');\n\n    function applyColoringThresholds(value, valueString) {\n      var color = getColorForValue(data, value);\n      if (color) {\n        return '<span style=\"color:' + color + '\">' + valueString + '</span>';\n      }\n\n      return valueString;\n    }\n\n    function getSpan(className, fontSize, value) {\n      value = templateSrv.replace(value, data.scopedVars);\n      return '<span class=\"' + className + '\" style=\"font-size:' + fontSize + '\">' + value + '</span>';\n    }\n\n    function getBigValueHtml() {\n      var body = '<div class=\"singlestat-panel-value-container\">';\n\n      if (panel.prefix) {\n        var prefix = panel.prefix;\n        if (panel.colorPrefix) {\n          prefix = applyColoringThresholds(data.value, panel.prefix);\n        }\n        body += getSpan('singlestat-panel-prefix', panel.prefixFontSize, prefix);\n      }\n\n      var value = data.valueFormatted;\n      if (panel.colorValue) {\n        value = applyColoringThresholds(data.value, value);\n      }\n      body += getSpan('singlestat-panel-value', panel.valueFontSize, value);\n\n      if (panel.postfix) {\n        var postfix = panel.postfix;\n        if (panel.colorPostfix) {\n          postfix = applyColoringThresholds(data.value, panel.postfix);\n        }\n        body += getSpan('singlestat-panel-postfix', panel.postfixFontSize, postfix);\n      }\n\n      body += '</div>';\n\n      return body;\n    }\n\n    function getValueText() {\n      var result = panel.prefix ? templateSrv.replace(panel.prefix, data.scopedVars) : '';\n      result += data.valueFormatted;\n      result += panel.postfix ? templateSrv.replace(panel.postfix, data.scopedVars) : '';\n\n      return result;\n    }\n\n    function addGauge() {\n      var width = elem.width();\n      var height = elem.height();\n      // Allow to use a bit more space for wide gauges\n      var dimension = Math.min(width, height * 1.3);\n\n      ctrl.invalidGaugeRange = false;\n      if (panel.gauge.minValue > panel.gauge.maxValue) {\n        ctrl.invalidGaugeRange = true;\n        return;\n      }\n\n      var plotCanvas = $('<div></div>');\n      var plotCss = {\n        top: '10px',\n        margin: 'auto',\n        position: 'relative',\n        height: height * 0.9 + 'px',\n        width: dimension + 'px',\n      };\n\n      plotCanvas.css(plotCss);\n\n      var thresholds = [];\n      for (var i = 0; i < data.thresholds.length; i++) {\n        thresholds.push({\n          value: data.thresholds[i],\n          color: data.colorMap[i],\n        });\n      }\n      thresholds.push({\n        value: panel.gauge.maxValue,\n        color: data.colorMap[data.colorMap.length - 1],\n      });\n\n      var bgColor = config.bootData.user.lightTheme ? 'rgb(230,230,230)' : 'rgb(38,38,38)';\n\n      var fontScale = parseInt(panel.valueFontSize) / 100;\n      var fontSize = Math.min(dimension / 5, 100) * fontScale;\n      // Reduce gauge width if threshold labels enabled\n      var gaugeWidthReduceRatio = panel.gauge.thresholdLabels ? 1.5 : 1;\n      var gaugeWidth = Math.min(dimension / 6, 60) / gaugeWidthReduceRatio;\n      var thresholdMarkersWidth = gaugeWidth / 5;\n      var thresholdLabelFontSize = fontSize / 2.5;\n\n      var options = {\n        series: {\n          gauges: {\n            gauge: {\n              min: panel.gauge.minValue,\n              max: panel.gauge.maxValue,\n              background: { color: bgColor },\n              border: { color: null },\n              shadow: { show: false },\n              width: gaugeWidth,\n            },\n            frame: { show: false },\n            label: { show: false },\n            layout: { margin: 0, thresholdWidth: 0 },\n            cell: { border: { width: 0 } },\n            threshold: {\n              values: thresholds,\n              label: {\n                show: panel.gauge.thresholdLabels,\n                margin: thresholdMarkersWidth + 1,\n                font: { size: thresholdLabelFontSize },\n              },\n              show: panel.gauge.thresholdMarkers,\n              width: thresholdMarkersWidth,\n            },\n            value: {\n              color: panel.colorValue ? getColorForValue(data, data.valueRounded) : null,\n              formatter: function() {\n                return getValueText();\n              },\n              font: {\n                size: fontSize,\n                family: '\"Helvetica Neue\", Helvetica, Arial, sans-serif',\n              },\n            },\n            show: true,\n          },\n        },\n      };\n\n      elem.append(plotCanvas);\n\n      var plotSeries = {\n        data: [[0, data.valueRounded]],\n      };\n\n      $.plot(plotCanvas, [plotSeries], options);\n    }\n\n    function addSparkline() {\n      var width = elem.width() + 20;\n      if (width < 30) {\n        // element has not gotten it's width yet\n        // delay sparkline render\n        setTimeout(addSparkline, 30);\n        return;\n      }\n\n      var height = ctrl.height;\n      var plotCanvas = $('<div></div>');\n      var plotCss: any = {};\n      plotCss.position = 'absolute';\n\n      if (panel.sparkline.full) {\n        plotCss.bottom = '5px';\n        plotCss.left = '-5px';\n        plotCss.width = width - 10 + 'px';\n        var dynamicHeightMargin = height <= 100 ? 5 : Math.round(height / 100) * 15 + 5;\n        plotCss.height = height - dynamicHeightMargin + 'px';\n      } else {\n        plotCss.bottom = '0px';\n        plotCss.left = '-5px';\n        plotCss.width = width - 10 + 'px';\n        plotCss.height = Math.floor(height * 0.25) + 'px';\n      }\n\n      plotCanvas.css(plotCss);\n\n      var options = {\n        legend: { show: false },\n        series: {\n          lines: {\n            show: true,\n            fill: 1,\n            zero: false,\n            lineWidth: 1,\n            fillColor: panel.sparkline.fillColor,\n          },\n        },\n        yaxes: { show: false },\n        xaxis: {\n          show: false,\n          mode: 'time',\n          min: ctrl.range.from.valueOf(),\n          max: ctrl.range.to.valueOf(),\n        },\n        grid: { hoverable: false, show: false },\n      };\n\n      elem.append(plotCanvas);\n\n      var plotSeries = {\n        data: data.flotpairs,\n        color: panel.sparkline.lineColor,\n      };\n\n      $.plot(plotCanvas, [plotSeries], options);\n    }\n\n    function render() {\n      if (!ctrl.data) {\n        return;\n      }\n      data = ctrl.data;\n\n      // get thresholds\n      data.thresholds = panel.thresholds.split(',').map(function(strVale) {\n        return Number(strVale.trim());\n      });\n      data.colorMap = panel.colors;\n\n      var body = panel.gauge.show ? '' : getBigValueHtml();\n\n      if (panel.colorBackground) {\n        var color = getColorForValue(data, data.value);\n        if (color) {\n          $panelContainer.css('background-color', color);\n          if (scope.fullscreen) {\n            elem.css('background-color', color);\n          } else {\n            elem.css('background-color', '');\n          }\n        }\n      } else {\n        $panelContainer.css('background-color', '');\n        elem.css('background-color', '');\n      }\n\n      elem.html(body);\n\n      if (panel.sparkline.show) {\n        addSparkline();\n      }\n\n      if (panel.gauge.show) {\n        addGauge();\n      }\n\n      elem.toggleClass('pointer', panel.links.length > 0);\n\n      if (panel.links.length > 0) {\n        linkInfo = linkSrv.getPanelLinkAnchorInfo(panel.links[0], data.scopedVars);\n      } else {\n        linkInfo = null;\n      }\n    }\n\n    function hookupDrilldownLinkTooltip() {\n      // drilldown link tooltip\n      var drilldownTooltip = $('<div id=\"tooltip\" class=\"\">hello</div>\"');\n\n      elem.mouseleave(function() {\n        if (panel.links.length === 0) {\n          return;\n        }\n        $timeout(function() {\n          drilldownTooltip.detach();\n        });\n      });\n\n      elem.click(function(evt) {\n        if (!linkInfo) {\n          return;\n        }\n        // ignore title clicks in title\n        if ($(evt).parents('.panel-header').length > 0) {\n          return;\n        }\n\n        if (linkInfo.target === '_blank') {\n          window.open(linkInfo.href, '_blank');\n          return;\n        }\n\n        if (linkInfo.href.indexOf('http') === 0) {\n          window.location.href = linkInfo.href;\n        } else {\n          $timeout(function() {\n            $location.url(linkInfo.href);\n          });\n        }\n\n        drilldownTooltip.detach();\n      });\n\n      elem.mousemove(function(e) {\n        if (!linkInfo) {\n          return;\n        }\n\n        drilldownTooltip.text('click to go to: ' + linkInfo.title);\n        drilldownTooltip.place_tt(e.pageX, e.pageY - 50);\n      });\n    }\n\n    hookupDrilldownLinkTooltip();\n\n    this.events.on('render', function() {\n      render();\n      ctrl.renderingCompleted();\n    });\n  }\n}\n\nfunction getColorForValue(data, value) {\n  if (!_.isFinite(value)) {\n    return null;\n  }\n\n  for (var i = data.thresholds.length; i > 0; i--) {\n    if (value >= data.thresholds[i - 1]) {\n      return data.colorMap[i];\n    }\n  }\n\n  return _.first(data.colorMap);\n}\n\nexport { SingleStatCtrl, SingleStatCtrl as PanelCtrl, getColorForValue };\n","import _ from 'lodash';\nimport $ from 'jquery';\nimport { MetricsPanelCtrl } from 'app/plugins/sdk';\nimport { transformDataToTable } from './transformers';\nimport { tablePanelEditor } from './editor';\nimport { columnOptionsTab } from './column_options';\nimport { TableRenderer } from './renderer';\n\nclass TablePanelCtrl extends MetricsPanelCtrl {\n  static templateUrl = 'module.html';\n\n  pageIndex: number;\n  dataRaw: any;\n  table: any;\n  renderer: any;\n\n  panelDefaults = {\n    targets: [{}],\n    transform: 'timeseries_to_columns',\n    pageSize: null,\n    showHeader: true,\n    styles: [\n      {\n        type: 'date',\n        pattern: 'Time',\n        alias: 'Time',\n        dateFormat: 'YYYY-MM-DD HH:mm:ss',\n      },\n      {\n        unit: 'short',\n        type: 'number',\n        alias: '',\n        decimals: 2,\n        colors: ['rgba(245, 54, 54, 0.9)', 'rgba(237, 129, 40, 0.89)', 'rgba(50, 172, 45, 0.97)'],\n        colorMode: null,\n        pattern: '/.*/',\n        thresholds: [],\n      },\n    ],\n    columns: [],\n    scroll: true,\n    fontSize: '100%',\n    sort: { col: 0, desc: true },\n  };\n\n  /** @ngInject */\n  constructor($scope, $injector, templateSrv, private annotationsSrv, private $sanitize, private variableSrv) {\n    super($scope, $injector);\n\n    this.pageIndex = 0;\n\n    if (this.panel.styles === void 0) {\n      this.panel.styles = this.panel.columns;\n      this.panel.columns = this.panel.fields;\n      delete this.panel.columns;\n      delete this.panel.fields;\n    }\n\n    _.defaults(this.panel, this.panelDefaults);\n\n    this.events.on('data-received', this.onDataReceived.bind(this));\n    this.events.on('data-error', this.onDataError.bind(this));\n    this.events.on('data-snapshot-load', this.onDataReceived.bind(this));\n    this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n    this.events.on('init-panel-actions', this.onInitPanelActions.bind(this));\n  }\n\n  onInitEditMode() {\n    this.addEditorTab('Options', tablePanelEditor, 2);\n    this.addEditorTab('Column Styles', columnOptionsTab, 3);\n  }\n\n  onInitPanelActions(actions) {\n    actions.push({ text: 'Export CSV', click: 'ctrl.exportCsv()' });\n  }\n\n  issueQueries(datasource) {\n    this.pageIndex = 0;\n\n    if (this.panel.transform === 'annotations') {\n      this.setTimeQueryStart();\n      return this.annotationsSrv\n        .getAnnotations({\n          dashboard: this.dashboard,\n          panel: this.panel,\n          range: this.range,\n        })\n        .then(annotations => {\n          return { data: annotations };\n        });\n    }\n\n    return super.issueQueries(datasource);\n  }\n\n  onDataError(err) {\n    this.dataRaw = [];\n    this.render();\n  }\n\n  onDataReceived(dataList) {\n    this.dataRaw = dataList;\n    this.pageIndex = 0;\n\n    // automatically correct transform mode based on data\n    if (this.dataRaw && this.dataRaw.length) {\n      if (this.dataRaw[0].type === 'table') {\n        this.panel.transform = 'table';\n      } else {\n        if (this.dataRaw[0].type === 'docs') {\n          this.panel.transform = 'json';\n        } else {\n          if (this.panel.transform === 'table' || this.panel.transform === 'json') {\n            this.panel.transform = 'timeseries_to_rows';\n          }\n        }\n      }\n    }\n\n    this.render();\n  }\n\n  render() {\n    this.table = transformDataToTable(this.dataRaw, this.panel);\n    this.table.sort(this.panel.sort);\n\n    this.renderer = new TableRenderer(\n      this.panel,\n      this.table,\n      this.dashboard.isTimezoneUtc(),\n      this.$sanitize,\n      this.templateSrv\n    );\n\n    return super.render(this.table);\n  }\n\n  toggleColumnSort(col, colIndex) {\n    // remove sort flag from current column\n    if (this.table.columns[this.panel.sort.col]) {\n      this.table.columns[this.panel.sort.col].sort = false;\n    }\n\n    if (this.panel.sort.col === colIndex) {\n      if (this.panel.sort.desc) {\n        this.panel.sort.desc = false;\n      } else {\n        this.panel.sort.col = null;\n      }\n    } else {\n      this.panel.sort.col = colIndex;\n      this.panel.sort.desc = true;\n    }\n    this.render();\n  }\n\n  moveQuery(target, direction) {\n    super.moveQuery(target, direction);\n    super.refresh();\n  }\n\n  exportCsv() {\n    var scope = this.$scope.$new(true);\n    scope.tableData = this.renderer.render_values();\n    scope.panel = 'table';\n    this.publishAppEvent('show-modal', {\n      templateHtml: '<export-data-modal panel=\"panel\" data=\"tableData\"></export-data-modal>',\n      scope,\n      modalClass: 'modal--narrow',\n    });\n  }\n\n  link(scope, elem, attrs, ctrl: TablePanelCtrl) {\n    var data;\n    var panel = ctrl.panel;\n    var pageCount = 0;\n\n    function getTableHeight() {\n      var panelHeight = ctrl.height;\n\n      if (pageCount > 1) {\n        panelHeight -= 26;\n      }\n\n      return panelHeight - 31 + 'px';\n    }\n\n    function appendTableRows(tbodyElem) {\n      ctrl.renderer.setTable(data);\n      tbodyElem.empty();\n      tbodyElem.html(ctrl.renderer.render(ctrl.pageIndex));\n    }\n\n    function switchPage(e) {\n      var el = $(e.currentTarget);\n      ctrl.pageIndex = parseInt(el.text(), 10) - 1;\n      renderPanel();\n    }\n\n    function appendPaginationControls(footerElem) {\n      footerElem.empty();\n\n      var pageSize = panel.pageSize || 100;\n      pageCount = Math.ceil(data.rows.length / pageSize);\n      if (pageCount === 1) {\n        return;\n      }\n\n      var startPage = Math.max(ctrl.pageIndex - 3, 0);\n      var endPage = Math.min(pageCount, startPage + 9);\n\n      var paginationList = $('<ul></ul>');\n\n      for (var i = startPage; i < endPage; i++) {\n        var activeClass = i === ctrl.pageIndex ? 'active' : '';\n        var pageLinkElem = $(\n          '<li><a class=\"table-panel-page-link pointer ' + activeClass + '\">' + (i + 1) + '</a></li>'\n        );\n        paginationList.append(pageLinkElem);\n      }\n\n      footerElem.append(paginationList);\n    }\n\n    function renderPanel() {\n      var panelElem = elem.parents('.panel-content');\n      var rootElem = elem.find('.table-panel-scroll');\n      var tbodyElem = elem.find('tbody');\n      var footerElem = elem.find('.table-panel-footer');\n\n      elem.css({ 'font-size': panel.fontSize });\n      panelElem.addClass('table-panel-content');\n\n      appendTableRows(tbodyElem);\n      appendPaginationControls(footerElem);\n\n      rootElem.css({ 'max-height': panel.scroll ? getTableHeight() : '' });\n    }\n\n    // hook up link tooltips\n    elem.tooltip({\n      selector: '[data-link-tooltip]',\n    });\n\n    function addFilterClicked(e) {\n      let filterData = $(e.currentTarget).data();\n      var options = {\n        datasource: panel.datasource,\n        key: data.columns[filterData.column].text,\n        value: data.rows[filterData.row][filterData.column],\n        operator: filterData.operator,\n      };\n\n      ctrl.variableSrv.setAdhocFilter(options);\n    }\n\n    elem.on('click', '.table-panel-page-link', switchPage);\n    elem.on('click', '.table-panel-filter-link', addFilterClicked);\n\n    var unbindDestroy = scope.$on('$destroy', function() {\n      elem.off('click', '.table-panel-page-link');\n      elem.off('click', '.table-panel-filter-link');\n      unbindDestroy();\n    });\n\n    ctrl.events.on('render', function(renderData) {\n      data = renderData || data;\n      if (data) {\n        renderPanel();\n      }\n      ctrl.renderingCompleted();\n    });\n  }\n}\n\nexport { TablePanelCtrl, TablePanelCtrl as PanelCtrl };\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AAKA;AACA;AACA;AAKA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;AC3FA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAmBA;AACA;AAAA;AAZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;;AAEA;;;;;;;;;;;;;AC5FA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAaA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;;AAEA;;;;;;;;;;;;;AC1IA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AAYA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjPA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AAsBA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAIA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAEA;;;;;;;;;;;;;ACrWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AAsBA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;;;;;;;;;;;;;AC7WA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AAitPA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AA2BA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;ACjKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;;;;;;;;;;;;;AChKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAGA;;;;;;;;;;;;;AC/JA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AAAA;AACA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7TA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAgshaA;AAEA;;AAEA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;AAEA;;AAEA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;AAEA;;AAEA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;;AAEA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AAAA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAOA;AACA;AAEA;;AAEA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAGA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAOA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;AAEA;;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC9phTA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAQA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AASA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;;;;;;;;;;;;;AC3PA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA,yEACA;AACA;AACA;AAEA;AACA,6DACA;AACA;AACA;AAEA;AACA;AACA;AAEA,6CACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA,iFACA;AACA;AACA;AACA;AAAA;AACA,8EACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;ACzTA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA,gEACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA,uEACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;;;;;;;;;;;;;AC3RA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAUA;AACA;AAEA;AACA;AACA;AAEA;AAkBA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA,4EACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA,iEACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA,8EACA;AACA;AACA;AAEA,+DACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA,2EACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA,+DACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA,8EACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA,+DACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA,2DACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA,ij0BA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAmEA;AACA;AAAA;AAAA;AAjrBA;AA+rBA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3tBA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAqCA;AACA;AAAA;AAAA;AAAA;AAAA;AA9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAQA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAGA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAvQA;AAwQA;AAAA;AAEA;;;;;A","sourceRoot":""}