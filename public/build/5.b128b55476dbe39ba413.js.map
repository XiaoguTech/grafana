{"version":3,"sources":["webpack:///./public/vendor/flot/jquery.flot.selection.js","webpack:///./public/vendor/flot/jquery.flot.stack.js","webpack:///./public/vendor/flot/jquery.flot.stackpercent.js","webpack:///./public/vendor/flot/jquery.flot.fillbelow.js","webpack:///./public/vendor/flot/jquery.flot.crosshair.js","webpack:///./public/vendor/flot/jquery.flot.dashes.js","webpack:///./public/vendor/flot/jquery.flot.gauge.js","webpack:///./public/app/plugins/datasource/prometheus/mode-prometheus.js","webpack:///./public/app/plugins/datasource/prometheus/snippets/prometheus.js","webpack:///./public/vendor/flot/jquery.flot.pie.js","webpack:///./public/app/features/annotations/editor_ctrl.ts","webpack:///./public/app/features/annotations/events_processing.ts","webpack:///./public/app/features/annotations/annotations_srv.ts","webpack:///./public/app/features/annotations/event_editor.ts","webpack:///./public/app/features/annotations/event.ts","webpack:///./public/app/features/annotations/event_manager.ts","webpack:///./public/app/features/annotations/annotation_tooltip.ts","webpack:///./public/app/features/annotations/all.ts","webpack:///./public/app/features/templating/variable.ts","webpack:///./public/app/features/templating/editor_ctrl.ts","webpack:///./public/app/features/templating/template_srv.ts","webpack:///./public/app/core/utils/dag.ts","webpack:///./public/app/features/templating/variable_srv.ts","webpack:///./public/app/features/templating/interval_variable.ts","webpack:///./public/app/features/templating/query_variable.ts","webpack:///./public/app/features/templating/datasource_variable.ts","webpack:///./public/app/features/templating/custom_variable.ts","webpack:///./public/app/features/templating/constant_variable.ts","webpack:///./public/app/features/templating/adhoc_variable.ts","webpack:///./public/app/features/plugins/plugin_edit_ctrl.ts","webpack:///./public/app/features/templating/all.ts","webpack:///./public/app/features/plugins/plugin_page_ctrl.ts","webpack:///./public/app/features/plugins/import_list/import_list.ts","webpack:///./public/app/features/plugins/plugin_list_ctrl.ts","webpack:///./public/app/features/plugins/ds_edit_ctrl.ts","webpack:///./public/app/features/plugins/ds_dashboards_ctrl.ts","webpack:///./public/app/features/plugins/ds_list_ctrl.ts","webpack:///./public/app/features/panel/panel_ctrl.ts","webpack:///./public/app/features/panel/metrics_tab.ts","webpack:///./public/app/features/panel/metrics_panel_ctrl.ts","webpack:///./public/app/features/panel/query_ctrl.ts","webpack:///./public/app/features/alerting/state/ThresholdMapper.ts","webpack:///./public/app/features/alerting/AlertTabCtrl.ts","webpack:///./public/app/plugins/sdk.ts","webpack:///./public/app/core/utils/file_export.ts","webpack:///./public/app/core/utils/flatten.ts","webpack:///./public/app/core/utils/version.ts","webpack:///./public/app/plugins/datasource/graphite/gfunc.ts","webpack:///./public/app/plugins/datasource/graphite/datasource.ts","webpack:///./public/app/plugins/datasource/graphite/add_graphite_func.ts","webpack:///./public/app/plugins/datasource/graphite/func_editor.ts","webpack:///./public/app/plugins/datasource/graphite/lexer.ts","webpack:///./public/app/plugins/datasource/graphite/parser.ts","webpack:///./public/app/plugins/datasource/graphite/graphite_query.ts","webpack:///./public/app/plugins/datasource/graphite/query_ctrl.ts","webpack:///./public/app/plugins/datasource/graphite/config_ctrl.ts","webpack:///./public/app/plugins/datasource/graphite/module.ts","webpack:///./public/app/plugins/datasource/cloudwatch/query_parameter_ctrl.ts","webpack:///./public/app/plugins/datasource/cloudwatch/datasource.ts","webpack:///./public/app/plugins/datasource/cloudwatch/config_ctrl.ts","webpack:///./public/app/plugins/datasource/cloudwatch/query_ctrl.ts","webpack:///./public/app/plugins/datasource/cloudwatch/module.ts","webpack:///./public/app/plugins/datasource/elasticsearch/query_def.ts","webpack:///./public/app/plugins/datasource/elasticsearch/query_builder.ts","webpack:///./public/app/plugins/datasource/elasticsearch/index_pattern.ts","webpack:///./public/app/plugins/datasource/elasticsearch/elastic_response.ts","webpack:///./public/app/plugins/datasource/elasticsearch/datasource.ts","webpack:///./public/app/plugins/datasource/elasticsearch/bucket_agg.ts","webpack:///./public/app/plugins/datasource/elasticsearch/metric_agg.ts","webpack:///./public/app/plugins/datasource/elasticsearch/query_ctrl.ts","webpack:///./public/app/plugins/datasource/elasticsearch/config_ctrl.ts","webpack:///./public/app/plugins/datasource/elasticsearch/module.ts","webpack:///./public/app/plugins/datasource/opentsdb/datasource.ts","webpack:///./public/app/plugins/datasource/opentsdb/query_ctrl.ts","webpack:///./public/app/plugins/datasource/opentsdb/config_ctrl.ts","webpack:///./public/app/plugins/datasource/opentsdb/module.ts","webpack:///./public/app/plugins/datasource/grafana/datasource.ts","webpack:///./public/app/plugins/datasource/grafana/module.ts","webpack:///./public/app/plugins/datasource/influxdb/influx_series.ts","webpack:///./public/app/plugins/datasource/influxdb/query_part.ts","webpack:///./public/app/plugins/datasource/influxdb/influx_query.ts","webpack:///./public/app/plugins/datasource/influxdb/response_parser.ts","webpack:///./public/app/plugins/datasource/influxdb/query_builder.ts","webpack:///./public/app/plugins/datasource/influxdb/datasource.ts","webpack:///./public/app/plugins/datasource/influxdb/query_ctrl.ts","webpack:///./public/app/plugins/datasource/logging/result_transformer.ts","webpack:///./public/app/plugins/datasource/influxdb/module.ts","webpack:///./public/app/core/logs_model.ts","webpack:///./public/app/plugins/datasource/logging/datasource.ts","webpack:///./public/app/plugins/datasource/mysql/response_parser.ts","webpack:///./public/app/plugins/datasource/logging/module.ts","webpack:///./public/app/plugins/datasource/mixed/datasource.ts","webpack:///./public/app/plugins/datasource/mixed/module.ts","webpack:///./public/app/plugins/datasource/mysql/datasource.ts","webpack:///./public/app/plugins/datasource/mysql/module.ts","webpack:///./public/app/plugins/datasource/mysql/query_ctrl.ts","webpack:///./public/app/plugins/datasource/postgres/response_parser.ts","webpack:///./public/app/plugins/datasource/postgres/postgres_query.ts","webpack:///./public/app/plugins/datasource/postgres/datasource.ts","webpack:///./public/app/plugins/datasource/postgres/meta_query.ts","webpack:///./public/app/plugins/datasource/postgres/sql_part.ts","webpack:///./public/app/core/components/sql_part/sql_part.ts","webpack:///./public/app/plugins/datasource/postgres/query_ctrl.ts","webpack:///./public/app/plugins/datasource/postgres/module.ts","webpack:///./public/app/plugins/datasource/postgres/config_ctrl.ts","webpack:///./public/app/plugins/datasource/prometheus/metric_find_query.ts","webpack:///./public/app/plugins/datasource/prometheus/result_transformer.ts","webpack:///./public/app/plugins/datasource/prometheus/datasource.ts","webpack:///./public/app/plugins/datasource/prometheus/completer.ts","webpack:///./public/app/plugins/datasource/prometheus/query_ctrl.ts","webpack:///./public/app/plugins/datasource/prometheus/config_ctrl.ts","webpack:///./public/app/plugins/datasource/prometheus/module.ts","webpack:///./public/app/plugins/datasource/mssql/response_parser.ts","webpack:///./public/app/plugins/datasource/mssql/datasource.ts","webpack:///./public/app/plugins/datasource/mssql/query_ctrl.ts","webpack:///./public/app/plugins/datasource/mssql/module.ts","webpack:///./public/app/plugins/datasource/testdata/datasource.ts","webpack:///./public/app/plugins/datasource/testdata/query_ctrl.ts","webpack:///./public/app/plugins/datasource/testdata/module.ts","webpack:///./public/app/plugins/panel/text/module.ts","webpack:///./public/app/plugins/panel/graph/jquery.flot.events.ts","webpack:///./public/app/plugins/panel/graph/graph_tooltip.ts","webpack:///./public/app/plugins/panel/graph/threshold_manager.ts","webpack:///./public/app/plugins/panel/graph/histogram.ts","webpack:///./public/app/plugins/panel/graph/align_yaxes.ts","webpack:///./public/app/plugins/panel/graph/graph.ts","webpack:///./public/app/plugins/panel/graph/legend.ts","webpack:///./public/app/plugins/panel/graph/series_overrides_ctrl.ts","webpack:///./public/app/plugins/panel/graph/thresholds_form.ts","webpack:///./public/app/plugins/panel/graph/template.ts","webpack:///./public/app/plugins/panel/graph/data_processor.ts","webpack:///./public/app/plugins/panel/graph/module.ts","webpack:///./public/app/plugins/panel/graph/axes_editor.ts","webpack:///./public/app/plugins/panel/dashlist/module.ts","webpack:///./public/app/plugins/panel/pluginlist/module.ts","webpack:///./public/app/plugins/panel/alertlist/module.ts","webpack:///./public/app/plugins/panel/heatmap/color_legend.ts","webpack:///./public/app/plugins/panel/heatmap/color_scale.ts","webpack:///./public/app/plugins/panel/heatmap/display_editor.ts","webpack:///./public/app/plugins/panel/heatmap/heatmap_data_converter.ts","webpack:///./public/app/plugins/panel/heatmap/axes_editor.ts","webpack:///./public/app/plugins/panel/heatmap/heatmap_tooltip.ts","webpack:///./public/app/plugins/panel/heatmap/rendering.ts","webpack:///./public/app/plugins/panel/heatmap/heatmap_ctrl.ts","webpack:///./public/app/plugins/panel/heatmap/module.ts","webpack:///./public/app/plugins/panel/table/transformers.ts","webpack:///./public/app/plugins/panel/table/editor.ts","webpack:///./public/app/plugins/panel/table/column_options.ts","webpack:///./public/app/plugins/panel/table/renderer.ts","webpack:///./public/app/plugins/panel/table/module.ts","webpack:///./public/app/features/dashboard/panellinks/link_srv.ts","webpack:///./public/app/plugins/panel/singlestat/module.ts","webpack:///./public/app/plugins/panel/gettingstarted/module.ts","webpack:///./public/app/features/plugins/built_in_plugins.ts","webpack:///./public/app/features/plugins/plugin_loader.ts","webpack:///./public/app/features/plugins/datasource_srv.ts","webpack:///./public/app/plugins/panel/unknown/module.ts","webpack:///./public/app/features/plugins/plugin_component.ts","webpack:///./public/app/features/dashboard/dashboard_ctrl.ts","webpack:///./public/app/features/plugins/all.ts","webpack:///./public/app/features/dashboard/history/history.ts","webpack:///./public/app/features/dashboard/alerting_srv.ts","webpack:///./public/app/features/dashboard/history/history_srv.ts","webpack:///./public/app/features/dashboard/dashboard_loader_srv.ts","webpack:///./public/app/features/dashboard/dashnav/dashnav.ts","webpack:///./public/app/features/dashboard/submenu/submenu.ts","webpack:///./public/app/features/dashboard/save_as_modal.ts","webpack:///./public/app/features/dashboard/save_modal.ts","webpack:///./public/app/features/dashboard/save_provisioned_modal.ts","webpack:///./public/app/features/dashboard/shareModalCtrl.ts","webpack:///./public/app/features/dashboard/share_snapshot_ctrl.ts","webpack:///./public/app/features/dashboard/dashboard_srv.ts","webpack:///./public/app/features/dashboard/view_state_srv.ts","webpack:///./public/app/features/dashboard/validation_srv.ts","webpack:///./public/app/features/dashboard/time_srv.ts","webpack:///./public/app/features/dashboard/change_tracker.ts","webpack:///./public/app/features/dashboard/unsaved_changes_srv.ts","webpack:///./public/app/features/dashboard/unsaved_changes_modal.ts","webpack:///./public/app/features/dashboard/timepicker/input_date.ts","webpack:///./public/app/features/dashboard/timepicker/timepicker.ts","webpack:///./public/app/features/dashboard/upload.ts","webpack:///./public/app/features/dashboard/export/exporter.ts","webpack:///./public/app/features/dashboard/export/export_modal.ts","webpack:///./public/app/features/dashboard/export_data/export_data_modal.ts","webpack:///./public/app/features/dashboard/ad_hoc_filters.ts","webpack:///./public/app/features/dashboard/repeat_option/repeat_option.ts","webpack:///./public/app/features/dashboard/dashgrid/DashboardRow.tsx","webpack:///./public/app/core/components/ScrollBar/ScrollBar.tsx","webpack:///./public/app/features/dashboard/dashgrid/AddPanelPanel.tsx","webpack:///./public/app/features/dashboard/dashgrid/DashboardPanel.tsx","webpack:///./public/app/features/dashboard/dashgrid/DashboardGrid.tsx","webpack:///./public/app/features/dashboard/dashgrid/DashboardGridDirective.ts","webpack:///./public/app/features/dashboard/dashgrid/PanelLoader.ts","webpack:///./public/app/features/dashboard/dashgrid/RowOptions.ts","webpack:///./public/app/features/dashboard/folder_picker/folder_picker.ts","webpack:///./public/app/features/dashboard/move_to_folder_modal/move_to_folder.ts","webpack:///./public/app/features/dashboard/settings/settings.ts","webpack:///./public/app/features/dashboard/dashlinks/editor.ts","webpack:///./public/app/features/dashboard/panellinks/module.ts","webpack:///./public/app/features/dashboard/dashlinks/module.ts","webpack:///./public/app/features/dashboard/folder_page_loader.ts","webpack:///./public/app/features/dashboard/folder_dashboards_ctrl.ts","webpack:///./public/app/features/dashboard/folder_settings_ctrl.ts","webpack:///./public/app/features/dashboard/dashboard_import_ctrl.ts","webpack:///./public/app/features/playlist/playlists_ctrl.ts","webpack:///./public/app/features/dashboard/create_folder_ctrl.ts","webpack:///./public/app/features/dashboard/all.ts","webpack:///./public/app/features/playlist/playlist_search.ts","webpack:///./public/app/features/playlist/playlist_srv.ts","webpack:///./public/app/features/playlist/playlist_edit_ctrl.ts","webpack:///./public/app/features/playlist/playlist_routes.ts","webpack:///./public/app/features/playlist/all.ts","webpack:///./public/app/features/panel/panel_header.ts","webpack:///./public/app/features/panel/panel_directive.ts","webpack:///./public/app/features/panel/solo_panel_ctrl.ts","webpack:///./public/app/features/panel/panel_editor_tab.ts","webpack:///./public/app/features/panel/query_editor_row.ts","webpack:///./public/app/features/panel/query_troubleshooter.ts","webpack:///./public/app/features/panel/all.ts","webpack:///./public/app/features/org/org_users_ctrl.ts","webpack:///./public/app/features/org/profile_ctrl.ts","webpack:///./public/app/features/org/select_org_ctrl.ts","webpack:///./public/app/features/org/new_org_ctrl.ts","webpack:///./public/app/features/org/change_password_ctrl.ts","webpack:///./public/app/features/org/user_invite_ctrl.ts","webpack:///./public/app/features/org/create_team_ctrl.ts","webpack:///./public/app/features/org/org_api_keys_ctrl.ts","webpack:///./public/app/features/org/org_details_ctrl.ts","webpack:///./public/app/features/org/prefs_control.ts","webpack:///./public/app/features/org/all.ts","webpack:///./public/app/features/admin/AdminListUsersCtrl.ts","webpack:///./public/app/features/admin/AdminEditUserCtrl.ts","webpack:///./public/app/features/admin/AdminEditOrgCtrl.ts","webpack:///./public/app/features/admin/AdminListOrgsCtrl.ts","webpack:///./public/app/features/alerting/NotificationsEditCtrl.ts","webpack:///./public/app/features/admin/StyleGuideCtrl.ts","webpack:///./public/app/features/admin/index.ts","webpack:///./public/app/features/alerting/NotificationsListCtrl.ts","webpack:///./public/app/features/manage-dashboards/DashboardListCtrl.ts","webpack:///./public/app/features/manage-dashboards/SnapshotListCtrl.ts","webpack:///./public/app/features/manage-dashboards/index.ts","webpack:///./public/app/features/all.ts"],"names":["$","plot","plugins","push","init","selection","first","x","y","second","show","active","savedhandlers","mouseUpHandler","onMouseMove","e","updateSelection","getPlaceholder","trigger","getSelection","onMouseDown","which","document","body","focus","undefined","onselectstart","ondrag","setSelectionPos","selectionIsSane","triggerSelectedEvent","setTimeout","isSelecting","onMouseUp","one","r","c1","c2","axes","getAxes","each","name","axis","used","anyUsed","p1","c2p","direction","p2","from","Math","min","to","max","event","ctrlKey","metaKey","xaxis","yaxis","x1","y1","x2","y2","clamp","value","pos","o","getOptions","offset","plotOffset","getPlotOffset","pageX","left","width","pageY","top","height","mode","triggerRedrawOverlay","clearSelection","preventEvent","extractRange","ranges","coord","key","k","n","getXAxes","getYAxes","tmp","minSize","abs","setSelection","range","p2c","hooks","bindEvents","eventHolder","mousemove","mousedown","drawOverlay","ctx","save","translate","c","color","parse","strokeStyle","scale","toString","lineWidth","lineJoin","shape","fillStyle","w","h","fillRect","strokeRect","restore","shutdown","unbind","options","version","jQuery","processDatapoints","s","datapoints","stack","other","allseries","res","i","length","findMatchingSeries","getData","px","py","intery","qx","qy","bottom","l","m","ps","pointsize","points","otherps","otherpoints","newpoints","withlines","lines","horizontal","bars","withbottom","format","withsteps","steps","keyOffset","accumulateOffset","j","fromgap","series","stackBases","processed","stackSums","getStackSums","_data","data_len","sums","stackpercent","key_idx","value_idx","num","data","processRawData","percents","sum","newPoints","segmentIntersection","top_left_x","top_left_y","top_right_x","top_right_y","bottom_left_x","bottom_left_y","bottom_right_x","bottom_right_y","top_delta_x","top_delta_y","bottom_delta_x","bottom_delta_y","t","drawSeries","otherseries","openPolygon","beginPath","moveTo","findNextStart","start_i","end_i","console","assert","intersect","start","equal","intersectionPoint","topTraversal","right_i","error","bottomTraversal","lineTo","closePath","fill","fillBelowTo","id","findBelowSeries","validateInput","a","normalize","crosshair","locked","onMouseOut","setCrosshair","clearCrosshair","lockCrosshair","unlockCrosshair","mouseout","adj","indexOf","drawX","floor","drawY","stroke","dashes","draw","axisx","axisy","plotDashes","xoffset","yoffset","dashOnLength","dashOffLength","prevx","prevy","dashRemainder","dashOn","dashLength","dashOffset","ax1","ay1","ax2","ay2","lineSegmentOffset","deltaX","deltaY","remainder","distance","segmentLength","sqrt","pow","ysign","lw","sw","shadowSize","angle","PI","sin","cos","Gauge","context","placeholder","gaugeOptions","gauges","getLogger","debug","calculateAutoValues","gaugeOptionsi","cellWidth","gauge","label","margin","font","size","threshold","calculateAngle","layout","startAngle","endAngle","drawArcWithShadow","cx","cy","rd1","rd2","lc","fc","blur","drawArc","clip","shadowOffsetX","shadowOffsetY","shadowBlur","shadowColor","drawThresholdValue","cellLayout","drawText","thresholdLabelMargin","thresholdLabelFontSize","radius","toRad","formatter","text","textOptions","span","exists","attr","css","family","background","opacity","append","parseInt","prototype","calculateLayout","canvasWidth","canvasHeight","columns","rows","ceil","hMargin","vMargin","cellHeight","square","cell","cellMargin","labelMargin","labelFontSize","valueMargin","valueFontSize","thresholdWidth","maxRadiusH","dAngle","heightRatioV","outerRadiusV","maxRadiusV","outerRadius","gaugeOuterHeight","calculateCellLayout","col","row","blank","offsetY","vAlign","drawBackground","frame","grid","borderColor","borderWidth","backgroundColor","drawCellBackground","border","drawGauge","shadow","values","getColor","a2","drawThreshold","a1","drawLable","item","drawValue","drawThresholdValues","debugOptions","Logger","arc","defaults","log","alert","processOptions","legend","sort","b","extend","ace","define","require","exports","module","oop","TextHighlightRules","PrometheusHighlightRules","keywordMapper","this","createKeywordMapper","support.function","keyword","constant.language","$rules","token","regex","next","start-label-matcher","start-label-list-matcher","normalizeRules","inherits","lang","keyWordsCompletions","map","word","caption","meta","score","Number","MAX_VALUE","functionsCompletions","def","docText","docHTML","escapeHTML","replace","convertMarkDownTags","str","len","space_index","line_start","next_line_end","line","slice","join","wrapText","convertToHTML","PrometheusCompletions","getCompletions","state","session","prefix","callback","getTokenAt","column","type","concat","call","CstyleBehaviour","Behaviour","TokenIterator","PrometheusBehaviour","inherit","add","action","editor","getSelectionRange","selected","doc","getTextRange","getWrapBehavioursEnabled","opening","closing","rowDiff","end","getWrapped","isSaneInsertion","cursor","getCursorPosition","getLine","substring","$findOpeningBracket","isAutoInsertedClosing","isMultiLine","TextMode","Mode","HighlightRules","$behaviour","$completer","completer","$id","snippets","content","scope","tabTrigger","REDRAW_ATTEMPTS","REDRAW_SHRINK","pie","innerRadius","tilt","alpha","round","percent","combine","highlight","canvas","target","maxRadius","centerLeft","centerTop","highlights","getCanvas","parent","setData","total","combined","numCombined","newdata","isArray","isNaN","parseFloat","isFinite","newCtx","legendWidth","children","filter","position","match","slices","attempts","clear","drawShadow","drawPie","prepend","setSeries","insertLegend","clearRect","remove","shadowLeft","shadowTop","globalAlpha","currentAngle","drawSlice","drawDonutHole","drawLabel","index","lf","labelFormatter","plf","halfAngle","html","labelTop","labelLeft","insertBefore","drawLabels","layer","globalCompositeOperation","isPointInPoly","poly","pt","triggerClickHoverEvent","onClick","eventname","mouseX","mouseY","isPointInPath","datapoint","dataIndex","seriesIndex","findNearbySlice","autoHighlight","auto","unhighlight","indexOfHighlight","splice","hoverable","clickable","click","octx","drawHighlight","gettingstarted_module_namespaceObject","__webpack_require__","d","module_GettingStartedPanelCtrl","angular","lodash","jquery_js_exposed","AnnotationsEditorCtrl","$scope","datasourceSrv","annotationDefaults","datasource","iconColor","enable","showIn","hide","showOptions","ctrl","datasources","getAnnotationSources","annotations","dashboard","list","reset","onColorChange","bind","$inject","datasourceChanged","_this","get","currentAnnotation","then","ds","currentDatasource","edit","annotation","currentIsNew","jquery_js_exposed_default","angular_default","copy","update","setupNew","move","dir","removeAnnotation","lodash_default","newColor","partition","regionEvents","_a","singleEvents","events","regionId","groupBy","compact","regions","head","regionObj","timeEnd","time","isRegion","isStartOfRegion","valueOf","isPanelAlert","eventType","controller","editor_ctrl_AnnotationsEditorCtrl","$rootScope","$q","backendSrv","timeSrv","onAppEvent","clearCache","getAnnotations","getGlobalAnnotations","getAlertStates","results","flattenDeep","makeRegions","eventsById","dedup","eventGroup","every","find","dedupAnnotations","panelId","source","panel","alertState","catch","err","message","appEvent","raw","alertStatesPromise","when","globalAnnotationsPromise","timeRange","this_1","translateQueryResult","snapshotData","annotationQuery","rangeRaw","snapshot","_i","state_1","_loop_1","all","promises","saveAnnotationEvent","post","updateAnnotationEvent","put","results_1","AnnotationsSrv","service","annotations_srv_AnnotationsSrv","moment","EventEditorCtrl","annotationsSrv","panelCtrl","dashboardId","tryEpochToMoment","formatDate","form","$valid","cloneDeep","saveModel","refresh","close","delete","deleteAnnotationEvent","timestamp","directive","tinycolor","AnnotationEvent","EventManager","editorClosed","editorOpen","render","editorOpened","updateTime","moment_default","editEvent","elem","addFlotEvents","flotOptions","colors","editModel","newState","types","markerSize","fillColor","markings","defaultColor","colorString","tinycolor_default","isValid","setAlpha","toRgbString","addAlphaToRGB","region","event_manager_getRegions","eventSectionHeight","levels","keys","manager","$sanitize","dashboardSrv","contextSrv","$compile","escape","element","title","getCurrent","tooltip","titleStateClass","alertId","stateModel","alertDef","getStateDisplayModel","stateClass","iconClass","getAlertAnnotationInfo","isString","header","login","avatarUrl","sanitizeString","appendTo","contents","annotationTooltipDirective","kbn","variableTypes","containsVariable","args","arguments","variableName","regexEscape","RegExp","exec","VariableEditorCtrl","variableSrv","templateSrv","_","optionsLimit","refreshOptions","variables","$watch","val","addVariable","current","emit","sameName","app_events","query","validate","infoText","getTagKeys","updateOptions","variable","clone","getSaveModel","createVariableFromModel","runQuery","updateTemplateData","getMetricSources","mixed","datasourceTypes","uniqBy","old","oldIndex","removeVariable","showMoreOptions","editor_ctrl_VariableEditorCtrl","template_srv","TemplateSrv","grafanaVariables","builtIns","isNone","variableInitialized","getAdhocFilters","datasourceName","filters","luceneFormat","luceneEscape","Array","formatValue","escapedValues","distributeVariable","setGrafanaVariable","getVariableName","expression","lastIndex","variableExists","highlightVariablesAsHtml","var1","var2","fmt2","var3","getAllValue","allValue","scopedVars","systemValue","fmt","fmt3","isAllValue","replaceWithText","option","fillVariableValuesForUrl","params","skipUrlSync","getValueForUrl","Edge","_linkTo","node","inputEdges","outputEdges","edges","link","inputNode","outputNode","unlink","inode","onode","Node","getEdgeFrom","getOptimizedInputEdges","toBeRemoved","forEach","edgeToRemove","getEdgeTo","Graph","nodes","createNode","createNodes","names","input","output","inputArr","outputArr","inputNodes","getNode","outputNodes","createEdge","VariableSrv","$location","$injector","$on","onDashboardRefresh","updateUrlParamsWithCurrentVariables","templating","initLock","defer","queryParams","search","processVariable","evt","payload","fromVariableValueUpdated","Promise","resolve","previousOptions","toJson","$emit","dependencies","otherVariable","dependsOn","promise","urlValue","setValueFromUrl","finally","model","ctor","instantiate","updateSubmenuVisibility","variableUpdated","emitChangeEvents","v","$broadcast","selectOptionsForCurrentValue","validateVariableSelectionState","setValue","currentOption","setOptionFromUrl","op","defaultText","defaultValue","setOptionAsCurrent","setAdhocFilter","operator","createGraph","g","v1","v2","variable_srv_VariableSrv","IntervalVariable","auto_min","auto_count","Object","model_utils","updateAutoValue","unshift","calculateInterval","interval","trim","QueryVariable","multi","includeAll","tags","useTags","tagsQuery","tagValuesQuery","updateOptionsFromMetricFindQuery","updateTags","metricFindQuery","getValuesForTag","tagKey","metricNamesToVariableValues","addAllOption","metricNames","matches","stringToJsRegex","isNumber","sortVariableValues","sortOrder","sortType","reverseSort","sortBy","opt","toLower","reverse","query_variable_QueryVariable","description","supportsMulti","datasource_variable_DatasourceVariable","DatasourceVariable","sources","skipVariables","CustomVariable","split","custom_variable_CustomVariable","ConstantVariable","constant_variable_ConstantVariable","AdhocVariable","unescapeDelimiter","escapeDelimiter","adhoc_variable_AdhocVariable","factory","remarkable","$sce","$routeParams","navModelSrv","pluginId","setNavModel","navModel","main","img","info","logos","large","subTitle","author","url","breadcrumbs","icon","includes","defaultTab","tab","result","pluginIcon","getPluginIcon","plug","initReadme","md","remarkable_default","linkify","readmeHtml","trustAsHtml","PluginEditCtrl","preUpdateHook","updateCmd","enabled","pinned","jsonData","secureJsonData","postUpdateHook","window","location","href","importDashboards","setPreUpdateHook","setPostUpdateHook","updateAvailable","modalScope","$new","plugin","src","disable","plugin_edit_ctrl_PluginEditCtrl","AppPageCtrl","pluginInfoCache","initPage","app","appModel","page","slug","getNotFoundNav","pluginNav","getNav","plugin_page_ctrl_AppPageCtrl","PluginListCtrl","tabIndex","embedded","allPlugins","onQueryUpdated","searchQuery","test","plugin_list_ctrl_PluginListCtrl","DashImportListCtrl","dashboards","on","importAll","importNext","reject","import","dash","overwrite","installCmd","path","inputs","importedUri","imported","restrict","templateUrl","import_list_DashImportListCtrl","bindToController","controllerAs","secureJsonFields","DataSourceEditCtrl","store","nav","load","mobx_module","getDatasourceById","initNewDatasourceModel","isNew","ds_edit_ctrl_defaults","gettingstarted","gettingStarted","isDefault","typeChanged","loadDatasourceTypes","datasourceCreated","testDatasource","userChangedType","updateNav","initDatasourceEditNav","datasourceMeta","pluginInfo","updateFrontendSettings","settings","core_config","defaultDatasource","done","status","withNoBackendCache","testing","statusText","saveChanges","editForm","readOnly","confirmDelete","yesText","onConfirm","ds_edit_ctrl_DataSourceEditCtrl","suggestUrl","noDirectAccess","pre","attrs","showAccessOption","showAccessHelp","toggleAccessHelp","getSuggestUrls","DataSourceDashboardsCtrl","getPluginInfo","ds_dashboards_ctrl_DataSourceDashboardsCtrl","ds_list_ctrl_DataSourcesCtrl","DataSourcesCtrl","unfiltered","removeDataSource","removeDataSourceConfirmed","system","core_store","PanelCtrl","$timeout","editorTabIndex","timing","panels","pluginName","panelDidMount","removeAllListeners","renderingCompleted","core","publishAppEvent","evtName","$root","changeView","fullscreen","viewPanel","editPanel","exitFullscreen","initEditMode","editorTabs","addEditorTab","editModeInitiated","toLowerCase","urlTab","changeTab","newIndex","route","updateParams","directiveFn","editorTab","getMenu","shortcut","canEdit","role","menu","apply","getAdditionalMenuItems","extendedMenu","getExtendedMenu","submenu","divider","otherPanelInFullscreenMode","calculatePanelHeight","docHeight","editHeight","fullscreenHeight","containerHeight","editMode","gridPos","constants","soloMode","renderStart","Date","getTime","duplicate","duplicatePanel","removePanel","editPanelJson","editScope","object","updateHandler","replacePanel","enableCopy","copyPanel","set","JSON","stringify","newPanel","oldPanel","findIndex","deletedPanel","panel_model","sortPanelsByGridPos","sharePanel","shareScope","getInfoMode","links","getInfoContent","markdown","sanitize","openInspector","panelInfoHtml","inspector","MetricsTabCtrl","panelDsValue","datasourceInstance","addQueryDropdown","fake","nextRefId","getNextQueryLetter","updateDatasourceOptions","hasQueryHelp","queryOptions","includeBuiltin","builtIn","setDatasource","addMixedQuery","addQuery","toggleHelp","optionsOpen","queryTroubleshooterOpen","helpOpen","helpHtml","toggleOptions","toggleQueryTroubleshooter","metrics_tab_MetricsTabCtrl","_super","MetricsPanelCtrl","targets","onMetricsPanelRefresh","onInitMetricsPanelEditMode","onPanelTearDown","dataSubscription","unsubscribe","metricsTabDirective","data_1","dataStream","loading","setTimeQueryStart","updateTimeRange","issueQueries","handleQueryResult","cancelled","queryStart","setTimeQueryEnd","queryEnd","applyPanelTimeOverrides","maxDataPoints","resolution","intervalOverride","intervalMs","timeInfo","timeFrom","timeFromInterpolated","timeFromInfo","rangeutil","invalid","timeFromDate","datemath","display","timeShift","timeShiftInterpolated","hideTimeOverride","assign","__interval","__interval_ms","metricsQuery","timezone","getTimezone","cacheTimeout","subscribe","handleDataStream","stream","complete","items","exploreEnabled","isEditor","supportsExplore","tslib_es6","getExploreState","exploreState","location_util","refId","removeQuery","moveQuery","conditions","evaluator","condition","thresholds","value1","value2","colorMode","ThresholdMapper","AlertTabCtrl","uiSegmentSrv","subTabIndex","evalFunctions","evalOperators","conditionTypes","noDataModes","executionErrorModes","appSubUrl","$onInit","addNotificationSegment","newPlusButton","thresholdChangedEventHandler","graphThresholdChanged","off","editingThresholds","alertNotifications","notifications","initModel","validateModel","getAlertHistory","alertHistory","ah","getNotificationIcon","getNotifications","newSegment","changeTabIndex","newTabIndex","notificationAdded","removeNotification","buildDefaultCondition","noDataState","alertingNoDataOrNullValues","executionErrorState","alertingErrorOrTimeout","frequency","handler","defaultName","conditionModels","reduce","memo","buildConditionModel","alertToGraphThresholds","addedNotification","_b","_c","notification","bgColor","handleIndex","evaluatorParamsChanged","firstTarget","foundTarget","alerting","targetContainsTemplate","query_part","alertQueryDef","createReducerPart","reducer","cm","handleQueryPartEvent","conditionModel","handleReducerPartEvent","reducerPart","reducerTypes","addCondition","removeCondition","text2","evaluatorTypeChanged","clearHistory","prism","prism_default","slate_es","slate_react_es","slate_plain_serializer_es","react_default","react","react_dom_default","react_dom","time_series2","table_model","FileSaver","END_ROW","QUOTE","EXPORT_FILENAME","csvEscaped","DOMParser","regexp","htmlDecoded","domParser","parseFromString","textContent","formatSpecialHeader","useExcelHeader","END_COLUMN","formatRow","addEndRowDelimiter","util","toLocaleString","convertSeriesListToCsv","seriesList","dateTimeFormat","excel","DEFAULT_DATETIME_FORMAT","alias","POINT_TIME_INDEX","POINT_VALUE_INDEX","exportSeriesListToCsv","timestamps","seriesPoints","seriesTimestamps","p","pointIndex","extendedSeries","mergeSeriesByTime","convertSeriesListToCsvColumns","table","blob","fname","opts","delimiter","maxDepth","currentDepth","step","prev","isarray","safe","isobject","newKey","utils_ticks","impression_srv","versionPattern","version_SemVersion","SemVersion","major","minor","patch","isGtOrEq","compared","isVersionGtOrEq","gfunc_index","addFuncDef","funcDef","defaultParams","shortName","optionalSeriesRefArgs","optional","multiple","isVersionRelatedFunction","obj","graphiteVersion","category","FuncInstance","withDefaultParams","updateText","metricExp","parameters","paramType","last","pop","_hasMultipleParamsInString","strValue","updateParam","partVal","idx","gfunc","getFuncDef","gfunc_FuncInstance","param","funcs","rawDefs","funcName","group","func","required","shift","rawParam","default","suggestions","funcDefs","instanceSettings","basicAuth","supportsTags","withCredentials","render_method","funcDefsPromise","getQueryOptionsInfo","translateTime","until","buildGraphiteParams","graphOptions","httpOptions","method","headers","Content-Type","addTracingHeaders","requestId","doGraphiteRequest","convertDataPointsToMs","tagString","graphiteQuery","target_1","tags_1","parseTags","what","date","roundUp","subtract","unix","optionalOptions","interpolatedQuery","expressions","exprRegex","limit","getTagValuesAutoComplete","getTagsAutoComplete","metric","expandable","tag","tagPrefix","expr","valuePrefix","getVersion","createFuncInstance","waitForFuncDefsLoaded","getFuncDefs","supportsFunctionIndex","parseFuncDefs","Authorization","inspect","datasourceRequest","targetValue","cleanOptions","intervalFormatFixRegex","hasTargets","fixIntervalFormat","_seriesRefLetters","nestedSeriesRegexReplacer","encodeURIComponent","graphiteOptions","rst2html_min","js_drop","drop","functionMenu","categories","createFunctionDropDownMenu","$input","typeahead","allFunctions","minLength","updater","$apply","addFunction","$button","toggleClass","removeClass","cleanUpDrop","destroy","shortDesc","contentElement","createElement","innerHTML","rst2html_min_default","classes","openOn","tetherOptions","attachment","targetAttachment","popoverSrv","scheduledRelink","paramCountAtLink","cancelBlur","clickFuncParam","paramIndex","$link","$comma","select","lookup","paramDef","switchToLink","inputElem","clearTimeout","newValue","relink","targetChanged","hasClass","addClass","inputBlur","inputKeyPress","inputKeyDown","style","toggleFuncControls","targetDiv","closest","$funcControls","addElementsAndCompile","$funcLink","defParams","lastParam","paramValue","$paramLink","paramTemplate","partial","keyup","keypress","$element","process","added","$target","removeFunction","queryModel","functions","$index","classNames","template","open","graphiteAddFunc","graphiteFuncEditor","unicodeLetterTable","lexer_i","identifierStartTable","Lexer","Parser","tokens","lexer","tokenize","peek","charAt","char","skip","scanStringLiteral","scanPunctuator","scanNumericLiteral","scanIdentifier","scanTemplateSequence","isUnicodeLetter","code","isHexDigit","ch1","ch2","ch3","ch4","chr","charCodeAt","readUnicodeEscapeSequence","getIdentifierPart","identifierPartTable","getIdentifierStart","ch","isDecimalDigit","isMalformed","isIdentifierStart","base","isOctalDigit","bad","isPunctuator","quote","isUnclosed","functionCall","metricExpression","curlySegment","consumeToken","errorMark","curly","curlyBraceSegment","parts","segments","metricSegment","segment","functionParameters","numericLiteral","seriesRefExpression","boolExpression","stringLiteral","currentToken","token1","token2","matchToken","graphite_query","GraphiteQuery","parseTarget","removeTagValue","textEditor","astNode","getAst","parseTargetRecursive","checkOtherSegmentsIndex","checkForSeriesByTag","seriesByTagFunc","seriesByTagUsed","hidden","splitSeriesByTagParams","getSegmentPathUpTo","arr","innerFunc_1","addFunctionParameter","updateSegmentValue","addSelectMetricSegment","newFunc","moveAliasFuncLast","aliasFunc","startsWith","without","updateModelTarget","metricPath","wrapFunction","updateRenderedTarget","targetsByRefId","keyBy","nestedSeriesRefRegex","targetWithNestedQueries","refCount","count","countTargetRefs","updated","g1","targetFull","tagPattern","flatten","getSeriesByTagFunc","seriesByTagFuncIndex","getSeriesByTagFuncIndex","addTag","newTagParam","renderTagString","removeTag","updateTag","tagIndex","renderTagExpressions","excludeIndex","tagExpr","GRAPHITE_TAG_OPERATORS","GraphiteQueryCtrl","paused","buildSegments","toggleEditorMode","checkOtherSegments","fixTagSegments","newSelectMetric","fromIndex","setSegmentFocus","segmentIndex","getAltSegments","altSegments","eachRight","removeTaggedEntry","addAltTagSegments","getTagsAsSegments","tagSegments","TAG_PREFIX","segmentValueChanged","removeTagPrefix","pause","addSeriesByTagFunc","spliceSegments","emptySegments","targetTextChanged","oldTarget","smartlyHandleNewAliasByNode","tagParam","getAllTags","getTags","altTags","mapToDropdownOptions","tagExpressions","getTagOperators","getAllTagValues","getTagValues","altValues","tagChanged","addNewTag","newTag","addTagSegments","showDelimiter","unpause","query_ctrl_QueryCtrl","GraphiteConfigCtrl","graphiteVersions","autoDetectGraphiteVersion","AnnotationsQueryCtrl","onChange","namespace","metricName","statistics","dimensions","period","returnData","highResolution","regionSegment","getSegmentForValue","namespaceSegment","dimSegments","newOperator","newKeyValue","statSegments","stat","ensurePlusButton","removeDimSegment","removeStatSegment","isEmpty","getStatSegments","standardStatistics","statSegmentChanged","seg","lastSegment","getDimSegments","getDimensionKeys","dimensionKey","getDimensionValues","transformToSegments","dimSegmentChanged","newFake","cssClass","syncDimSegmentsWithModel","keySegment","valueSegment","dims","getNamespaces","regionChanged","namespaceChanged","metricChanged","addTemplateVars","CloudWatchQueryParameter","query_parameter_ctrl_CloudWatchQueryParameterCtrl","cloudwatch_datasource","CloudWatchDatasource","supportMetrics","proxyUrl","defaultRegion","expandTemplateVariable","queries","getActualRegion","convertDimensionFormat","String","getPeriod","some","datasourceId","request","performTimeSeriesQuery","now","convertToCloudWatchTime","interval_to_seconds","periodUnit","daySec","awsRequest","queryRes","transformSuggestDataFromTable","suggestData","tables","doMetricQueryRequest","subtype","getRegions","getMetrics","filterDimensions","getEbsVolumeIds","instanceId","getEc2InstanceAttribute","attributeName","filterJson","metricNameQuery","dimensionKeysQuery","dimensionValuesQuery","ebsVolumeIdsQuery","ec2InstanceAttributeQuery","targetAttributeName","defaultPeriod","prefixMatching","actionPrefix","alarmNamePrefix","getDefaultRegion","getExpandedVariables","currentVariables","selectedVariables","scopedVar","btoa","chain","findKey","multiVariable","convertedDimensions","query_ctrl_CloudWatchQueryCtrl","CloudWatchQueryCtrl","aliasSyntax","CloudWatchConfigCtrl","accessKeyExist","secretKeyExist","authTypes","indexPatternTypes","example","timeField","authType","accessKey","secretKey","resetAccessKey","resetSecretKey","CloudWatchAnnotationsQueryCtrl","requiresField","supportsInlineScript","supportsMissing","isPipelineAgg","minVersion","orderByOptions","orderOptions","sizeOptions","extendedStats","intervalOptions","derivative","isCheckbox","esVersion","query_def_metricAggTypes","f","metricType","po","query_def_pipelineOptions","getMovingAvgSettings","filtered","filteredResult","movingAvgModelSettings","setting","field","ElasticQueryBuilder","getRangeFilter","gte","lte","buildTermsAgg","aggDef","queryNode","metricRef","terms","orderBy","order","metrics","aggs","min_doc_count","missing","getDateHistogramAgg","esAgg","extended_bounds","getHistogramAgg","getFiltersAgg","analyze_wildcard","documentQuery","unmapped_type","fielddata_fields","docvalue_fields","addAdhocFilters","adhocFilters","queryCondition","bool","must","match_phrase","must_not","lt","gt","build","queryString","bucketAggs","query_string","precision","nestedAggs","pipelineAgg","metricAgg","buckets_path","hasOwnProperty","prop","aggField","getTermsQuery","queryDef","_term","intervalMap","startOf","amount","Yearly","IndexPattern","pattern","getIndexForToday","utc","getIndexList","intervalInfo","endEpoch","response","processMetrics","props","bucket","buckets","doc_count","newSeries","percentiles","percentileName","statName","stats","std_deviation_bounds_upper","std_deviation_bounds","upper","std_deviation_bounds_lower","lower","normalized_value","processAggregationDocs","addColumn","propKey","filterable","addMetricValue","_d","_e","propValues","_f","_g","getMetricName","processBuckets","depth","aggId","nameIndex","key_as_string","metricDef","getSeriesName","metricTypeCount","g2","appliedAgg","describeMetric","propName","ElasticResponse","nameSeries","uniq","processHits","hits","hit","_id","_type","_index","_source","fields","trimDatapoints","aggregations","histogram","trimEdges","getErrorFromElasticResponse","root_cause","reason","$$config","config","getTimeSeries","responses","tmpSeriesList","ElasticDatasource","index_pattern_IndexPattern","timeInterval","maxConcurrentShardRequests","queryBuilder","query_builder_ElasticQueryBuilder","indexPattern","indexList","tagsField","textField","getFieldFromSource","fieldName","fieldNames","fieldValue","titleField","setTime","getFields","dateFields","getQueryHeader","searchType","timeTo","queryHeader","sentTargets","queryObj","typeMap","float","double","nested","shouldAddField","fieldNameParts","getFieldsRecursively","subObj","isObject","properties","indexName","mappings","typeName","getTerms","esQuery","fromJson","bucketAgg","objectContainsTemplate","isPrimitive","ElasticBucketAggCtrl","agg","isFirst","settingsLinkText","describeOrder","describeOrderBy","substr","defaultTo","addFiltersQuery","removeFiltersQuery","getOrderByOptions","metricRefs","getFieldsInternal","$fieldType","getIntervalOptions","addBucketAgg","lastBucket","addIndex","removeBucketAgg","bucket_agg_ElasticBucketAggCtrl","getMetricAggTypes","metricAggs","pipelineAggOptions","getPipelineAggOptions","metricAggTypes","pipelineOptions","getPipelineOptions","precisionThreshold","precision_threshold","movingAvgModelTypes","movingAvgModelOptions","modelSettings","updateMovingAvgModelSettings","inlineScript","script","inline","updatePipelineAggOptions","onChangeInternal","modelSettingsKeys","onChangeClearInternal","minimize","onTypeChange","addMetricAgg","removeMetricAgg","toggleShowMetric","ElasticMetricAggCtrl","metric_agg_ElasticMetricAggCtrl","ElasticQueryCtrl","queryUpdated","jsonStr","newJson","rawQueryOld","getCollapsedText","bucketAggTypes","query_def_bucketAggTypes","handleQueryError","ElasticConfigCtrl","esVersions","indexPatternTypeChanged","database","opentsdb_datasource","OpenTsDatasource","tsdbVersion","tsdbResolution","tagKeys","aggregatorsPromise","filterTypesPromise","convertToTSDBTime","qs","groupByTags","tagk","metricToTargetMapping","mapMetricsToTargets","metricData","_saveTagKeys","transformMetricData","eventList","aggregator","annotationObject","isGlobal","globalAnnotations","startTime","msResolution","reqBody","showQuery","suggestTagKeys","aggregateTags","_performSuggestQuery","_get","q","_performMetricKeyValueLookup","keysArray","keysQuery","tagvs","_performMetricKeyLookup","tagks","tagv","relativeUrl","_addCredentialOptions","interpolated","responseTransform","tagNamesQuery","tagNamesSuggestQuery","tagValuesSuggestQuery","getAggregators","getFilterTypes","createMetricLabel","dps","metricLabel","scopedVars_1","toPairs","has","tagData","convertTargetToQuery","shouldComputeRate","rate","isCounter","counterMax","counterResetValue","resetValue","rateOptions","dropResets","ResetValue","disableDownsampling","downsampleInterval","downsample","downsampleAggregator","downsampleFillPolicy","filterKey","explicitTags","interpolatedTagValue","arrTagV","tagV","tagK","query_ctrl_OpenTsQueryCtrl","OpenTsQueryCtrl","errors","validateTarget","aggregators","fillPolicies","filterTypes","suggestMetrics","getTextValues","suggestTagValues","targetBlur","metricFindResult","addTagMode","currentTagKey","currentTagValue","editTag","closeAddTagMode","addFilter","addFilterMode","currentFilterType","currentFilterGroupBy","currentFilterKey","currentFilterValue","currentFilter","editFilter","fil","removeFilter","errs","shouldDownsample","describe_interval","OpenTsConfigCtrl","tsdbVersions","tsdbResolutions","GrafanaDatasource","GrafanaQueryCtrl","GrafanaAnnotationsQueryCtrl","influx_series","InfluxSeries","seriesName","columnName","_getSeriesName","segIndex","titleCol","timeCol","titleColumn","tagsColumn","textColumn","textCol","tagsCol","getTable","reordered","createPart","part","query_part_index","register","groupByTimeFunctions","fieldRenderer","innerExpr","replaceAggregationAddStrategy","selectParts","partModel","query_part_categories","Aggregations","morePartsAvailable","Selectors","addTransformationStrategy","Aliasing","addStrategy","selectModels","Fields","dynamicLookup","renderer","Transformations","Predictors","partCount","influxdb_query_part","InfluxQuery","policy","resultFormat","orderByTime","updateProjection","create","groupByParts","updatePersistedParts","hasGroupByTime","hasFill","addGroupBy","typePart","stringParts","arg","removeGroupByPart","getCategories","removeSelect","removeSelectPart","modelsIndex","partIndex","addSelectPart","renderTagCondition","interpolate","getMeasurementAndPolicy","measurement","interpolateQueryStr","defaultFormatFn","rawQuery","selectText","groupBySection","slimit","renderAdhocFilters","response_parser","ResponseParser","influxResults","normalizedQuery","isValueFirst","serie","addUnique","buildExploreQuery","withKey","withMeasurementFilter","whereConditions","InfluxQueryBuilder","influxdb_datasource","InfluxDatasource","username","password","getTimeFilter","queryTargets","influx_query","acc","timeFilter","allQueries","_seriesQuery","influxSeries","timeSeries","curry","responseParser","query_builder_InfluxQueryBuilder","_influxRequest","epoch","serializeParams","currentUrl","urls","u","db","req","getInfluxTime","fromIsAbsolute","InfluxQueryCtrl","groupBySegment","resultFormats","measurementSegment","newSelectMeasurement","newCondition","removeOrderByTime","buildSelectMenu","selectMenu","cat","getGroupByOptions","groupByAction","plusButton","subitem","handleSelectPartEvent","fieldsQuery","handleGroupByPartEvent","measurementChanged","getPolicySegments","policiesQuery","policyChanged","policySegment","getMeasurements","measurementFilter","getTagsOrValues","nextValue","newOperators","removeTagFilterSegment","getFieldSegments","tagSegmentUpdated","rebuildTargetTagConditions","segment2","tagOperator","getTagValueOperator","tagValue","InfluxConfigCtrl","InfluxAnnotationsQueryCtrl","entry","labels","timeFromNow","fromNow","timeLocal","searchMatches","getSearchMatches","logLevel","level","LogLevel","getLogLevel","logging_datasource","_request","apiUrl","LoggingDatasource","prepareQueryTarget","DEFAULT_QUERY_PARAMS","QUERY_REGEXP","parseQuery","streams","combinedEntries","entries","processEntry","processStreams","metadataRequest","silent","MixedDatasource","sets","dsName","mysql_response_parser","processQueryResult","parseMetricFindQueryResult","rowCount","findColIndex","textColIndex","valueColIndex","transformToKeyValueList","transformToSimpleList","containsKey","colName","transformAnnotationResponse","timeColumnIndex","textColumnIndex","tagsColumnIndex","MysqlDatasource","interpolateVariable","rawSql","defaultQuery","MysqlQueryCtrl","formats","onDataReceived","onDataError","dataList","lastQueryMeta","lastQueryError","anySeriesFromQuery","MysqlConfigCtrl","module_defaultQuery","MysqlAnnotationsQueryCtrl","postgres_response_parser","postgres_query","PostgresQuery","timeColumn","metricColumn","where","unquoteIdentifier","quoteIdentifier","quoteLiteral","escapeLiteral","hasTimeGroup","hasMetricColumn","buildQuery","hasUnixEpochTimecolumn","timeColumnType","buildTimeColumn","timeGroup","buildMetricColumn","buildValueColumns","buildValueColumn","aggregate","windows","overParts","over","curr","buildWhereClause","buildGroupClause","groupSection","PostgresDatasource","getTimescaleDBVersion","PostgresMetaQuery","getOperators","datatype","quoteIdentAsLiteral","findMetricTable","buildSchemaConstraint","buildTableConstraint","buildTableQuery","buildColumnQuery","buildValueQuery","buildDatatypeQuery","buildAggregateQuery","toUpperCase","wrapOpen","wrapClose","separator","sql_part_SqlPart","SqlPart","sql_part_index","sql_part_register","SqlPartDef","PostgresQueryCtrl","metaBuilder","query_ctrl_defaultQuery","tableSegment","timeColumnSegment","whereAdd","groupAdd","sql_part","whereParts","groupParts","aggregates","timescaledb","postgresVersion","resetPlusButton","button","getTableSegments","tableChanged","metricColumnSegment","task1","segment_1","timeColumnChanged","task2","getTimeColumnSegments","getMetricColumnSegments","addNone","metricColumnChanged","templateQuoter","findAggregateIndex","findWindowIndex","subItem","partType","addGroup","aggIndex","windowIndex","aggIndex_1","addAlias","handleGroupPartEvent","removeGroup","handleWherePartEvent","addWhereAction","getGroupOptions","addGroupAction","config_ctrl_PostgresConfigCtrl","PostgresConfigCtrl","postgresVersions","sslmode","showTimescaleDBHelp","autoDetectFeatures","loadDatasource","trunc","toggleTimescaleDBHelp","PostgresAnnotationsQueryCtrl","postgres_module_defaultQuery","metric_find_query","labelValuesQuery","metricNamesQuery","queryResultQuery","metricNameAndLabelsQuery","getPrometheusTime","_labels","metricFilterPattern","matchedMetricName","performInstantQuery","__name__","self","getOriginalMetricName","ResultTransformer","transform","prometheusResult","transformMetricDataToTable","responseListLength","sortSeriesByLabel","prometheusResult_1","transformToHistogramOverTime","prometheusResult_2","resultType","transformInstantMetricData","dpValue","baseTimestamp","stepMs","endTimestamp","responseIndex","resultCount","metricLabels","sortedLabels","labelIndex","labelData","isUndefined","legendFormat","renderTemplate","aliasPattern","aliasData","topSeries","bottomSeries","Error","bottomPoint","s1","s2","le1","le2","parseHistogramLabel","le","Infinity","prometheusRegularEscape","prometheusSpecialRegexEscape","PrometheusDatasource","editorSrc","directUrl","queryTimeout","httpMethod","resultTransformer","result_transformer_ResultTransformer","ruleMappings","loadRules","transformRequest","interpolateQueryExpr","activeTargets","createQuery","allQueryPromise","instant","responseList","hints","transformerOptions","hinting","queryHints","monotonic","dp","increasing_1","fix","mapping_1","mappingForQuery","ruleName","mapping","determineQueryHints","minInterval","intervalFactor","adjustedInterval","adjustInterval","getRangeScopedVars","adjusted","alignRange","performSuggestQuery","cache","metricsNameCache","expire","interval_to_ms","diff","sRange","msRange","regularRange","secondsToHms","__range_ms","__range_s","__range","titleFormat","textFormat","json","groups","rules","rule","extractRuleMappingFromGroups","modifyQuery","nextSelectorStart","nextSelectorEnd","insideSelector","previousWord","keywords","previousWordIsKeyWord","builtInWords","selectorRegexp","labelParts","selector","addLabelToQuery","mapping_2","ruleNames","rulesRegex","wrappedCallback","completions","templateVariableCompletions","getCompletionsForLabelMatcherName","getCompletionsForLabelMatcherValue","getCompletionsForBinaryOperator","vectors","unit","findMetricName","labelNameCache","transformToCompletions","labelNames","findToken","labelNameToken","labelValueCache","labelName","getLabelNameAndValueForExpression","labelValues","rparenToken","keywordOperatorToken","findExpressionMatchedParen","binaryOperatorToken","metricName_1","labelQueryCache","PromCompleter","words","getTokens","nameLabelNameToken","nameLabelValueToken","metricNameToken","guard","deep","PrometheusQueryCtrl","getDefaultFormat","factor","updateLink","completer_PromCompleter","refreshMetricData","isEqual","rangeDiff","endTime","linkToPrometheus","PrometheusConfigCtrl","PrometheusAnnotationsQueryCtrl","mssql_response_parser","MssqlDatasource","query_ctrl_MssqlQueryCtrl","MssqlQueryCtrl","mssql_query_ctrl_defaultQuery","MssqlConfigCtrl","MssqlAnnotationsQueryCtrl","mssql_module_defaultQuery","TestDataDatasource","scenarioId","stringInput","query_ctrl_TestDataQueryCtrl","TestDataQueryCtrl","scenarioList","newPointTime","selectedPoint","getPoints","point","pointSelected","deletePoint","addPoint","newPointValue","scenario","scenarioChanged","TestDataAnnotationsQueryCtrl","TextPanelCtrl","onRefresh","onRender","renderMarkdown","updateContent","renderText","$applyAsync","scrollable","injector","onEdit","eventManager","tmpScope","$digest","$destroy","drop_default","createEditPopover","markerElementToAttachTo","invoke","constraints","pin","DrawableEvent","drawFunc","clearFunc","moveFunc","_object","_drawFunc","_clearFunc","_moveFunc","_position","_height","_width","getObject","VisualEvent","drawableEvent","_drawableEvent","visual","_options","getParent","isHidden","_hidden","unhide","jquery_flot_events_EventMarkers","EventMarkers","_events","_types","_plot","getEvents","setTypes","setupEvents","ve","_buildDiv","vre","_buildRegDiv","ao","bo","drawEvents","_insidePlot","updateEvents","_clearEvents","markerShow","lineStyle","eventTypeId","markerTooltip","topOffset","border-left-width","border-left-style","border-left-color","container","marker_1","font-size","line-height","border-left","border-right","border-top","border-bottom","that","hover","createAnnotationToolip","regionWidth","right","background-color","xc","eventMarkers","showEvents","hideEvents","eventsEnabled","threshold_manager_ThresholdManager","ThresholdManager","getHandleHtml","valueStr","initDragging","posTop","currentTarget","parents","lastY","dragging","clientY","handleElem","stopped","graphValue","toFixed","cleanUp","renderHandle","defaultHandleTopPos","valueCanvasPos","handleTopPos","shouldDrawHandles","hasSecondYAxis","prepare","thresholdMargin","needsCleanup","addFlotOptions","gtLimit","ltLimit","lineColor","y2axis","convertToHistogramData","bucketSize","hiddenSeries","getSeriesValues","getBucketBound","maxBound","bound_1","bound","histogamSeries","convertValuesToHistogram","alignYLevel","yAxes","checkCorrectAxes","checkCorrectAxis","yLeft","yRight","expandStuckValues","zero","oneSide","checkOneSide","checkOppositeSides","rateLeft","rateRight","checkTwoCross","absLeftMin","absLeftMax","absRightMin","absRightMax","upLeft","downLeft","upRight","downRight","getRate","restoreLevelFromZero","panelWidth","event_manager_EventManager","thresholdManager","getSeriesFn","posX","initial","middle","renderAndShow","absoluteTime","innerHtml","xMode","$tooltip","place_tt","hoverIndex","hoverDistance","pointTime","minDistance","minTime","lastValue","hideEmpty","allIsNull","hideZero","allIsZero","hideTooltip","findHoverIndexFromData","value_type","findHoverIndexFromDataPoints","aliasEscaped","shared","detach","hoverInfo","seriesHtml","tooltipFormat","panelRelY","pointOffset","scrollTop","innerHeight","allSeriesMode","sharedCrosshairModeOnly","hasMsResolution","seriesHoverInfo","getMultiSeriesPlotHoverInfo","plotData","highlightClass","sortedSeries","onPanelteardown","onLegendRenderingComplete","onGraphHover","onGraphHoverClear","onPlotSelected","onPlotClick","onScopeDestroy","GraphElement","renderData","buildFlotPairs","graphHeight","sharedTooltipModeEnabled","render_panel","canMakeEditable","shouldAbortRender","drawHook","yaxes","dataWarning","processOffsetHook","gridMargin","panelOptions","processRangeHook","align","alignLevel","getMinTimeStepOfSeries","timeStep","buildFlotOptions","prepareXAxis","configureYAxisOptions","sortSeries","callPlot","getFlotPairs","nullPointMode","barWidth","addXSeriesAxis","histMin","histMax","ticks","addXHistogramAxis","addXTableAxis","addTimeAxis","incrementRenderCounter","renderError","gridColor","bootData","user","lightTheme","processOffset","processRange","percentage","translateFillOption","linewidth","steppedLine","spaceLength","pointradius","labelMarginX","sortDesc","haveSortOrder","shouldSortBy","haveSortBy","zindex","timeformat","time_format","defaultTicks","tickValues","tickStep_1","ticksNum","configureAxisMode","logBase","parseNumber","tickDecimals","decimals","secondY","applyLogScale","toNumber","minSetToZero","MIN_VALUE","logmin","inverseTransform","generateTicksForLogScaleYAxis","nextTick","numTicks","maxNumTicks","tickFormatter","valueFormats","scaledDecimals","graph_GraphElement","graphDirective","src_core","SeriesOverridesCtrl","overrideMenu","currentOverrides","override","addOverrideOption","propertyName","lenght","setOverride","addSeriesOverride","updateCurrentOverrides","openColorSelector","colorSelected","fakeSeries","autoClose","onClose","removeOverride","getSeriesNames","legendScrollbar","firstRender","legendRightDefaultWidth","legendElem","getSeriesIndexForElement","el","toggleAxis","changeSeriesColor","toggleSeries","scrollPosition","scroller","seriesInfo","sortLegend","getTableHeaderHtml","renderLegendElement","tableHeaderElem","seriesElements","hideFromLegend","avg","renderSeriesLegendElements","alignAsTable","tbodyElem","wrap","rightSide","scrollRoot","scrollbarParams","root","bar","track","barOnCls","scrollingCls","destroyScrollbar","core_default","marginRight","offsetWidth","clientWidth","scroll","addScrollbar","dispose","sideWidth","ieWidth","empty","ThresholdFormCtrl","disabled","unbindDestroy","addThreshold","removeThreshold","onFillColorChange","onLineColorChange","getSeriesList","autoDetectMode","getAutoDetectXAxisMode","firstItem","setPanelDefaultsForNewXAxisMode","timeSeriesHandler","customHandler","seriesData","aliasColors","colorIndex","isOutsideRange","dataItem","DataProcessor","validateXAxisSeriesValue","validOptions","getXAxisValueOptions","getDataFieldNames","onlyNumbers","fieldParts","getPropertiesRecursive","pluckDeep","property","propertyParts","axes_editor_AxesEditorCtrl","AxesEditorCtrl","unitFormats","getUnitFormats","logScales","linear","log (base 2)","log (base 10)","log (base 32)","log (base 1024)","xAxisModes","Time","setUnitFormat","xAxisModeChanged","processor","xAxisValueChanged","panelDefaults","seriesOverrides","data_processor_DataProcessor","onDataSnapshotLoad","onInitEditMode","onInitPanelActions","GraphCtrl","axesEditorComponent","alertingEnabled","alertTab","actions","zoomOut","annotationsPromise","tip","applySeriesOverrides","setColor","toggleSeriesExclusiveMode","removeSeriesOverride","toggleLegend","legendValuesOptionChanged","exportCsv","templateHtml","modalClass","DashListCtrl","recent","starred","headings","folderId","modes","getRecentDashboards","getStarred","getSearch","folderIds","starDashboard","isStarred","stopPropagation","preventDefault","dashIds","take","getDashboardOpened","dashboardIds","orderId","onFolderChange","folder","pluginList","viewModel","gotoPlugin","$event","hasUpdate","AlertListPanel","stateFilter","currentAlerts","onlyAlertsOnDashboard","dashboardFilter","nameFilter","sortResult","alerts","alertStateSortScore","updateStateFilter","getAlertsPromise","getStateChanges","al","noAlertsMessage","getCurrentAlertState","dashboardQuery","dashboardTags","dashboardTag","newStateDateAgo","newStateDate","locale","panel_ctrl_PanelCtrl","colorScheme","maxValue","minValue","invert","colorInterpolator","domain","d3","colorScale","exponent","legendOpacityScale","color_legend_module","drawLegendValues","rangeFrom","rangeTo","childNodes","tickStepSize","isValueCloseTo","buildLegendTicks","xAxis","legendValueScale","tickSize","LEGEND_TICK_SIZE","colorRect","posY","svgElem","baseVal","getSvgElemHeight","LEGEND_VALUE_MARGIN","getSvgElemX","clearLegend","valueTo","outerWidth","getColorScale","colorSchemes","valuesNumber","rangeStep","valuesRange","legendRects","selectAll","enter","legendHeight","drawSimpleColorLegend","colorOptions","legendOpacityScale_1","cardColor","drawSimpleOpacityLegend","cards","cardStats","widthFactor","drawColorLegend","opacityScale","getOpacityScale","drawOpacityLegend","Time series buckets","yBucketBoundModes","Auto","Upper","yAxis","axesEditor","heatmap_axes_editor_AxesEditorCtrl","HeatmapDisplayEditorCtrl","heatmapDisplayEditor","label2","heatmap_data_converter_parseHistogramLabel","label1","card","yBucket","convertToHeatMap","yBucketSize","xBucketSize","heatmap","bucketBound","heatmap_data_converter_getBucketBound","TIME_INDEX","bucketNum","VALUE_INDEX","pointExt","pushToXBuckets","seriesList_1","xBucket","yBucketSplitFactor","getLogScaleBucketBounds","bounds","convertToLogScaleValueBuckets","getBucketBounds","convertToValueBuckets","pushToYBuckets","getValueBucketBound","getLogScaleBucketBound","powTop","valueLog","logp","additionalBucketSize","additionalLog","getDistance","HeatmapTooltip","heatmapPanel","mouseOverBucket","originalFillColor","onMouseLeave","getBucketIndexes","xBucketIndex","yBucketIndex","boundBottom","boundTop","countValueFormatter","bucketBoundFormatter","xData","yData","bucketIndex","tooltipDecimals","tickValueFormatter","tooltipHtml","tsBuckets","valIndex","tsBucketsFormatted","showHistogram","addHistogram","getXBucketIndex","getYBucketIndex","getSharedTooltipPos","xScale","histogramData","histXScale","yScale","barNumberFactor","histogramDomain","histYScale","tooltipWidth","tooltipHeight","clientHeight","innerWidth","pageYOffset","DATA_RANGE_WIDING_FACTOR","HeatmapRenderer","$heatmap","heatmap_tooltip_HeatmapTooltip","padding","dataRangeWidingFactor","drawSharedCrosshair","setElementHeight","getYAxisWidth","axisText","getBBox","getXAxisHeight","axisLinePosition","addXAxis","chartWidth","grafanaTimeFormatter","timeFormat","tickFormat","tickPadding","chartHeight","yAxisWidth","addYAxis","tickInterval","heatmapStats","wideYAxisRange","yMin","yMax","decimalsAuto","flotTickSize","tickSizeInner","tickSizeOuter","yWiding","addLogYAxis","adjustLogRange","minLog","adjustLogMin","adjustLogMax","logScaleTickValues","addYAxisFromBuckets","valueFormatted","domainMin","domainMax","tickValue","fixYAxisTickSize","addAxes","chartTop","chartBottom","dataFormat","xAxisHeight","addHeatmapCanvas","heatmapElem","cardPadding","cardRound","addHeatmap","emptyBucket","nullBucket","yBuckets","minBucket","newBucket","mergeZeroBuckets","maxValueAuto","setCardSize","cardsData","getCardX","getCardWidth","getCardY","getCardHeight","getCardColor","getCardOpacity","highlightCard","resetCardHighLight","highlightColor","darker","strokeColor","brighter","currentCard","xGridSize","yGridSize","splitFactor","cardWidth","cardHeight","cuttedWidth","getEventOffset","clientX","elemOffset","selectionRange","limitSelection","drawSelection","getEventPos","drawCrosshair","emitGraphHoverEvent","posX1","posX2","selectionX","selectionWidth","graphTooltip","yBucketBound","xBucketNumber","HeatmapCtrl","opacityScales","colorModes","selectionActivated","defaultsDeep","onCardColorChange","convertHistogramToHeatmapData","convertTimeSeriesToHeatmapData","bucketsData","xBucketSizeByNumber","interval_regex","parseSeries","yBucketNumber","convertToCards","panelDatasource","getPanelDataSourceType","dsSupportHistogramSort","heatmap_data_converter_sortSeriesByLabel","histogramToHeatmap","calculateBucketSize","seriesHandler","parseHistogramSeries","rendering_HeatmapRenderer","transformers","timeKey","cells","noTableIndex","fromCharCode","columnNames","columnsUnion","columnIndexMapper","flattenedRows","mapper","alteredRow","rowIndex","mergedRows","otherRow","areRowsMatching","matchedRow","columnIndex","compactedRows","foundFieldToMatch","maxDocs","flattened","z","tableCol","TablePanelEditorCtrl","fontSizes","addColumnSegment","updateTransformHints","canSetColumns","columnsHelpMessage","getColumnOptions","dataRaw","getColumns","transformChanged","removeColumn","tablePanelEditor","editor_TablePanelEditorCtrl","column_options_ColumnOptionsCtrl","ColumnOptionsCtrl","activeStyleIndex","columnTypes","dateFormats","mappingTypes","getColumnNames","addColumnStyle","styles","stylesCount","indexToInsert","dateFormat","mappingType","removeColumnStyle","invertColorOrder","ref","styleIndex","addValueMap","valueMaps","removeValueMap","addRangeMap","rangeMaps","removeRangeMap","isUtc","setTable","initColumns","colIndex","formatters","createColumnFormatter","getColorForValue","defaultCellFormatter","setColorState","valueFormatter_1","numericValue","renderRowVariables","formatColumnValue","renderCell","addWidthHack","cellClasses","cellClass","colorState","columnHtml","preserveFormat","linkUrl","linkTooltip","linkTargetBlank","cellLink","cellTarget","cellLinkTooltip","pageSize","startPos","endPos","rowClasses","rowClass","cellHtml","rowStyle","render_values","newRow","TableRenderer","showHeader","fontSize","desc","pageIndex","TablePanelCtrl","columnOptionsTab","transformer","transformDataToTable","renderer_TableRenderer","isTimezoneUtc","toggleColumnSort","pageCount","renderPanel","panelElem","rootElem","footerElem","startPage","paginationList","endPage","activeClass","pageLinkElem","max-height","panelHeight","getTableHeight","filterData","LinkSrv","getLinkUrl","keepTime","addParamsToUrl","paramsArray","instance","appendToQueryString","stringToAppend","getAnchorInfo","getPanelLinkAnchorInfo","targetBlank","dashUri","slugifyForUrl","timeRangeForUrl","link_srv_LinkSrv","SingleStatCtrl","linkSrv","dataType","valueNameOptions","postfix","nullText","valueName","postfixFontSize","colorBackground","colorValue","sparkline","full","thresholdMarkers","thresholdLabels","tableColumn","onSparklineColorChange","onSparklineFillChange","tableData","tableHandler","setTableValues","setValues","flotpairs","tableColumnOptions","setTableColumnToSensibleDefault","valueRounded","decimalInfo","getDecimalsForValue","formatFunc","roundValue","canModifyText","setColoring","panelColorIndex","delta","LN10","dec","magn","norm","lastPoint","setValueMapping","rangeMap","valueString","className","addGauge","dimension","invalidGaugeRange","plotCanvas","plotCss","colorMap","fontScale","gaugeWidthReduceRatio","gaugeWidth","thresholdMarkersWidth","getValueText","plotSeries","addSparkline","dynamicHeightMargin","strVale","applyColoringThresholds","prefixFontSize","getSpan","colorPostfix","getBigValueHtml","$panelContainer","linkInfo","drilldownTooltip","mouseleave","GettingStartedPanelCtrl","stepIndex","note","check","cta","nextStep","currentStep","dismiss","showSuccessAlert","helpFlags1","built_in_plugins","app/plugins/datasource/graphite/module","module_namespaceObject","cloudwatch_module_namespaceObject","elasticsearch_module_namespaceObject","opentsdb_module_namespaceObject","app/plugins/datasource/grafana/module","grafana_module_namespaceObject","influxdb_module_namespaceObject","logging_module_namespaceObject","mixed_module_namespaceObject","mysql_module_namespaceObject","postgres_module_namespaceObject","mssql_module_namespaceObject","app/plugins/datasource/prometheus/module","prometheus_module_namespaceObject","app/plugins/datasource/testdata/module","testdata_module_namespaceObject","app/plugins/panel/text/module","text_module_namespaceObject","graph_module_namespaceObject","app/plugins/panel/dashlist/module","dashlist_module_namespaceObject","app/plugins/panel/pluginlist/module","pluginlist_module_namespaceObject","app/plugins/panel/alertlist/module","alertlist_module_namespaceObject","app/plugins/panel/heatmap/module","heatmap_module_namespaceObject","app/plugins/panel/table/module","table_module_namespaceObject","app/plugins/panel/singlestat/module","singlestat_module_namespaceObject","app/plugins/panel/gettingstarted/module","Observable","Subject","bust","exposeToPlugin","component","system_default","registerDynamic","registry","newModule","locate","address","packages","defaultExtension","authorization","loader","sdk_namespaceObject","file_export_namespaceObject","flatten_namespaceObject","plugin_loader_i","flotDeps_1","fakeDep","importPluginModule","light","dark","DatasourceSrv","dsConfig","pluginDef","deferred","Datasource","addDataSourceVariables","getExploreSources","es","explore","metricSources","metricSource","datasource_srv_DatasourceSrv","UnknownPanelCtrl","$http","$templateCache","baseUrl","class","module_UnknownPanelCtrl","panelInfo","panelModule","Component","registered","componentInfo","templatePromise","relativeTemplateUrlToAbs","cached","getTemplate","registerPluginComponent","notFound","directiveName","$normalize","bindings","getPluginComponentDirective","core_module","child","dsModule","panel-ctrl","QueryCtrl","dsMeta_1","ConfigCtrl","model_1","appModule","appEditCtrl","app-model","app-edit-ctrl","appModel_1","loadPanelComponentInfo","getModule","pluginDirectiveLoader","DashboardCtrl","keybindingSrv","alertingSrv","unsavedChangesSrv","dashboardViewStateSrv","playlistSrv","panelLoader","getPanelContainer","setupDashboard","setupDashboardInternal","onInitFailed","setCurrent","autoFitPanels","dashboardViewState","setupDashboardBindings","setWindowTitleAndTheme","msg","fatal","loadedFallbackDashboard","templateVariableUpdated","processRepeats","windowTitlePrefix","showJsonEditor","getDashboard","getPanelLoader","timezoneChanged","onRemovingPanel","getPanelInfoById","ask","confirmText","dashboard_ctrl_DashboardCtrl","AlertingSrv","HistorySrv","getHistoryList","calculateDiff","restoreDashboard","history_srv_HistorySrv","$route","historySrv","appending","canCompare","onDashboardSaved","resetFromSource","switchMode","HistoryListCtrl","addToLog","getLog","revisionSelectionChanged","revisions","checked","formatBasicDate","getDiff","baseInfo","isNewLatest","newInfo","new","diffType","revisions_1","rev","createdDateString","created","ageString","isLastPage","basic","restoreConfirm","stripBaseFromUrl","reload","history_HistoryListCtrl","DashboardLoaderSrv","_dashboardLoadFailed","canStar","isSnapshot","canDelete","canSave","dashboardNotFound","loadDashboard","uid","_loadScriptedDashboard","getDashboardByUid","isFolder","addDashboardImpression","file","_executeScript","fromScript","services","scriptResult","Function","scriptFunc","isFunction","deferred_1","dashboard_loader_srv_DashboardLoaderSrv","dashnav_DashNavCtrl","DashNavCtrl","saveDashboard","titleTooltip","calendar","expires","toggleSettings","editview","toggleViewMode","shareDashboard","showSearch","addPanel","animate","navItemClicked","navItem","clickHandler","transclude","submenu_SubmenuCtrl","SubmenuCtrl","annotationStateChanged","openEditView","SaveDashboardAsModalCtrl","isValidFolderSelection","getSaveModelClone","autoUpdate","keyDown","keyCode","onEnterFolderCreation","onExitFolderCreation","save_as_modal_template","save_modal_template","SaveDashboardModalCtrl","saveVariables","saveTimerange","originalCurrent","timeChange","variableValueChange","isSaving","hasTimeChanged","hasVariableValuesChanged","saveForm","postSave","resetOriginalVariables","resetOriginalTime","save_provisioned_modal_template","SaveProvisionedDashboardModalCtrl","dashboardJson","Blob","getJsonForClipboard","forCurrent","modeSharePanel","modalTitle","tabs","buildUrl","absUrl","orgId","includeTemplateVars","theme","soloUrl","iframeHtml","imageUrl","getLocalTimeZone","utcOffset","Intl","DateTimeFormat","resolvedOptions","timeZone","shareUrl","save_provisioned_modal_SaveProvisionedDashboardModalCtrl","ShareModalCtrl","ShareSnapshotCtrl","externalUrl","sharingButtonText","externalEnabled","createSnapshot","external","originalUrl","scrubDashboard","cmdData","postUrl","deleteUrl","snapshotUrl","saveExternalSnapshotRef","deleteKey","singlePanel","forEachPanel","deleteSnapshot","share_snapshot_ctrl_ShareSnapshotCtrl","dashboard_model","DashboardSrv","handleSaveDashboardError","isHandled","altActionText","onAltAction","showSaveAsModal","newUrl","provisioned","showDashboardProvisionedModal","makeEditable","showSaveModal","saveJSONDashboard","dashboard_srv_DashboardSrv","panelScopes","urlState","getQueryStringState","needsSync","registerPanel","serializeToUrl","DashboardViewState","fromRouteUpdated","toggle","editStateChanged","toggleCollapsedPanelRow","syncState","toggleRow","panelScope","getPanelScope","fullscreenPanel","leaveFullscreen","enterFullscreen","setViewMode","oldTimeRange","view_state_srv_DashboardViewState","ValidationSrv","rootName","validateNewDashboardName","validateNewFolderName","existingErrorMessage","nameLowerCased","hitTypes","hits_1","TimeSrv","timer","routeUpdated","addEventListener","autoRefreshBlocked","visibilityState","refreshDashboard","cancelAll","initTimeFromUrl","parseTime","timeAtLoad","setAutoRefresh","parseUrlParam","urlRange","timeHasChangedSinceLoad","cancelNextRefresh","intervalMs_1","refreshTimer","startNextRefreshTimer","afterMs","isGrafanaVisible","cancel","fromRouteUpdate","isMoment","oldRefresh","urlParams","timespan","center","time_srv_TimeSrv","ChangeTracker","originalCopyDelay","$window","originalPath","original","onbeforeunload","ignoreChanges","hasChanges","open_modal","fromFile","cleanDashboardFromIgnoredChanges","dashData","expandRows","schemaVersion","iteration","repeatPanelId","currentTimepicker","originalTimepicker","discardChanges","gotoNext","baseLen","nextUrl","tracker","change_tracker_ChangeTracker","UnsavedChangesModalCtrl","discard","unsaved_changes_modal_template","TimePickerCtrl","openDropdown","timepicker","firstDayOfWeek","localeData","timeRaw","local","rangeString","isAbsolute","zoom","isOpen","closeDropdown","refresh_intervals","applyCustom","editTimeRaw","absoluteFromChanged","getAbsoluteMomentForTimezone","absolute","fromJs","absoluteToChanged","toJs","jsDate","setRelativeFilter","nowDelay","timepicker_TimePickerCtrl","$elem","ngModel","$parsers","$setValidity","parsed","$formatters","currentValue","alertSrv","upload_template","onUpload","wnd","File","FileReader","FileList","getElementById","files","reader","onload","readAsText","uploadDashboardDirective","DashboardExporter","makeExportable","variableLookup","templateizeDatasourceUsage","refName","requires","processPanel","panelDef","collapsed","_h","_j","annotationDef","buildInfo","newObj","DashExportCtrl","exporter_DashboardExporter","saveJson","export_modal_DashExportCtrl","export","asRows","exportSeriesListToCsvColumns","ExportDataModalCtrl","export_data_modal_ExportDataModalCtrl","buildSegmentModel","AdHocFiltersCtrl","segmentChanged","updateVariableModel","filterIndex","hasFakes","setFilters","ad_hoc_filters_template","ad_hoc_filters_AdHocFiltersCtrl","dashRepeatOptionDirective","repeat_option_template","repeat","repeatDirection","react_grid_layout","classnames","DashboardRow_DashboardRow","DashboardRow","panelContainer","openSettings","setState","prevState","forceUpdate","removeRow","classnames_default","fa","chevronClass","components_ScrollBar_ScrollBar","ScrollBar","handleRef","componentDidMount","scrollbar","parentElement","componentDidUpdate","componentWillUnmount","setScrollTop","setScrollLeft","scrollLeft","AddPanelPanel","onAddPanel","panelPluginInfo","handleCloseAddPanel","renderPanelItem","panelSizeChanged","panelPlugins","getPanelPlugins","copiedPanelPlugins","getCopiedPanelPlugins","small","filterPanels","hideFromList","copiedPanel","pluginCopy","copiedPanels","searchWords","main_default","highlightClassName","textToHighlight","noCopiedPanelPlugins","filterChange","openCopy","openAdd","panelTab","active active--panel","","copyClass","autoFocus","onKeyPress","filterKeyPress","DashboardPanel","attachedPanel","AddPanelPanel_AddPanelPanel","lastGridWidth","react_sizeme","onLayoutChange","onDragStop","onResize","onResizeStop","onWidthChange","isResizable","isDraggable","react_grid_layout_default","measureBeforeMount","containerPadding","useCSSTransforms","cols","rowHeight","draggableHandle","DashboardGrid","animated","triggerForceUpdate","buildLayout","panelMap","stringId","panelPos","newLayout","newLayout_1","newPos","updateGridPos","oldItem","newItem","resizeDone","renderPanels","panel--fullscreen","panelClasses","DashboardPanel_DashboardPanel","SizedReactLayoutGrid","DashboardGrid_DashboardGrid","watchDepth","wrapApply","PanelLoader","compiledElem","PanelLoader_PanelLoader","RowOptionsCtrl","onUpdated","validationSrv","labelClass","loadInitialValue","permission","enableReset","initialTitle","FolderPickerCtrl","createNewFolder","enterFolderCreation","$folder","newFolderNameChanged","newFolderNameTouched","newFolderName","hasValidationError","validationError","createFolder","closeCreateFolder","cancelCreateFolder","exitFolderCreation","resetFolder","rootFolder","initialFolderId","folder_picker_FolderPickerCtrl","enableCreateNew","MoveToFolderCtrl","moveDashboards","successCount","totalCount","alreadyInFolderCount","afterSave","move_to_folder_MoveToFolderCtrl","SettingsCtrl","canSaveAs","hasEditPermissionInFolders","buildSectionList","onRouteUpdated","onPostSave","sections","canAdmin","section","sectionParams","viewId","openSaveAsModal","saveDashboardJson","hideSettings","editable","currentSection","deleteDashboard","sumBy","deleteDashboardConfirmed","folderTitle","hasUnsavedFolderChange","getFolder","folderUrl","settings_SettingsCtrl","PanelLinksEditorCtrl","addLink","searchDashboards","queryStr","uri","module_PanelLinksEditorCtrl","DashLinkEditorCtrl","iconMap","backToList","editLink","saveLink","moveLink","deleteLink","asDropdown","anchor","anchorSanitized","sanitizeAnchor","$last","editor_DashLinkEditorCtrl","DashLinksContainerCtrl","currentDashId","buildLinks","linkDef","includeVars","updateDashLinks","searchHits","dashLink","module_DashLinksContainerCtrl","FolderPageLoader","activeChildId","getFolderByUid","dashTab","FolderDashboardsCtrl","folderPageLoader","titleChanged","hasChanged","updateFolder","handleSaveFolderError","deleteFolder","FolderSettingsCtrl","nameExists","uidExists","autoGenerateUid","autoGenerateUidValue","initialFolderTitle","gnetId","gnetUrl","checkGnetDashboard","__inputs","inputModel","setDatasourceOptions","inputsValid","uidChanged","DashboardImportCtrl","inputValueChanged","titleTouched","hasNameValidationError","nameValidationError","hasUidValidationError","uidValidationError","dashUrl","importedUrl","loadJsonText","parseError","jsonText","gnetError","gnetInfo","back","create_folder_ctrl_CreateFolderCtrl","CreateFolderCtrl","folder_dashboards_ctrl_FolderDashboardsCtrl","folder_settings_ctrl_FolderSettingsCtrl","dashboard_import_ctrl_DashboardImportCtrl","PlaylistsCtrl","playlists","startUrl","removePlaylistConfirmed","playlist","removePlaylist","playlists_ctrl_PlaylistsCtrl","PlaylistSearchCtrl","tagsMode","prom","dashboardResult","tagResult","searchStarted","showStarred","queryHasNoFilters","filterByTag","PlaylistSrv","cancelPromise","filteredParams","pickBy","utils_url","playlistId","stop","isPlaying","exit","playlist_srv_PlaylistSrv","PlaylistEditCtrl","filteredTags","dashboardresult","tagresult","playlistItems","filterFoundPlaylistItems","filteredDashboards","playlistItem","listPlaylistItem","term","addPlaylistItem","addTagPlaylistItem","removePlaylistItem","listedPlaylistItem","savePlaylist","isPlaylistEmpty","movePlaylistItem","currentPosition","newPosition","movePlaylistItemDown","$routeProvider","playlist_edit_ctrl_PlaylistEditCtrl","grafanaRoutes","listItemClass","renderMenuItem","isDragged","togglePanelStackPosition","parentsUntil","menuElem","targetClass","menuScope","menuHtml","createMenuTemplate","dropdown","togglePanelMenu","panelHeader","$document","panelScrollbar","lastAlertState","hasAlertRule","cornerInfoElem","transparentLastState","lastHasAlertRule","panelHeightUpdated","panelContent","updatePanelCornerInfo","cornerMode","infoDrop","hoverOpenDelay","transparent","__proto__","constructor","$watchGroup","$watchCollection","setPanelFocus","SoloPanelCtrl","dashboardLoaderSrv","sidemenu","initPanelScope","initDashboard","getDashboardBySlug","panelEditorTab","dynamicDirectiveSrv","fn","solo_panel_ctrl_SoloPanelCtrl","QueryRowCtrl","queryCtrl","toggleCollapse","toggleHideQuery","canCollapse","__collapsedQueryCache","collapsedText","duplicateQuery","query_editor_row_QueryRowCtrl","query_troubleshooter_template","query_troubleshooter_QueryTroubleshooterCtrl","QueryTroubleshooterCtrl","onRequestResponseEventListener","onRequestErrorEventListener","removeEventsListeners","stateChanged","toggleMocking","isMocking","onRequestError","hasError","onRequestResponse","isLoading","getClipboardText","jsonExplorer","handleMocking","mockedData","mockedResponse","transformResponse","paramSerializer","jsonpCallbackParam","retry","renderJsonExplorer","toggleExpand","allNodesExpanded","openAtDepth","jsonElem","animateOpen","org_users_ctrl_OrgUsersCtrl","OrgUsersCtrl","externalUserMngLinkUrl","externalUserMngLinkName","canInvite","disableLoginForm","externalUserMngInfo","linkTarget","users","pendingInvites","email","updateOrgUser","userId","removeUser","removeUserConfirmed","revokeInvite","invite","copyInviteToClipboard","getInviteUrl","ProfileCtrl","teams","showOrgsList","readonlyLoginFields","getUser","getUserTeams","getUserOrgs","showTeamsList","orgs","org","userForm","oldTheme","profile_ctrl_ProfileCtrl","SelectOrgCtrl","setUsingOrg","select_org_ctrl_SelectOrgCtrl","change_password_ctrl_ChangePasswordCtrl","authProxyEnabled","ldapEnabled","changePassword","command","newPassword","confirmNew","ChangePasswordCtrl","NewOrgCtrl","newOrg","createOrg","new_org_ctrl_NewOrgCtrl","UserInviteCtrl","sendEmail","sendInvite","inviteForm","CreateTeamCtrl","teamId","OrgApiKeysCtrl","roleTypes","removeToken","addToken","rootPath","origin","getOrgInfo","orgForm","updateAddress","addressForm","OrgDetailsCtrl","timezones","themes","prefs","updatePrefs","prefsForm","cmd","homeDashboardId","prefs_control_PrefsControlCtrl","prefs_control_template","admin_AdminListUsersCtrl","AdminListUsersCtrl","pages","getUsers","perPage","totalPages","showPaging","navigateToPage","deleteUser","admin_AdminEditUserCtrl","AdminEditUserCtrl","user_id","permissions","isGrafanaAdmin","setPassword","passwordForm","orgUser","removeOrgUser","orgsSearchCache","searchOrgs","addOrgUser","addOrgForm","orgInfo","loginOrEmail","admin_AdminListOrgsCtrl","AdminListOrgsCtrl","getOrgs","deleteOrg","admin_AdminEditOrgCtrl","AdminEditOrgCtrl","getOrg","getOrgUsers","orgUsers","orgDetailsForm","admin_StyleGuideCtrl","StyleGuideCtrl","buttonNames","buttonSizes","buttonVariants","switchTheme","AdminSettingsCtrl","AdminHomeCtrl","NotificationsEditCtrl_AlertNotificationEditCtrl","AlertNotificationEditCtrl","testSeverity","sendReminder","autoResolve","uploadImage","getFrequencySuggestion","notifiers","notifierTemplateId","getNotifierTemplateId"],"mappings":"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","file":"5.b128b55476dbe39ba413.js","sourcesContent":["/* Flot plugin for selecting regions of a plot.\n\nCopyright (c) 2007-2013 IOLA and Ole Laursen.\nLicensed under the MIT license.\n\nThe plugin supports these options:\n\nselection: {\n\tmode: null or \"x\" or \"y\" or \"xy\",\n\tcolor: color,\n\tshape: \"round\" or \"miter\" or \"bevel\",\n\tminSize: number of pixels\n}\n\nSelection support is enabled by setting the mode to one of \"x\", \"y\" or \"xy\".\nIn \"x\" mode, the user will only be able to specify the x range, similarly for\n\"y\" mode. For \"xy\", the selection becomes a rectangle where both ranges can be\nspecified. \"color\" is color of the selection (if you need to change the color\nlater on, you can get to it with plot.getOptions().selection.color). \"shape\"\nis the shape of the corners of the selection.\n\n\"minSize\" is the minimum size a selection can be in pixels. This value can\nbe customized to determine the smallest size a selection can be and still\nhave the selection rectangle be displayed. When customizing this value, the\nfact that it refers to pixels, not axis units must be taken into account.\nThus, for example, if there is a bar graph in time mode with BarWidth set to 1\nminute, setting \"minSize\" to 1 will not make the minimum selection size 1\nminute, but rather 1 pixel. Note also that setting \"minSize\" to 0 will prevent\n\"plotunselected\" events from being fired when the user clicks the mouse without\ndragging.\n\nWhen selection support is enabled, a \"plotselected\" event will be emitted on\nthe DOM element you passed into the plot function. The event handler gets a\nparameter with the ranges selected on the axes, like this:\n\n\tplaceholder.bind( \"plotselected\", function( event, ranges ) {\n\t\talert(\"You selected \" + ranges.xaxis.from + \" to \" + ranges.xaxis.to)\n\t\t// similar for yaxis - with multiple axes, the extra ones are in\n\t\t// x2axis, x3axis, ...\n\t});\n\nThe \"plotselected\" event is only fired when the user has finished making the\nselection. A \"plotselecting\" event is fired during the process with the same\nparameters as the \"plotselected\" event, in case you want to know what's\nhappening while it's happening,\n\nA \"plotunselected\" event with no arguments is emitted when the user clicks the\nmouse to remove the selection. As stated above, setting \"minSize\" to 0 will\ndestroy this behavior.\n\nThe plugin allso adds the following methods to the plot object:\n\n- setSelection( ranges, preventEvent )\n\n  Set the selection rectangle. The passed in ranges is on the same form as\n  returned in the \"plotselected\" event. If the selection mode is \"x\", you\n  should put in either an xaxis range, if the mode is \"y\" you need to put in\n  an yaxis range and both xaxis and yaxis if the selection mode is \"xy\", like\n  this:\n\n\tsetSelection({ xaxis: { from: 0, to: 10 }, yaxis: { from: 40, to: 60 } });\n\n  setSelection will trigger the \"plotselected\" event when called. If you don't\n  want that to happen, e.g. if you're inside a \"plotselected\" handler, pass\n  true as the second parameter. If you are using multiple axes, you can\n  specify the ranges on any of those, e.g. as x2axis/x3axis/... instead of\n  xaxis, the plugin picks the first one it sees.\n\n- clearSelection( preventEvent )\n\n  Clear the selection rectangle. Pass in true to avoid getting a\n  \"plotunselected\" event.\n\n- getSelection()\n\n  Returns the current selection in the same format as the \"plotselected\"\n  event. If there's currently no selection, the function returns null.\n\n*/\n\n(function ($) {\n    function init(plot) {\n        var selection = {\n                first: { x: -1, y: -1}, second: { x: -1, y: -1},\n                show: false,\n                active: false\n            };\n\n        // FIXME: The drag handling implemented here should be\n        // abstracted out, there's some similar code from a library in\n        // the navigation plugin, this should be massaged a bit to fit\n        // the Flot cases here better and reused. Doing this would\n        // make this plugin much slimmer.\n        var savedhandlers = {};\n\n        var mouseUpHandler = null;\n\n        function onMouseMove(e) {\n            if (selection.active) {\n                updateSelection(e);\n\n                plot.getPlaceholder().trigger(\"plotselecting\", [ getSelection() ]);\n            }\n        }\n\n        function onMouseDown(e) {\n            if (e.which != 1)  // only accept left-click\n                return;\n\n            // cancel out any text selections\n            document.body.focus();\n\n            // prevent text selection and drag in old-school browsers\n            if (document.onselectstart !== undefined && savedhandlers.onselectstart == null) {\n                savedhandlers.onselectstart = document.onselectstart;\n                document.onselectstart = function () { return false; };\n            }\n            if (document.ondrag !== undefined && savedhandlers.ondrag == null) {\n                savedhandlers.ondrag = document.ondrag;\n                document.ondrag = function () { return false; };\n            }\n\n            setSelectionPos(selection.first, e);\n\n            selection.active = true;\n\n            // this is a bit silly, but we have to use a closure to be\n            // able to whack the same handler again\n            mouseUpHandler = function (e) { onMouseUp(e); };\n\n            $(document).one(\"mouseup\", mouseUpHandler);\n        }\n\n        function onMouseUp(e) {\n            mouseUpHandler = null;\n\n            // revert drag stuff for old-school browsers\n            if (document.onselectstart !== undefined)\n                document.onselectstart = savedhandlers.onselectstart;\n            if (document.ondrag !== undefined)\n                document.ondrag = savedhandlers.ondrag;\n\n            // no more dragging\n            selection.active = false;\n            updateSelection(e);\n\n            if (selectionIsSane())\n                triggerSelectedEvent(e);\n            else {\n                // this counts as a clear\n                plot.getPlaceholder().trigger(\"plotunselected\", [ ]);\n                plot.getPlaceholder().trigger(\"plotselecting\", [ null ]);\n            }\n\n            setTimeout(function() {\n              plot.isSelecting = false;\n            }, 10);\n\n            return false;\n        }\n\n        function getSelection() {\n            if (!selectionIsSane())\n                return null;\n\n            if (!selection.show) return null;\n\n            var r = {}, c1 = selection.first, c2 = selection.second;\n            var axes = plot.getAxes();\n            // look if no axis is used\n            var noAxisInUse = true;\n            $.each(axes, function (name, axis) {\n              if (axis.used) {\n                anyUsed = false;\n              }\n            })\n\n            $.each(axes, function (name, axis) {\n                if (axis.used || noAxisInUse) {\n                    var p1 = axis.c2p(c1[axis.direction]), p2 = axis.c2p(c2[axis.direction]);\n                    r[name] = { from: Math.min(p1, p2), to: Math.max(p1, p2) };\n                }\n            });\n            return r;\n        }\n\n        function triggerSelectedEvent(event) {\n            var r = getSelection();\n\n            // Add ctrlKey and metaKey to event\n            r.ctrlKey = event.ctrlKey;\n            r.metaKey = event.metaKey;\n\n            plot.getPlaceholder().trigger(\"plotselected\", [ r ]);\n\n            // backwards-compat stuff, to be removed in future\n            if (r.xaxis && r.yaxis)\n                plot.getPlaceholder().trigger(\"selected\", [ { x1: r.xaxis.from, y1: r.yaxis.from, x2: r.xaxis.to, y2: r.yaxis.to } ]);\n        }\n\n        function clamp(min, value, max) {\n            return value < min ? min: (value > max ? max: value);\n        }\n\n        function setSelectionPos(pos, e) {\n            var o = plot.getOptions();\n            var offset = plot.getPlaceholder().offset();\n            var plotOffset = plot.getPlotOffset();\n            pos.x = clamp(0, e.pageX - offset.left - plotOffset.left, plot.width());\n            pos.y = clamp(0, e.pageY - offset.top - plotOffset.top, plot.height());\n\n            if (o.selection.mode == \"y\")\n                pos.x = pos == selection.first ? 0 : plot.width();\n\n            if (o.selection.mode == \"x\")\n                pos.y = pos == selection.first ? 0 : plot.height();\n        }\n\n        function updateSelection(pos) {\n            if (pos.pageX == null)\n                return;\n\n            setSelectionPos(selection.second, pos);\n            if (selectionIsSane()) {\n                plot.isSelecting = true;\n                selection.show = true;\n                plot.triggerRedrawOverlay();\n            }\n            else\n                clearSelection(true);\n        }\n\n        function clearSelection(preventEvent) {\n            if (selection.show) {\n                selection.show = false;\n                plot.triggerRedrawOverlay();\n                if (!preventEvent)\n                    plot.getPlaceholder().trigger(\"plotunselected\", [ ]);\n            }\n        }\n\n        // function taken from markings support in Flot\n        function extractRange(ranges, coord) {\n            var axis, from, to, key, axes = plot.getAxes();\n\n            for (var k in axes) {\n                axis = axes[k];\n                if (axis.direction == coord) {\n                    key = coord + axis.n + \"axis\";\n                    if (!ranges[key] && axis.n == 1)\n                        key = coord + \"axis\"; // support x1axis as xaxis\n                    if (ranges[key]) {\n                        from = ranges[key].from;\n                        to = ranges[key].to;\n                        break;\n                    }\n                }\n            }\n\n            // backwards-compat stuff - to be removed in future\n            if (!ranges[key]) {\n                axis = coord == \"x\" ? plot.getXAxes()[0] : plot.getYAxes()[0];\n                from = ranges[coord + \"1\"];\n                to = ranges[coord + \"2\"];\n            }\n\n            // auto-reverse as an added bonus\n            if (from != null && to != null && from > to) {\n                var tmp = from;\n                from = to;\n                to = tmp;\n            }\n\n            return { from: from, to: to, axis: axis };\n        }\n\n        function setSelection(ranges, preventEvent) {\n            var axis, range, o = plot.getOptions();\n\n            if (o.selection.mode == \"y\") {\n                selection.first.x = 0;\n                selection.second.x = plot.width();\n            }\n            else {\n                range = extractRange(ranges, \"x\");\n\n                selection.first.x = range.axis.p2c(range.from);\n                selection.second.x = range.axis.p2c(range.to);\n            }\n\n            if (o.selection.mode == \"x\") {\n                selection.first.y = 0;\n                selection.second.y = plot.height();\n            }\n            else {\n                range = extractRange(ranges, \"y\");\n\n                selection.first.y = range.axis.p2c(range.from);\n                selection.second.y = range.axis.p2c(range.to);\n            }\n\n            selection.show = true;\n            plot.triggerRedrawOverlay();\n            if (!preventEvent && selectionIsSane())\n                triggerSelectedEvent();\n        }\n\n        function selectionIsSane() {\n            var minSize = plot.getOptions().selection.minSize;\n            return Math.abs(selection.second.x - selection.first.x) >= minSize &&\n                Math.abs(selection.second.y - selection.first.y) >= minSize;\n        }\n\n        plot.clearSelection = clearSelection;\n        plot.setSelection = setSelection;\n        plot.getSelection = getSelection;\n\n        plot.hooks.bindEvents.push(function(plot, eventHolder) {\n            var o = plot.getOptions();\n            if (o.selection.mode != null) {\n                eventHolder.mousemove(onMouseMove);\n                eventHolder.mousedown(onMouseDown);\n            }\n        });\n\n\n        plot.hooks.drawOverlay.push(function (plot, ctx) {\n            // draw selection\n            if (selection.show && selectionIsSane()) {\n                var plotOffset = plot.getPlotOffset();\n                var o = plot.getOptions();\n\n                ctx.save();\n                ctx.translate(plotOffset.left, plotOffset.top);\n\n                var c = $.color.parse(o.selection.color);\n\n                ctx.strokeStyle = c.scale('a', 0.8).toString();\n                ctx.lineWidth = 1;\n                ctx.lineJoin = o.selection.shape;\n                ctx.fillStyle = c.scale('a', 0.4).toString();\n\n                var x = Math.min(selection.first.x, selection.second.x) + 0.5,\n                    y = Math.min(selection.first.y, selection.second.y) + 0.5,\n                    w = Math.abs(selection.second.x - selection.first.x) - 1,\n                    h = Math.abs(selection.second.y - selection.first.y) - 1;\n\n                ctx.fillRect(x, y, w, h);\n                ctx.strokeRect(x, y, w, h);\n\n                ctx.restore();\n            }\n        });\n\n        plot.hooks.shutdown.push(function (plot, eventHolder) {\n            eventHolder.unbind(\"mousemove\", onMouseMove);\n            eventHolder.unbind(\"mousedown\", onMouseDown);\n\n            if (mouseUpHandler)\n                $(document).unbind(\"mouseup\", mouseUpHandler);\n        });\n\n    }\n\n    $.plot.plugins.push({\n        init: init,\n        options: {\n            selection: {\n                mode: null, // one of null, \"x\", \"y\" or \"xy\"\n                color: \"#e8cfac\",\n                shape: \"round\", // one of \"round\", \"miter\", or \"bevel\"\n                minSize: 5 // minimum number of pixels\n            }\n        },\n        name: 'selection',\n        version: '1.1'\n    });\n})(jQuery);\n","/* Flot plugin for stacking data sets rather than overlyaing them.\n\nCopyright (c) 2007-2014 IOLA and Ole Laursen.\nLicensed under the MIT license.\n\nThe plugin assumes the data is sorted on x (or y if stacking horizontally).\nFor line charts, it is assumed that if a line has an undefined gap (from a\nnull point), then the line above it should have the same gap - insert zeros\ninstead of \"null\" if you want another behaviour. This also holds for the start\nand end of the chart. Note that stacking a mix of positive and negative values\nin most instances doesn't make sense (so it looks weird).\n\nTwo or more series are stacked when their \"stack\" attribute is set to the same\nkey (which can be any number or string or just \"true\"). To specify the default\nstack, you can set the stack option like this:\n\n    series: {\n        stack: null/false, true, or a key (number/string)\n    }\n\nYou can also specify it for a single series, like this:\n\n    $.plot( $(\"#placeholder\"), [{\n        data: [ ... ],\n        stack: true\n    }])\n\nThe stacking order is determined by the order of the data series in the array\n(later series end up on top of the previous).\n\nInternally, the plugin modifies the datapoints in each series, adding an\noffset to the y value. For line series, extra data points are inserted through\ninterpolation. If there's a second y value, it's also adjusted (e.g for bar\ncharts or filled areas).\n\n*/\n\n(function ($) {\n    var options = {\n        series: { stack: null } // or number/string\n    };\n\n    function init(plot) {\n        function findMatchingSeries(s, allseries) {\n            var res = null;\n            for (var i = 0; i < allseries.length; ++i) {\n                if (s == allseries[i])\n                    break;\n\n                if (allseries[i].stack == s.stack)\n                    res = allseries[i];\n            }\n\n            return res;\n        }\n\n        function stackData(plot, s, datapoints) {\n            if (s.stack == null || s.stack === false)\n                return;\n\n            var other = findMatchingSeries(s, plot.getData());\n            if (!other)\n                return;\n\n            var ps = datapoints.pointsize,\n                points = datapoints.points,\n                otherps = other.datapoints.pointsize,\n                otherpoints = other.datapoints.points,\n                newpoints = [],\n                px, py, intery, qx, qy, bottom,\n                withlines = s.lines.show,\n                horizontal = s.bars.horizontal,\n                withbottom = ps > 2 && (horizontal ? datapoints.format[2].x : datapoints.format[2].y),\n                withsteps = withlines && s.lines.steps,\n                keyOffset = horizontal ? 1 : 0,\n                accumulateOffset = horizontal ? 0 : 1,\n                i = 0, j = 0, l, m;\n\n            while (true) {\n                if (i >= points.length && j >= otherpoints.length)\n                    break;\n\n                l = newpoints.length;\n\n                if (i < points.length && points[i] == null) {\n                    // copy gaps\n                    for (m = 0; m < ps; ++m)\n                        newpoints.push(points[i + m]);\n                    i += ps;\n                }\n                else if (i >= points.length) {\n                    // take the remaining points from the previous series\n                    for (m = 0; m < ps; ++m)\n                        newpoints.push(otherpoints[j + m]);\n                    if (withbottom)\n                        newpoints[l + 2] = otherpoints[j + accumulateOffset];\n                    j += otherps;\n                }\n                else if (j >= otherpoints.length) {\n                    // take the remaining points from the current series\n                    for (m = 0; m < ps; ++m)\n                        newpoints.push(points[i + m]);\n                    i += ps;\n                }\n                else if (j < otherpoints.length && otherpoints[j] == null) {\n                    // ignore point\n                    j += otherps;\n                }\n                else {\n                    // cases where we actually got two points\n                    px = points[i + keyOffset];\n                    py = points[i + accumulateOffset];\n                    qx = otherpoints[j + keyOffset];\n                    qy = otherpoints[j + accumulateOffset];\n                    bottom = 0;\n\n                    if (px == qx) {\n                        for (m = 0; m < ps; ++m)\n                            newpoints.push(points[i + m]);\n\n                        newpoints[l + accumulateOffset] += qy;\n                        bottom = qy;\n\n                        i += ps;\n                        j += otherps;\n                    }\n                    else if (px > qx) {\n                        // take the point from the previous series so that next series will correctly stack\n                        if (i == 0) {\n                            for (m = 0; m < ps; ++m)\n                                newpoints.push(otherpoints[j + m]);\n                            bottom = qy;\n                        }\n                        // we got past point below, might need to\n                        // insert interpolated extra point\n                        if (i > 0 && points[i - ps] != null) {\n                            intery = py + (points[i - ps + accumulateOffset] - py) * (qx - px) / (points[i - ps + keyOffset] - px);\n                            newpoints.push(qx);\n                            newpoints.push(intery + qy);\n                            for (m = 2; m < ps; ++m)\n                                newpoints.push(points[i + m]);\n                            bottom = qy;\n                        }\n\n                        j += otherps;\n                    }\n                    else { // px < qx\n                        for (m = 0; m < ps; ++m)\n                            newpoints.push(points[i + m]);\n\n                        // we might be able to interpolate a point below,\n                        // this can give us a better y\n                        if (j > 0 && otherpoints[j - otherps] != null)\n                            bottom = qy + (otherpoints[j - otherps + accumulateOffset] - qy) * (px - qx) / (otherpoints[j - otherps + keyOffset] - qx);\n\n                        newpoints[l + accumulateOffset] += bottom;\n\n                        i += ps;\n                    }\n\n                    fromgap = false;\n\n                    if (l != newpoints.length && withbottom)\n                        newpoints[l + 2] = bottom;\n                }\n\n                // maintain the line steps invariant\n                if (withsteps && l != newpoints.length && l > 0\n                    && newpoints[l] != null\n                    && newpoints[l] != newpoints[l - ps]\n                    && newpoints[l + 1] != newpoints[l - ps + 1]) {\n                    for (m = 0; m < ps; ++m)\n                        newpoints[l + ps + m] = newpoints[l + m];\n                    newpoints[l + 1] = newpoints[l - ps + 1];\n                }\n            }\n\n            datapoints.points = newpoints;\n        }\n\n        plot.hooks.processDatapoints.push(stackData);\n    }\n\n    $.plot.plugins.push({\n        init: init,\n        options: options,\n        name: 'stack',\n        version: '1.2'\n    });\n})(jQuery);\n","(function ($) {\n    var options = {\n        series: {\n            stackpercent: null\n        } // or number/string\n    };\n\n    function init(plot) {\n\n        // will be built up dynamically as a hash from x-value, or y-value if horizontal\n        var stackBases = {};\n        var processed = false;\n        var stackSums = {};\n\n        //set percentage for stacked chart\n        function processRawData(plot, series, data, datapoints) {\n            if (!processed) {\n                processed = true;\n                stackSums = getStackSums(plot.getData());\n            }\n\t\t\tif (series.stackpercent == true) {\n\t\t\t\tvar num = data.length;\n\t\t\t\tseries.percents = [];\n\t\t\t\tvar key_idx = 0;\n\t\t\t\tvar value_idx = 1;\n\t\t\t\tif (series.bars && series.bars.horizontal && series.bars.horizontal === true) {\n\t\t\t\t\tkey_idx = 1;\n\t\t\t\t\tvalue_idx = 0;\n\t\t\t\t}\n\t\t\t\tfor (var j = 0; j < num; j++) {\n\t\t\t\t\tvar sum = stackSums[data[j][key_idx] + \"\"];\n\t\t\t\t\tif (sum > 0) {\n\t\t\t\t\t\tseries.percents.push(data[j][value_idx] * 100 / sum);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tseries.percents.push(0);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n        }\n\n        //calculate summary\n        function getStackSums(_data) {\n            var data_len = _data.length;\n            var sums = {};\n            if (data_len > 0) {\n                //caculate summary\n                for (var i = 0; i < data_len; i++) {\n                    if (_data[i].stackpercent) {\n\t\t\t\t\t\tvar key_idx = 0;\n\t\t\t\t\t\tvar value_idx = 1;\n\t\t\t\t\t\tif (_data[i].bars && _data[i].bars.horizontal && _data[i].bars.horizontal === true) {\n\t\t\t\t\t\t\tkey_idx = 1;\n\t\t\t\t\t\t\tvalue_idx = 0;\n\t\t\t\t\t\t}\n                        var num = _data[i].data.length;\n                        for (var j = 0; j < num; j++) {\n                            var value = 0;\n                            if (_data[i].data[j][1] != null) {\n                                value = _data[i].data[j][value_idx];\n                            }\n                            if (sums[_data[i].data[j][key_idx] + \"\"]) {\n                                sums[_data[i].data[j][key_idx] + \"\"] += value;\n                            } else {\n                                sums[_data[i].data[j][key_idx] + \"\"] = value;\n                            }\n\n                        }\n                    }\n                }\n            }\n            return sums;\n        }\n\n        function stackData(plot, s, datapoints) {\n            if (!s.stackpercent) return;\n            if (!processed) {\n                stackSums = getStackSums(plot.getData());\n            }\n            var newPoints = [];\n\n\n\t\t\tvar key_idx = 0;\n\t\t\tvar value_idx = 1;\n\t\t\tif (s.bars && s.bars.horizontal && s.bars.horizontal === true) {\n\t\t\t\tkey_idx = 1;\n\t\t\t\tvalue_idx = 0;\n\t\t\t}\n\n\t\t\tfor (var i = 0; i < datapoints.points.length; i += 3) {\n\t\t\t\t// note that the values need to be turned into absolute y-values.\n\t\t\t\t// in other words, if you were to stack (x, y1), (x, y2), and (x, y3),\n\t\t\t\t// (each from different series, which is where stackBases comes in),\n\t\t\t\t// you'd want the new points to be (x, y1, 0), (x, y1+y2, y1), (x, y1+y2+y3, y1+y2)\n\t\t\t\t// generally, (x, thisValue + (base up to this point), + (base up to this point))\n\t\t\t\tif (!stackBases[datapoints.points[i + key_idx]]) {\n\t\t\t\t\tstackBases[datapoints.points[i + key_idx]] = 0;\n\t\t\t\t}\n\t\t\t\tnewPoints[i + key_idx] = datapoints.points[i + key_idx];\n\t\t\t\tnewPoints[i + value_idx] = datapoints.points[i + value_idx] + stackBases[datapoints.points[i + key_idx]];\n\t\t\t\tnewPoints[i + 2] = stackBases[datapoints.points[i + key_idx]];\n\t\t\t\tstackBases[datapoints.points[i + key_idx]] += datapoints.points[i + value_idx];\n\t\t\t\t// change points to percentage values\n\t\t\t\t// you may need to set yaxis:{ max = 100 }\n\t\t\t\tif ( stackSums[newPoints[i+key_idx]+\"\"] > 0 ){\n\t\t\t\t\tnewPoints[i + value_idx] = newPoints[i + value_idx] * 100 / stackSums[newPoints[i + key_idx] + \"\"];\n\t\t\t\t\tnewPoints[i + 2] = newPoints[i + 2] * 100 / stackSums[newPoints[i + key_idx] + \"\"];\n\t\t\t\t} else {\n\t\t\t\t\tnewPoints[i + value_idx] = 0;\n\t\t\t\t\tnewPoints[i + 2] = 0;\n\t\t\t\t}\n\t\t\t}\n\n            datapoints.points = newPoints;\n        }\n\n\t\tplot.hooks.processRawData.push(processRawData);\n        plot.hooks.processDatapoints.push(stackData);\n    }\n\n    $.plot.plugins.push({\n        init: init,\n        options: options,\n        name: 'stackpercent',\n        version: '0.1'\n    });\n})(jQuery);\n","(function($) {\n    \"use strict\";\n\n    var options = {\n        series: {\n            fillBelowTo: null\n        }\n    };\n\n    function init(plot) {\n        function findBelowSeries( series, allseries ) {\n\n            var i;\n\n            for ( i = 0; i < allseries.length; ++i ) {\n                if ( allseries[ i ].id === series.fillBelowTo ) {\n                    return allseries[ i ];\n                }\n            }\n\n            return null;\n        }\n\n        /* top and bottom doesn't actually matter for this, we're just using it to help make this easier to think about */\n        /* this is a vector cross product operation */\n        function segmentIntersection(top_left_x, top_left_y, top_right_x, top_right_y, bottom_left_x, bottom_left_y, bottom_right_x, bottom_right_y) {\n            var top_delta_x, top_delta_y, bottom_delta_x, bottom_delta_y,\n                s, t;\n\n            top_delta_x = top_right_x - top_left_x;\n            top_delta_y = top_right_y - top_left_y;\n            bottom_delta_x = bottom_right_x - bottom_left_x;\n            bottom_delta_y = bottom_right_y - bottom_left_y;\n\n            s = (\n                (-top_delta_y * (top_left_x - bottom_left_x)) + (top_delta_x * (top_left_y - bottom_left_y))\n            ) / (\n                -bottom_delta_x * top_delta_y + top_delta_x * bottom_delta_y\n            );\n\n            t = (\n                (bottom_delta_x * (top_left_y - bottom_left_y)) - (bottom_delta_y * (top_left_x - bottom_left_x))\n            ) / (\n                -bottom_delta_x * top_delta_y + top_delta_x * bottom_delta_y\n            );\n\n            // Collision detected\n            if (s >= 0 && s <= 1 && t >= 0 && t <= 1) {\n                return [\n                    top_left_x + (t * top_delta_x), // X\n                    top_left_y + (t * top_delta_y) // Y\n                ];\n            }\n\n            // No collision\n            return null;\n        }\n\n        function plotDifferenceArea(plot, ctx, series) {\n            if ( series.fillBelowTo === null ) {\n                return;\n            }\n\n            var otherseries,\n\n                ps,\n                points,\n\n                otherps,\n                otherpoints,\n\n                plotOffset,\n                fillStyle;\n\n            function openPolygon(x, y) {\n                ctx.beginPath();\n                ctx.moveTo(\n                    series.xaxis.p2c(x) + plotOffset.left,\n                    series.yaxis.p2c(y) + plotOffset.top\n                );\n\n            }\n\n            function closePolygon() {\n                ctx.closePath();\n                ctx.fill();\n            }\n\n            function validateInput() {\n                if (points.length/ps !== otherpoints.length/otherps) {\n                    console.error(\"Refusing to graph inconsistent number of points\");\n                    return false;\n                }\n\n                var i;\n                for (i = 0; i < (points.length / ps); i++) {\n                    if (\n                        points[i * ps] !== null &&\n                        otherpoints[i * otherps] !== null &&\n                        points[i * ps] !== otherpoints[i * otherps]\n                    ) {\n                        console.error(\"Refusing to graph points without matching value\");\n                        return false;\n                    }\n                }\n\n                return true;\n            }\n\n            function findNextStart(start_i, end_i) {\n                console.assert(end_i > start_i, \"expects the end index to be greater than the start index\");\n\n                var start = (\n                        start_i === 0 ||\n                        points[start_i - 1] === null ||\n                        otherpoints[start_i - 1] === null\n                    ),\n                    equal = false,\n                    i,\n                    intersect;\n\n                for (i = start_i; i < end_i; i++) {\n                    // Take note of null points\n                    if (\n                        points[(i * ps) + 1] === null ||\n                        otherpoints[(i * ps) + 1] === null\n                    ) {\n                        equal = false;\n                        start = true;\n                    }\n\n                    // Take note of equal points\n                    else if (points[(i * ps) + 1] === otherpoints[(i * otherps) + 1]) {\n                        equal = true;\n                        start = false;\n                    }\n\n\n                    else if (points[(i * ps) + 1] > otherpoints[(i * otherps) + 1]) {\n                        // If we begin above the desired point\n                        if (start) {\n                            openPolygon(points[i * ps], points[(i * ps) + 1]);\n                        }\n\n                        // If an equal point preceeds this, start the polygon at that equal point\n                        else if (equal) {\n                            openPolygon(points[(i - 1) * ps], points[((i - 1) * ps) + 1]);\n                        }\n\n                        // Otherwise, find the intersection point, and start it there\n                        else {\n                            intersect = intersectionPoint(i);\n                            openPolygon(intersect[0], intersect[1]);\n                        }\n\n                        topTraversal(i, end_i);\n                        return;\n                    }\n\n                    // If we go below equal, equal at any preceeding point is irrelevant\n                    else {\n                        start = false;\n                        equal = false;\n                    }\n                }\n            }\n\n            function intersectionPoint(right_i) {\n                console.assert(right_i > 0, \"expects the second point in the series line segment\");\n\n                var i, intersect;\n\n                for (i = 1; i < (otherpoints.length/otherps); i++) {\n                    intersect = segmentIntersection(\n                        points[(right_i - 1) * ps], points[((right_i - 1) * ps) + 1],\n                        points[right_i * ps], points[(right_i * ps) + 1],\n\n                        otherpoints[(i - 1) * otherps], otherpoints[((i - 1) * otherps) + 1],\n                        otherpoints[i * otherps], otherpoints[(i * otherps) + 1]\n                    );\n\n                    if (intersect !== null) {\n                        return intersect;\n                    }\n                }\n\n                console.error(\"intersectionPoint() should only be called when an intersection happens\");\n            }\n\n            function bottomTraversal(start_i, end_i) {\n                console.assert(start_i >= end_i, \"the start should be the rightmost point, and the end should be the leftmost (excluding the equal or intersecting point)\");\n\n                var i;\n\n                for (i = start_i; i >= end_i; i--) {\n                    ctx.lineTo(\n                        otherseries.xaxis.p2c(otherpoints[i * otherps]) + plotOffset.left,\n                        otherseries.yaxis.p2c(otherpoints[(i * otherps) + 1]) + plotOffset.top\n                    );\n                }\n\n                closePolygon();\n            }\n\n            function topTraversal(start_i, end_i) {\n                console.assert(start_i <= end_i, \"the start should be the rightmost point, and the end should be the leftmost (excluding the equal or intersecting point)\");\n\n                var i,\n                    intersect;\n\n                for (i = start_i; i < end_i; i++) {\n                    if (points[(i * ps) + 1] === null && i > start_i) {\n                        bottomTraversal(i - 1, start_i);\n                        findNextStart(i, end_i);\n                        return;\n                    }\n\n                    else if (points[(i * ps) + 1] === otherpoints[(i * otherps) + 1]) {\n                        bottomTraversal(i, start_i);\n                        findNextStart(i, end_i);\n                        return;\n                    }\n\n                    else if (points[(i * ps) + 1] < otherpoints[(i * otherps) + 1]) {\n                        intersect = intersectionPoint(i);\n                        ctx.lineTo(\n                            series.xaxis.p2c(intersect[0]) + plotOffset.left,\n                            series.yaxis.p2c(intersect[1]) + plotOffset.top\n                        );\n                        bottomTraversal(i, start_i);\n                        findNextStart(i, end_i);\n                        return;\n\n                    }\n\n                    else {\n                        ctx.lineTo(\n                            series.xaxis.p2c(points[i * ps]) + plotOffset.left,\n                            series.yaxis.p2c(points[(i * ps) + 1]) + plotOffset.top\n                        );\n                    }\n                }\n\n                bottomTraversal(end_i, start_i);\n            }\n\n\n            // Begin processing\n\n            otherseries = findBelowSeries( series, plot.getData() );\n\n            if ( !otherseries ) {\n                return;\n            }\n\n            ps = series.datapoints.pointsize;\n            points = series.datapoints.points;\n            otherps = otherseries.datapoints.pointsize;\n            otherpoints = otherseries.datapoints.points;\n            plotOffset = plot.getPlotOffset();\n\n            if (!validateInput()) {\n                return;\n            }\n\n\n            // Flot's getFillStyle() should probably be exposed somewhere\n            fillStyle = $.color.parse(series.color);\n            fillStyle.a = 0.4;\n            fillStyle.normalize();\n            ctx.fillStyle = fillStyle.toString();\n\n\n            // Begin recursive bi-directional traversal\n            findNextStart(0, points.length/ps);\n        }\n\n        plot.hooks.drawSeries.push(plotDifferenceArea);\n    }\n\n    $.plot.plugins.push({\n        init: init,\n        options: options,\n        name: \"fillbelow\",\n        version: \"0.1.0\"\n    });\n\n})(jQuery);\n","/* Flot plugin for showing crosshairs when the mouse hovers over the plot.\n\nCopyright (c) 2007-2014 IOLA and Ole Laursen.\nLicensed under the MIT license.\n\nThe plugin supports these options:\n\n\tcrosshair: {\n\t\tmode: null or \"x\" or \"y\" or \"xy\"\n\t\tcolor: color\n\t\tlineWidth: number\n\t}\n\nSet the mode to one of \"x\", \"y\" or \"xy\". The \"x\" mode enables a vertical\ncrosshair that lets you trace the values on the x axis, \"y\" enables a\nhorizontal crosshair and \"xy\" enables them both. \"color\" is the color of the\ncrosshair (default is \"rgba(170, 0, 0, 0.80)\"), \"lineWidth\" is the width of\nthe drawn lines (default is 1).\n\nThe plugin also adds four public methods:\n\n  - setCrosshair( pos )\n\n    Set the position of the crosshair. Note that this is cleared if the user\n    moves the mouse. \"pos\" is in coordinates of the plot and should be on the\n    form { x: xpos, y: ypos } (you can use x2/x3/... if you're using multiple\n    axes), which is coincidentally the same format as what you get from a\n    \"plothover\" event. If \"pos\" is null, the crosshair is cleared.\n\n  - clearCrosshair()\n\n    Clear the crosshair.\n\n  - lockCrosshair(pos)\n\n    Cause the crosshair to lock to the current location, no longer updating if\n    the user moves the mouse. Optionally supply a position (passed on to\n    setCrosshair()) to move it to.\n\n    Example usage:\n\n\tvar myFlot = $.plot( $(\"#graph\"), ..., { crosshair: { mode: \"x\" } } };\n\t$(\"#graph\").bind( \"plothover\", function ( evt, position, item ) {\n\t\tif ( item ) {\n\t\t\t// Lock the crosshair to the data point being hovered\n\t\t\tmyFlot.lockCrosshair({\n\t\t\t\tx: item.datapoint[ 0 ],\n\t\t\t\ty: item.datapoint[ 1 ]\n\t\t\t});\n\t\t} else {\n\t\t\t// Return normal crosshair operation\n\t\t\tmyFlot.unlockCrosshair();\n\t\t}\n\t});\n\n  - unlockCrosshair()\n\n    Free the crosshair to move again after locking it.\n*/\n\n(function ($) {\n    var options = {\n        crosshair: {\n            mode: null, // one of null, \"x\", \"y\" or \"xy\",\n            color: \"rgba(170, 0, 0, 0.80)\",\n            lineWidth: 1\n        }\n    };\n    \n    function init(plot) {\n        // position of crosshair in pixels\n        var crosshair = { x: -1, y: -1, locked: false };\n\n        plot.setCrosshair = function setCrosshair(pos) {\n            if (!pos)\n                crosshair.x = -1;\n            else {\n                var o = plot.p2c(pos);\n                crosshair.x = Math.max(0, Math.min(o.left, plot.width()));\n                crosshair.y = Math.max(0, Math.min(o.top, plot.height()));\n            }\n            \n            plot.triggerRedrawOverlay();\n        };\n        \n        plot.clearCrosshair = plot.setCrosshair; // passes null for pos\n        \n        plot.lockCrosshair = function lockCrosshair(pos) {\n            if (pos)\n                plot.setCrosshair(pos);\n            crosshair.locked = true;\n        };\n\n        plot.unlockCrosshair = function unlockCrosshair() {\n            crosshair.locked = false;\n        };\n\n        function onMouseOut(e) {\n            if (crosshair.locked)\n                return;\n\n            if (crosshair.x != -1) {\n                crosshair.x = -1;\n                plot.triggerRedrawOverlay();\n            }\n        }\n\n        function onMouseMove(e) {\n            if (crosshair.locked)\n                return;\n                \n            if (plot.getSelection && plot.getSelection()) {\n                crosshair.x = -1; // hide the crosshair while selecting\n                return;\n            }\n                \n            var offset = plot.offset();\n            crosshair.x = Math.max(0, Math.min(e.pageX - offset.left, plot.width()));\n            crosshair.y = Math.max(0, Math.min(e.pageY - offset.top, plot.height()));\n            plot.triggerRedrawOverlay();\n        }\n        \n        plot.hooks.bindEvents.push(function (plot, eventHolder) {\n            if (!plot.getOptions().crosshair.mode)\n                return;\n\n            eventHolder.mouseout(onMouseOut);\n            eventHolder.mousemove(onMouseMove);\n        });\n\n        plot.hooks.drawOverlay.push(function (plot, ctx) {\n            var c = plot.getOptions().crosshair;\n            if (!c.mode)\n                return;\n\n            var plotOffset = plot.getPlotOffset();\n            \n            ctx.save();\n            ctx.translate(plotOffset.left, plotOffset.top);\n\n            if (crosshair.x != -1) {\n                var adj = plot.getOptions().crosshair.lineWidth % 2 ? 0.5 : 0;\n\n                ctx.strokeStyle = c.color;\n                ctx.lineWidth = c.lineWidth;\n                ctx.lineJoin = \"round\";\n\n                ctx.beginPath();\n                if (c.mode.indexOf(\"x\") != -1) {\n                    var drawX = Math.floor(crosshair.x) + adj;\n                    ctx.moveTo(drawX, 0);\n                    ctx.lineTo(drawX, plot.height());\n                }\n                if (c.mode.indexOf(\"y\") != -1) {\n                    var drawY = Math.floor(crosshair.y) + adj;\n                    ctx.moveTo(0, drawY);\n                    ctx.lineTo(plot.width(), drawY);\n                }\n                ctx.stroke();\n            }\n            ctx.restore();\n        });\n\n        plot.hooks.shutdown.push(function (plot, eventHolder) {\n            eventHolder.unbind(\"mouseout\", onMouseOut);\n            eventHolder.unbind(\"mousemove\", onMouseMove);\n        });\n    }\n    \n    $.plot.plugins.push({\n        init: init,\n        options: options,\n        name: 'crosshair',\n        version: '1.0'\n    });\n})(jQuery);\n","/*\n * jQuery.flot.dashes\n *\n * options = {\n *   series: {\n *     dashes: {\n *\n *       // show\n *       // default: false\n *       // Whether to show dashes for the series.\n *       show: <boolean>,\n *\n *       // lineWidth\n *       // default: 2\n *       // The width of the dashed line in pixels.\n *       lineWidth: <number>,\n *\n *       // dashLength\n *       // default: 10\n *       // Controls the length of the individual dashes and the amount of\n *       // space between them.\n *       // If this is a number, the dashes and spaces will have that length.\n *       // If this is an array, it is read as [ dashLength, spaceLength ]\n *       dashLength: <number> or <array[2]>\n *     }\n *   }\n * }\n */\n(function($){\n\n  function init(plot) {\n\n    plot.hooks.processDatapoints.push(function(plot, series, datapoints) {\n\n      if (!series.dashes.show) return;\n\n      plot.hooks.draw.push(function(plot, ctx) {\n\n        var plotOffset = plot.getPlotOffset(),\n          axisx = series.xaxis,\n          axisy = series.yaxis;\n\n        function plotDashes(xoffset, yoffset) {\n\n          var points = datapoints.points,\n            ps = datapoints.pointsize,\n            prevx = null,\n            prevy = null,\n            dashRemainder = 0,\n            dashOn = true,\n            dashOnLength,\n            dashOffLength;\n\n          if (series.dashes.dashLength[0]) {\n            dashOnLength = series.dashes.dashLength[0];\n            if (series.dashes.dashLength[1]) {\n              dashOffLength = series.dashes.dashLength[1];\n            } else {\n              dashOffLength = dashOnLength;\n            }\n          } else {\n            dashOffLength = dashOnLength = series.dashes.dashLength;\n          }\n\n          ctx.beginPath();\n\n          for (var i = ps; i < points.length; i += ps) {\n\n            var x1 = points[i - ps],\n              y1 = points[i - ps + 1],\n              x2 = points[i],\n              y2 = points[i + 1];\n\n            if (x1 == null || x2 == null) continue;\n\n            // clip with ymin\n            if (y1 <= y2 && y1 < axisy.min) {\n              if (y2 < axisy.min) continue;   // line segment is outside\n              // compute new intersection point\n              x1 = (axisy.min - y1) / (y2 - y1) * (x2 - x1) + x1;\n              y1 = axisy.min;\n            } else if (y2 <= y1 && y2 < axisy.min) {\n              if (y1 < axisy.min) continue;\n              x2 = (axisy.min - y1) / (y2 - y1) * (x2 - x1) + x1;\n              y2 = axisy.min;\n            }\n\n            // clip with ymax\n            if (y1 >= y2 && y1 > axisy.max) {\n              if (y2 > axisy.max) continue;\n              x1 = (axisy.max - y1) / (y2 - y1) * (x2 - x1) + x1;\n              y1 = axisy.max;\n            } else if (y2 >= y1 && y2 > axisy.max) {\n              if (y1 > axisy.max) continue;\n              x2 = (axisy.max - y1) / (y2 - y1) * (x2 - x1) + x1;\n              y2 = axisy.max;\n            }\n\n            // clip with xmin\n            if (x1 <= x2 && x1 < axisx.min) {\n              if (x2 < axisx.min) continue;\n              y1 = (axisx.min - x1) / (x2 - x1) * (y2 - y1) + y1;\n              x1 = axisx.min;\n            } else if (x2 <= x1 && x2 < axisx.min) {\n              if (x1 < axisx.min) continue;\n              y2 = (axisx.min - x1) / (x2 - x1) * (y2 - y1) + y1;\n              x2 = axisx.min;\n            }\n\n            // clip with xmax\n            if (x1 >= x2 && x1 > axisx.max) {\n              if (x2 > axisx.max) continue;\n              y1 = (axisx.max - x1) / (x2 - x1) * (y2 - y1) + y1;\n              x1 = axisx.max;\n            } else if (x2 >= x1 && x2 > axisx.max) {\n              if (x1 > axisx.max) continue;\n              y2 = (axisx.max - x1) / (x2 - x1) * (y2 - y1) + y1;\n              x2 = axisx.max;\n            }\n\n            if (x1 != prevx || y1 != prevy) {\n              ctx.moveTo(axisx.p2c(x1) + xoffset, axisy.p2c(y1) + yoffset);\n            }\n\n            var ax1 = axisx.p2c(x1) + xoffset,\n              ay1 = axisy.p2c(y1) + yoffset,\n              ax2 = axisx.p2c(x2) + xoffset,\n              ay2 = axisy.p2c(y2) + yoffset,\n              dashOffset;\n\n            function lineSegmentOffset(segmentLength) {\n\n              var c = Math.sqrt(Math.pow(ax2 - ax1, 2) + Math.pow(ay2 - ay1, 2));\n\n              if (c <= segmentLength) {\n                return {\n                  deltaX: ax2 - ax1,\n                  deltaY: ay2 - ay1,\n                  distance: c,\n                  remainder: segmentLength - c\n                }\n              } else {\n                var xsign = ax2 > ax1 ? 1 : -1,\n                  ysign = ay2 > ay1 ? 1 : -1;\n                return {\n                  deltaX: xsign * Math.sqrt(Math.pow(segmentLength, 2) / (1 + Math.pow((ay2 - ay1)/(ax2 - ax1), 2))),\n                  deltaY: ysign * Math.sqrt(Math.pow(segmentLength, 2) - Math.pow(segmentLength, 2) / (1 + Math.pow((ay2 - ay1)/(ax2 - ax1), 2))),\n                  distance: segmentLength,\n                  remainder: 0\n                };\n              }\n            }\n            //-end lineSegmentOffset\n\n            do {\n\n              dashOffset = lineSegmentOffset(\n                dashRemainder > 0 ? dashRemainder :\n                  dashOn ? dashOnLength : dashOffLength);\n\n              if (dashOffset.deltaX != 0 || dashOffset.deltaY != 0) {\n                if (dashOn) {\n                  ctx.lineTo(ax1 + dashOffset.deltaX, ay1 + dashOffset.deltaY);\n                } else {\n                  ctx.moveTo(ax1 + dashOffset.deltaX, ay1 + dashOffset.deltaY);\n                }\n              }\n\n              dashOn = !dashOn;\n              dashRemainder = dashOffset.remainder;\n              ax1 += dashOffset.deltaX;\n              ay1 += dashOffset.deltaY;\n\n            } while (dashOffset.distance > 0);\n\n            prevx = x2;\n            prevy = y2;\n          }\n\n          ctx.stroke();\n        }\n        //-end plotDashes\n\n        ctx.save();\n        ctx.translate(plotOffset.left, plotOffset.top);\n        ctx.lineJoin = 'round';\n\n        var lw = series.dashes.lineWidth,\n          sw = series.shadowSize;\n\n        // FIXME: consider another form of shadow when filling is turned on\n        if (lw > 0 && sw > 0) {\n          // draw shadow as a thick and thin line with transparency\n          ctx.lineWidth = sw;\n          ctx.strokeStyle = \"rgba(0,0,0,0.1)\";\n          // position shadow at angle from the mid of line\n          var angle = Math.PI/18;\n          plotDashes(Math.sin(angle) * (lw/2 + sw/2), Math.cos(angle) * (lw/2 + sw/2));\n          ctx.lineWidth = sw/2;\n          plotDashes(Math.sin(angle) * (lw/2 + sw/4), Math.cos(angle) * (lw/2 + sw/4));\n        }\n\n        ctx.lineWidth = lw;\n        ctx.strokeStyle = series.color;\n\n        if (lw > 0) {\n          plotDashes(0, 0);\n        }\n\n        ctx.restore();\n\n      });\n      //-end draw hook\n\n    });\n    //-end processDatapoints hook\n\n  }\n  //-end init\n\n  $.plot.plugins.push({\n    init: init,\n    options: {\n      series: {\n        dashes: {\n          show: false,\n          lineWidth: 2,\n          dashLength: 10\n        }\n      }\n    },\n    name: 'dashes',\n    version: '0.1'\n  });\n\n})(jQuery)\n","/*!\n * jquery.flot.gauge v1.1.0 *\n *\n * Flot plugin for rendering gauge charts.\n *\n * Copyright (c) 2015 @toyoty99.\n * Licensed under the MIT license.\n */\n\n/**\n * @module flot.gauge\n */\n(function($) {\n\n\n    /**\n     * Gauge class\n     *\n     * @class Gauge\n     */\n    var Gauge = (function() {\n        /**\n         * context of canvas\n         *\n         * @property context\n         * @type Object\n         */\n        var context;\n        /**\n         * placeholder of canvas\n         *\n         * @property placeholder\n         * @type Object\n         */\n        var placeholder;\n        /**\n         * options of plot\n         *\n         * @property options\n         * @type Object\n         */\n        var options;\n        /**\n         * options of gauge\n         *\n         * @property gaugeOptions\n         * @type Object\n         */\n        var gaugeOptions;\n        /**\n         * data series\n         *\n         * @property series\n         * @type Array\n         */\n        var series;\n        /**\n         * logger\n         *\n         * @property logger\n         * @type Object\n         */\n        var logger;\n\n        /**\n         * constructor\n         *\n         * @class Gauge\n         * @constructor\n         * @param  {Object} gaugeOptions gauge options\n         */\n        var Gauge = function(plot, ctx) {\n            context = ctx;\n            placeholder = plot.getPlaceholder();\n            options = plot.getOptions();\n            gaugeOptions = options.series.gauges;\n            series = plot.getData();\n            logger = getLogger(gaugeOptions.debug);\n        }\n\n        /**\n         * calculate layout\n         *\n         * @method calculateLayout\n         * @return the calculated layout properties\n         */\n        Gauge.prototype.calculateLayout = function() {\n\n            var canvasWidth = placeholder.width();\n            var canvasHeight = placeholder.height();\n\n\n\n            // calculate cell size\n            var columns = Math.min(series.length, gaugeOptions.layout.columns);\n            var rows = Math.ceil(series.length / columns);\n\n\n\n            var margin = gaugeOptions.layout.margin;\n            var hMargin = gaugeOptions.layout.hMargin;\n            var vMargin = gaugeOptions.layout.vMargin;\n            var cellWidth = (canvasWidth - (margin * 2) - (hMargin * (columns - 1))) / columns;\n            var cellHeight = (canvasHeight - (margin * 2) - (vMargin * (rows - 1))) / rows;\n            if (gaugeOptions.layout.square) {\n                var cell = Math.min(cellWidth, cellHeight);\n                cellWidth = cell;\n                cellHeight = cell;\n            }\n\n\n\n            // calculate 'auto' values\n            calculateAutoValues(gaugeOptions, cellWidth);\n\n            // calculate maximum radius\n            var cellMargin = gaugeOptions.cell.margin;\n            var labelMargin = 0;\n            var labelFontSize = 0;\n            if (gaugeOptions.label.show) {\n                labelMargin = gaugeOptions.label.margin;\n                labelFontSize = gaugeOptions.label.font.size;\n            }\n            var valueMargin = 0;\n            var valueFontSize = 0;\n            if (gaugeOptions.value.show) {\n                valueMargin = gaugeOptions.value.margin;\n                valueFontSize = gaugeOptions.value.font.size;\n            }\n            var thresholdWidth = 0;\n            if (gaugeOptions.threshold.show) {\n                thresholdWidth = gaugeOptions.threshold.width;\n            }\n            var thresholdLabelMargin = 0;\n            var thresholdLabelFontSize = 0;\n            if (gaugeOptions.threshold.label.show) {\n                thresholdLabelMargin = gaugeOptions.threshold.label.margin;\n                thresholdLabelFontSize = gaugeOptions.threshold.label.font.size;\n            }\n\n            var maxRadiusH = (cellWidth / 2) - cellMargin - thresholdWidth - (thresholdLabelMargin * 2) - thresholdLabelFontSize;\n\n            var startAngle = gaugeOptions.gauge.startAngle;\n            var endAngle = gaugeOptions.gauge.endAngle;\n            var dAngle = (endAngle - startAngle) / 100;\n            var heightRatioV = -1;\n            for (var a = startAngle; a < endAngle; a += dAngle) {\n                heightRatioV = Math.max(heightRatioV, Math.sin(toRad(a)));\n            }\n            heightRatioV = Math.max(heightRatioV, Math.sin(toRad(endAngle)));\n            var outerRadiusV = (cellHeight - (cellMargin * 2) - (labelMargin * 2) - labelFontSize) / (1 + heightRatioV);\n            if (outerRadiusV * heightRatioV < valueMargin + (valueFontSize / 2)) {\n                outerRadiusV = cellHeight - (cellMargin * 2) - (labelMargin * 2) - labelFontSize - valueMargin - (valueFontSize / 2);\n            }\n            var maxRadiusV = outerRadiusV - (thresholdLabelMargin * 2) - thresholdLabelFontSize - thresholdWidth;\n\n            var radius = Math.min(maxRadiusH, maxRadiusV);\n\n\n            var width = gaugeOptions.gauge.width;\n            if (width >= radius) {\n                width = Math.max(3, radius / 3);\n            }\n\n\n            var outerRadius = (thresholdLabelMargin * 2) + thresholdLabelFontSize + thresholdWidth + radius;\n            var gaugeOuterHeight = Math.max(outerRadius * (1 + heightRatioV), outerRadius + valueMargin + (valueFontSize / 2));\n\n            return {\n                canvasWidth: canvasWidth,\n                canvasHeight: canvasHeight,\n                margin: margin,\n                hMargin: hMargin,\n                vMargin: vMargin,\n                columns: columns,\n                rows: rows,\n                cellWidth: cellWidth,\n                cellHeight: cellHeight,\n                cellMargin: cellMargin,\n                labelMargin: labelMargin,\n                labelFontSize: labelFontSize,\n                valueMargin: valueMargin,\n                valueFontSize: valueFontSize,\n                width: width,\n                radius: radius,\n                thresholdWidth: thresholdWidth,\n                thresholdLabelMargin: thresholdLabelMargin,\n                thresholdLabelFontSize: thresholdLabelFontSize,\n                gaugeOuterHeight: gaugeOuterHeight\n            };\n        }\n\n        /**\n         * calculate the values which are set as 'auto'\n         *\n         * @method calculateAutoValues\n         * @param  {Object} gaugeOptionsi the options of the gauge\n         * @param  {Number} cellWidth the width of cell\n         */\n        function calculateAutoValues(gaugeOptionsi, cellWidth) {\n\n            if (gaugeOptionsi.gauge.width === \"auto\") {\n                gaugeOptionsi.gauge.width = Math.max(5, cellWidth / 8);\n            }\n            if (gaugeOptionsi.label.margin === \"auto\") {\n                gaugeOptionsi.label.margin = Math.max(1, cellWidth / 20);\n            }\n            if (gaugeOptionsi.label.font.size === \"auto\") {\n                gaugeOptionsi.label.font.size = Math.max(5, cellWidth / 8);\n            }\n            if (gaugeOptionsi.value.margin === \"auto\") {\n                gaugeOptionsi.value.margin = Math.max(1, cellWidth / 30);\n            }\n            if (gaugeOptionsi.value.font.size === \"auto\") {\n                gaugeOptionsi.value.font.size = Math.max(5, cellWidth / 9);\n            }\n            if (gaugeOptionsi.threshold.width === \"auto\") {\n                gaugeOptionsi.threshold.width = Math.max(3, cellWidth / 100);\n            }\n            if (gaugeOptionsi.threshold.label.margin === \"auto\") {\n                gaugeOptionsi.threshold.label.margin = Math.max(3, cellWidth / 40);\n            }\n            if (gaugeOptionsi.threshold.label.font.size === \"auto\") {\n                gaugeOptionsi.threshold.label.font.size = Math.max(5, cellWidth / 15);\n            }\n\n        }\n        Gauge.prototype.calculateAutoValues = calculateAutoValues;\n\n        /**\n         * calculate the layout of the cell inside\n         *\n         * @method calculateCellLayout\n         * @param  {Object} gaugeOptionsi the options of the gauge\n         * @param  {Number} cellWidth the width of cell\n         * @param  {Number} i the index of the series\n         * @return the calculated cell layout properties\n         */\n        Gauge.prototype.calculateCellLayout = function(gaugeOptionsi, layout, i) {\n\n            // calculate top, left and center\n            var c = col(layout.columns, i);\n            var r = row(layout.columns, i);\n            var x = layout.margin + (layout.cellWidth + layout.hMargin) * c;\n            var y = layout.margin + (layout.cellHeight + layout.vMargin) * r;\n            var cx = x + (layout.cellWidth / 2);\n            var cy = y + layout.cellMargin + (layout.labelMargin * 2) + layout.labelFontSize + layout.thresholdWidth\n                        + layout.thresholdLabelFontSize + (layout.thresholdLabelMargin * 2) + layout.radius;\n            var blank = layout.cellHeight - (layout.cellMargin * 2) - (layout.labelMargin * 2) - layout.labelFontSize - layout.gaugeOuterHeight;\n            var offsetY = 0;\n            if (gaugeOptionsi.cell.vAlign === \"middle\") {\n                offsetY = (blank / 2);\n            } else if (gaugeOptionsi.cell.vAlign === \"bottom\") {\n                offsetY = blank;\n            }\n            cy += offsetY;\n\n            return {\n                col: c,\n                row: r,\n                x: x,\n                y: y,\n                offsetY: offsetY,\n                cellWidth: layout.cellWidth,\n                cellHeight: layout.cellHeight,\n                cellMargin: layout.cellMargin,\n                cx: cx,\n                cy: cy\n            }\n        }\n\n        /**\n         * draw the background of chart\n         *\n         * @method drawBackground\n         * @param  {Object} layout the layout properties\n         */\n        Gauge.prototype.drawBackground = function(layout) {\n\n            if (!gaugeOptions.frame.show) {\n                return;\n            }\n            context.save();\n            context.strokeStyle = options.grid.borderColor;\n            context.lineWidth = options.grid.borderWidth;\n            context.strokeRect(0, 0, layout.canvasWidth, layout.canvasHeight);\n            if (options.grid.backgroundColor) {\n                context.fillStyle = options.grid.backgroundColor;\n                context.fillRect(0, 0, layout.canvasWidth, layout.canvasHeight);\n            }\n            context.restore();\n        }\n\n        /**\n         * draw the background of cell\n         *\n         * @method drawCellBackground\n         * @param  {Object} gaugeOptionsi the options of the gauge\n         * @param  {Object} cellLayout the cell layout properties\n         */\n        Gauge.prototype.drawCellBackground = function(gaugeOptionsi, cellLayout) {\n\n            context.save();\n            if (gaugeOptionsi.cell.border && gaugeOptionsi.cell.border.show && gaugeOptionsi.cell.border.color && gaugeOptionsi.cell.border.width) {\n                context.strokeStyle = gaugeOptionsi.cell.border.color;\n                context.lineWidth = gaugeOptionsi.cell.border.width;\n                context.strokeRect(cellLayout.x, cellLayout.y, cellLayout.cellWidth, cellLayout.cellHeight);\n            }\n            if (gaugeOptionsi.cell.background && gaugeOptionsi.cell.background.color) {\n                context.fillStyle = gaugeOptionsi.cell.background.color;\n                context.fillRect(cellLayout.x, cellLayout.y, cellLayout.cellWidth, cellLayout.cellHeight);\n            }\n            context.restore();\n        }\n\n        /**\n         * draw the gauge\n         *\n         * @method drawGauge\n         * @param  {Object} gaugeOptionsi the options of the gauge\n         * @param  {Object} layout the layout properties\n         * @param  {Object} cellLayout the cell layout properties\n         * @param  {String} label the label of data\n         * @param  {Number} data the value of the gauge\n         */\n        Gauge.prototype.drawGauge = function(gaugeOptionsi, layout, cellLayout, label, data) {\n\n\n            var blur = gaugeOptionsi.gauge.shadow.show ? gaugeOptionsi.gauge.shadow.blur : 0;\n\n\n            // draw gauge frame\n            drawArcWithShadow(\n                cellLayout.cx, // center x\n                cellLayout.cy, // center y\n                layout.radius,\n                layout.width,\n                toRad(gaugeOptionsi.gauge.startAngle),\n                toRad(gaugeOptionsi.gauge.endAngle),\n                gaugeOptionsi.gauge.border.color,      // line color\n                gaugeOptionsi.gauge.border.width,      // line width\n                gaugeOptionsi.gauge.background.color,  // fill color\n                blur);\n\n            // draw gauge\n            var c1 = getColor(gaugeOptionsi, data);\n            var a2 = calculateAngle(gaugeOptionsi, layout, data);\n            drawArcWithShadow(\n                cellLayout.cx, // center x\n                cellLayout.cy, // center y\n                layout.radius - 1,\n                layout.width - 2,\n                toRad(gaugeOptionsi.gauge.startAngle),\n                toRad(a2),\n                c1,           // line color\n                1,            // line width\n                c1,           // fill color\n                blur);\n        }\n\n        /**\n         * decide the color of the data from the threshold options\n         *\n         * @method getColor\n         * @private\n         * @param  {Object} gaugeOptionsi the options of the gauge\n         * @param  {Number} data the value of the gauge\n         */\n        function getColor(gaugeOptionsi, data) {\n            var color;\n            for (var i = 0; i < gaugeOptionsi.threshold.values.length; i++) {\n                var threshold = gaugeOptionsi.threshold.values[i];\n                color = threshold.color;\n                if (data < threshold.value) {\n                    break;\n                }\n            }\n            return color;\n        }\n\n        /**\n         * calculate the angle of the data\n         *\n         * @method calculateAngle\n         * @private\n         * @param  {Object} gaugeOptionsi the options of the gauge\n         * @param  {Object} layout the layout properties\n         * @param  {Number} data the value of the gauge\n         */\n        function calculateAngle(gaugeOptionsi, layout, data) {\n            var a =\n                gaugeOptionsi.gauge.startAngle\n                    + (gaugeOptionsi.gauge.endAngle - gaugeOptionsi.gauge.startAngle)\n                        * ((data - gaugeOptionsi.gauge.min) / (gaugeOptionsi.gauge.max - gaugeOptionsi.gauge.min));\n\n            if (a < gaugeOptionsi.gauge.startAngle) {\n                a = gaugeOptionsi.gauge.startAngle;\n            } else if (a > gaugeOptionsi.gauge.endAngle) {\n                a = gaugeOptionsi.gauge.endAngle;\n            }\n            return a;\n        }\n\n        /**\n         * draw the arc of the threshold\n         *\n         * @method drawThreshold\n         * @param  {Object} gaugeOptionsi the options of the gauge\n         * @param  {Object} layout the layout properties\n         * @param  {Object} cellLayout the cell layout properties\n         */\n        Gauge.prototype.drawThreshold = function(gaugeOptionsi, layout, cellLayout) {\n\n            var a1 = gaugeOptionsi.gauge.startAngle;\n            for (var i = 0; i < gaugeOptionsi.threshold.values.length; i++) {\n                var threshold = gaugeOptionsi.threshold.values[i];\n                c1 = threshold.color;\n                a2 = calculateAngle(gaugeOptionsi, layout, threshold.value);\n                drawArc(\n                    context,\n                    cellLayout.cx, // center x\n                    cellLayout.cy, // center y\n                    layout.radius + layout.thresholdWidth,\n                    layout.thresholdWidth - 2,\n                    toRad(a1),\n                    toRad(a2),\n                    c1,           // line color\n                    1,            // line width\n                    c1);          // fill color\n                a1 = a2;\n            }\n        }\n\n        /**\n         * draw an arc with a shadow\n         *\n         * @method drawArcWithShadow\n         * @private\n         * @param  {Number} cx the x position of the center\n         * @param  {Number} cy the y position of the center\n         * @param  {Number} r the radius of an arc\n         * @param  {Number} w the width of an arc\n         * @param  {Number} rd1 the start angle of an arc in radians\n         * @param  {Number} rd2 the end angle of an arc in radians\n         * @param  {String} lc the color of a line\n         * @param  {Number} lw the widht of a line\n         * @param  {String} fc the fill color  of an arc\n         * @param  {Number} blur the shdow blur\n         */\n        function drawArcWithShadow(cx, cy, r, w, rd1, rd2, lc, lw, fc, blur) {\n            if (rd1 === rd2) {\n                return;\n            }\n            context.save();\n\n            drawArc(context, cx, cy, r, w, rd1, rd2, lc, lw, fc);\n\n            if (blur) {\n                drawArc(context, cx, cy, r, w, rd1, rd2);\n                context.clip();\n                context.shadowOffsetX = 0;\n                context.shadowOffsetY = 0;\n                context.shadowBlur = 10;\n                context.shadowColor = \"gray\";\n                drawArc(context, cx, cy, r + 1, w + 2, rd1, rd2, lc, 1);\n            }\n            context.restore();\n        }\n\n        /**\n         * draw the label of the gauge\n         *\n         * @method drawLable\n         * @param  {Object} gaugeOptionsi the options of the gauge\n         * @param  {Object} layout the layout properties\n         * @param  {Object} cellLayout the cell layout properties\n         * @param  {Number} i the index of the series\n         * @param  {Object} item the item of the series\n         */\n        Gauge.prototype.drawLable = function(gaugeOptionsi, layout, cellLayout, i, item) {\n\n            drawText(\n                cellLayout.cx,\n                cellLayout.y + cellLayout.cellMargin + layout.labelMargin + cellLayout.offsetY,\n                \"flotGagueLabel\" + i,\n                gaugeOptionsi.label.formatter ? gaugeOptionsi.label.formatter(item.label, item.data[0][1]) : text,\n                gaugeOptionsi.label);\n        }\n\n        /**\n         * draw the value of the gauge\n         *\n         * @method drawValue\n         * @param  {Object} gaugeOptionsi the options of the gauge\n         * @param  {Object} layout the layout properties\n         * @param  {Object} cellLayout the cell layout properties\n         * @param  {Number} i the index of the series\n         * @param  {Object} item the item of the series\n         */\n        Gauge.prototype.drawValue = function(gaugeOptionsi, layout, cellLayout, i, item) {\n\n            drawText(\n                cellLayout.cx,\n                cellLayout.cy - (gaugeOptionsi.value.font.size / 2),\n                \"flotGagueValue\" + i,\n                gaugeOptionsi.value.formatter ? gaugeOptionsi.value.formatter(item.label, item.data[0][1]) : text,\n                gaugeOptionsi.value);\n        }\n\n        /**\n         * draw the values of the threshold\n         *\n         * @method drawThresholdValues\n         * @param  {Object} gaugeOptionsi the options of the gauge\n         * @param  {Object} layout the layout properties\n         * @param  {Object} cellLayout the cell layout properties\n         * @param  {Number} i the index of the series\n         */\n        Gauge.prototype.drawThresholdValues = function(gaugeOptionsi, layout, cellLayout, i) {\n\n            // min, max\n            drawThresholdValue(gaugeOptionsi, layout, cellLayout, \"Min\" + i, gaugeOptionsi.gauge.min, gaugeOptionsi.gauge.startAngle);\n            drawThresholdValue(gaugeOptionsi, layout, cellLayout, \"Max\" + i, gaugeOptionsi.gauge.max, gaugeOptionsi.gauge.endAngle);\n            // threshold values\n            for (var j = 0; j < gaugeOptionsi.threshold.values.length; j++) {\n                var threshold = gaugeOptionsi.threshold.values[j];\n                if (threshold.value > gaugeOptionsi.gauge.min && threshold.value < gaugeOptionsi.gauge.max) {\n                    var a = calculateAngle(gaugeOptionsi, layout, threshold.value);\n                    drawThresholdValue(gaugeOptionsi, layout, cellLayout, i + \"_\" + j, threshold.value, a);\n                }\n            }\n        }\n\n        /**\n         * draw the value of the threshold\n         *\n         * @method drawThresholdValue\n         * @param  {Object} gaugeOptionsi the options of the gauge\n         * @param  {Object} layout the layout properties\n         * @param  {Object} cellLayout the cell layout properties\n         * @param  {Number} i the index of the series\n         * @param  {Number} value the value of the threshold\n         * @param  {Number} a the angle of the value drawn\n         */\n        function drawThresholdValue(gaugeOptionsi, layout, cellLayout, i, value, a) {\n            drawText(\n                cellLayout.cx\n                    + ((layout.thresholdLabelMargin + (layout.thresholdLabelFontSize / 2) + layout.radius)\n                        * Math.cos(toRad(a))),\n                cellLayout.cy\n                    + ((layout.thresholdLabelMargin + (layout.thresholdLabelFontSize / 2) + layout.radius)\n                        * Math.sin(toRad(a))),\n                \"flotGagueThresholdValue\" + i,\n                gaugeOptionsi.threshold.label.formatter ? gaugeOptionsi.threshold.label.formatter(value) : value,\n                gaugeOptionsi.threshold.label,\n                a);\n        }\n\n        /**\n         * draw a text\n         *\n         * the textOptions is assumed as follows:\n         *\n         *   textOptions: {\n         *       background: {\n         *           color: null,\n         *           opacity: 0\n         *       },\n         *       font: {\n         *           size: \"auto\"\n         *           family: \"\\\"ＭＳ ゴシック\\\",sans-serif\"\n         *       },\n         *       color: null\n         *   }\n         *\n         * @method drawText\n         * @private\n         * @param  {Number} x the x position of the text drawn (left top)\n         * @param  {Number} y the y position of the text drawn (left top)\n         * @param  {String} id the id of the dom element\n         * @param  {String} text the text drawn\n         * @param  {Object} textOptions the option of the text\n         * @param  {Number} [a] the angle of the value drawn\n         */\n        function drawText(x, y, id, text, textOptions, a) {\n            var span = $(\".\" + id, placeholder);\n            var exists = span.length;\n            if (!exists) {\n                span = $(\"<span></span>\")\n                span.attr(\"id\", id);\n                span.css(\"position\", \"absolute\");\n                span.css(\"top\", y + \"px\");\n                if (textOptions.font.size) {\n                    span.css(\"font-size\", textOptions.font.size + \"px\");\n                }\n                if (textOptions.font.family) {\n                    span.css(\"font-family\", textOptions.font.family);\n                }\n                if (textOptions.color) {\n                    span.css(\"color\", textOptions.color);\n                }\n                if (textOptions.background.color) {\n                    span.css(\"background-color\", textOptions.background.color);\n                }\n                if (textOptions.background.opacity) {\n                    span.css(\"opacity\", textOptions.background.opacity);\n                }\n                placeholder.append(span);\n            }\n            span.text(text);\n            // after append, readjust the left position\n            span.css(\"left\", x + \"px\"); // for redraw, resetting the left position is needed here\n            span.css(\"left\", (parseInt(span.css(\"left\")) - (span.width()/ 2)) + \"px\");\n\n            // at last, set angle\n            if (!exists && a) {\n                span.css(\"top\", (parseInt(span.css(\"top\")) - (span.height()/ 2)) + \"px\");\n                span.css(\"transform\", \"rotate(\" + ((180 * a) + 90) + \"deg)\"); // not supported for ie8\n            }\n        }\n\n        return Gauge;\n    })();\n    /**\n     * get a instance of Logger\n     *\n     * @method  getLogger\n     * @for flot.gauge\n     * @private\n     * @param  {Object} debugOptions the options of debug\n     */\n    function getLogger(debugOptions) {\n        return typeof Logger !== \"undefined\" ? new Logger(debugOptions) : null;\n    }\n\n    /**\n     * calculate the index of columns for the specified data\n     *\n     * @method col\n     * @for flot.gauge\n     * @param  {Number} columns the number of columns\n     * @param  {Number} i       the index of the series\n     * @return the index of columns\n     */\n    function col(columns, i) {\n        return i % columns;\n    }\n\n    /**\n     * calculate the index of rows for the specified data\n     *\n     * @method row\n     * @for flot.gauge\n     * @param  {Number} columns the number of rows\n     * @param  {Number} i       the index of the series\n     * @return the index of rows\n     */\n    function row(columns, i) {\n        return Math.floor(i / columns);\n    }\n\n    /**\n     * calculate the angle in radians\n     *\n     * internally, use a number without PI (0 - 2).\n     * so, in this function, multiply PI\n     *\n     * @method toRad\n     * @for flot.gauge\n     * @param  {Number} a the number of angle without PI\n     * @return the angle in radians\n     */\n    function toRad(a) {\n        return a * Math.PI;\n    }\n\n    /**\n     * draw an arc\n     *\n     * @method drawArc\n     * @for flot.gauge\n     * @param  {Object} context the context of canvas\n     * @param  {Number} cx the x position of the center\n     * @param  {Number} cy the y position of the center\n     * @param  {Number} r the radius of an arc\n     * @param  {Number} w the width of an arc\n     * @param  {Number} rd1 the start angle of an arc in radians\n     * @param  {Number} rd2 the end angle of an arc in radians\n     * @param  {String} lc the color of a line\n     * @param  {Number} lw the widht of a line\n     * @param  {String} fc the fill color  of an arc\n     */\n    function drawArc(context, cx, cy, r, w, rd1, rd2, lc, lw, fc) {\n        if (rd1 === rd2) {\n            return;\n        }\n        var counterClockwise = false;\n        context.save();\n        context.beginPath();\n        context.arc(cx, cy, r, rd1, rd2, counterClockwise);\n        context.lineTo(cx + (r - w) * Math.cos(rd2),\n                       cy + (r - w) * Math.sin(rd2));\n        context.arc(cx, cy, r - w, rd2, rd1, !counterClockwise);\n        context.closePath();\n        if (lw) {\n            context.lineWidth = lw;\n        }\n        if (lc) {\n            context.strokeStyle = lc;\n            context.stroke();\n        }\n        if (fc) {\n            context.fillStyle = fc;\n            context.fill();\n        }\n        context.restore();\n    }\n\n    /**\n     * initialize plugin\n     *\n     * @method init\n     * @for flot.gauge\n     * @private\n     * @param  {Object} plot a instance of plot\n     */\n    function init (plot) {\n        // add processOptions hook\n        plot.hooks.processOptions.push(function(plot, options) {\n            var logger = getLogger(options.series.gauges.debug);\n\n\n\n\n            // turn 'grid' and 'legend' off\n            if (options.series.gauges.show) {\n                options.grid.show = false;\n                options.legend.show = false;\n            }\n\n            // sort threshold\n            var thresholds = options.series.gauges.threshold.values;\n\n            thresholds.sort(function(a, b) {\n                if (a.value < b.value) {\n                    return -1;\n                } else if (a.value > b.value) {\n                    return 1;\n                } else {\n                    return 0;\n                }\n            });\n\n\n\n        });\n\n        // add draw hook\n        plot.hooks.draw.push(function(plot, context) {\n            var options = plot.getOptions();\n            var gaugeOptions = options.series.gauges;\n\n            var logger = getLogger(gaugeOptions.debug);\n\n\n            if (!gaugeOptions.show) {\n                return;\n            }\n\n            var series = plot.getData();\n\n            if (!series || !series.length) {\n                return; // if no series were passed\n            }\n\n            var gauge = new Gauge(plot, context);\n\n            // calculate layout\n            var layout = gauge.calculateLayout();\n\n            // debug layout\n            if (gaugeOptions.debug.layout) {\n\n            }\n\n            // draw background\n            gauge.drawBackground(layout)\n\n            // draw cells (label, gauge, value, threshold)\n            for (var i = 0; i < series.length; i++) {\n                var item = series[i];\n\n                var gaugeOptionsi = $.extend({}, gaugeOptions, item.gauges);\n                if (item.gauges) {\n                    // re-calculate 'auto' values\n                    gauge.calculateAutoValues(gaugeOptionsi, layout.cellWidth);\n                }\n\n                // calculate cell layout\n                var cellLayout = gauge.calculateCellLayout(gaugeOptionsi, layout, i);\n\n                // draw cell background\n                gauge.drawCellBackground(gaugeOptionsi, cellLayout)\n                // debug layout\n                if (gaugeOptionsi.debug.layout) {\n\n                }\n                // draw label\n                if (gaugeOptionsi.label.show) {\n                    gauge.drawLable(gaugeOptionsi, layout, cellLayout, i, item);\n                }\n                // draw gauge\n                gauge.drawGauge(gaugeOptionsi, layout, cellLayout, item.label, item.data[0][1]);\n                // draw threshold\n                if (gaugeOptionsi.threshold.show) {\n                    gauge.drawThreshold(gaugeOptionsi, layout, cellLayout);\n                }\n                if (gaugeOptionsi.threshold.label.show) {\n                    gauge.drawThresholdValues(gaugeOptionsi, layout, cellLayout, i)\n                }\n                // draw value\n                if (gaugeOptionsi.value.show) {\n                    gauge.drawValue(gaugeOptionsi, layout, cellLayout, i, item);\n                }\n            }\n        });\n    }\n\n    /**\n     * [defaults description]\n     *\n     * @property defaults\n     * @type {Object}\n     */\n    var defaults = {\n        series: {\n            gauges: {\n                debug: {\n                    log: false,\n                    layout: false,\n                    alert: false\n                },\n                show: false,\n                layout: {\n                    margin: 5,\n                    columns: 3,\n                    hMargin: 5,\n                    vMargin: 5,\n                    square: false\n                },\n                frame: {\n                    show: true\n                },\n                cell: {\n                    background: {\n                        color: null\n                    },\n                    border: {\n                        show: true,\n                        color: \"black\",\n                        width: 1\n                    },\n                    margin: 5,\n                    vAlign: \"middle\" // 'top' or 'middle' or 'bottom'\n                },\n                gauge: {\n                    width: \"auto\", // a specified number, or 'auto'\n                    startAngle: 0.9, // 0 - 2 factor of the radians\n                    endAngle: 2.1, // 0 - 2 factor of the radians\n                    min: 0,\n                    max: 100,\n                    background: {\n                        color: \"white\"\n                    },\n                    border: {\n                        color: \"lightgray\",\n                        width: 2\n                    },\n                    shadow: {\n                        show: true,\n                        blur: 5\n                    }\n                },\n                label: {\n                    show: true,\n                    margin: \"auto\", // a specified number, or 'auto'\n                    background: {\n                        color: null,\n                        opacity: 0\n                    },\n                    font: {\n                        size: \"auto\", // a specified number, or 'auto'\n                        family: \"sans-serif\"\n                    },\n                    color: null,\n                    formatter: function(label, value) {\n                        return label;\n                    }\n                },\n                value: {\n                    show: true,\n                    margin: \"auto\", // a specified number, or 'auto'\n                    background: {\n                        color: null,\n                        opacity: 0\n                    },\n                    font: {\n                        size: \"auto\", // a specified number, or 'auto'\n                        family: \"sans-serif\"\n                    },\n                    color: null,\n                    formatter: function(label, value) {\n                        return parseInt(value);\n                    }\n                },\n                threshold: {\n                    show: true,\n                    width: \"auto\", // a specified number, or 'auto'\n                    label: {\n                        show: true,\n                        margin: \"auto\", // a specified number, or 'auto'\n                        background: {\n                            color: null,\n                            opacity: 0\n                        },\n                        font: {\n                            size: \"auto\", // a specified number, or 'auto'\n                            family: \",sans-serif\"\n                        },\n                        color: null,\n                        formatter: function(value) {\n                            return value;\n                        }\n                    },\n                    values: [\n                        {\n                            value: 50,\n                            color: \"lightgreen\"\n                        }, {\n                            value: 80,\n                            color: \"yellow\"\n                        }, {\n                            value: 100,\n                            color: \"red\"\n                        }\n                    ]\n                }\n            }\n        }\n    };\n\n    // register the gauge plugin\n    $.plot.plugins.push({\n        init: init,\n        options: defaults,\n        name: \"gauge\",\n        version: \"1.1.0\"\n    });\n\n})(jQuery);\n","// jshint ignore: start\n// jscs: disable\nace.define(\"ace/mode/prometheus_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"], function(require, exports, module) {\n\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\nvar PrometheusHighlightRules = function() {\n  var keywords = (\n    \"count|count_values|min|max|avg|sum|stddev|stdvar|bottomk|topk|quantile\"\n  );\n\n  var builtinConstants = (\n    \"true|false|null|__name__|job\"\n  );\n\n  var builtinFunctions = (\n    \"abs|absent|ceil|changes|clamp_max|clamp_min|count_scalar|day_of_month|day_of_week|days_in_month|delta|deriv|\" + \"drop_common_labels|exp|floor|histogram_quantile|holt_winters|hour|idelta|increase|irate|label_replace|ln|log2|\" +\n    \"log10|minute|month|predict_linear|rate|resets|round|scalar|sort|sort_desc|sqrt|time|vector|year|avg_over_time|\" +\n    \"min_over_time|max_over_time|sum_over_time|count_over_time|quantile_over_time|stddev_over_time|stdvar_over_time\"\n  );\n\n  var keywordMapper = this.createKeywordMapper({\n    \"support.function\": builtinFunctions,\n    \"keyword\": keywords,\n    \"constant.language\": builtinConstants\n  }, \"identifier\", true);\n\n  this.$rules = {\n    \"start\" : [ {\n      token : \"string\", // single line\n      regex : /\"(?:[^\"\\\\]|\\\\.)*?\"/\n    }, {\n      token : \"string\", // string\n      regex : \"'.*?'\"\n    }, {\n      token : \"constant.numeric\", // float\n      regex : \"[-]?\\\\d+(?:(?:\\\\.\\\\d*)?(?:[eE][+-]?\\\\d+)?)?\\\\b\"\n    }, {\n      token : \"constant.language\", // time\n      regex : \"\\\\d+[smhdwy]\"\n    }, {\n      token : \"keyword.operator.binary\",\n      regex : \"\\\\+|\\\\-|\\\\*|\\\\/|%|\\\\^|==|!=|<=|>=|<|>|and|or|unless\"\n    }, {\n      token : \"keyword.other\",\n      regex : \"keep_common|offset|bool\"\n    }, {\n      token : \"keyword.control\",\n      regex : \"by|without|on|ignoring|group_left|group_right\",\n      next  : \"start-label-list-matcher\"\n    }, {\n      token : \"variable\",\n      regex : \"\\\\$[A-Za-z0-9_]+\"\n    }, {\n      token : keywordMapper,\n      regex : \"[a-zA-Z_:][a-zA-Z0-9_:]*\"\n    }, {\n      token : \"paren.lparen\",\n      regex : \"[[(]\"\n    }, {\n      token : \"paren.lparen.label-matcher\",\n      regex : \"{\",\n      next  : \"start-label-matcher\"\n    }, {\n      token : \"paren.rparen\",\n      regex : \"[\\\\])]\"\n    }, {\n      token : \"paren.rparen.label-matcher\",\n      regex : \"}\"\n    }, {\n      token : \"text\",\n      regex : \"\\\\s+\"\n    } ],\n    \"start-label-matcher\" : [ {\n      token : \"entity.name.tag.label-matcher\",\n      regex : '[a-zA-Z_][a-zA-Z0-9_]*'\n    }, {\n      token : \"keyword.operator.label-matcher\",\n      regex : '=~|=|!~|!='\n    }, {\n      token : \"string.quoted.label-matcher\",\n      regex : '\"[^\"]*\"|\\'[^\\']*\\''\n    }, {\n      token : \"punctuation.operator.label-matcher\",\n      regex : \",\"\n    }, {\n      token : \"paren.rparen.label-matcher\",\n      regex : \"}\",\n      next  : \"start\"\n    } ],\n    \"start-label-list-matcher\" : [ {\n      token : \"paren.lparen.label-list-matcher\",\n      regex : \"[(]\"\n    }, {\n      token : \"entity.name.tag.label-list-matcher\",\n      regex : '[a-zA-Z_][a-zA-Z0-9_]*'\n    }, {\n      token : \"punctuation.operator.label-list-matcher\",\n      regex : \",\"\n    }, {\n      token : \"paren.rparen.label-list-matcher\",\n      regex : \"[)]\",\n      next  : \"start\"\n    } ]\n  };\n\n  this.normalizeRules();\n};\n\noop.inherits(PrometheusHighlightRules, TextHighlightRules);\n\nexports.PrometheusHighlightRules = PrometheusHighlightRules;\n});\n\nace.define(\"ace/mode/prometheus_completions\",[\"require\",\"exports\",\"module\",\"ace/token_iterator\", \"ace/lib/lang\"], function(require, exports, module) {\n\"use strict\";\n\nvar lang = require(\"../lib/lang\");\n\nvar prometheusKeyWords = [\n  \"by\", \"without\", \"keep_common\", \"offset\", \"bool\", \"and\", \"or\", \"unless\", \"ignoring\", \"on\", \"group_left\",\n  \"group_right\", \"count\", \"count_values\", \"min\", \"max\", \"avg\", \"sum\", \"stddev\", \"stdvar\", \"bottomk\", \"topk\", \"quantile\"\n];\n\nvar keyWordsCompletions = prometheusKeyWords.map(function(word) {\n  return {\n    caption: word,\n    value: word,\n    meta: \"keyword\",\n    score: Number.MAX_VALUE\n  }\n});\n\nvar prometheusFunctions = [\n  {\n    name: 'abs()', value: 'abs',\n    def: 'abs(v instant-vector)',\n    docText: 'Returns the input vector with all sample values converted to their absolute value.'\n  },\n  {\n    name: 'absent()', value: 'absent',\n    def: 'absent(v instant-vector)',\n    docText: 'Returns an empty vector if the vector passed to it has any elements and a 1-element vector with the value 1 if the vector passed to it has no elements. This is useful for alerting on when no time series exist for a given metric name and label combination.'\n  },\n  {\n    name: 'ceil()', value: 'ceil',\n    def: 'ceil(v instant-vector)',\n    docText: 'Rounds the sample values of all elements in `v` up to the nearest integer.'\n  },\n  {\n    name: 'changes()', value: 'changes',\n    def: 'changes(v range-vector)',\n    docText: 'For each input time series, `changes(v range-vector)` returns the number of times its value has changed within the provided time range as an instant vector.'\n  },\n  {\n    name: 'clamp_max()', value: 'clamp_max',\n    def: 'clamp_max(v instant-vector, max scalar)',\n    docText: 'Clamps the sample values of all elements in `v` to have an upper limit of `max`.'\n  },\n  {\n    name: 'clamp_min()', value: 'clamp_min',\n    def: 'clamp_min(v instant-vector, min scalar)',\n    docText: 'Clamps the sample values of all elements in `v` to have a lower limit of `min`.'\n  },\n  {\n    name: 'count_scalar()', value: 'count_scalar',\n    def: 'count_scalar(v instant-vector)',\n    docText: 'Returns the number of elements in a time series vector as a scalar. This is in contrast to the `count()` aggregation operator, which always returns a vector (an empty one if the input vector is empty) and allows grouping by labels via a `by` clause.'\n  },\n  {\n    name: 'day_of_month()', value: 'day_of_month',\n    def: 'day_of_month(v=vector(time()) instant-vector)',\n    docText: 'Returns the day of the month for each of the given times in UTC. Returned values are from 1 to 31.'\n  },\n  {\n    name: 'day_of_week()', value: 'day_of_week',\n    def: 'day_of_week(v=vector(time()) instant-vector)',\n    docText: 'Returns the day of the week for each of the given times in UTC. Returned values are from 0 to 6, where 0 means Sunday etc.'\n  },\n  {\n    name: 'days_in_month()', value: 'days_in_month',\n    def: 'days_in_month(v=vector(time()) instant-vector)',\n    docText: 'Returns number of days in the month for each of the given times in UTC. Returned values are from 28 to 31.'\n  },\n  {\n    name: 'delta()', value: 'delta',\n    def: 'delta(v range-vector)',\n    docText: 'Calculates the difference between the first and last value of each time series element in a range vector `v`, returning an instant vector with the given deltas and equivalent labels. The delta is extrapolated to cover the full time range as specified in the range vector selector, so that it is possible to get a non-integer result even if the sample values are all integers.'\n  },\n  {\n    name: 'deriv()', value: 'deriv',\n    def: 'deriv(v range-vector)',\n    docText: 'Calculates the per-second derivative of the time series in a range vector `v`, using simple linear regression.'\n  },\n  {\n    name: 'drop_common_labels()', value: 'drop_common_labels',\n    def: 'drop_common_labels(instant-vector)',\n    docText: 'Drops all labels that have the same name and value across all series in the input vector.'\n  },\n  {\n    name: 'exp()', value: 'exp',\n    def: 'exp(v instant-vector)',\n    docText: 'Calculates the exponential function for all elements in `v`.\\nSpecial cases are:\\n* `Exp(+Inf) = +Inf` \\n* `Exp(NaN) = NaN`'\n  },\n  {\n    name: 'floor()', value: 'floor',\n    def: 'floor(v instant-vector)',\n    docText: 'Rounds the sample values of all elements in `v` down to the nearest integer.'\n  },\n  {\n    name: 'histogram_quantile()', value: 'histogram_quantile',\n    def: 'histogram_quantile(φ float, b instant-vector)',\n    docText: 'Calculates the φ-quantile (0 ≤ φ ≤ 1) from the buckets `b` of a histogram. The samples in `b` are the counts of observations in each bucket. Each sample must have a label `le` where the label value denotes the inclusive upper bound of the bucket. (Samples without such a label are silently ignored.) The histogram metric type automatically provides time series with the `_bucket` suffix and the appropriate labels.'\n  },\n  {\n    name: 'holt_winters()', value: 'holt_winters',\n    def: 'holt_winters(v range-vector, sf scalar, tf scalar)',\n    docText: 'Produces a smoothed value for time series based on the range in `v`. The lower the smoothing factor `sf`, the more importance is given to old data. The higher the trend factor `tf`, the more trends in the data is considered. Both `sf` and `tf` must be between 0 and 1.'\n  },\n  {\n    name: 'hour()', value: 'hour',\n    def: 'hour(v=vector(time()) instant-vector)',\n    docText: 'Returns the hour of the day for each of the given times in UTC. Returned values are from 0 to 23.'\n  },\n  {\n    name: 'idelta()', value: 'idelta',\n    def: 'idelta(v range-vector)',\n    docText: 'Calculates the difference between the last two samples in the range vector `v`, returning an instant vector with the given deltas and equivalent labels.'\n  },\n  {\n    name: 'increase()', value: 'increase',\n    def: 'increase(v range-vector)',\n    docText: 'Calculates the increase in the time series in the range vector. Breaks in monotonicity (such as counter resets due to target restarts) are automatically adjusted for. The increase is extrapolated to cover the full time range as specified in the range vector selector, so that it is possible to get a non-integer result even if a counter increases only by integer increments.'\n  },\n  {\n    name: 'irate()', value: 'irate',\n    def: 'irate(v range-vector)',\n    docText: 'Calculates the per-second instant rate of increase of the time series in the range vector. This is based on the last two data points. Breaks in monotonicity (such as counter resets due to target restarts) are automatically adjusted for.'\n  },\n  {\n    name: 'label_replace()', value: 'label_replace',\n    def: 'label_replace(v instant-vector, dst_label string, replacement string, src_label string, regex string)',\n    docText: 'For each timeseries in `v`, `label_replace(v instant-vector, dst_label string, replacement string, src_label string, regex string)`  matches the regular expression `regex` against the label `src_label`.  If it matches, then the timeseries is returned with the label `dst_label` replaced by the expansion of `replacement`. `$1` is replaced with the first matching subgroup, `$2` with the second etc. If the regular expression doesn\\'t match then the timeseries is returned unchanged.'\n  },\n  {\n    name: 'ln()', value: 'ln',\n    def: 'ln(v instant-vector)',\n    docText: 'calculates the natural logarithm for all elements in `v`.\\nSpecial cases are:\\n * `ln(+Inf) = +Inf`\\n * `ln(0) = -Inf`\\n * `ln(x < 0) = NaN`\\n * `ln(NaN) = NaN`'\n  },\n  {\n    name: 'log2()', value: 'log2',\n    def: 'log2(v instant-vector)',\n    docText: 'Calculates the binary logarithm for all elements in `v`. The special cases are equivalent to those in `ln`.'\n  },\n  {\n    name: 'log10()', value: 'log10',\n    def: 'log10(v instant-vector)',\n    docText: 'Calculates the decimal logarithm for all elements in `v`. The special cases are equivalent to those in `ln`.'\n  },\n  {\n    name: 'minute()', value: 'minute',\n    def: 'minute(v=vector(time()) instant-vector)',\n    docText: 'Returns the minute of the hour for each of the given times in UTC. Returned values are from 0 to 59.'\n  },\n  {\n    name: 'month()', value: 'month',\n    def: 'month(v=vector(time()) instant-vector)',\n    docText: 'Returns the month of the year for each of the given times in UTC. Returned values are from 1 to 12, where 1 means January etc.'\n  },\n  {\n    name: 'predict_linear()', value: 'predict_linear',\n    def: 'predict_linear(v range-vector, t scalar)',\n    docText: 'Predicts the value of time series `t` seconds from now, based on the range vector `v`, using simple linear regression.'\n  },\n  {\n    name: 'rate()', value: 'rate',\n    def: 'rate(v range-vector)',\n    docText: \"Calculates the per-second average rate of increase of the time series in the range vector. Breaks in monotonicity (such as counter resets due to target restarts) are automatically adjusted for. Also, the calculation extrapolates to the ends of the time range, allowing for missed scrapes or imperfect alignment of scrape cycles with the range's time period.\"\n  },\n  {\n    name: 'resets()', value: 'resets',\n    def: 'resets(v range-vector)',\n    docText: 'For each input time series, `resets(v range-vector)` returns the number of counter resets within the provided time range as an instant vector. Any decrease in the value between two consecutive samples is interpreted as a counter reset.'\n  },\n  {\n    name: 'round()', value: 'round',\n    def: 'round(v instant-vector, to_nearest=1 scalar)',\n    docText: 'Rounds the sample values of all elements in `v` to the nearest integer. Ties are resolved by rounding up. The optional `to_nearest` argument allows specifying the nearest multiple to which the sample values should be rounded. This multiple may also be a fraction.'\n  },\n  {\n    name: 'scalar()', value: 'scalar',\n    def: 'scalar(v instant-vector)',\n    docText: 'Given a single-element input vector, `scalar(v instant-vector)` returns the sample value of that single element as a scalar. If the input vector does not have exactly one element, `scalar` will return `NaN`.'\n  },\n  {\n    name: 'sort()', value: 'sort',\n    def: 'sort(v instant-vector)',\n    docText: 'Returns vector elements sorted by their sample values, in ascending order.'\n  },\n  {\n    name: 'sort_desc()', value: 'sort_desc',\n    def: 'sort_desc(v instant-vector)',\n    docText: 'Returns vector elements sorted by their sample values, in descending order.'\n  },\n  {\n    name: 'sqrt()', value: 'sqrt',\n    def: 'sqrt(v instant-vector)',\n    docText: 'Calculates the square root of all elements in `v`.'\n  },\n  {\n    name: 'time()', value: 'time',\n    def: 'time()',\n    docText: 'Returns the number of seconds since January 1, 1970 UTC. Note that this does not actually return the current time, but the time at which the expression is to be evaluated.'\n  },\n  {\n    name: 'vector()', value: 'vector',\n    def: 'vector(s scalar)',\n    docText: 'Returns the scalar `s` as a vector with no labels.'\n  },\n  {\n    name: 'year()', value: 'year',\n    def: 'year(v=vector(time()) instant-vector)',\n    docText: 'Returns the year for each of the given times in UTC.'\n  },\n  {\n    name: 'avg_over_time()', value: 'avg_over_time',\n    def: 'avg_over_time(range-vector)',\n    docText: 'The average value of all points in the specified interval.'\n  },\n  {\n    name: 'min_over_time()', value: 'min_over_time',\n    def: 'min_over_time(range-vector)',\n    docText: 'The minimum value of all points in the specified interval.'\n  },\n  {\n    name: 'max_over_time()', value: 'max_over_time',\n    def: 'max_over_time(range-vector)',\n    docText: 'The maximum value of all points in the specified interval.'\n  },\n  {\n    name: 'sum_over_time()', value: 'sum_over_time',\n    def: 'sum_over_time(range-vector)',\n    docText: 'The sum of all values in the specified interval.'\n  },\n  {\n    name: 'count_over_time()', value: 'count_over_time',\n    def: 'count_over_time(range-vector)',\n    docText: 'The count of all values in the specified interval.'\n  },\n  {\n    name: 'quantile_over_time()', value: 'quantile_over_time',\n    def: 'quantile_over_time(scalar, range-vector)',\n    docText: 'The φ-quantile (0 ≤ φ ≤ 1) of the values in the specified interval.'\n  },\n  {\n    name: 'stddev_over_time()', value: 'stddev_over_time',\n    def: 'stddev_over_time(range-vector)',\n    docText: 'The population standard deviation of the values in the specified interval.'\n  },\n  {\n    name: 'stdvar_over_time()', value: 'stdvar_over_time',\n    def: 'stdvar_over_time(range-vector)',\n    docText: 'The population standard variance of the values in the specified interval.'\n  },\n];\n\nfunction wrapText(str, len) {\n  len = len || 60;\n  var lines = [];\n  var space_index = 0;\n  var line_start = 0;\n  var next_line_end = len;\n  var line = \"\";\n  for (var i = 0; i < str.length; i++) {\n    if (str[i] === ' ') {\n      space_index = i;\n    } else if (i >= next_line_end  && space_index != 0) {\n      line = str.slice(line_start, space_index);\n      lines.push(line);\n      line_start = space_index + 1;\n      next_line_end = i + len;\n      space_index = 0;\n    }\n  }\n  line = str.slice(line_start);\n  lines.push(line);\n  return lines.join(\"&nbsp<br>\");\n}\n\nfunction convertMarkDownTags(text) {\n  text = text.replace(/```(.+)```/, \"<pre>$1</pre>\");\n  text = text.replace(/`([^`]+)`/, \"<code>$1</code>\");\n  return text;\n}\n\nfunction convertToHTML(item) {\n  var docText = lang.escapeHTML(item.docText);\n  docText = convertMarkDownTags(wrapText(docText, 40));\n  return [\n    \"<b>\", lang.escapeHTML(item.def), \"</b>\", \"<hr></hr>\", docText, \"<br>&nbsp\"\n  ].join(\"\");\n}\n\nvar functionsCompletions = prometheusFunctions.map(function(item) {\n  return {\n    caption: item.name,\n    value: item.value,\n    docHTML: convertToHTML(item),\n    meta: \"function\",\n    score: Number.MAX_VALUE\n  };\n});\n\nvar PrometheusCompletions = function() {};\n\n(function() {\n  this.getCompletions = function(state, session, pos, prefix, callback) {\n    var token = session.getTokenAt(pos.row, pos.column);\n    if (token.type === 'entity.name.tag.label-matcher'\n      || token.type === 'string.quoted.label-matcher'\n      || token.type === 'entity.name.tag.label-list-matcher') {\n      return callback(null, []);\n    }\n\n    var completions = keyWordsCompletions.concat(functionsCompletions);\n    callback(null, completions);\n  };\n\n}).call(PrometheusCompletions.prototype);\n\nexports.PrometheusCompletions = PrometheusCompletions;\n});\n\nace.define(\"ace/mode/behaviour/prometheus\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/behaviour\",\"ace/mode/behaviour/cstyle\",\"ace/token_iterator\"], function(require, exports, module) {\n\"use strict\";\n\nvar oop = require(\"../../lib/oop\");\nvar Behaviour = require(\"../behaviour\").Behaviour;\nvar CstyleBehaviour = require(\"./cstyle\").CstyleBehaviour;\nvar TokenIterator = require(\"../../token_iterator\").TokenIterator;\n\nfunction getWrapped(selection, selected, opening, closing) {\n  var rowDiff = selection.end.row - selection.start.row;\n  return {\n    text: opening + selected + closing,\n    selection: [\n      0,\n      selection.start.column + 1,\n      rowDiff,\n      selection.end.column + (rowDiff ? 0 : 1)\n    ]\n  };\n};\n\nvar PrometheusBehaviour = function () {\n  this.inherit(CstyleBehaviour);\n\n  // Rewrite default CstyleBehaviour for {} braces\n  this.add(\"braces\", \"insertion\", function(state, action, editor, session, text) {\n    if (text == '{') {\n      var selection = editor.getSelectionRange();\n      var selected = session.doc.getTextRange(selection);\n      if (selected !== \"\" && editor.getWrapBehavioursEnabled()) {\n        return getWrapped(selection, selected, '{', '}');\n      } else if (CstyleBehaviour.isSaneInsertion(editor, session)) {\n        return {\n          text: '{}',\n          selection: [1, 1]\n        };\n      }\n    } else if (text == '}') {\n      var cursor = editor.getCursorPosition();\n      var line = session.doc.getLine(cursor.row);\n      var rightChar = line.substring(cursor.column, cursor.column + 1);\n      if (rightChar == '}') {\n        var matching = session.$findOpeningBracket('}', {column: cursor.column + 1, row: cursor.row});\n        if (matching !== null && CstyleBehaviour.isAutoInsertedClosing(cursor, line, text)) {\n          return {\n            text: '',\n            selection: [1, 1]\n          };\n        }\n      }\n    }\n  });\n\n  this.add(\"braces\", \"deletion\", function(state, action, editor, session, range) {\n    var selected = session.doc.getTextRange(range);\n    if (!range.isMultiLine() && selected == '{') {\n      var line = session.doc.getLine(range.start.row);\n      var rightChar = line.substring(range.start.column + 1, range.start.column + 2);\n      if (rightChar == '}') {\n        range.end.column++;\n        return range;\n      }\n    }\n  });\n\n}\noop.inherits(PrometheusBehaviour, CstyleBehaviour);\n\nexports.PrometheusBehaviour = PrometheusBehaviour;\n});\n\nace.define(\"ace/mode/prometheus\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/prometheus_highlight_rules\"], function(require, exports, module) {\n\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar TextMode = require(\"./text\").Mode;\nvar PrometheusHighlightRules = require(\"./prometheus_highlight_rules\").PrometheusHighlightRules;\nvar PrometheusCompletions = require(\"./prometheus_completions\").PrometheusCompletions;\nvar PrometheusBehaviour = require(\"./behaviour/prometheus\").PrometheusBehaviour;\n\nvar Mode = function() {\n  this.HighlightRules = PrometheusHighlightRules;\n  this.$behaviour = new PrometheusBehaviour();\n  this.$completer = new PrometheusCompletions();\n  // replace keyWordCompleter\n  this.completer = this.$completer;\n};\noop.inherits(Mode, TextMode);\n\n(function() {\n\n  this.$id = \"ace/mode/prometheus\";\n}).call(Mode.prototype);\n\nexports.Mode = Mode;\n\n});\n","// jshint ignore: start\n// jscs: disable\nace.define(\"ace/snippets/prometheus\",[\"require\",\"exports\",\"module\"], function(require, exports, module) {\n\"use strict\";\n\n// exports.snippetText = \"# rate\\n\\\n// snippet r\\n\\\n//   rate(${1:metric}[${2:range}])\\n\\\n// \";\n\nexports.snippets = [\n  {\n    \"content\": \"rate(${1:metric}[${2:range}])\",\n    \"name\": \"rate()\",\n    \"scope\": \"prometheus\",\n    \"tabTrigger\": \"r\"\n  }\n];\n\nexports.scope = \"prometheus\";\n});\n","/* Flot plugin for rendering pie charts.\n\nCopyright (c) 2007-2013 IOLA and Ole Laursen.\nLicensed under the MIT license.\n\nThe plugin assumes that each series has a single data value, and that each\nvalue is a positive integer or zero.  Negative numbers don't make sense for a\npie chart, and have unpredictable results.  The values do NOT need to be\npassed in as percentages; the plugin will calculate the total and per-slice\npercentages internally.\n\n* Created by Brian Medendorp\n\n* Updated with contributions from btburnett3, Anthony Aragues and Xavi Ivars\n\nThe plugin supports these options:\n\n\tseries: {\n\t\tpie: {\n\t\t\tshow: true/false\n\t\t\tradius: 0-1 for percentage of fullsize, or a specified pixel length, or 'auto'\n\t\t\tinnerRadius: 0-1 for percentage of fullsize or a specified pixel length, for creating a donut effect\n\t\t\tstartAngle: 0-2 factor of PI used for starting angle (in radians) i.e 3/2 starts at the top, 0 and 2 have the same result\n\t\t\ttilt: 0-1 for percentage to tilt the pie, where 1 is no tilt, and 0 is completely flat (nothing will show)\n\t\t\toffset: {\n\t\t\t\ttop: integer value to move the pie up or down\n\t\t\t\tleft: integer value to move the pie left or right, or 'auto'\n\t\t\t},\n\t\t\tstroke: {\n\t\t\t\tcolor: any hexidecimal color value (other formats may or may not work, so best to stick with something like '#FFF')\n\t\t\t\twidth: integer pixel width of the stroke\n\t\t\t},\n\t\t\tlabel: {\n\t\t\t\tshow: true/false, or 'auto'\n\t\t\t\tformatter:  a user-defined function that modifies the text/style of the label text\n\t\t\t\tradius: 0-1 for percentage of fullsize, or a specified pixel length\n\t\t\t\tbackground: {\n\t\t\t\t\tcolor: any hexidecimal color value (other formats may or may not work, so best to stick with something like '#000')\n\t\t\t\t\topacity: 0-1\n\t\t\t\t},\n\t\t\t\tthreshold: 0-1 for the percentage value at which to hide labels (if they're too small)\n\t\t\t},\n\t\t\tcombine: {\n\t\t\t\tthreshold: 0-1 for the percentage value at which to combine slices (if they're too small)\n\t\t\t\tcolor: any hexidecimal color value (other formats may or may not work, so best to stick with something like '#CCC'), if null, the plugin will automatically use the color of the first slice to be combined\n\t\t\t\tlabel: any text value of what the combined slice should be labeled\n\t\t\t}\n\t\t\thighlight: {\n\t\t\t\topacity: 0-1\n\t\t\t}\n\t\t}\n\t}\n\nMore detail and specific examples can be found in the included HTML file.\n\n*/\n\n(function($) {\n\n\t// Maximum redraw attempts when fitting labels within the plot\n\n\tvar REDRAW_ATTEMPTS = 10;\n\n\t// Factor by which to shrink the pie when fitting labels within the plot\n\n\tvar REDRAW_SHRINK = 0.95;\n\n\tfunction init(plot) {\n\n\t\tvar canvas = null,\n\t\t\ttarget = null,\n\t\t\tmaxRadius = null,\n\t\t\tcenterLeft = null,\n\t\t\tcenterTop = null,\n\t\t\tprocessed = false,\n\t\t\tctx = null;\n\n\t\t// interactive variables\n\n\t\tvar highlights = [];\n\n\t\t// add hook to determine if pie plugin in enabled, and then perform necessary operations\n\n\t\tplot.hooks.processOptions.push(function(plot, options) {\n\t\t\tif (options.series.pie.show) {\n\n\t\t\t\toptions.grid.show = false;\n\n\t\t\t\t// set labels.show\n\n\t\t\t\tif (options.series.pie.label.show == \"auto\") {\n\t\t\t\t\tif (options.legend.show) {\n\t\t\t\t\t\toptions.series.pie.label.show = false;\n\t\t\t\t\t} else {\n\t\t\t\t\t\toptions.series.pie.label.show = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// set radius\n\n\t\t\t\tif (options.series.pie.radius == \"auto\") {\n\t\t\t\t\tif (options.series.pie.label.show) {\n\t\t\t\t\t\toptions.series.pie.radius = 3/4;\n\t\t\t\t\t} else {\n\t\t\t\t\t\toptions.series.pie.radius = 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// ensure sane tilt\n\n\t\t\t\tif (options.series.pie.tilt > 1) {\n\t\t\t\t\toptions.series.pie.tilt = 1;\n\t\t\t\t} else if (options.series.pie.tilt < 0) {\n\t\t\t\t\toptions.series.pie.tilt = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tplot.hooks.bindEvents.push(function(plot, eventHolder) {\n\t\t\tvar options = plot.getOptions();\n\t\t\tif (options.series.pie.show) {\n\t\t\t\tif (options.grid.hoverable) {\n\t\t\t\t\teventHolder.unbind(\"mousemove\").mousemove(onMouseMove);\n\t\t\t\t}\n\t\t\t\tif (options.grid.clickable) {\n\t\t\t\t\teventHolder.unbind(\"click\").click(onClick);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tplot.hooks.processDatapoints.push(function(plot, series, data, datapoints) {\n\t\t\tvar options = plot.getOptions();\n\t\t\tif (options.series.pie.show) {\n\t\t\t\tprocessDatapoints(plot, series, data, datapoints);\n\t\t\t}\n\t\t});\n\n\t\tplot.hooks.drawOverlay.push(function(plot, octx) {\n\t\t\tvar options = plot.getOptions();\n\t\t\tif (options.series.pie.show) {\n\t\t\t\tdrawOverlay(plot, octx);\n\t\t\t}\n\t\t});\n\n\t\tplot.hooks.draw.push(function(plot, newCtx) {\n\t\t\tvar options = plot.getOptions();\n\t\t\tif (options.series.pie.show) {\n\t\t\t\tdraw(plot, newCtx);\n\t\t\t}\n\t\t});\n\n\t\tfunction processDatapoints(plot, series, datapoints) {\n\t\t\tif (!processed)\t{\n\t\t\t\tprocessed = true;\n\t\t\t\tcanvas = plot.getCanvas();\n\t\t\t\ttarget = $(canvas).parent();\n\t\t\t\toptions = plot.getOptions();\n\t\t\t\tplot.setData(combine(plot.getData()));\n\t\t\t}\n\t\t}\n\n\t\tfunction combine(data) {\n\n\t\t\tvar total = 0,\n\t\t\t\tcombined = 0,\n\t\t\t\tnumCombined = 0,\n\t\t\t\tcolor = options.series.pie.combine.color,\n\t\t\t\tnewdata = [];\n\n\t\t\t// Fix up the raw data from Flot, ensuring the data is numeric\n\n\t\t\tfor (var i = 0; i < data.length; ++i) {\n\n\t\t\t\tvar value = data[i].data;\n\n\t\t\t\t// If the data is an array, we'll assume that it's a standard\n\t\t\t\t// Flot x-y pair, and are concerned only with the second value.\n\n\t\t\t\t// Note how we use the original array, rather than creating a\n\t\t\t\t// new one; this is more efficient and preserves any extra data\n\t\t\t\t// that the user may have stored in higher indexes.\n\n\t\t\t\tif ($.isArray(value) && value.length == 1) {\n    \t\t\t\tvalue = value[0];\n\t\t\t\t}\n\n\t\t\t\tif ($.isArray(value)) {\n\t\t\t\t\t// Equivalent to $.isNumeric() but compatible with jQuery < 1.7\n\t\t\t\t\tif (!isNaN(parseFloat(value[1])) && isFinite(value[1])) {\n\t\t\t\t\t\tvalue[1] = +value[1];\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvalue[1] = 0;\n\t\t\t\t\t}\n\t\t\t\t} else if (!isNaN(parseFloat(value)) && isFinite(value)) {\n\t\t\t\t\tvalue = [1, +value];\n\t\t\t\t} else {\n\t\t\t\t\tvalue = [1, 0];\n\t\t\t\t}\n\n\t\t\t\tdata[i].data = [value];\n\t\t\t}\n\n\t\t\t// Sum up all the slices, so we can calculate percentages for each\n\n\t\t\tfor (var i = 0; i < data.length; ++i) {\n\t\t\t\ttotal += data[i].data[0][1];\n\t\t\t}\n\n\t\t\t// Count the number of slices with percentages below the combine\n\t\t\t// threshold; if it turns out to be just one, we won't combine.\n\n\t\t\tfor (var i = 0; i < data.length; ++i) {\n\t\t\t\tvar value = data[i].data[0][1];\n\t\t\t\tif (value / total <= options.series.pie.combine.threshold) {\n\t\t\t\t\tcombined += value;\n\t\t\t\t\tnumCombined++;\n\t\t\t\t\tif (!color) {\n\t\t\t\t\t\tcolor = data[i].color;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (var i = 0; i < data.length; ++i) {\n\t\t\t\tvar value = data[i].data[0][1];\n\t\t\t\tif (numCombined < 2 || value / total > options.series.pie.combine.threshold) {\n\t\t\t\t\tnewdata.push({\n\t\t\t\t\t\tdata: [[1, value]],\n\t\t\t\t\t\tcolor: data[i].color,\n\t\t\t\t\t\tlabel: data[i].label,\n\t\t\t\t\t\tangle: value * Math.PI * 2 / total,\n\t\t\t\t\t\tpercent: value / (total / 100)\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (numCombined > 1) {\n\t\t\t\tnewdata.push({\n\t\t\t\t\tdata: [[1, combined]],\n\t\t\t\t\tcolor: color,\n\t\t\t\t\tlabel: options.series.pie.combine.label,\n\t\t\t\t\tangle: combined * Math.PI * 2 / total,\n\t\t\t\t\tpercent: combined / (total / 100)\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn newdata;\n\t\t}\n\n\t\tfunction draw(plot, newCtx) {\n\n\t\t\tif (!target) {\n\t\t\t\treturn; // if no series were passed\n\t\t\t}\n\n\t\t\tvar canvasWidth = plot.getPlaceholder().width(),\n\t\t\t\tcanvasHeight = plot.getPlaceholder().height(),\n\t\t\t\tlegendWidth = target.children().filter(\".legend\").children().width() || 0;\n\n\t\t\tctx = newCtx;\n\n\t\t\t// WARNING: HACK! REWRITE THIS CODE AS SOON AS POSSIBLE!\n\n\t\t\t// When combining smaller slices into an 'other' slice, we need to\n\t\t\t// add a new series.  Since Flot gives plugins no way to modify the\n\t\t\t// list of series, the pie plugin uses a hack where the first call\n\t\t\t// to processDatapoints results in a call to setData with the new\n\t\t\t// list of series, then subsequent processDatapoints do nothing.\n\n\t\t\t// The plugin-global 'processed' flag is used to control this hack;\n\t\t\t// it starts out false, and is set to true after the first call to\n\t\t\t// processDatapoints.\n\n\t\t\t// Unfortunately this turns future setData calls into no-ops; they\n\t\t\t// call processDatapoints, the flag is true, and nothing happens.\n\n\t\t\t// To fix this we'll set the flag back to false here in draw, when\n\t\t\t// all series have been processed, so the next sequence of calls to\n\t\t\t// processDatapoints once again starts out with a slice-combine.\n\t\t\t// This is really a hack; in 0.9 we need to give plugins a proper\n\t\t\t// way to modify series before any processing begins.\n\n\t\t\tprocessed = false;\n\n\t\t\t// calculate maximum radius and center point\n\n\t\t\tmaxRadius =  Math.min(canvasWidth, canvasHeight / options.series.pie.tilt) / 2;\n\t\t\tcenterTop = canvasHeight / 2 + options.series.pie.offset.top;\n\t\t\tcenterLeft = canvasWidth / 2;\n\n\t\t\tif (options.series.pie.offset.left == \"auto\") {\n\t\t\t\tif (options.legend.position.match(\"w\")) {\n\t\t\t\t\tcenterLeft += legendWidth / 2;\n\t\t\t\t} else {\n\t\t\t\t\tcenterLeft -= legendWidth / 2;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcenterLeft += options.series.pie.offset.left;\n\t\t\t}\n\n\t\t\tif (centerLeft < maxRadius) {\n\t\t\t\tcenterLeft = maxRadius;\n\t\t\t} else if (centerLeft > canvasWidth - maxRadius) {\n\t\t\t\tcenterLeft = canvasWidth - maxRadius;\n\t\t\t}\n\n\t\t\tvar slices = plot.getData(),\n\t\t\t\tattempts = 0;\n\n\t\t\t// Keep shrinking the pie's radius until drawPie returns true,\n\t\t\t// indicating that all the labels fit, or we try too many times.\n\n\t\t\tdo {\n\t\t\t\tif (attempts > 0) {\n\t\t\t\t\tmaxRadius *= REDRAW_SHRINK;\n\t\t\t\t}\n\t\t\t\tattempts += 1;\n\t\t\t\tclear();\n\t\t\t\tif (options.series.pie.tilt <= 0.8) {\n\t\t\t\t\tdrawShadow();\n\t\t\t\t}\n\t\t\t} while (!drawPie() && attempts < REDRAW_ATTEMPTS)\n\n\t\t\tif (attempts >= REDRAW_ATTEMPTS) {\n\t\t\t\tclear();\n\t\t\t\ttarget.prepend(\"<div class='error'>Could not draw pie with labels contained inside canvas</div>\");\n\t\t\t}\n\n\t\t\tif (plot.setSeries && plot.insertLegend) {\n\t\t\t\tplot.setSeries(slices);\n\t\t\t\tplot.insertLegend();\n\t\t\t}\n\n\t\t\t// we're actually done at this point, just defining internal functions at this point\n\n\t\t\tfunction clear() {\n\t\t\t\tctx.clearRect(0, 0, canvasWidth, canvasHeight);\n\t\t\t\ttarget.children().filter(\".pieLabel, .pieLabelBackground\").remove();\n\t\t\t}\n\n\t\t\tfunction drawShadow() {\n\n\t\t\t\tvar shadowLeft = options.series.pie.shadow.left;\n\t\t\t\tvar shadowTop = options.series.pie.shadow.top;\n\t\t\t\tvar edge = 10;\n\t\t\t\tvar alpha = options.series.pie.shadow.alpha;\n\t\t\t\tvar radius = options.series.pie.radius > 1 ? options.series.pie.radius : maxRadius * options.series.pie.radius;\n\n\t\t\t\tif (radius >= canvasWidth / 2 - shadowLeft || radius * options.series.pie.tilt >= canvasHeight / 2 - shadowTop || radius <= edge) {\n\t\t\t\t\treturn;\t// shadow would be outside canvas, so don't draw it\n\t\t\t\t}\n\n\t\t\t\tctx.save();\n\t\t\t\tctx.translate(shadowLeft,shadowTop);\n\t\t\t\tctx.globalAlpha = alpha;\n\t\t\t\tctx.fillStyle = \"#000\";\n\n\t\t\t\t// center and rotate to starting position\n\n\t\t\t\tctx.translate(centerLeft,centerTop);\n\t\t\t\tctx.scale(1, options.series.pie.tilt);\n\n\t\t\t\t//radius -= edge;\n\n\t\t\t\tfor (var i = 1; i <= edge; i++) {\n\t\t\t\t\tctx.beginPath();\n\t\t\t\t\tctx.arc(0, 0, radius, 0, Math.PI * 2, false);\n\t\t\t\t\tctx.fill();\n\t\t\t\t\tradius -= i;\n\t\t\t\t}\n\n\t\t\t\tctx.restore();\n\t\t\t}\n\n\t\t\tfunction drawPie() {\n\n\t\t\t\tvar startAngle = Math.PI * options.series.pie.startAngle;\n\t\t\t\tvar radius = options.series.pie.radius > 1 ? options.series.pie.radius : maxRadius * options.series.pie.radius;\n\n\t\t\t\t// center and rotate to starting position\n\n\t\t\t\tctx.save();\n\t\t\t\tctx.translate(centerLeft,centerTop);\n\t\t\t\tctx.scale(1, options.series.pie.tilt);\n\t\t\t\t//ctx.rotate(startAngle); // start at top; -- This doesn't work properly in Opera\n\n\t\t\t\t// draw slices\n\n\t\t\t\tctx.save();\n\t\t\t\tvar currentAngle = startAngle;\n\t\t\t\tfor (var i = 0; i < slices.length; ++i) {\n\t\t\t\t\tslices[i].startAngle = currentAngle;\n\t\t\t\t\tdrawSlice(slices[i].angle, slices[i].color, true);\n\t\t\t\t}\n\t\t\t\tctx.restore();\n\n\t\t\t\t// draw slice outlines\n\n\t\t\t\tif (options.series.pie.stroke.width > 0) {\n\t\t\t\t\tctx.save();\n\t\t\t\t\tctx.lineWidth = options.series.pie.stroke.width;\n\t\t\t\t\tcurrentAngle = startAngle;\n\t\t\t\t\tfor (var i = 0; i < slices.length; ++i) {\n\t\t\t\t\t\tdrawSlice(slices[i].angle, options.series.pie.stroke.color, false);\n\t\t\t\t\t}\n\t\t\t\t\tctx.restore();\n\t\t\t\t}\n\n\t\t\t\t// draw donut hole\n\n\t\t\t\tdrawDonutHole(ctx);\n\n\t\t\t\tctx.restore();\n\n\t\t\t\t// Draw the labels, returning true if they fit within the plot\n\n\t\t\t\tif (options.series.pie.label.show) {\n\t\t\t\t\treturn drawLabels();\n\t\t\t\t} else return true;\n\n\t\t\t\tfunction drawSlice(angle, color, fill) {\n\n\t\t\t\t\tif (angle <= 0 || isNaN(angle)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (fill) {\n\t\t\t\t\t\tctx.fillStyle = color;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tctx.strokeStyle = color;\n\t\t\t\t\t\tctx.lineJoin = \"round\";\n\t\t\t\t\t}\n\n\t\t\t\t\tctx.beginPath();\n\t\t\t\t\tif (Math.abs(angle - Math.PI * 2) > 0.000000001) {\n\t\t\t\t\t\tctx.moveTo(0, 0); // Center of the pie\n\t\t\t\t\t}\n\n\t\t\t\t\t//ctx.arc(0, 0, radius, 0, angle, false); // This doesn't work properly in Opera\n\t\t\t\t\tctx.arc(0, 0, radius,currentAngle, currentAngle + angle / 2, false);\n\t\t\t\t\tctx.arc(0, 0, radius,currentAngle + angle / 2, currentAngle + angle, false);\n\t\t\t\t\tctx.closePath();\n\t\t\t\t\t//ctx.rotate(angle); // This doesn't work properly in Opera\n\t\t\t\t\tcurrentAngle += angle;\n\n\t\t\t\t\tif (fill) {\n\t\t\t\t\t\tctx.fill();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tctx.stroke();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tfunction drawLabels() {\n\n\t\t\t\t\tvar currentAngle = startAngle;\n\t\t\t\t\tvar radius = options.series.pie.label.radius > 1 ? options.series.pie.label.radius : maxRadius * options.series.pie.label.radius;\n\n\t\t\t\t\tfor (var i = 0; i < slices.length; ++i) {\n\t\t\t\t\t\tif (slices[i].percent >= options.series.pie.label.threshold * 100) {\n\t\t\t\t\t\t\tif (!drawLabel(slices[i], currentAngle, i)) {\n\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcurrentAngle += slices[i].angle;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn true;\n\n\t\t\t\t\tfunction drawLabel(slice, startAngle, index) {\n\n\t\t\t\t\t\tif (slice.data[0][1] == 0) {\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// format label text\n\n\t\t\t\t\t\tvar lf = options.legend.labelFormatter, text, plf = options.series.pie.label.formatter;\n\n\t\t\t\t\t\tif (lf) {\n\t\t\t\t\t\t\ttext = lf(slice.label, slice);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttext = slice.label;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (plf) {\n\t\t\t\t\t\t\ttext = plf(text, slice);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar halfAngle = ((startAngle + slice.angle) + startAngle) / 2;\n\t\t\t\t\t\tvar x = centerLeft + Math.round(Math.cos(halfAngle) * radius);\n\t\t\t\t\t\tvar y = centerTop + Math.round(Math.sin(halfAngle) * radius) * options.series.pie.tilt;\n\n\t\t\t\t\t\tvar html = \"<span class='pieLabel' id='pieLabel\" + index + \"' style='position:absolute;top:\" + y + \"px;left:\" + x + \"px;'>\" + text + \"</span>\";\n\t\t\t\t\t\ttarget.append(html);\n\n\t\t\t\t\t\tvar label = target.children(\"#pieLabel\" + index);\n\t\t\t\t\t\tvar labelTop = (y - label.height() / 2);\n\t\t\t\t\t\tvar labelLeft = (x - label.width() / 2);\n\n\t\t\t\t\t\tlabel.css(\"top\", labelTop);\n\t\t\t\t\t\tlabel.css(\"left\", labelLeft);\n\n\t\t\t\t\t\t// check to make sure that the label is not outside the canvas\n\n\t\t\t\t\t\tif (0 - labelTop > 0 || 0 - labelLeft > 0 || canvasHeight - (labelTop + label.height()) < 0 || canvasWidth - (labelLeft + label.width()) < 0) {\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (options.series.pie.label.background.opacity != 0) {\n\n\t\t\t\t\t\t\t// put in the transparent background separately to avoid blended labels and label boxes\n\n\t\t\t\t\t\t\tvar c = options.series.pie.label.background.color;\n\n\t\t\t\t\t\t\tif (c == null) {\n\t\t\t\t\t\t\t\tc = slice.color;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tvar pos = \"top:\" + labelTop + \"px;left:\" + labelLeft + \"px;\";\n\t\t\t\t\t\t\t$(\"<div class='pieLabelBackground' style='position:absolute;width:\" + label.width() + \"px;height:\" + label.height() + \"px;\" + pos + \"background-color:\" + c + \";'></div>\")\n\t\t\t\t\t\t\t\t.css(\"opacity\", options.series.pie.label.background.opacity)\n\t\t\t\t\t\t\t\t.insertBefore(label);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t} // end individual label function\n\t\t\t\t} // end drawLabels function\n\t\t\t} // end drawPie function\n\t\t} // end draw function\n\n\t\t// Placed here because it needs to be accessed from multiple locations\n\n\t\tfunction drawDonutHole(layer) {\n\t\t\tif (options.series.pie.innerRadius > 0) {\n\n\t\t\t\t// subtract the center\n\n\t\t\t\tlayer.save();\n\t\t\t\tvar innerRadius = options.series.pie.innerRadius > 1 ? options.series.pie.innerRadius : maxRadius * options.series.pie.innerRadius;\n\t\t\t\tlayer.globalCompositeOperation = \"destination-out\"; // this does not work with excanvas, but it will fall back to using the stroke color\n\t\t\t\tlayer.beginPath();\n\t\t\t\tlayer.fillStyle = options.series.pie.stroke.color;\n\t\t\t\tlayer.arc(0, 0, innerRadius, 0, Math.PI * 2, false);\n\t\t\t\tlayer.fill();\n\t\t\t\tlayer.closePath();\n\t\t\t\tlayer.restore();\n\n\t\t\t\t// add inner stroke\n\n\t\t\t\tlayer.save();\n\t\t\t\tlayer.beginPath();\n\t\t\t\tlayer.strokeStyle = options.series.pie.stroke.color;\n\t\t\t\tlayer.arc(0, 0, innerRadius, 0, Math.PI * 2, false);\n\t\t\t\tlayer.stroke();\n\t\t\t\tlayer.closePath();\n\t\t\t\tlayer.restore();\n\n\t\t\t\t// TODO: add extra shadow inside hole (with a mask) if the pie is tilted.\n\t\t\t}\n\t\t}\n\n\t\t//-- Additional Interactive related functions --\n\n\t\tfunction isPointInPoly(poly, pt) {\n\t\t\tfor(var c = false, i = -1, l = poly.length, j = l - 1; ++i < l; j = i)\n\t\t\t\t((poly[i][1] <= pt[1] && pt[1] < poly[j][1]) || (poly[j][1] <= pt[1] && pt[1]< poly[i][1]))\n\t\t\t\t&& (pt[0] < (poly[j][0] - poly[i][0]) * (pt[1] - poly[i][1]) / (poly[j][1] - poly[i][1]) + poly[i][0])\n\t\t\t\t&& (c = !c);\n\t\t\treturn c;\n\t\t}\n\n\t\tfunction findNearbySlice(mouseX, mouseY) {\n\n\t\t\tvar slices = plot.getData(),\n\t\t\t\toptions = plot.getOptions(),\n\t\t\t\tradius = options.series.pie.radius > 1 ? options.series.pie.radius : maxRadius * options.series.pie.radius,\n\t\t\t\tx, y;\n\n\t\t\tfor (var i = 0; i < slices.length; ++i) {\n\n\t\t\t\tvar s = slices[i];\n\n\t\t\t\tif (s.pie.show) {\n\n\t\t\t\t\tctx.save();\n\t\t\t\t\tctx.beginPath();\n\t\t\t\t\tctx.moveTo(0, 0); // Center of the pie\n\t\t\t\t\t//ctx.scale(1, options.series.pie.tilt);\t// this actually seems to break everything when here.\n\t\t\t\t\tctx.arc(0, 0, radius, s.startAngle, s.startAngle + s.angle / 2, false);\n\t\t\t\t\tctx.arc(0, 0, radius, s.startAngle + s.angle / 2, s.startAngle + s.angle, false);\n\t\t\t\t\tctx.closePath();\n\t\t\t\t\tx = mouseX - centerLeft;\n\t\t\t\t\ty = mouseY - centerTop;\n\n\t\t\t\t\tif (ctx.isPointInPath) {\n\t\t\t\t\t\tif (ctx.isPointInPath(mouseX - centerLeft, mouseY - centerTop)) {\n\t\t\t\t\t\t\tctx.restore();\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tdatapoint: [s.percent, s.data],\n\t\t\t\t\t\t\t\tdataIndex: 0,\n\t\t\t\t\t\t\t\tseries: s,\n\t\t\t\t\t\t\t\tseriesIndex: i\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// excanvas for IE doesn;t support isPointInPath, this is a workaround.\n\n\t\t\t\t\t\tvar p1X = radius * Math.cos(s.startAngle),\n\t\t\t\t\t\t\tp1Y = radius * Math.sin(s.startAngle),\n\t\t\t\t\t\t\tp2X = radius * Math.cos(s.startAngle + s.angle / 4),\n\t\t\t\t\t\t\tp2Y = radius * Math.sin(s.startAngle + s.angle / 4),\n\t\t\t\t\t\t\tp3X = radius * Math.cos(s.startAngle + s.angle / 2),\n\t\t\t\t\t\t\tp3Y = radius * Math.sin(s.startAngle + s.angle / 2),\n\t\t\t\t\t\t\tp4X = radius * Math.cos(s.startAngle + s.angle / 1.5),\n\t\t\t\t\t\t\tp4Y = radius * Math.sin(s.startAngle + s.angle / 1.5),\n\t\t\t\t\t\t\tp5X = radius * Math.cos(s.startAngle + s.angle),\n\t\t\t\t\t\t\tp5Y = radius * Math.sin(s.startAngle + s.angle),\n\t\t\t\t\t\t\tarrPoly = [[0, 0], [p1X, p1Y], [p2X, p2Y], [p3X, p3Y], [p4X, p4Y], [p5X, p5Y]],\n\t\t\t\t\t\t\tarrPoint = [x, y];\n\n\t\t\t\t\t\t// TODO: perhaps do some mathmatical trickery here with the Y-coordinate to compensate for pie tilt?\n\n\t\t\t\t\t\tif (isPointInPoly(arrPoly, arrPoint)) {\n\t\t\t\t\t\t\tctx.restore();\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tdatapoint: [s.percent, s.data],\n\t\t\t\t\t\t\t\tdataIndex: 0,\n\t\t\t\t\t\t\t\tseries: s,\n\t\t\t\t\t\t\t\tseriesIndex: i\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tctx.restore();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn null;\n\t\t}\n\n\t\tfunction onMouseMove(e) {\n\t\t\ttriggerClickHoverEvent(\"plothover\", e);\n\t\t}\n\n\t\tfunction onClick(e) {\n\t\t\ttriggerClickHoverEvent(\"plotclick\", e);\n\t\t}\n\n\t\t// trigger click or hover event (they send the same parameters so we share their code)\n\n\t\tfunction triggerClickHoverEvent(eventname, e) {\n\n\t\t\tvar offset = plot.offset();\n\t\t\tvar canvasX = parseInt(e.pageX - offset.left);\n\t\t\tvar canvasY =  parseInt(e.pageY - offset.top);\n\t\t\tvar item = findNearbySlice(canvasX, canvasY);\n\n\t\t\tif (options.grid.autoHighlight) {\n\n\t\t\t\t// clear auto-highlights\n\n\t\t\t\tfor (var i = 0; i < highlights.length; ++i) {\n\t\t\t\t\tvar h = highlights[i];\n\t\t\t\t\tif (h.auto == eventname && !(item && h.series == item.series)) {\n\t\t\t\t\t\tunhighlight(h.series);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// highlight the slice\n\n\t\t\tif (item) {\n\t\t\t\thighlight(item.series, eventname);\n\t\t\t}\n\n\t\t\t// trigger any hover bind events\n\n\t\t\tvar pos = { pageX: e.pageX, pageY: e.pageY };\n\t\t\ttarget.trigger(eventname, [pos, item]);\n\t\t}\n\n\t\tfunction highlight(s, auto) {\n\t\t\t//if (typeof s == \"number\") {\n\t\t\t//\ts = series[s];\n\t\t\t//}\n\n\t\t\tvar i = indexOfHighlight(s);\n\n\t\t\tif (i == -1) {\n\t\t\t\thighlights.push({ series: s, auto: auto });\n\t\t\t\tplot.triggerRedrawOverlay();\n\t\t\t} else if (!auto) {\n\t\t\t\thighlights[i].auto = false;\n\t\t\t}\n\t\t}\n\n\t\tfunction unhighlight(s) {\n\t\t\tif (s == null) {\n\t\t\t\thighlights = [];\n\t\t\t\tplot.triggerRedrawOverlay();\n\t\t\t}\n\n\t\t\t//if (typeof s == \"number\") {\n\t\t\t//\ts = series[s];\n\t\t\t//}\n\n\t\t\tvar i = indexOfHighlight(s);\n\n\t\t\tif (i != -1) {\n\t\t\t\thighlights.splice(i, 1);\n\t\t\t\tplot.triggerRedrawOverlay();\n\t\t\t}\n\t\t}\n\n\t\tfunction indexOfHighlight(s) {\n\t\t\tfor (var i = 0; i < highlights.length; ++i) {\n\t\t\t\tvar h = highlights[i];\n\t\t\t\tif (h.series == s)\n\t\t\t\t\treturn i;\n\t\t\t}\n\t\t\treturn -1;\n\t\t}\n\n\t\tfunction drawOverlay(plot, octx) {\n\n\t\t\tvar options = plot.getOptions();\n\n\t\t\tvar radius = options.series.pie.radius > 1 ? options.series.pie.radius : maxRadius * options.series.pie.radius;\n\n\t\t\toctx.save();\n\t\t\toctx.translate(centerLeft, centerTop);\n\t\t\toctx.scale(1, options.series.pie.tilt);\n\n\t\t\tfor (var i = 0; i < highlights.length; ++i) {\n\t\t\t\tdrawHighlight(highlights[i].series);\n\t\t\t}\n\n\t\t\tdrawDonutHole(octx);\n\n\t\t\toctx.restore();\n\n\t\t\tfunction drawHighlight(series) {\n\n\t\t\t\tif (series.angle <= 0 || isNaN(series.angle)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t//octx.fillStyle = parseColor(options.series.pie.highlight.color).scale(null, null, null, options.series.pie.highlight.opacity).toString();\n\t\t\t\toctx.fillStyle = \"rgba(255, 255, 255, \" + options.series.pie.highlight.opacity + \")\"; // this is temporary until we have access to parseColor\n\t\t\t\toctx.beginPath();\n\t\t\t\tif (Math.abs(series.angle - Math.PI * 2) > 0.000000001) {\n\t\t\t\t\toctx.moveTo(0, 0); // Center of the pie\n\t\t\t\t}\n\t\t\t\toctx.arc(0, 0, radius, series.startAngle, series.startAngle + series.angle / 2, false);\n\t\t\t\toctx.arc(0, 0, radius, series.startAngle + series.angle / 2, series.startAngle + series.angle, false);\n\t\t\t\toctx.closePath();\n\t\t\t\toctx.fill();\n\t\t\t}\n\t\t}\n\t} // end init (plugin body)\n\n\t// define pie specific options and their default values\n\n\tvar options = {\n\t\tseries: {\n\t\t\tpie: {\n\t\t\t\tshow: false,\n\t\t\t\tradius: \"auto\",\t// actual radius of the visible pie (based on full calculated radius if <=1, or hard pixel value)\n\t\t\t\tinnerRadius: 0, /* for donut */\n\t\t\t\tstartAngle: 3/2,\n\t\t\t\ttilt: 1,\n\t\t\t\tshadow: {\n\t\t\t\t\tleft: 5,\t// shadow left offset\n\t\t\t\t\ttop: 15,\t// shadow top offset\n\t\t\t\t\talpha: 0.02\t// shadow alpha\n\t\t\t\t},\n\t\t\t\toffset: {\n\t\t\t\t\ttop: 0,\n\t\t\t\t\tleft: \"auto\"\n\t\t\t\t},\n\t\t\t\tstroke: {\n\t\t\t\t\tcolor: \"#fff\",\n\t\t\t\t\twidth: 1\n\t\t\t\t},\n\t\t\t\tlabel: {\n\t\t\t\t\tshow: \"auto\",\n\t\t\t\t\tformatter: function(label, slice) {\n\t\t\t\t\t\treturn \"<div style='font-size:x-small;text-align:center;padding:2px;color:\" + slice.color + \";'>\" + label + \"<br/>\" + Math.round(slice.percent) + \"%</div>\";\n\t\t\t\t\t},\t// formatter function\n\t\t\t\t\tradius: 1,\t// radius at which to place the labels (based on full calculated radius if <=1, or hard pixel value)\n\t\t\t\t\tbackground: {\n\t\t\t\t\t\tcolor: null,\n\t\t\t\t\t\topacity: 0\n\t\t\t\t\t},\n\t\t\t\t\tthreshold: 0\t// percentage at which to hide the label (i.e. the slice is too narrow)\n\t\t\t\t},\n\t\t\t\tcombine: {\n\t\t\t\t\tthreshold: -1,\t// percentage at which to combine little slices into one larger slice\n\t\t\t\t\tcolor: null,\t// color to give the new slice (auto-generated if null)\n\t\t\t\t\tlabel: \"Other\"\t// label to give the new slice\n\t\t\t\t},\n\t\t\t\thighlight: {\n\t\t\t\t\t//color: \"#fff\",\t\t// will add this functionality once parseColor is available\n\t\t\t\t\topacity: 0.5\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\t$.plot.plugins.push({\n\t\tinit: init,\n\t\toptions: options,\n\t\tname: \"pie\",\n\t\tversion: \"1.1\"\n\t});\n\n})(jQuery);\n","import angular from 'angular';\nimport _ from 'lodash';\nimport $ from 'jquery';\nimport coreModule from 'app/core/core_module';\n\nexport class AnnotationsEditorCtrl {\n  mode: any;\n  datasources: any;\n  annotations: any;\n  currentAnnotation: any;\n  currentDatasource: any;\n  currentIsNew: any;\n\n  annotationDefaults: any = {\n    name: '',\n    datasource: null,\n    iconColor: 'rgba(255, 96, 96, 1)',\n    enable: true,\n    showIn: 0,\n    hide: false,\n  };\n\n  showOptions: any = [{ text: '所有面板', value: 0 }, { text: '指定面板', value: 1 }];\n\n  /** @ngInject */\n  constructor($scope, private datasourceSrv) {\n    $scope.ctrl = this;\n\n    this.mode = 'list';\n    this.datasources = datasourceSrv.getAnnotationSources();\n    this.annotations = $scope.dashboard.annotations.list;\n    this.reset();\n\n    this.onColorChange = this.onColorChange.bind(this);\n  }\n\n  datasourceChanged() {\n    return this.datasourceSrv.get(this.currentAnnotation.datasource).then(ds => {\n      this.currentDatasource = ds;\n    });\n  }\n\n  edit(annotation) {\n    this.currentAnnotation = annotation;\n    this.currentAnnotation.showIn = this.currentAnnotation.showIn || 0;\n    this.currentIsNew = false;\n    this.datasourceChanged();\n    this.mode = 'edit';\n    $('.tooltip.in').remove();\n  }\n\n  reset() {\n    this.currentAnnotation = angular.copy(this.annotationDefaults);\n    this.currentAnnotation.datasource = this.datasources[0].name;\n    this.currentIsNew = true;\n    this.datasourceChanged();\n  }\n\n  update() {\n    this.reset();\n    this.mode = 'list';\n  }\n\n  setupNew() {\n    this.mode = 'new';\n    this.reset();\n  }\n\n  backToList() {\n    this.mode = 'list';\n  }\n\n  move(index, dir) {\n    _.move(this.annotations, index, index + dir);\n  }\n\n  add() {\n    this.annotations.push(this.currentAnnotation);\n    this.reset();\n    this.mode = 'list';\n  }\n\n  removeAnnotation(annotation) {\n    const index = _.indexOf(this.annotations, annotation);\n    this.annotations.splice(index, 1);\n  }\n\n  onColorChange(newColor) {\n    this.currentAnnotation.iconColor = newColor;\n  }\n}\n\ncoreModule.controller('AnnotationsEditorCtrl', AnnotationsEditorCtrl);\n","import _ from 'lodash';\n\n/**\n * This function converts annotation events into set\n * of single events and regions (event consist of two)\n * @param annotations\n * @param options\n */\nexport function makeRegions(annotations, options) {\n  const [regionEvents, singleEvents] = _.partition(annotations, 'regionId');\n  const regions = getRegions(regionEvents, options.range);\n  annotations = _.concat(regions, singleEvents);\n  return annotations;\n}\n\nfunction getRegions(events, range) {\n  const regionEvents = _.filter(events, event => {\n    return event.regionId;\n  });\n  let regions = _.groupBy(regionEvents, 'regionId');\n  regions = _.compact(\n    _.map(regions, regionEvents => {\n      const regionObj = _.head(regionEvents);\n      if (regionEvents && regionEvents.length > 1) {\n        regionObj.timeEnd = regionEvents[1].time;\n        regionObj.isRegion = true;\n        return regionObj;\n      } else {\n        if (regionEvents && regionEvents.length) {\n          // Don't change proper region object\n          if (!regionObj.time || !regionObj.timeEnd) {\n            // This is cut region\n            if (isStartOfRegion(regionObj)) {\n              regionObj.timeEnd = range.to.valueOf() - 1;\n            } else {\n              // Start time = null\n              regionObj.timeEnd = regionObj.time;\n              regionObj.time = range.from.valueOf() + 1;\n            }\n            regionObj.isRegion = true;\n          }\n\n          return regionObj;\n        }\n      }\n    })\n  );\n\n  return regions;\n}\n\nfunction isStartOfRegion(event): boolean {\n  return event.id && event.id === event.regionId;\n}\n\nexport function dedupAnnotations(annotations) {\n  let dedup = [];\n\n  // Split events by annotationId property existence\n  const events = _.partition(annotations, 'id');\n\n  const eventsById = _.groupBy(events[0], 'id');\n  dedup = _.map(eventsById, eventGroup => {\n    if (eventGroup.length > 1 && !_.every(eventGroup, isPanelAlert)) {\n      // Get first non-panel alert\n      return _.find(eventGroup, event => {\n        return event.eventType !== 'panel-alert';\n      });\n    } else {\n      return _.head(eventGroup);\n    }\n  });\n\n  dedup = _.concat(dedup, events[1]);\n  return dedup;\n}\n\nfunction isPanelAlert(event) {\n  return event.eventType === 'panel-alert';\n}\n","import './editor_ctrl';\n\nimport angular from 'angular';\nimport _ from 'lodash';\nimport coreModule from 'app/core/core_module';\nimport { makeRegions, dedupAnnotations } from './events_processing';\n\nexport class AnnotationsSrv {\n  globalAnnotationsPromise: any;\n  alertStatesPromise: any;\n\n  /** @ngInject */\n  constructor(private $rootScope, private $q, private datasourceSrv, private backendSrv, private timeSrv) {\n    $rootScope.onAppEvent('refresh', this.clearCache.bind(this), $rootScope);\n    $rootScope.onAppEvent('dashboard-initialized', this.clearCache.bind(this), $rootScope);\n  }\n\n  clearCache() {\n    this.globalAnnotationsPromise = null;\n    this.alertStatesPromise = null;\n  }\n\n  getAnnotations(options) {\n    return this.$q\n      .all([this.getGlobalAnnotations(options), this.getAlertStates(options)])\n      .then(results => {\n        // combine the annotations and flatten results\n        let annotations = _.flattenDeep(results[0]);\n\n        // filter out annotations that do not belong to requesting panel\n        annotations = _.filter(annotations, item => {\n          // if event has panel id and query is of type dashboard then panel and requesting panel id must match\n          if (item.panelId && item.source.type === 'dashboard') {\n            return item.panelId === options.panel.id;\n          }\n          return true;\n        });\n\n        annotations = dedupAnnotations(annotations);\n        annotations = makeRegions(annotations, options);\n\n        // look for alert state for this panel\n        const alertState = _.find(results[1], { panelId: options.panel.id });\n\n        return {\n          annotations: annotations,\n          alertState: alertState,\n        };\n      })\n      .catch(err => {\n        if (!err.message && err.data && err.data.message) {\n          err.message = err.data.message;\n        }\n        console.log('AnnotationSrv.query error', err);\n        this.$rootScope.appEvent('alert-error', ['注释查询失败', err.message || err]);\n        return [];\n      });\n  }\n\n  getAlertStates(options) {\n    if (!options.dashboard.id) {\n      return this.$q.when([]);\n    }\n\n    // ignore if no alerts\n    if (options.panel && !options.panel.alert) {\n      return this.$q.when([]);\n    }\n\n    if (options.range.raw.to !== 'now') {\n      return this.$q.when([]);\n    }\n\n    if (this.alertStatesPromise) {\n      return this.alertStatesPromise;\n    }\n\n    this.alertStatesPromise = this.backendSrv.get('/api/alerts/states-for-dashboard', {\n      dashboardId: options.dashboard.id,\n    });\n    return this.alertStatesPromise;\n  }\n\n  getGlobalAnnotations(options) {\n    const dashboard = options.dashboard;\n\n    if (this.globalAnnotationsPromise) {\n      return this.globalAnnotationsPromise;\n    }\n\n    const range = this.timeSrv.timeRange();\n    const promises = [];\n\n    for (const annotation of dashboard.annotations.list) {\n      if (!annotation.enable) {\n        continue;\n      }\n\n      if (annotation.snapshotData) {\n        return this.translateQueryResult(annotation, annotation.snapshotData);\n      }\n\n      promises.push(\n        this.datasourceSrv\n          .get(annotation.datasource)\n          .then(datasource => {\n            // issue query against data source\n            return datasource.annotationQuery({\n              range: range,\n              rangeRaw: range.raw,\n              annotation: annotation,\n              dashboard: dashboard,\n            });\n          })\n          .then(results => {\n            // store response in annotation object if this is a snapshot call\n            if (dashboard.snapshot) {\n              annotation.snapshotData = angular.copy(results);\n            }\n            // translate result\n            return this.translateQueryResult(annotation, results);\n          })\n      );\n    }\n\n    this.globalAnnotationsPromise = this.$q.all(promises);\n    return this.globalAnnotationsPromise;\n  }\n\n  saveAnnotationEvent(annotation) {\n    this.globalAnnotationsPromise = null;\n    return this.backendSrv.post('/api/annotations', annotation);\n  }\n\n  updateAnnotationEvent(annotation) {\n    this.globalAnnotationsPromise = null;\n    return this.backendSrv.put(`/api/annotations/${annotation.id}`, annotation);\n  }\n\n  deleteAnnotationEvent(annotation) {\n    this.globalAnnotationsPromise = null;\n    let deleteUrl = `/api/annotations/${annotation.id}`;\n    if (annotation.isRegion) {\n      deleteUrl = `/api/annotations/region/${annotation.regionId}`;\n    }\n\n    return this.backendSrv.delete(deleteUrl);\n  }\n\n  translateQueryResult(annotation, results) {\n    // if annotation has snapshotData\n    // make clone and remove it\n    if (annotation.snapshotData) {\n      annotation = angular.copy(annotation);\n      delete annotation.snapshotData;\n    }\n\n    for (const item of results) {\n      item.source = annotation;\n    }\n    return results;\n  }\n}\n\ncoreModule.service('annotationsSrv', AnnotationsSrv);\n","import _ from 'lodash';\nimport moment from 'moment';\nimport { coreModule } from 'app/core/core';\nimport { MetricsPanelCtrl } from 'app/plugins/sdk';\nimport { AnnotationEvent } from './event';\n\nexport class EventEditorCtrl {\n  panelCtrl: MetricsPanelCtrl;\n  event: AnnotationEvent;\n  timeRange: { from: number; to: number };\n  form: any;\n  close: any;\n  timeFormated: string;\n\n  /** @ngInject */\n  constructor(private annotationsSrv) {\n    this.event.panelId = this.panelCtrl.panel.id;\n    this.event.dashboardId = this.panelCtrl.dashboard.id;\n\n    // Annotations query returns time as Unix timestamp in milliseconds\n    this.event.time = tryEpochToMoment(this.event.time);\n    if (this.event.isRegion) {\n      this.event.timeEnd = tryEpochToMoment(this.event.timeEnd);\n    }\n\n    this.timeFormated = this.panelCtrl.dashboard.formatDate(this.event.time);\n  }\n\n  save() {\n    if (!this.form.$valid) {\n      return;\n    }\n\n    const saveModel = _.cloneDeep(this.event);\n    saveModel.time = saveModel.time.valueOf();\n    saveModel.timeEnd = 0;\n\n    if (saveModel.isRegion) {\n      saveModel.timeEnd = this.event.timeEnd.valueOf();\n\n      if (saveModel.timeEnd < saveModel.time) {\n        console.log('invalid time');\n        return;\n      }\n    }\n\n    if (saveModel.id) {\n      this.annotationsSrv\n        .updateAnnotationEvent(saveModel)\n        .then(() => {\n          this.panelCtrl.refresh();\n          this.close();\n        })\n        .catch(() => {\n          this.panelCtrl.refresh();\n          this.close();\n        });\n    } else {\n      this.annotationsSrv\n        .saveAnnotationEvent(saveModel)\n        .then(() => {\n          this.panelCtrl.refresh();\n          this.close();\n        })\n        .catch(() => {\n          this.panelCtrl.refresh();\n          this.close();\n        });\n    }\n  }\n\n  delete() {\n    return this.annotationsSrv\n      .deleteAnnotationEvent(this.event)\n      .then(() => {\n        this.panelCtrl.refresh();\n        this.close();\n      })\n      .catch(() => {\n        this.panelCtrl.refresh();\n        this.close();\n      });\n  }\n}\n\nfunction tryEpochToMoment(timestamp) {\n  if (timestamp && _.isNumber(timestamp)) {\n    const epoch = Number(timestamp);\n    return moment(epoch);\n  } else {\n    return timestamp;\n  }\n}\n\nexport function eventEditor() {\n  return {\n    restrict: 'E',\n    controller: EventEditorCtrl,\n    bindToController: true,\n    controllerAs: 'ctrl',\n    templateUrl: 'public/app/features/annotations/partials/event_editor.html',\n    scope: {\n      panelCtrl: '=',\n      event: '=',\n      close: '&',\n    },\n  };\n}\n\ncoreModule.directive('eventEditor', eventEditor);\n","export class AnnotationEvent {\n  dashboardId: number;\n  panelId: number;\n  userId: number;\n  time: any;\n  timeEnd: any;\n  isRegion: boolean;\n  text: string;\n  type: string;\n  tags: string;\n}\n","import _ from 'lodash';\nimport moment from 'moment';\nimport tinycolor from 'tinycolor2';\nimport { MetricsPanelCtrl } from 'app/plugins/sdk';\nimport { AnnotationEvent } from './event';\nimport {\n  OK_COLOR,\n  ALERTING_COLOR,\n  NO_DATA_COLOR,\n  DEFAULT_ANNOTATION_COLOR,\n  REGION_FILL_ALPHA,\n} from 'app/core/utils/colors';\n\nexport class EventManager {\n  event: AnnotationEvent;\n  editorOpen: boolean;\n\n  constructor(private panelCtrl: MetricsPanelCtrl) {}\n\n  editorClosed() {\n    this.event = null;\n    this.editorOpen = false;\n    this.panelCtrl.render();\n  }\n\n  editorOpened() {\n    this.editorOpen = true;\n  }\n\n  updateTime(range) {\n    if (!this.event) {\n      this.event = new AnnotationEvent();\n      this.event.dashboardId = this.panelCtrl.dashboard.id;\n      this.event.panelId = this.panelCtrl.panel.id;\n    }\n\n    // update time\n    this.event.time = moment(range.from);\n    this.event.isRegion = false;\n    if (range.to) {\n      this.event.timeEnd = moment(range.to);\n      this.event.isRegion = true;\n    }\n\n    this.panelCtrl.render();\n  }\n\n  editEvent(event, elem?) {\n    this.event = event;\n    this.panelCtrl.render();\n  }\n\n  addFlotEvents(annotations, flotOptions) {\n    if (!this.event && annotations.length === 0) {\n      return;\n    }\n\n    const types = {\n      $__alerting: {\n        color: ALERTING_COLOR,\n        position: 'BOTTOM',\n        markerSize: 5,\n      },\n      $__ok: {\n        color: OK_COLOR,\n        position: 'BOTTOM',\n        markerSize: 5,\n      },\n      $__no_data: {\n        color: NO_DATA_COLOR,\n        position: 'BOTTOM',\n        markerSize: 5,\n      },\n      $__editing: {\n        color: DEFAULT_ANNOTATION_COLOR,\n        position: 'BOTTOM',\n        markerSize: 5,\n      },\n    };\n\n    if (this.event) {\n      if (this.event.isRegion) {\n        annotations = [\n          {\n            isRegion: true,\n            min: this.event.time.valueOf(),\n            timeEnd: this.event.timeEnd.valueOf(),\n            text: this.event.text,\n            eventType: '$__editing',\n            editModel: this.event,\n          },\n        ];\n      } else {\n        annotations = [\n          {\n            min: this.event.time.valueOf(),\n            text: this.event.text,\n            editModel: this.event,\n            eventType: '$__editing',\n          },\n        ];\n      }\n    } else {\n      // annotations from query\n      for (let i = 0; i < annotations.length; i++) {\n        const item = annotations[i];\n\n        // add properties used by jquery flot events\n        item.min = item.time;\n        item.max = item.time;\n        item.eventType = item.source.name;\n\n        if (item.newState) {\n          item.eventType = '$__' + item.newState;\n          continue;\n        }\n\n        if (!types[item.source.name]) {\n          types[item.source.name] = {\n            color: item.source.iconColor,\n            position: 'BOTTOM',\n            markerSize: 5,\n          };\n        }\n      }\n    }\n\n    const regions = getRegions(annotations);\n    addRegionMarking(regions, flotOptions);\n\n    const eventSectionHeight = 20;\n    const eventSectionMargin = 7;\n    flotOptions.grid.eventSectionHeight = eventSectionMargin;\n    flotOptions.xaxis.eventSectionHeight = eventSectionHeight;\n\n    flotOptions.events = {\n      levels: _.keys(types).length + 1,\n      data: annotations,\n      types: types,\n      manager: this,\n    };\n  }\n}\n\nfunction getRegions(events) {\n  return _.filter(events, 'isRegion');\n}\n\nfunction addRegionMarking(regions, flotOptions) {\n  const markings = flotOptions.grid.markings;\n  const defaultColor = DEFAULT_ANNOTATION_COLOR;\n  let fillColor;\n\n  _.each(regions, region => {\n    if (region.source) {\n      fillColor = region.source.iconColor || defaultColor;\n    } else {\n      fillColor = defaultColor;\n    }\n\n    fillColor = addAlphaToRGB(fillColor, REGION_FILL_ALPHA);\n    markings.push({\n      xaxis: { from: region.min, to: region.timeEnd },\n      color: fillColor,\n    });\n  });\n}\n\nfunction addAlphaToRGB(colorString: string, alpha: number): string {\n  const color = tinycolor(colorString);\n  if (color.isValid()) {\n    color.setAlpha(alpha);\n    return color.toRgbString();\n  } else {\n    return colorString;\n  }\n}\n","import _ from 'lodash';\nimport $ from 'jquery';\nimport coreModule from 'app/core/core_module';\nimport alertDef from '../alerting/state/alertDef';\n\n/** @ngInject */\nexport function annotationTooltipDirective($sanitize, dashboardSrv, contextSrv, $compile) {\n  function sanitizeString(str) {\n    try {\n      return $sanitize(str);\n    } catch (err) {\n      console.log('Could not sanitize annotation string, html escaping instead');\n      return _.escape(str);\n    }\n  }\n\n  return {\n    restrict: 'E',\n    scope: {\n      event: '=',\n      onEdit: '&',\n    },\n    link: (scope, element) => {\n      const event = scope.event;\n      let title = event.title;\n      let text = event.text;\n      const dashboard = dashboardSrv.getCurrent();\n\n      let tooltip = '<div class=\"graph-annotation\">';\n      let titleStateClass = '';\n\n      if (event.alertId) {\n        const stateModel = alertDef.getStateDisplayModel(event.newState);\n        titleStateClass = stateModel.stateClass;\n        title = `<i class=\"icon-gf ${stateModel.iconClass}\"></i> ${stateModel.text}`;\n        text = alertDef.getAlertAnnotationInfo(event);\n        if (event.text) {\n          text = text + '<br />' + event.text;\n        }\n      } else if (title) {\n        text = title + '<br />' + (_.isString(text) ? text : '');\n        title = '';\n      }\n\n      let header = `<div class=\"graph-annotation__header\">`;\n      if (event.login) {\n        header += `<div class=\"graph-annotation__user\" bs-tooltip=\"'由${event.login}创建'\"><img src=\"${\n          event.avatarUrl\n        }\" /></div>`;\n      }\n      header += `\n          <span class=\"graph-annotation__title ${titleStateClass}\">${sanitizeString(title)}</span>\n          <span class=\"graph-annotation__time\">${dashboard.formatDate(event.min)}</span>\n      `;\n\n      // Show edit icon only for users with at least Editor role\n      if (event.id && dashboard.meta.canEdit) {\n        header += `\n          <span class=\"pointer graph-annotation__edit-icon\" ng-click=\"onEdit()\">\n            <i class=\"fa fa-pencil-square\"></i>\n          </span>\n        `;\n      }\n\n      header += `</div>`;\n      tooltip += header;\n      tooltip += '<div class=\"graph-annotation__body\">';\n\n      if (text) {\n        tooltip += '<div>' + sanitizeString(text.replace(/\\n/g, '<br>')) + '</div>';\n      }\n\n      const tags = event.tags;\n\n      if (tags && tags.length) {\n        scope.tags = tags;\n        tooltip +=\n          '<span class=\"label label-tag small\" ng-repeat=\"tag in tags\" tag-color-from-name=\"tag\">{{tag}}</span><br/>';\n      }\n\n      tooltip += '</div>';\n      tooltip += '</div>';\n\n      const $tooltip = $(tooltip);\n      $tooltip.appendTo(element);\n\n      $compile(element.contents())(scope);\n    },\n  };\n}\n\ncoreModule.directive('annotationTooltip', annotationTooltipDirective);\n","import { AnnotationsSrv } from './annotations_srv';\nimport { eventEditor } from './event_editor';\nimport { EventManager } from './event_manager';\nimport { AnnotationEvent } from './event';\nimport { annotationTooltipDirective } from './annotation_tooltip';\n\nexport { AnnotationsSrv, eventEditor, EventManager, AnnotationEvent, annotationTooltipDirective };\n","import kbn from 'app/core/utils/kbn';\nimport { assignModelProperties } from 'app/core/utils/model_utils';\n\nexport interface Variable {\n  setValue(option);\n  updateOptions();\n  dependsOn(variable);\n  setValueFromUrl(urlValue);\n  getValueForUrl();\n  getSaveModel();\n}\n\nexport let variableTypes = {};\nexport { assignModelProperties };\n\nexport function containsVariable(...args: any[]) {\n  let variableName = args[args.length - 1];\n  let str = args[0] || '';\n\n  for (let i = 1; i < args.length - 1; i++) {\n    str += ' ' + args[i] || '';\n  }\n\n  variableName = kbn.regexEscape(variableName);\n  const findVarRegex = new RegExp('\\\\$(' + variableName + ')(?:\\\\W|$)|\\\\[\\\\[(' + variableName + ')\\\\]\\\\]', 'g');\n  const match = findVarRegex.exec(str);\n  return match !== null;\n}\n","import _ from 'lodash';\nimport coreModule from 'app/core/core_module';\nimport { variableTypes } from './variable';\nimport appEvents from 'app/core/app_events';\n\nexport class VariableEditorCtrl {\n  /** @ngInject */\n  constructor($scope, datasourceSrv, variableSrv, templateSrv) {\n    $scope.variableTypes = variableTypes;\n    $scope.ctrl = {};\n    $scope.namePattern = /^(?!__).*$/;\n    $scope._ = _;\n    $scope.optionsLimit = 20;\n\n    $scope.refreshOptions = [\n      { value: 0, text: '从不' },\n      { value: 1, text: '仪表盘加载时' },\n      { value: 2, text: '时间区间改变时' },\n    ];\n\n    $scope.sortOptions = [\n      { value: 0, text: '关闭' },\n      { value: 1, text: '按字母顺序排列(升序)' },\n      { value: 2, text: '按字母顺序排列(降序)' },\n      { value: 3, text: '按数值排列(升序)' },\n      { value: 4, text: '按数值排列(降序)' },\n      { value: 5, text: '按字母顺序排列(不区分大小写, 升序)' },\n      { value: 6, text: '按字母顺序排列(不区分大小写, 降序)' },\n    ];\n\n    $scope.hideOptions = [{ value: 0, text: '' }, { value: 1, text: '标签' }, { value: 2, text: '变量' }];\n\n    $scope.init = () => {\n      $scope.mode = 'list';\n\n      $scope.variables = variableSrv.variables;\n      $scope.reset();\n\n      $scope.$watch('mode', val => {\n        if (val === 'new') {\n          $scope.reset();\n        }\n      });\n    };\n\n    $scope.setMode = mode => {\n      $scope.mode = mode;\n    };\n\n    $scope.add = () => {\n      if ($scope.isValid()) {\n        variableSrv.addVariable($scope.current);\n        $scope.update();\n      }\n    };\n\n    $scope.isValid = () => {\n      if (!$scope.ctrl.form.$valid) {\n        return false;\n      }\n\n      if (!$scope.current.name.match(/^\\w+$/)) {\n        appEvents.emit('alert-warning', ['Validation', '变量名中只允许使用单词和数字字符']);\n        return false;\n      }\n\n      const sameName = _.find($scope.variables, { name: $scope.current.name });\n      if (sameName && sameName !== $scope.current) {\n        appEvents.emit('alert-warning', ['Validation', '已存在同名的变量']);\n        return false;\n      }\n\n      if (\n        $scope.current.type === 'query' &&\n        $scope.current.query.match(new RegExp('\\\\$' + $scope.current.name + '(/| |$)'))\n      ) {\n        appEvents.emit('alert-warning', [\n          'Validation',\n          '查询不能包含对自身的引用。 变量: $' + $scope.current.name,\n        ]);\n        return false;\n      }\n\n      return true;\n    };\n\n    $scope.validate = () => {\n      $scope.infoText = '';\n      if ($scope.current.type === 'adhoc' && $scope.current.datasource !== null) {\n        $scope.infoText = 'Adhoc过滤器会自动应用于所有以此数据源为目标的查询';\n        datasourceSrv.get($scope.current.datasource).then(ds => {\n          if (!ds.getTagKeys) {\n            $scope.infoText = '此数据源尚不支持adhoc过滤器。';\n          }\n        });\n      }\n    };\n\n    $scope.runQuery = () => {\n      $scope.optionsLimit = 20;\n      return variableSrv.updateOptions($scope.current).catch(err => {\n        if (err.data && err.data.message) {\n          err.message = err.data.message;\n        }\n        appEvents.emit('alert-error', ['Templating', '无法初始化模板变量: ' + err.message]);\n      });\n    };\n\n    $scope.edit = variable => {\n      $scope.current = variable;\n      $scope.currentIsNew = false;\n      $scope.mode = 'edit';\n      $scope.validate();\n    };\n\n    $scope.duplicate = variable => {\n      const clone = _.cloneDeep(variable.getSaveModel());\n      $scope.current = variableSrv.createVariableFromModel(clone);\n      $scope.current.name = 'copy_of_' + variable.name;\n      variableSrv.addVariable($scope.current);\n    };\n\n    $scope.update = () => {\n      if ($scope.isValid()) {\n        $scope.runQuery().then(() => {\n          $scope.reset();\n          $scope.mode = 'list';\n          templateSrv.updateTemplateData();\n        });\n      }\n    };\n\n    $scope.reset = () => {\n      $scope.currentIsNew = true;\n      $scope.current = variableSrv.createVariableFromModel({ type: 'query' });\n\n      // this is done here in case a new data source type variable was added\n      $scope.datasources = _.filter(datasourceSrv.getMetricSources(), ds => {\n        return !ds.meta.mixed && ds.value !== null;\n      });\n\n      $scope.datasourceTypes = _($scope.datasources)\n        .uniqBy('meta.id')\n        .map(ds => {\n          return { text: ds.meta.name, value: ds.meta.id };\n        })\n        .value();\n    };\n\n    $scope.typeChanged = function() {\n      const old = $scope.current;\n      $scope.current = variableSrv.createVariableFromModel({\n        type: $scope.current.type,\n      });\n      $scope.current.name = old.name;\n      $scope.current.hide = old.hide;\n      $scope.current.label = old.label;\n\n      const oldIndex = _.indexOf(this.variables, old);\n      if (oldIndex !== -1) {\n        this.variables[oldIndex] = $scope.current;\n      }\n\n      $scope.validate();\n    };\n\n    $scope.removeVariable = variable => {\n      variableSrv.removeVariable(variable);\n    };\n\n    $scope.showMoreOptions = () => {\n      $scope.optionsLimit += 20;\n    };\n  }\n}\n\ncoreModule.controller('VariableEditorCtrl', VariableEditorCtrl);\n","import kbn from 'app/core/utils/kbn';\nimport _ from 'lodash';\n\nfunction luceneEscape(value) {\n  return value.replace(/([\\!\\*\\+\\-\\=<>\\s\\&\\|\\(\\)\\[\\]\\{\\}\\^\\~\\?\\:\\\\/\"])/g, '\\\\$1');\n}\n\nexport class TemplateSrv {\n  variables: any[];\n\n  /*\n   * This regex matches 3 types of variable reference with an optional format specifier\n   * \\$(\\w+)                          $var1\n   * \\[\\[([\\s\\S]+?)(?::(\\w+))?\\]\\]    [[var2]] or [[var2:fmt2]]\n   * \\${(\\w+)(?::(\\w+))?}             ${var3} or ${var3:fmt3}\n   */\n  private regex = /\\$(\\w+)|\\[\\[([\\s\\S]+?)(?::(\\w+))?\\]\\]|\\${(\\w+)(?::(\\w+))?}/g;\n  private index = {};\n  private grafanaVariables = {};\n  private builtIns = {};\n\n  constructor() {\n    this.builtIns['__interval'] = { text: '1s', value: '1s' };\n    this.builtIns['__interval_ms'] = { text: '100', value: '100' };\n  }\n\n  init(variables) {\n    this.variables = variables;\n    this.updateTemplateData();\n  }\n\n  updateTemplateData() {\n    this.index = {};\n\n    for (let i = 0; i < this.variables.length; i++) {\n      const variable = this.variables[i];\n\n      if (!variable.current || (!variable.current.isNone && !variable.current.value)) {\n        continue;\n      }\n\n      this.index[variable.name] = variable;\n    }\n  }\n\n  variableInitialized(variable) {\n    this.index[variable.name] = variable;\n  }\n\n  getAdhocFilters(datasourceName) {\n    let filters = [];\n\n    for (let i = 0; i < this.variables.length; i++) {\n      const variable = this.variables[i];\n      if (variable.type !== 'adhoc') {\n        continue;\n      }\n\n      if (variable.datasource === datasourceName) {\n        filters = filters.concat(variable.filters);\n      }\n\n      if (variable.datasource.indexOf('$') === 0) {\n        if (this.replace(variable.datasource) === datasourceName) {\n          filters = filters.concat(variable.filters);\n        }\n      }\n    }\n\n    return filters;\n  }\n\n  luceneFormat(value) {\n    if (typeof value === 'string') {\n      return luceneEscape(value);\n    }\n    if (value instanceof Array && value.length === 0) {\n      return '__empty__';\n    }\n    const quotedValues = _.map(value, val => {\n      return '\"' + luceneEscape(val) + '\"';\n    });\n    return '(' + quotedValues.join(' OR ') + ')';\n  }\n\n  formatValue(value, format, variable) {\n    // for some scopedVars there is no variable\n    variable = variable || {};\n\n    if (typeof format === 'function') {\n      return format(value, variable, this.formatValue);\n    }\n\n    switch (format) {\n      case 'regex': {\n        if (typeof value === 'string') {\n          return kbn.regexEscape(value);\n        }\n\n        const escapedValues = _.map(value, kbn.regexEscape);\n        if (escapedValues.length === 1) {\n          return escapedValues[0];\n        }\n        return '(' + escapedValues.join('|') + ')';\n      }\n      case 'lucene': {\n        return this.luceneFormat(value);\n      }\n      case 'pipe': {\n        if (typeof value === 'string') {\n          return value;\n        }\n        return value.join('|');\n      }\n      case 'distributed': {\n        if (typeof value === 'string') {\n          return value;\n        }\n        return this.distributeVariable(value, variable.name);\n      }\n      case 'csv': {\n        if (_.isArray(value)) {\n          return value.join(',');\n        }\n        return value;\n      }\n      default: {\n        if (_.isArray(value)) {\n          return '{' + value.join(',') + '}';\n        }\n        return value;\n      }\n    }\n  }\n\n  setGrafanaVariable(name, value) {\n    this.grafanaVariables[name] = value;\n  }\n\n  getVariableName(expression) {\n    this.regex.lastIndex = 0;\n    const match = this.regex.exec(expression);\n    if (!match) {\n      return null;\n    }\n    return match[1] || match[2];\n  }\n\n  variableExists(expression) {\n    const name = this.getVariableName(expression);\n    return name && this.index[name] !== void 0;\n  }\n\n  highlightVariablesAsHtml(str) {\n    if (!str || !_.isString(str)) {\n      return str;\n    }\n\n    str = _.escape(str);\n    this.regex.lastIndex = 0;\n    return str.replace(this.regex, (match, var1, var2, fmt2, var3) => {\n      if (this.index[var1 || var2 || var3] || this.builtIns[var1 || var2 || var3]) {\n        return '<span class=\"template-variable\">' + match + '</span>';\n      }\n      return match;\n    });\n  }\n\n  getAllValue(variable) {\n    if (variable.allValue) {\n      return variable.allValue;\n    }\n    const values = [];\n    for (let i = 1; i < variable.options.length; i++) {\n      values.push(variable.options[i].value);\n    }\n    return values;\n  }\n\n  replace(target, scopedVars?, format?) {\n    if (!target) {\n      return target;\n    }\n\n    let variable, systemValue, value, fmt;\n    this.regex.lastIndex = 0;\n\n    return target.replace(this.regex, (match, var1, var2, fmt2, var3, fmt3) => {\n      variable = this.index[var1 || var2 || var3];\n      fmt = fmt2 || fmt3 || format;\n      if (scopedVars) {\n        value = scopedVars[var1 || var2 || var3];\n        if (value) {\n          return this.formatValue(value.value, fmt, variable);\n        }\n      }\n\n      if (!variable) {\n        return match;\n      }\n\n      systemValue = this.grafanaVariables[variable.current.value];\n      if (systemValue) {\n        return this.formatValue(systemValue, fmt, variable);\n      }\n\n      value = variable.current.value;\n      if (this.isAllValue(value)) {\n        value = this.getAllValue(variable);\n        // skip formatting of custom all values\n        if (variable.allValue) {\n          return this.replace(value);\n        }\n      }\n\n      const res = this.formatValue(value, fmt, variable);\n      return res;\n    });\n  }\n\n  isAllValue(value) {\n    return value === '$__all' || (Array.isArray(value) && value[0] === '$__all');\n  }\n\n  replaceWithText(target, scopedVars) {\n    if (!target) {\n      return target;\n    }\n\n    let variable;\n    this.regex.lastIndex = 0;\n\n    return target.replace(this.regex, (match, var1, var2, fmt2, var3) => {\n      if (scopedVars) {\n        const option = scopedVars[var1 || var2 || var3];\n        if (option) {\n          return option.text;\n        }\n      }\n\n      variable = this.index[var1 || var2 || var3];\n      if (!variable) {\n        return match;\n      }\n\n      return this.grafanaVariables[variable.current.value] || variable.current.text;\n    });\n  }\n\n  fillVariableValuesForUrl(params, scopedVars) {\n    _.each(this.variables, variable => {\n      if (scopedVars && scopedVars[variable.name] !== void 0) {\n        if (scopedVars[variable.name].skipUrlSync) {\n          return;\n        }\n        params['var-' + variable.name] = scopedVars[variable.name].value;\n      } else {\n        if (variable.skipUrlSync) {\n          return;\n        }\n        params['var-' + variable.name] = variable.getValueForUrl();\n      }\n    });\n  }\n\n  distributeVariable(value, variable) {\n    value = _.map(value, (val, index) => {\n      if (index !== 0) {\n        return variable + '=' + val;\n      } else {\n        return val;\n      }\n    });\n    return value.join(',');\n  }\n}\n\nexport default new TemplateSrv();\n","export class Edge {\n  inputNode: Node;\n  outputNode: Node;\n\n  _linkTo(node, direction) {\n    if (direction <= 0) {\n      node.inputEdges.push(this);\n    }\n\n    if (direction >= 0) {\n      node.outputEdges.push(this);\n    }\n\n    node.edges.push(this);\n  }\n\n  link(inputNode: Node, outputNode: Node) {\n    this.unlink();\n    this.inputNode = inputNode;\n    this.outputNode = outputNode;\n\n    this._linkTo(inputNode, 1);\n    this._linkTo(outputNode, -1);\n    return this;\n  }\n\n  unlink() {\n    let pos;\n    const inode = this.inputNode;\n    const onode = this.outputNode;\n\n    if (!(inode && onode)) {\n      return;\n    }\n\n    pos = inode.edges.indexOf(this);\n    if (pos > -1) {\n      inode.edges.splice(pos, 1);\n    }\n\n    pos = onode.edges.indexOf(this);\n    if (pos > -1) {\n      onode.edges.splice(pos, 1);\n    }\n\n    pos = inode.outputEdges.indexOf(this);\n    if (pos > -1) {\n      inode.outputEdges.splice(pos, 1);\n    }\n\n    pos = onode.inputEdges.indexOf(this);\n    if (pos > -1) {\n      onode.inputEdges.splice(pos, 1);\n    }\n\n    this.inputNode = null;\n    this.outputNode = null;\n  }\n}\n\nexport class Node {\n  name: string;\n  edges: Edge[];\n  inputEdges: Edge[];\n  outputEdges: Edge[];\n\n  constructor(name: string) {\n    this.name = name;\n    this.edges = [];\n    this.inputEdges = [];\n    this.outputEdges = [];\n  }\n\n  getEdgeFrom(from: string | Node): Edge {\n    if (!from) {\n      return null;\n    }\n\n    if (typeof from === 'object') {\n      return this.inputEdges.find(e => e.inputNode.name === from.name);\n    }\n\n    return this.inputEdges.find(e => e.inputNode.name === from);\n  }\n\n  getEdgeTo(to: string | Node): Edge {\n    if (!to) {\n      return null;\n    }\n\n    if (typeof to === 'object') {\n      return this.outputEdges.find(e => e.outputNode.name === to.name);\n    }\n\n    return this.outputEdges.find(e => e.outputNode.name === to);\n  }\n\n  getOptimizedInputEdges(): Edge[] {\n    const toBeRemoved = [];\n    this.inputEdges.forEach(e => {\n      const inputEdgesNodes = e.inputNode.inputEdges.map(e => e.inputNode);\n\n      inputEdgesNodes.forEach(n => {\n        const edgeToRemove = n.getEdgeTo(this.name);\n        if (edgeToRemove) {\n          toBeRemoved.push(edgeToRemove);\n        }\n      });\n    });\n\n    return this.inputEdges.filter(e => toBeRemoved.indexOf(e) === -1);\n  }\n}\n\nexport class Graph {\n  nodes = {};\n\n  constructor() {}\n\n  createNode(name: string): Node {\n    const n = new Node(name);\n    this.nodes[name] = n;\n    return n;\n  }\n\n  createNodes(names: string[]): Node[] {\n    const nodes = [];\n    names.forEach(name => {\n      nodes.push(this.createNode(name));\n    });\n    return nodes;\n  }\n\n  link(input: string | string[] | Node | Node[], output: string | string[] | Node | Node[]): Edge[] {\n    let inputArr = [];\n    let outputArr = [];\n    const inputNodes = [];\n    const outputNodes = [];\n\n    if (input instanceof Array) {\n      inputArr = input;\n    } else {\n      inputArr = [input];\n    }\n\n    if (output instanceof Array) {\n      outputArr = output;\n    } else {\n      outputArr = [output];\n    }\n\n    for (let n = 0; n < inputArr.length; n++) {\n      const i = inputArr[n];\n      if (typeof i === 'string') {\n        inputNodes.push(this.getNode(i));\n      } else {\n        inputNodes.push(i);\n      }\n    }\n\n    for (let n = 0; n < outputArr.length; n++) {\n      const i = outputArr[n];\n      if (typeof i === 'string') {\n        outputNodes.push(this.getNode(i));\n      } else {\n        outputNodes.push(i);\n      }\n    }\n\n    const edges = [];\n    inputNodes.forEach(input => {\n      outputNodes.forEach(output => {\n        edges.push(this.createEdge().link(input, output));\n      });\n    });\n    return edges;\n  }\n\n  createEdge(): Edge {\n    return new Edge();\n  }\n\n  getNode(name: string): Node {\n    return this.nodes[name];\n  }\n}\n\nexport const printGraph = (g: Graph) => {\n  Object.keys(g.nodes).forEach(name => {\n    const n = g.nodes[name];\n    let outputEdges = n.outputEdges.map(e => e.outputNode.name).join(', ');\n    if (!outputEdges) {\n      outputEdges = '<none>';\n    }\n    let inputEdges = n.inputEdges.map(e => e.inputNode.name).join(', ');\n    if (!inputEdges) {\n      inputEdges = '<none>';\n    }\n    console.log(`${n.name}:\\n - links to:   ${outputEdges}\\n - links from: ${inputEdges}`);\n  });\n};\n","import angular from 'angular';\nimport _ from 'lodash';\nimport coreModule from 'app/core/core_module';\nimport { variableTypes } from './variable';\nimport { Graph } from 'app/core/utils/dag';\n\nexport class VariableSrv {\n  dashboard: any;\n  variables: any;\n\n  /** @ngInject */\n  constructor(private $rootScope, private $q, private $location, private $injector, private templateSrv) {\n    // update time variant variables\n    $rootScope.$on('refresh', this.onDashboardRefresh.bind(this), $rootScope);\n    $rootScope.$on('template-variable-value-updated', this.updateUrlParamsWithCurrentVariables.bind(this), $rootScope);\n  }\n\n  init(dashboard) {\n    this.dashboard = dashboard;\n\n    // create working class models representing variables\n    this.variables = dashboard.templating.list = dashboard.templating.list.map(this.createVariableFromModel.bind(this));\n    this.templateSrv.init(this.variables);\n\n    // init variables\n    for (const variable of this.variables) {\n      variable.initLock = this.$q.defer();\n    }\n\n    const queryParams = this.$location.search();\n    return this.$q\n      .all(\n        this.variables.map(variable => {\n          return this.processVariable(variable, queryParams);\n        })\n      )\n      .then(() => {\n        this.templateSrv.updateTemplateData();\n      });\n  }\n\n  onDashboardRefresh(evt, payload) {\n    if (payload && payload.fromVariableValueUpdated) {\n      return Promise.resolve({});\n    }\n\n    const promises = this.variables.filter(variable => variable.refresh === 2).map(variable => {\n      const previousOptions = variable.options.slice();\n\n      return variable.updateOptions().then(() => {\n        if (angular.toJson(previousOptions) !== angular.toJson(variable.options)) {\n          this.$rootScope.$emit('template-variable-value-updated');\n        }\n      });\n    });\n\n    return this.$q.all(promises);\n  }\n\n  processVariable(variable, queryParams) {\n    const dependencies = [];\n\n    for (const otherVariable of this.variables) {\n      if (variable.dependsOn(otherVariable)) {\n        dependencies.push(otherVariable.initLock.promise);\n      }\n    }\n\n    return this.$q\n      .all(dependencies)\n      .then(() => {\n        const urlValue = queryParams['var-' + variable.name];\n        if (urlValue !== void 0) {\n          return variable.setValueFromUrl(urlValue).then(variable.initLock.resolve);\n        }\n\n        if (variable.refresh === 1 || variable.refresh === 2) {\n          return variable.updateOptions().then(variable.initLock.resolve);\n        }\n\n        variable.initLock.resolve();\n      })\n      .finally(() => {\n        this.templateSrv.variableInitialized(variable);\n        delete variable.initLock;\n      });\n  }\n\n  createVariableFromModel(model) {\n    const ctor = variableTypes[model.type].ctor;\n    if (!ctor) {\n      throw {\n        message: '无法找到变量构造函数 ' + model.type,\n      };\n    }\n\n    const variable = this.$injector.instantiate(ctor, { model: model });\n    return variable;\n  }\n\n  addVariable(variable) {\n    this.variables.push(variable);\n    this.templateSrv.updateTemplateData();\n    this.dashboard.updateSubmenuVisibility();\n  }\n\n  removeVariable(variable) {\n    const index = _.indexOf(this.variables, variable);\n    this.variables.splice(index, 1);\n    this.templateSrv.updateTemplateData();\n    this.dashboard.updateSubmenuVisibility();\n  }\n\n  updateOptions(variable) {\n    return variable.updateOptions();\n  }\n\n  variableUpdated(variable, emitChangeEvents?) {\n    // if there is a variable lock ignore cascading update because we are in a boot up scenario\n    if (variable.initLock) {\n      return this.$q.when();\n    }\n\n    const g = this.createGraph();\n    const node = g.getNode(variable.name);\n    let promises = [];\n    if (node) {\n      promises = node.getOptimizedInputEdges().map(e => {\n        return this.updateOptions(this.variables.find(v => v.name === e.inputNode.name));\n      });\n    }\n\n    return this.$q.all(promises).then(() => {\n      if (emitChangeEvents) {\n        this.$rootScope.$emit('template-variable-value-updated');\n        this.$rootScope.$broadcast('refresh', { fromVariableValueUpdated: true });\n      }\n    });\n  }\n\n  selectOptionsForCurrentValue(variable) {\n    let i, y, value, option;\n    const selected: any = [];\n\n    for (i = 0; i < variable.options.length; i++) {\n      option = variable.options[i];\n      option.selected = false;\n      if (_.isArray(variable.current.value)) {\n        for (y = 0; y < variable.current.value.length; y++) {\n          value = variable.current.value[y];\n          if (option.value === value) {\n            option.selected = true;\n            selected.push(option);\n          }\n        }\n      } else if (option.value === variable.current.value) {\n        option.selected = true;\n        selected.push(option);\n      }\n    }\n\n    return selected;\n  }\n\n  validateVariableSelectionState(variable) {\n    if (!variable.current) {\n      variable.current = {};\n    }\n\n    if (_.isArray(variable.current.value)) {\n      let selected = this.selectOptionsForCurrentValue(variable);\n\n      // if none pick first\n      if (selected.length === 0) {\n        selected = variable.options[0];\n      } else {\n        selected = {\n          value: _.map(selected, val => {\n            return val.value;\n          }),\n          text: _.map(selected, val => {\n            return val.text;\n          }).join(' + '),\n        };\n      }\n\n      return variable.setValue(selected);\n    } else {\n      const currentOption = _.find(variable.options, {\n        text: variable.current.text,\n      });\n      if (currentOption) {\n        return variable.setValue(currentOption);\n      } else {\n        if (!variable.options.length) {\n          return Promise.resolve();\n        }\n        return variable.setValue(variable.options[0]);\n      }\n    }\n  }\n\n  setOptionFromUrl(variable, urlValue) {\n    let promise = this.$q.when();\n\n    if (variable.refresh) {\n      promise = variable.updateOptions();\n    }\n\n    return promise.then(() => {\n      let option = _.find(variable.options, op => {\n        return op.text === urlValue || op.value === urlValue;\n      });\n\n      let defaultText = urlValue;\n      const defaultValue = urlValue;\n\n      if (!option && _.isArray(urlValue)) {\n        defaultText = [];\n\n        for (let n = 0; n < urlValue.length; n++) {\n          const t = _.find(variable.options, op => {\n            return op.value === urlValue[n];\n          });\n\n          if (t) {\n            defaultText.push(t.text);\n          }\n        }\n      }\n\n      option = option || { text: defaultText, value: defaultValue };\n      return variable.setValue(option);\n    });\n  }\n\n  setOptionAsCurrent(variable, option) {\n    variable.current = _.cloneDeep(option);\n\n    if (_.isArray(variable.current.text)) {\n      variable.current.text = variable.current.text.join(' + ');\n    }\n\n    this.selectOptionsForCurrentValue(variable);\n    return this.variableUpdated(variable);\n  }\n\n  updateUrlParamsWithCurrentVariables() {\n    // update url\n    const params = this.$location.search();\n\n    // remove variable params\n    _.each(params, (value, key) => {\n      if (key.indexOf('var-') === 0) {\n        delete params[key];\n      }\n    });\n\n    // add new values\n    this.templateSrv.fillVariableValuesForUrl(params);\n    // update url\n    this.$location.search(params);\n  }\n\n  setAdhocFilter(options) {\n    let variable = _.find(this.variables, {\n      type: 'adhoc',\n      datasource: options.datasource,\n    });\n    if (!variable) {\n      variable = this.createVariableFromModel({\n        name: 'Filters',\n        type: 'adhoc',\n        datasource: options.datasource,\n      });\n      this.addVariable(variable);\n    }\n\n    const filters = variable.filters;\n    let filter = _.find(filters, { key: options.key, value: options.value });\n\n    if (!filter) {\n      filter = { key: options.key, value: options.value };\n      filters.push(filter);\n    }\n\n    filter.operator = options.operator;\n    this.variableUpdated(variable, true);\n  }\n\n  createGraph() {\n    const g = new Graph();\n\n    this.variables.forEach(v1 => {\n      g.createNode(v1.name);\n\n      this.variables.forEach(v2 => {\n        if (v1 === v2) {\n          return;\n        }\n\n        if (v1.dependsOn(v2)) {\n          g.link(v1.name, v2.name);\n        }\n      });\n    });\n\n    return g;\n  }\n}\n\ncoreModule.service('variableSrv', VariableSrv);\n","import _ from 'lodash';\nimport kbn from 'app/core/utils/kbn';\nimport { Variable, assignModelProperties, variableTypes } from './variable';\n\nexport class IntervalVariable implements Variable {\n  name: string;\n  auto_count: number; // tslint:disable-line variable-name\n  auto_min: number; // tslint:disable-line variable-name\n  options: any;\n  auto: boolean;\n  query: string;\n  refresh: number;\n  current: any;\n  skipUrlSync: boolean;\n\n  defaults = {\n    type: 'interval',\n    name: '',\n    hide: 0,\n    label: '',\n    refresh: 2,\n    options: [],\n    current: {},\n    query: '1m,10m,30m,1h,6h,12h,1d,7d,14d,30d',\n    auto: false,\n    auto_min: '10s',\n    auto_count: 30,\n    skipUrlSync: false,\n  };\n\n  /** @ngInject */\n  constructor(private model, private timeSrv, private templateSrv, private variableSrv) {\n    assignModelProperties(this, model, this.defaults);\n    this.refresh = 2;\n  }\n\n  getSaveModel() {\n    assignModelProperties(this.model, this, this.defaults);\n    return this.model;\n  }\n\n  setValue(option) {\n    this.updateAutoValue();\n    return this.variableSrv.setOptionAsCurrent(this, option);\n  }\n\n  updateAutoValue() {\n    if (!this.auto) {\n      return;\n    }\n\n    // add auto option if missing\n    if (this.options.length && this.options[0].text !== 'auto') {\n      this.options.unshift({\n        text: 'auto',\n        value: '$__auto_interval_' + this.name,\n      });\n    }\n\n    const res = kbn.calculateInterval(this.timeSrv.timeRange(), this.auto_count, this.auto_min);\n    this.templateSrv.setGrafanaVariable('$__auto_interval_' + this.name, res.interval);\n    // for backward compatibility, to be removed eventually\n    this.templateSrv.setGrafanaVariable('$__auto_interval', res.interval);\n  }\n\n  updateOptions() {\n    // extract options between quotes and/or comma\n    this.options = _.map(this.query.match(/([\"'])(.*?)\\1|\\w+/g), text => {\n      text = text.replace(/[\"']+/g, '');\n      return { text: text.trim(), value: text.trim() };\n    });\n\n    this.updateAutoValue();\n    return this.variableSrv.validateVariableSelectionState(this);\n  }\n\n  dependsOn(variable) {\n    return false;\n  }\n\n  setValueFromUrl(urlValue) {\n    this.updateAutoValue();\n    return this.variableSrv.setOptionFromUrl(this, urlValue);\n  }\n\n  getValueForUrl() {\n    return this.current.value;\n  }\n}\n\nvariableTypes['interval'] = {\n  name: 'Interval',\n  ctor: IntervalVariable,\n  description: '定义时间间隔 (如 1m, 1h, 1d)',\n};\n","import _ from 'lodash';\nimport kbn from 'app/core/utils/kbn';\nimport { Variable, containsVariable, assignModelProperties, variableTypes } from './variable';\n\nfunction getNoneOption() {\n  return { text: 'None', value: '', isNone: true };\n}\n\nexport class QueryVariable implements Variable {\n  datasource: any;\n  query: any;\n  regex: any;\n  sort: any;\n  options: any;\n  current: any;\n  refresh: number;\n  hide: number;\n  name: string;\n  multi: boolean;\n  includeAll: boolean;\n  useTags: boolean;\n  tagsQuery: string;\n  tagValuesQuery: string;\n  tags: any[];\n  skipUrlSync: boolean;\n\n  defaults = {\n    type: 'query',\n    label: null,\n    query: '',\n    regex: '',\n    sort: 0,\n    datasource: null,\n    refresh: 0,\n    hide: 0,\n    name: '',\n    multi: false,\n    includeAll: false,\n    allValue: null,\n    options: [],\n    current: {},\n    tags: [],\n    useTags: false,\n    tagsQuery: '',\n    tagValuesQuery: '',\n    skipUrlSync: false,\n  };\n\n  /** @ngInject */\n  constructor(private model, private datasourceSrv, private templateSrv, private variableSrv, private timeSrv) {\n    // copy model properties to this instance\n    assignModelProperties(this, model, this.defaults);\n  }\n\n  getSaveModel() {\n    // copy back model properties to model\n    assignModelProperties(this.model, this, this.defaults);\n\n    // remove options\n    if (this.refresh !== 0) {\n      this.model.options = [];\n    }\n\n    return this.model;\n  }\n\n  setValue(option) {\n    return this.variableSrv.setOptionAsCurrent(this, option);\n  }\n\n  setValueFromUrl(urlValue) {\n    return this.variableSrv.setOptionFromUrl(this, urlValue);\n  }\n\n  getValueForUrl() {\n    if (this.current.text === 'All') {\n      return 'All';\n    }\n    return this.current.value;\n  }\n\n  updateOptions() {\n    return this.datasourceSrv\n      .get(this.datasource)\n      .then(this.updateOptionsFromMetricFindQuery.bind(this))\n      .then(this.updateTags.bind(this))\n      .then(this.variableSrv.validateVariableSelectionState.bind(this.variableSrv, this));\n  }\n\n  updateTags(datasource) {\n    if (this.useTags) {\n      return this.metricFindQuery(datasource, this.tagsQuery).then(results => {\n        this.tags = [];\n        for (let i = 0; i < results.length; i++) {\n          this.tags.push(results[i].text);\n        }\n        return datasource;\n      });\n    } else {\n      delete this.tags;\n    }\n\n    return datasource;\n  }\n\n  getValuesForTag(tagKey) {\n    return this.datasourceSrv.get(this.datasource).then(datasource => {\n      const query = this.tagValuesQuery.replace('$tag', tagKey);\n      return this.metricFindQuery(datasource, query).then(results => {\n        return _.map(results, value => {\n          return value.text;\n        });\n      });\n    });\n  }\n\n  updateOptionsFromMetricFindQuery(datasource) {\n    return this.metricFindQuery(datasource, this.query).then(results => {\n      this.options = this.metricNamesToVariableValues(results);\n      if (this.includeAll) {\n        this.addAllOption();\n      }\n      if (!this.options.length) {\n        this.options.push(getNoneOption());\n      }\n      return datasource;\n    });\n  }\n\n  metricFindQuery(datasource, query) {\n    const options = { range: undefined, variable: this };\n\n    if (this.refresh === 2) {\n      options.range = this.timeSrv.timeRange();\n    }\n\n    return datasource.metricFindQuery(query, options);\n  }\n\n  addAllOption() {\n    this.options.unshift({ text: 'All', value: '$__all' });\n  }\n\n  metricNamesToVariableValues(metricNames) {\n    let regex, options, i, matches;\n    options = [];\n\n    if (this.regex) {\n      regex = kbn.stringToJsRegex(this.templateSrv.replace(this.regex, {}, 'regex'));\n    }\n    for (i = 0; i < metricNames.length; i++) {\n      const item = metricNames[i];\n      let text = item.text === undefined || item.text === null ? item.value : item.text;\n\n      let value = item.value === undefined || item.value === null ? item.text : item.value;\n\n      if (_.isNumber(value)) {\n        value = value.toString();\n      }\n\n      if (_.isNumber(text)) {\n        text = text.toString();\n      }\n\n      if (regex) {\n        matches = regex.exec(value);\n        if (!matches) {\n          continue;\n        }\n        if (matches.length > 1) {\n          value = matches[1];\n          text = matches[1];\n        }\n      }\n\n      options.push({ text: text, value: value });\n    }\n\n    options = _.uniqBy(options, 'value');\n    return this.sortVariableValues(options, this.sort);\n  }\n\n  sortVariableValues(options, sortOrder) {\n    if (sortOrder === 0) {\n      return options;\n    }\n\n    const sortType = Math.ceil(sortOrder / 2);\n    const reverseSort = sortOrder % 2 === 0;\n\n    if (sortType === 1) {\n      options = _.sortBy(options, 'text');\n    } else if (sortType === 2) {\n      options = _.sortBy(options, opt => {\n        const matches = opt.text.match(/.*?(\\d+).*/);\n        if (!matches || matches.length < 2) {\n          return -1;\n        } else {\n          return parseInt(matches[1], 10);\n        }\n      });\n    } else if (sortType === 3) {\n      options = _.sortBy(options, opt => {\n        return _.toLower(opt.text);\n      });\n    }\n\n    if (reverseSort) {\n      options = options.reverse();\n    }\n\n    return options;\n  }\n\n  dependsOn(variable) {\n    return containsVariable(this.query, this.datasource, this.regex, variable.name);\n  }\n}\n\nvariableTypes['query'] = {\n  name: 'Query',\n  ctor: QueryVariable,\n  description: '从数据源查询中获取变量值',\n  supportsMulti: true,\n};\n","import kbn from 'app/core/utils/kbn';\nimport { Variable, containsVariable, assignModelProperties, variableTypes } from './variable';\n\nexport class DatasourceVariable implements Variable {\n  regex: any;\n  query: string;\n  options: any;\n  current: any;\n  refresh: any;\n  skipUrlSync: boolean;\n\n  defaults = {\n    type: 'datasource',\n    name: '',\n    hide: 0,\n    label: '',\n    current: {},\n    regex: '',\n    options: [],\n    query: '',\n    refresh: 1,\n    skipUrlSync: false,\n  };\n\n  /** @ngInject */\n  constructor(private model, private datasourceSrv, private variableSrv, private templateSrv) {\n    assignModelProperties(this, model, this.defaults);\n    this.refresh = 1;\n  }\n\n  getSaveModel() {\n    assignModelProperties(this.model, this, this.defaults);\n\n    // don't persist options\n    this.model.options = [];\n    return this.model;\n  }\n\n  setValue(option) {\n    return this.variableSrv.setOptionAsCurrent(this, option);\n  }\n\n  updateOptions() {\n    const options = [];\n    const sources = this.datasourceSrv.getMetricSources({ skipVariables: true });\n    let regex;\n\n    if (this.regex) {\n      regex = this.templateSrv.replace(this.regex, null, 'regex');\n      regex = kbn.stringToJsRegex(regex);\n    }\n\n    for (let i = 0; i < sources.length; i++) {\n      const source = sources[i];\n      // must match on type\n      if (source.meta.id !== this.query) {\n        continue;\n      }\n\n      if (regex && !regex.exec(source.name)) {\n        continue;\n      }\n\n      options.push({ text: source.name, value: source.name });\n    }\n\n    if (options.length === 0) {\n      options.push({ text: '未找到任何数据源', value: '' });\n    }\n\n    this.options = options;\n    return this.variableSrv.validateVariableSelectionState(this);\n  }\n\n  dependsOn(variable) {\n    if (this.regex) {\n      return containsVariable(this.regex, variable.name);\n    }\n    return false;\n  }\n\n  setValueFromUrl(urlValue) {\n    return this.variableSrv.setOptionFromUrl(this, urlValue);\n  }\n\n  getValueForUrl() {\n    return this.current.value;\n  }\n}\n\nvariableTypes['datasource'] = {\n  name: 'Datasource',\n  ctor: DatasourceVariable,\n  description: '使您能够动态切换多个面板的数据源',\n};\n","import _ from 'lodash';\nimport { Variable, assignModelProperties, variableTypes } from './variable';\n\nexport class CustomVariable implements Variable {\n  query: string;\n  options: any;\n  includeAll: boolean;\n  multi: boolean;\n  current: any;\n  skipUrlSync: boolean;\n\n  defaults = {\n    type: 'custom',\n    name: '',\n    label: '',\n    hide: 0,\n    options: [],\n    current: {},\n    query: '',\n    includeAll: false,\n    multi: false,\n    allValue: null,\n    skipUrlSync: false,\n  };\n\n  /** @ngInject */\n  constructor(private model, private variableSrv) {\n    assignModelProperties(this, model, this.defaults);\n  }\n\n  setValue(option) {\n    return this.variableSrv.setOptionAsCurrent(this, option);\n  }\n\n  getSaveModel() {\n    assignModelProperties(this.model, this, this.defaults);\n    return this.model;\n  }\n\n  updateOptions() {\n    // extract options in comma separated string\n    this.options = _.map(this.query.split(/[,]+/), text => {\n      return { text: text.trim(), value: text.trim() };\n    });\n\n    if (this.includeAll) {\n      this.addAllOption();\n    }\n\n    return this.variableSrv.validateVariableSelectionState(this);\n  }\n\n  addAllOption() {\n    this.options.unshift({ text: 'All', value: '$__all' });\n  }\n\n  dependsOn(variable) {\n    return false;\n  }\n\n  setValueFromUrl(urlValue) {\n    return this.variableSrv.setOptionFromUrl(this, urlValue);\n  }\n\n  getValueForUrl() {\n    if (this.current.text === 'All') {\n      return 'All';\n    }\n    return this.current.value;\n  }\n}\n\nvariableTypes['custom'] = {\n  name: 'Custom',\n  ctor: CustomVariable,\n  description: '手动定义变量值',\n  supportsMulti: true,\n};\n","import { Variable, assignModelProperties, variableTypes } from './variable';\n\nexport class ConstantVariable implements Variable {\n  query: string;\n  options: any[];\n  current: any;\n  skipUrlSync: boolean;\n\n  defaults = {\n    type: 'constant',\n    name: '',\n    hide: 2,\n    label: '',\n    query: '',\n    current: {},\n    options: [],\n    skipUrlSync: false,\n  };\n\n  /** @ngInject */\n  constructor(private model, private variableSrv) {\n    assignModelProperties(this, model, this.defaults);\n  }\n\n  getSaveModel() {\n    assignModelProperties(this.model, this, this.defaults);\n    return this.model;\n  }\n\n  setValue(option) {\n    this.variableSrv.setOptionAsCurrent(this, option);\n  }\n\n  updateOptions() {\n    this.options = [{ text: this.query.trim(), value: this.query.trim() }];\n    this.setValue(this.options[0]);\n    return Promise.resolve();\n  }\n\n  dependsOn(variable) {\n    return false;\n  }\n\n  setValueFromUrl(urlValue) {\n    return this.variableSrv.setOptionFromUrl(this, urlValue);\n  }\n\n  getValueForUrl() {\n    return this.current.value;\n  }\n}\n\nvariableTypes['constant'] = {\n  name: 'Constant',\n  ctor: ConstantVariable,\n  description: '使用一个因此的常, 用于定义你共享的仪表盘的指标前缀',\n};\n","import _ from 'lodash';\nimport { Variable, assignModelProperties, variableTypes } from './variable';\n\nexport class AdhocVariable implements Variable {\n  filters: any[];\n  skipUrlSync: boolean;\n\n  defaults = {\n    type: 'adhoc',\n    name: '',\n    label: '',\n    hide: 0,\n    datasource: null,\n    filters: [],\n    skipUrlSync: false,\n  };\n\n  /** @ngInject */\n  constructor(private model) {\n    assignModelProperties(this, model, this.defaults);\n  }\n\n  setValue(option) {\n    return Promise.resolve();\n  }\n\n  getSaveModel() {\n    assignModelProperties(this.model, this, this.defaults);\n    return this.model;\n  }\n\n  updateOptions() {\n    return Promise.resolve();\n  }\n\n  dependsOn(variable) {\n    return false;\n  }\n\n  setValueFromUrl(urlValue) {\n    if (!_.isArray(urlValue)) {\n      urlValue = [urlValue];\n    }\n\n    this.filters = urlValue.map(item => {\n      const values = item.split('|').map(value => {\n        return this.unescapeDelimiter(value);\n      });\n      return {\n        key: values[0],\n        operator: values[1],\n        value: values[2],\n      };\n    });\n\n    return Promise.resolve();\n  }\n\n  getValueForUrl() {\n    return this.filters.map(filter => {\n      return [filter.key, filter.operator, filter.value]\n        .map(value => {\n          return this.escapeDelimiter(value);\n        })\n        .join('|');\n    });\n  }\n\n  escapeDelimiter(value) {\n    return value.replace(/\\|/g, '__gfp__');\n  }\n\n  unescapeDelimiter(value) {\n    return value.replace(/__gfp__/g, '|');\n  }\n\n  setFilters(filters: any[]) {\n    this.filters = filters;\n  }\n}\n\nvariableTypes['adhoc'] = {\n  name: 'Ad hoc filters',\n  ctor: AdhocVariable,\n  description: '添加键/值对过滤器',\n};\n","import angular from 'angular';\nimport _ from 'lodash';\nimport Remarkable from 'remarkable';\n\nexport class PluginEditCtrl {\n  model: any;\n  pluginIcon: string;\n  pluginId: any;\n  includes: any;\n  readmeHtml: any;\n  includedDatasources: any;\n  tab: string;\n  navModel: any;\n  hasDashboards: any;\n  preUpdateHook: () => any;\n  postUpdateHook: () => any;\n\n  /** @ngInject */\n  constructor(private $scope, private $rootScope, private backendSrv, private $sce, private $routeParams, navModelSrv) {\n    this.pluginId = $routeParams.pluginId;\n    this.preUpdateHook = () => Promise.resolve();\n    this.postUpdateHook = () => Promise.resolve();\n\n    this.init();\n  }\n\n  setNavModel(model) {\n    let defaultTab = 'readme';\n\n    this.navModel = {\n      main: {\n        img: model.info.logos.large,\n        subTitle: model.info.author.name,\n        url: '',\n        text: model.name,\n        breadcrumbs: [{ title: '插件', url: 'plugins' }],\n        children: [\n          {\n            icon: 'fa fa-fw fa-file-text-o',\n            id: 'readme',\n            text: 'Readme',\n            url: `plugins/${this.model.id}/edit?tab=readme`,\n          },\n        ],\n      },\n    };\n\n    if (model.type === 'app') {\n      this.navModel.main.children.push({\n        icon: 'gicon gicon-cog',\n        id: 'config',\n        text: '配置',\n        url: `plugins/${this.model.id}/edit?tab=config`,\n      });\n\n      const hasDashboards = _.find(model.includes, { type: 'dashboard' });\n\n      if (hasDashboards) {\n        this.navModel.main.children.push({\n          icon: 'gicon gicon-dashboard',\n          id: 'dashboards',\n          text: '仪表盘',\n          url: `plugins/${this.model.id}/edit?tab=dashboards`,\n        });\n      }\n\n      defaultTab = 'config';\n    }\n\n    this.tab = this.$routeParams.tab || defaultTab;\n\n    for (const tab of this.navModel.main.children) {\n      if (tab.id === this.tab) {\n        tab.active = true;\n      }\n    }\n  }\n\n  init() {\n    return this.backendSrv.get(`/api/plugins/${this.pluginId}/settings`).then(result => {\n      this.model = result;\n      this.pluginIcon = this.getPluginIcon(this.model.type);\n\n      this.model.dependencies.plugins.forEach(plug => {\n        plug.icon = this.getPluginIcon(plug.type);\n      });\n\n      this.includes = _.map(result.includes, plug => {\n        plug.icon = this.getPluginIcon(plug.type);\n        return plug;\n      });\n\n      this.setNavModel(this.model);\n      return this.initReadme();\n    });\n  }\n\n  initReadme() {\n    return this.backendSrv.get(`/api/plugins/${this.pluginId}/markdown/readme`).then(res => {\n      const md = new Remarkable({\n        linkify: true,\n      });\n      this.readmeHtml = this.$sce.trustAsHtml(md.render(res));\n    });\n  }\n\n  getPluginIcon(type) {\n    switch (type) {\n      case 'datasource':\n        return 'icon-gf icon-gf-datasources';\n      case 'panel':\n        return 'icon-gf icon-gf-panel';\n      case 'app':\n        return 'icon-gf icon-gf-apps';\n      case 'page':\n        return 'icon-gf icon-gf-endpoint-tiny';\n      case 'dashboard':\n        return 'icon-gf icon-gf-dashboard';\n      default:\n        return 'icon-gf icon-gf-apps';\n    }\n  }\n\n  update() {\n    this.preUpdateHook()\n      .then(() => {\n        const updateCmd = _.extend(\n          {\n            enabled: this.model.enabled,\n            pinned: this.model.pinned,\n            jsonData: this.model.jsonData,\n            secureJsonData: this.model.secureJsonData,\n          },\n          {}\n        );\n        return this.backendSrv.post(`/api/plugins/${this.pluginId}/settings`, updateCmd);\n      })\n      .then(this.postUpdateHook)\n      .then(res => {\n        window.location.href = window.location.href;\n      });\n  }\n\n  importDashboards() {\n    return Promise.resolve();\n  }\n\n  setPreUpdateHook(callback: () => any) {\n    this.preUpdateHook = callback;\n  }\n\n  setPostUpdateHook(callback: () => any) {\n    this.postUpdateHook = callback;\n  }\n\n  updateAvailable() {\n    const modalScope = this.$scope.$new(true);\n    modalScope.plugin = this.model;\n\n    this.$rootScope.appEvent('show-modal', {\n      src: 'public/app/features/plugins/partials/update_instructions.html',\n      scope: modalScope,\n    });\n  }\n\n  enable() {\n    this.model.enabled = true;\n    this.model.pinned = true;\n    this.update();\n  }\n\n  disable() {\n    this.model.enabled = false;\n    this.model.pinned = false;\n    this.update();\n  }\n}\n\nangular.module('grafana.controllers').controller('PluginEditCtrl', PluginEditCtrl);\n","import './editor_ctrl';\nimport coreModule from 'app/core/core_module';\n\nimport templateSrv from './template_srv';\nimport { VariableSrv } from './variable_srv';\nimport { IntervalVariable } from './interval_variable';\nimport { QueryVariable } from './query_variable';\nimport { DatasourceVariable } from './datasource_variable';\nimport { CustomVariable } from './custom_variable';\nimport { ConstantVariable } from './constant_variable';\nimport { AdhocVariable } from './adhoc_variable';\n\ncoreModule.factory('templateSrv', () => {\n  return templateSrv;\n});\n\nexport {\n  VariableSrv,\n  IntervalVariable,\n  QueryVariable,\n  DatasourceVariable,\n  CustomVariable,\n  ConstantVariable,\n  AdhocVariable,\n};\n","import angular from 'angular';\nimport _ from 'lodash';\n\nconst pluginInfoCache = {};\n\nexport class AppPageCtrl {\n  page: any;\n  pluginId: any;\n  appModel: any;\n  navModel: any;\n\n  /** @ngInject */\n  constructor(private backendSrv, private $routeParams: any, private $rootScope, private navModelSrv) {\n    this.pluginId = $routeParams.pluginId;\n\n    if (pluginInfoCache[this.pluginId]) {\n      this.initPage(pluginInfoCache[this.pluginId]);\n    } else {\n      this.loadPluginInfo();\n    }\n  }\n\n  initPage(app) {\n    this.appModel = app;\n    this.page = _.find(app.includes, { slug: this.$routeParams.slug });\n\n    pluginInfoCache[this.pluginId] = app;\n\n    if (!this.page) {\n      this.$rootScope.appEvent('alert-error', ['App Page Not Found', '']);\n\n      this.navModel = this.navModelSrv.getNotFoundNav();\n      return;\n    }\n\n    const pluginNav = this.navModelSrv.getNav('plugin-page-' + app.id);\n\n    this.navModel = {\n      main: {\n        img: app.info.logos.large,\n        subTitle: app.name,\n        url: '',\n        text: this.page.name,\n        breadcrumbs: [{ title: app.name, url: pluginNav.main.url }],\n      },\n    };\n  }\n\n  loadPluginInfo() {\n    this.backendSrv.get(`/api/plugins/${this.pluginId}/settings`).then(app => {\n      this.initPage(app);\n    });\n  }\n}\n\nangular.module('grafana.controllers').controller('AppPageCtrl', AppPageCtrl);\n","import _ from 'lodash';\nimport coreModule from 'app/core/core_module';\nimport appEvents from 'app/core/app_events';\n\nexport class DashImportListCtrl {\n  dashboards: any[];\n  plugin: any;\n  datasource: any;\n\n  /** @ngInject */\n  constructor($scope, private backendSrv, private $rootScope) {\n    this.dashboards = [];\n\n    backendSrv.get(`/api/plugins/${this.plugin.id}/dashboards`).then(dashboards => {\n      this.dashboards = dashboards;\n    });\n\n    appEvents.on('dashboard-list-import-all', this.importAll.bind(this), $scope);\n  }\n\n  importAll(payload) {\n    return this.importNext(0)\n      .then(() => {\n        payload.resolve('All dashboards imported');\n      })\n      .catch(err => {\n        payload.reject(err);\n      });\n  }\n\n  importNext(index) {\n    return this.import(this.dashboards[index], true).then(() => {\n      if (index + 1 < this.dashboards.length) {\n        return new Promise(resolve => {\n          setTimeout(() => {\n            this.importNext(index + 1).then(() => {\n              resolve();\n            });\n          }, 500);\n        });\n      } else {\n        return Promise.resolve();\n      }\n    });\n  }\n\n  import(dash, overwrite) {\n    const installCmd = {\n      pluginId: this.plugin.id,\n      path: dash.path,\n      overwrite: overwrite,\n      inputs: [],\n    };\n\n    if (this.datasource) {\n      installCmd.inputs.push({\n        name: '*',\n        type: 'datasource',\n        pluginId: this.datasource.type,\n        value: this.datasource.name,\n      });\n    }\n\n    return this.backendSrv.post(`/api/dashboards/import`, installCmd).then(res => {\n      this.$rootScope.appEvent('alert-success', ['仪表盘已导入', dash.title]);\n      _.extend(dash, res);\n    });\n  }\n\n  remove(dash) {\n    this.backendSrv.delete('/api/dashboards/' + dash.importedUri).then(() => {\n      this.$rootScope.appEvent('alert-success', ['仪表盘已删除', dash.title]);\n      dash.imported = false;\n    });\n  }\n}\n\nexport function dashboardImportList() {\n  return {\n    restrict: 'E',\n    templateUrl: 'public/app/features/plugins/import_list/import_list.html',\n    controller: DashImportListCtrl,\n    bindToController: true,\n    controllerAs: 'ctrl',\n    scope: {\n      plugin: '=',\n      datasource: '=',\n    },\n  };\n}\n\ncoreModule.directive('dashboardImportList', dashboardImportList);\n","import angular from 'angular';\nimport _ from 'lodash';\n\nexport class PluginListCtrl {\n  plugins: any[];\n  tabIndex: number;\n  navModel: any;\n  searchQuery: string;\n  allPlugins: any[];\n\n  /** @ngInject */\n  constructor(private backendSrv: any, $location, navModelSrv) {\n    this.tabIndex = 0;\n    this.navModel = navModelSrv.getNav('cfg', 'plugins', 0);\n\n    this.backendSrv.get('api/plugins', { embedded: 0 }).then(plugins => {\n      this.plugins = plugins;\n      this.allPlugins = plugins;\n    });\n  }\n\n  onQueryUpdated() {\n    const regex = new RegExp(this.searchQuery, 'ig');\n    this.plugins = _.filter(this.allPlugins, item => {\n      return regex.test(item.name) || regex.test(item.type);\n    });\n  }\n}\n\nangular.module('grafana.controllers').controller('PluginListCtrl', PluginListCtrl);\n","import _ from 'lodash';\nimport { toJS } from 'mobx';\nimport config from 'app/core/config';\nimport { coreModule, appEvents } from 'app/core/core';\nimport { store } from 'app/stores/store';\n\nlet datasourceTypes = [];\n\nconst defaults = {\n  name: '',\n  type: 'graphite',\n  url: '',\n  access: 'proxy',\n  jsonData: {},\n  secureJsonFields: {},\n  secureJsonData: {},\n};\n\nlet datasourceCreated = false;\n\nexport class DataSourceEditCtrl {\n  isNew: boolean;\n  datasources: any[];\n  current: any;\n  types: any;\n  testing: any;\n  datasourceMeta: any;\n  editForm: any;\n  gettingStarted: boolean;\n  navModel: any;\n\n  /** @ngInject */\n  constructor(private $q, private backendSrv, private $routeParams, private $location, private datasourceSrv) {\n    if (store.nav.main === null) {\n      store.nav.load('cfg', 'datasources');\n    }\n\n    this.navModel = toJS(store.nav);\n    this.datasources = [];\n\n    this.loadDatasourceTypes().then(() => {\n      if (this.$routeParams.id) {\n        this.getDatasourceById(this.$routeParams.id);\n      } else {\n        this.initNewDatasourceModel();\n      }\n    });\n  }\n\n  initNewDatasourceModel() {\n    this.isNew = true;\n    this.current = _.cloneDeep(defaults);\n\n    // We are coming from getting started\n    if (this.$location.search().gettingstarted) {\n      this.gettingStarted = true;\n      this.current.isDefault = true;\n    }\n\n    this.typeChanged();\n  }\n\n  loadDatasourceTypes() {\n    if (datasourceTypes.length > 0) {\n      this.types = datasourceTypes;\n      return this.$q.when(null);\n    }\n\n    return this.backendSrv.get('/api/plugins', { enabled: 1, type: 'datasource' }).then(plugins => {\n      datasourceTypes = plugins;\n      this.types = plugins;\n    });\n  }\n\n  getDatasourceById(id) {\n    this.backendSrv.get('/api/datasources/' + id).then(ds => {\n      this.isNew = false;\n      this.current = ds;\n\n      if (datasourceCreated) {\n        datasourceCreated = false;\n        this.testDatasource();\n      }\n\n      return this.typeChanged();\n    });\n  }\n\n  userChangedType() {\n    // reset model but keep name & default flag\n    this.current = _.defaults(\n      {\n        id: this.current.id,\n        name: this.current.name,\n        isDefault: this.current.isDefault,\n        type: this.current.type,\n      },\n      _.cloneDeep(defaults)\n    );\n    this.typeChanged();\n  }\n\n  updateNav() {\n    store.nav.initDatasourceEditNav(this.current, this.datasourceMeta, 'datasource-settings');\n    this.navModel = toJS(store.nav);\n  }\n\n  typeChanged() {\n    return this.backendSrv.get('/api/plugins/' + this.current.type + '/settings').then(pluginInfo => {\n      this.datasourceMeta = pluginInfo;\n      this.updateNav();\n    });\n  }\n\n  updateFrontendSettings() {\n    return this.backendSrv.get('/api/frontend/settings').then(settings => {\n      config.datasources = settings.datasources;\n      config.defaultDatasource = settings.defaultDatasource;\n      this.datasourceSrv.init();\n    });\n  }\n\n  testDatasource() {\n    this.datasourceSrv.get(this.current.name).then(datasource => {\n      if (!datasource.testDatasource) {\n        return;\n      }\n\n      this.testing = { done: false, status: 'error' };\n\n      // make test call in no backend cache context\n      this.backendSrv\n        .withNoBackendCache(() => {\n          return datasource\n            .testDatasource()\n            .then(result => {\n              this.testing.message = result.message;\n              this.testing.status = result.status;\n            })\n            .catch(err => {\n              if (err.statusText) {\n                this.testing.message = 'HTTP Error ' + err.statusText;\n              } else {\n                this.testing.message = err.message;\n              }\n            });\n        })\n        .finally(() => {\n          this.testing.done = true;\n        });\n    });\n  }\n\n  saveChanges() {\n    if (!this.editForm.$valid) {\n      return;\n    }\n\n    if (this.current.readOnly) {\n      return;\n    }\n\n    if (this.current.id) {\n      return this.backendSrv.put('/api/datasources/' + this.current.id, this.current).then(result => {\n        this.current = result.datasource;\n        this.updateNav();\n        this.updateFrontendSettings().then(() => {\n          this.testDatasource();\n        });\n      });\n    } else {\n      return this.backendSrv.post('/api/datasources', this.current).then(result => {\n        this.current = result.datasource;\n        this.updateFrontendSettings();\n\n        datasourceCreated = true;\n        this.$location.path('datasources/edit/' + result.id);\n      });\n    }\n  }\n\n  confirmDelete() {\n    this.backendSrv.delete('/api/datasources/' + this.current.id).then(() => {\n      this.$location.path('datasources');\n    });\n  }\n\n  delete(s) {\n    appEvents.emit('confirm-modal', {\n      title: '删除',\n      text: '您确定要删除此数据源吗?',\n      yesText: '删除',\n      icon: 'fa-trash',\n      onConfirm: () => {\n        this.confirmDelete();\n      },\n    });\n  }\n}\n\ncoreModule.controller('DataSourceEditCtrl', DataSourceEditCtrl);\n\ncoreModule.directive('datasourceHttpSettings', () => {\n  return {\n    scope: {\n      current: '=',\n      suggestUrl: '@',\n      noDirectAccess: '@',\n    },\n    templateUrl: 'public/app/features/plugins/partials/ds_http_settings.html',\n    link: {\n      pre: ($scope, elem, attrs) => {\n        // do not show access option if direct access is disabled\n        $scope.showAccessOption = $scope.noDirectAccess !== 'true';\n        $scope.showAccessHelp = false;\n        $scope.toggleAccessHelp = () => {\n          $scope.showAccessHelp = !$scope.showAccessHelp;\n        };\n\n        $scope.getSuggestUrls = () => {\n          return [$scope.suggestUrl];\n        };\n      },\n    },\n  };\n});\n","import { toJS } from 'mobx';\nimport { coreModule } from 'app/core/core';\nimport { store } from 'app/stores/store';\n\nexport class DataSourceDashboardsCtrl {\n  datasourceMeta: any;\n  navModel: any;\n  current: any;\n\n  /** @ngInject */\n  constructor(private backendSrv, private $routeParams) {\n    if (store.nav.main === null) {\n      store.nav.load('cfg', 'datasources');\n    }\n\n    this.navModel = toJS(store.nav);\n\n    if (this.$routeParams.id) {\n      this.getDatasourceById(this.$routeParams.id);\n    }\n  }\n\n  getDatasourceById(id) {\n    this.backendSrv\n      .get('/api/datasources/' + id)\n      .then(ds => {\n        this.current = ds;\n      })\n      .then(this.getPluginInfo.bind(this));\n  }\n\n  updateNav() {\n    store.nav.initDatasourceEditNav(this.current, this.datasourceMeta, 'datasource-dashboards');\n    this.navModel = toJS(store.nav);\n  }\n\n  getPluginInfo() {\n    return this.backendSrv.get('/api/plugins/' + this.current.type + '/settings').then(pluginInfo => {\n      this.datasourceMeta = pluginInfo;\n      this.updateNav();\n    });\n  }\n}\n\ncoreModule.controller('DataSourceDashboardsCtrl', DataSourceDashboardsCtrl);\n","import coreModule from '../../core/core_module';\nimport _ from 'lodash';\n\nexport class DataSourcesCtrl {\n  datasources: any;\n  unfiltered: any;\n  navModel: any;\n  searchQuery: string;\n\n  /** @ngInject */\n  constructor(private $scope, private backendSrv, private datasourceSrv, private navModelSrv) {\n    this.navModel = this.navModelSrv.getNav('cfg', 'datasources', 0);\n    backendSrv.get('/api/datasources').then(result => {\n      this.datasources = result;\n      this.unfiltered = result;\n    });\n  }\n\n  onQueryUpdated() {\n    const regex = new RegExp(this.searchQuery, 'ig');\n    this.datasources = _.filter(this.unfiltered, item => {\n      regex.lastIndex = 0;\n      return regex.test(item.name) || regex.test(item.type);\n    });\n  }\n\n  removeDataSourceConfirmed(ds) {\n    this.backendSrv\n      .delete('/api/datasources/' + ds.id)\n      .then(\n        () => {\n          this.$scope.appEvent('alert-success', ['Datasource deleted', '']);\n        },\n        () => {\n          this.$scope.appEvent('alert-error', ['Unable to delete datasource', '']);\n        }\n      )\n      .then(() => {\n        this.backendSrv.get('/api/datasources').then(result => {\n          this.datasources = result;\n        });\n        this.backendSrv.get('/api/frontend/settings').then(settings => {\n          this.datasourceSrv.init(settings.datasources);\n        });\n      });\n  }\n\n  removeDataSource(ds) {\n    this.$scope.appEvent('confirm-modal', {\n      title: '删除',\n      text: '确定要删除数据源: ' + ds.name + '?',\n      yesText: '删除',\n      icon: 'fa-trash',\n      onConfirm: () => {\n        this.removeDataSourceConfirmed(ds);\n      },\n    });\n  }\n}\n\ncoreModule.controller('DataSourcesCtrl', DataSourcesCtrl);\n","import config from 'app/core/config';\nimport _ from 'lodash';\nimport $ from 'jquery';\nimport { appEvents, profiler } from 'app/core/core';\nimport { PanelModel } from 'app/features/dashboard/panel_model';\nimport Remarkable from 'remarkable';\nimport { GRID_CELL_HEIGHT, GRID_CELL_VMARGIN, LS_PANEL_COPY_KEY } from 'app/core/constants';\nimport store from 'app/core/store';\n\nconst TITLE_HEIGHT = 27;\nconst PANEL_BORDER = 2;\n\nimport { Emitter } from 'app/core/core';\n\nexport class PanelCtrl {\n  panel: any;\n  error: any;\n  dashboard: any;\n  editorTabIndex: number;\n  pluginName: string;\n  pluginId: string;\n  editorTabs: any;\n  $scope: any;\n  $injector: any;\n  $location: any;\n  $timeout: any;\n  fullscreen: boolean;\n  inspector: any;\n  editModeInitiated: boolean;\n  editMode: any;\n  height: any;\n  containerHeight: any;\n  events: Emitter;\n  timing: any;\n  loading: boolean;\n\n  constructor($scope, $injector) {\n    this.$injector = $injector;\n    this.$location = $injector.get('$location');\n    this.$scope = $scope;\n    this.$timeout = $injector.get('$timeout');\n    this.editorTabIndex = 0;\n    this.events = this.panel.events;\n    this.timing = {};\n\n    const plugin = config.panels[this.panel.type];\n    if (plugin) {\n      this.pluginId = plugin.id;\n      this.pluginName = plugin.name;\n    }\n\n    $scope.$on('refresh', () => this.refresh());\n    $scope.$on('component-did-mount', () => this.panelDidMount());\n\n    $scope.$on('$destroy', () => {\n      this.events.emit('panel-teardown');\n      this.events.removeAllListeners();\n    });\n  }\n\n  init() {\n    this.events.emit('panel-initialized');\n    this.publishAppEvent('panel-initialized', { scope: this.$scope });\n  }\n\n  panelDidMount() {\n    this.events.emit('component-did-mount');\n  }\n\n  renderingCompleted() {\n    profiler.renderingCompleted(this.panel.id, this.timing);\n  }\n\n  refresh() {\n    this.events.emit('refresh', null);\n  }\n\n  publishAppEvent(evtName, evt) {\n    this.$scope.$root.appEvent(evtName, evt);\n  }\n\n  changeView(fullscreen, edit) {\n    this.publishAppEvent('panel-change-view', {\n      fullscreen: fullscreen,\n      edit: edit,\n      panelId: this.panel.id,\n    });\n  }\n\n  viewPanel() {\n    this.changeView(true, false);\n  }\n\n  editPanel() {\n    this.changeView(true, true);\n  }\n\n  exitFullscreen() {\n    this.changeView(false, false);\n  }\n\n  initEditMode() {\n    this.editorTabs = [];\n    this.addEditorTab('通用', 'public/app/partials/panelgeneral.html');\n    this.editModeInitiated = true;\n    this.events.emit('init-edit-mode', null);\n\n    const urlTab = (this.$injector.get('$routeParams').tab || '').toLowerCase();\n    if (urlTab) {\n      this.editorTabs.forEach((tab, i) => {\n        if (tab.title.toLowerCase() === urlTab) {\n          this.editorTabIndex = i;\n        }\n      });\n    }\n  }\n\n  changeTab(newIndex) {\n    this.editorTabIndex = newIndex;\n    const route = this.$injector.get('$route');\n    route.current.params.tab = this.editorTabs[newIndex].title.toLowerCase();\n    route.updateParams();\n  }\n\n  addEditorTab(title, directiveFn, index?) {\n    const editorTab = { title, directiveFn };\n\n    if (_.isString(directiveFn)) {\n      editorTab.directiveFn = () => {\n        return { templateUrl: directiveFn };\n      };\n    }\n    if (index) {\n      this.editorTabs.splice(index, 0, editorTab);\n    } else {\n      this.editorTabs.push(editorTab);\n    }\n  }\n\n  getMenu() {\n    const menu = [];\n    menu.push({\n      text: '查看',\n      click: 'ctrl.viewPanel();',\n      icon: 'fa fa-fw fa-eye',\n      shortcut: 'v',\n    });\n\n    if (this.dashboard.meta.canEdit) {\n      menu.push({\n        text: '编辑',\n        click: 'ctrl.editPanel();',\n        role: 'Editor',\n        icon: 'fa fa-fw fa-edit',\n        shortcut: 'e',\n      });\n    }\n\n    menu.push({\n      text: '分享',\n      click: 'ctrl.sharePanel();',\n      icon: 'fa fa-fw fa-share',\n      shortcut: 'p s',\n    });\n\n    // Additional items from sub-class\n    menu.push(...this.getAdditionalMenuItems());\n\n    const extendedMenu = this.getExtendedMenu();\n    menu.push({\n      text: '更多 ...',\n      click: '',\n      icon: 'fa fa-fw fa-cube',\n      submenu: extendedMenu,\n    });\n\n    if (this.dashboard.meta.canEdit) {\n      menu.push({ divider: true, role: 'Editor' });\n      menu.push({\n        text: '移除',\n        click: 'ctrl.removePanel();',\n        role: 'Editor',\n        icon: 'fa fa-fw fa-trash',\n        shortcut: 'p r',\n      });\n    }\n\n    return menu;\n  }\n\n  getExtendedMenu() {\n    const menu = [];\n    if (!this.fullscreen && this.dashboard.meta.canEdit) {\n      menu.push({\n        text: '创建副本',\n        click: 'ctrl.duplicate()',\n        role: 'Editor',\n        shortcut: 'p d',\n      });\n\n      menu.push({\n        text: '复制',\n        click: 'ctrl.copyPanel()',\n        role: 'Editor',\n      });\n    }\n\n    menu.push({\n      text: '面板 JSON',\n      click: 'ctrl.editPanelJson(); dismiss();',\n    });\n\n    this.events.emit('init-panel-actions', menu);\n    return menu;\n  }\n\n  // Override in sub-class to add items before extended menu\n  getAdditionalMenuItems() {\n    return [];\n  }\n\n  otherPanelInFullscreenMode() {\n    return this.dashboard.meta.fullscreen && !this.fullscreen;\n  }\n\n  calculatePanelHeight() {\n    if (this.fullscreen) {\n      const docHeight = $(window).height();\n      const editHeight = Math.floor(docHeight * 0.4);\n      const fullscreenHeight = Math.floor(docHeight * 0.8);\n      this.containerHeight = this.editMode ? editHeight : fullscreenHeight;\n    } else {\n      this.containerHeight = this.panel.gridPos.h * GRID_CELL_HEIGHT + (this.panel.gridPos.h - 1) * GRID_CELL_VMARGIN;\n    }\n\n    if (this.panel.soloMode) {\n      this.containerHeight = $(window).height();\n    }\n\n    this.height = this.containerHeight - (PANEL_BORDER + TITLE_HEIGHT);\n  }\n\n  render(payload?) {\n    this.timing.renderStart = new Date().getTime();\n    this.events.emit('render', payload);\n  }\n\n  duplicate() {\n    this.dashboard.duplicatePanel(this.panel);\n    this.$timeout(() => {\n      this.$scope.$root.$broadcast('render');\n    });\n  }\n\n  removePanel() {\n    this.publishAppEvent('panel-remove', {\n      panelId: this.panel.id,\n    });\n  }\n\n  editPanelJson() {\n    const editScope = this.$scope.$root.$new();\n    editScope.object = this.panel.getSaveModel();\n    editScope.updateHandler = this.replacePanel.bind(this);\n    editScope.enableCopy = true;\n\n    this.publishAppEvent('show-modal', {\n      src: 'public/app/partials/edit_json.html',\n      scope: editScope,\n    });\n  }\n\n  copyPanel() {\n    store.set(LS_PANEL_COPY_KEY, JSON.stringify(this.panel.getSaveModel()));\n    appEvents.emit('alert-success', ['面板已复制。 打开添加面板进行粘贴']);\n  }\n\n  replacePanel(newPanel, oldPanel) {\n    const dashboard = this.dashboard;\n    const index = _.findIndex(dashboard.panels, panel => {\n      return panel.id === oldPanel.id;\n    });\n\n    const deletedPanel = dashboard.panels.splice(index, 1);\n    this.dashboard.events.emit('panel-removed', deletedPanel);\n\n    newPanel = new PanelModel(newPanel);\n    newPanel.id = oldPanel.id;\n\n    dashboard.panels.splice(index, 0, newPanel);\n    dashboard.sortPanelsByGridPos();\n    dashboard.events.emit('panel-added', newPanel);\n  }\n\n  sharePanel() {\n    const shareScope = this.$scope.$new();\n    shareScope.panel = this.panel;\n    shareScope.dashboard = this.dashboard;\n\n    this.publishAppEvent('show-modal', {\n      src: 'public/app/features/dashboard/partials/shareModal.html',\n      scope: shareScope,\n    });\n  }\n\n  getInfoMode() {\n    if (this.error) {\n      return 'error';\n    }\n    if (!!this.panel.description) {\n      return 'info';\n    }\n    if (this.panel.links && this.panel.links.length) {\n      return 'links';\n    }\n    return '';\n  }\n\n  getInfoContent(options) {\n    let markdown = this.panel.description;\n\n    if (options.mode === 'tooltip') {\n      markdown = this.error || this.panel.description;\n    }\n\n    const linkSrv = this.$injector.get('linkSrv');\n    const sanitize = this.$injector.get('$sanitize');\n    const templateSrv = this.$injector.get('templateSrv');\n    const interpolatedMarkdown = templateSrv.replace(markdown, this.panel.scopedVars);\n    let html = '<div class=\"markdown-html\">';\n\n    html += new Remarkable().render(interpolatedMarkdown);\n\n    if (this.panel.links && this.panel.links.length > 0) {\n      html += '<ul>';\n      for (const link of this.panel.links) {\n        const info = linkSrv.getPanelLinkAnchorInfo(link, this.panel.scopedVars);\n        html +=\n          '<li><a class=\"panel-menu-link\" href=\"' +\n          info.href +\n          '\" target=\"' +\n          info.target +\n          '\">' +\n          info.title +\n          '</a></li>';\n      }\n      html += '</ul>';\n    }\n\n    html += '</div>';\n    return sanitize(html);\n  }\n\n  openInspector() {\n    const modalScope = this.$scope.$new();\n    modalScope.panel = this.panel;\n    modalScope.dashboard = this.dashboard;\n    modalScope.panelInfoHtml = this.getInfoContent({ mode: 'inspector' });\n\n    modalScope.inspector = $.extend(true, {}, this.inspector);\n    this.publishAppEvent('show-modal', {\n      src: 'public/app/features/dashboard/partials/inspector.html',\n      scope: modalScope,\n    });\n  }\n}\n","import { DashboardModel } from '../dashboard/dashboard_model';\nimport Remarkable from 'remarkable';\n\nexport class MetricsTabCtrl {\n  dsName: string;\n  panel: any;\n  panelCtrl: any;\n  datasources: any[];\n  datasourceInstance: any;\n  nextRefId: string;\n  dashboard: DashboardModel;\n  panelDsValue: any;\n  addQueryDropdown: any;\n  queryTroubleshooterOpen: boolean;\n  helpOpen: boolean;\n  optionsOpen: boolean;\n  hasQueryHelp: boolean;\n  helpHtml: string;\n  queryOptions: any;\n\n  /** @ngInject */\n  constructor($scope, private $sce, datasourceSrv, private backendSrv) {\n    this.panelCtrl = $scope.ctrl;\n    $scope.ctrl = this;\n\n    this.panel = this.panelCtrl.panel;\n    this.dashboard = this.panelCtrl.dashboard;\n    this.datasources = datasourceSrv.getMetricSources();\n    this.panelDsValue = this.panelCtrl.panel.datasource;\n\n    for (const ds of this.datasources) {\n      if (ds.value === this.panelDsValue) {\n        this.datasourceInstance = ds;\n      }\n    }\n\n    this.addQueryDropdown = { text: '添加查询', value: null, fake: true };\n\n    // update next ref id\n    this.panelCtrl.nextRefId = this.dashboard.getNextQueryLetter(this.panel);\n    this.updateDatasourceOptions();\n  }\n\n  updateDatasourceOptions() {\n    if (this.datasourceInstance) {\n      this.hasQueryHelp = this.datasourceInstance.meta.hasQueryHelp;\n      this.queryOptions = this.datasourceInstance.meta.queryOptions;\n    }\n  }\n\n  getOptions(includeBuiltin) {\n    return Promise.resolve(\n      this.datasources\n        .filter(value => {\n          return includeBuiltin || !value.meta.builtIn;\n        })\n        .map(ds => {\n          return { value: ds.value, text: ds.name, datasource: ds };\n        })\n    );\n  }\n\n  datasourceChanged(option) {\n    if (!option) {\n      return;\n    }\n\n    this.datasourceInstance = option.datasource;\n    this.panelCtrl.setDatasource(option.datasource);\n    this.updateDatasourceOptions();\n  }\n\n  addMixedQuery(option) {\n    if (!option) {\n      return;\n    }\n\n    this.panelCtrl.addQuery({\n      isNew: true,\n      datasource: option.datasource.name,\n    });\n    this.addQueryDropdown = { text: '添加查询', value: null, fake: true };\n  }\n\n  addQuery() {\n    this.panelCtrl.addQuery({ isNew: true });\n  }\n\n  toggleHelp() {\n    this.optionsOpen = false;\n    this.queryTroubleshooterOpen = false;\n    this.helpOpen = !this.helpOpen;\n\n    this.backendSrv.get(`/api/plugins/${this.datasourceInstance.meta.id}/markdown/query_help`).then(res => {\n      const md = new Remarkable();\n      this.helpHtml = this.$sce.trustAsHtml(md.render(res));\n    });\n  }\n\n  toggleOptions() {\n    this.helpOpen = false;\n    this.queryTroubleshooterOpen = false;\n    this.optionsOpen = !this.optionsOpen;\n  }\n\n  toggleQueryTroubleshooter() {\n    this.helpOpen = false;\n    this.optionsOpen = false;\n    this.queryTroubleshooterOpen = !this.queryTroubleshooterOpen;\n  }\n}\n\n/** @ngInject */\nexport function metricsTabDirective() {\n  'use strict';\n  return {\n    restrict: 'E',\n    scope: true,\n    templateUrl: 'public/app/features/panel/partials/metrics_tab.html',\n    controller: MetricsTabCtrl,\n  };\n}\n","import $ from 'jquery';\nimport _ from 'lodash';\n\nimport config from 'app/core/config';\nimport kbn from 'app/core/utils/kbn';\nimport { PanelCtrl } from 'app/features/panel/panel_ctrl';\nimport * as rangeUtil from 'app/core/utils/rangeutil';\nimport * as dateMath from 'app/core/utils/datemath';\nimport { encodePathComponent } from 'app/core/utils/location_util';\n\nimport { metricsTabDirective } from './metrics_tab';\n\nclass MetricsPanelCtrl extends PanelCtrl {\n  scope: any;\n  datasource: any;\n  datasourceName: any;\n  $q: any;\n  $timeout: any;\n  contextSrv: any;\n  datasourceSrv: any;\n  timeSrv: any;\n  templateSrv: any;\n  timing: any;\n  range: any;\n  interval: any;\n  intervalMs: any;\n  resolution: any;\n  timeInfo: any;\n  skipDataOnInit: boolean;\n  dataStream: any;\n  dataSubscription: any;\n  dataList: any;\n  nextRefId: string;\n\n  constructor($scope, $injector) {\n    super($scope, $injector);\n\n    // make metrics tab the default\n    this.editorTabIndex = 1;\n    this.$q = $injector.get('$q');\n    this.contextSrv = $injector.get('contextSrv');\n    this.datasourceSrv = $injector.get('datasourceSrv');\n    this.timeSrv = $injector.get('timeSrv');\n    this.templateSrv = $injector.get('templateSrv');\n    this.scope = $scope;\n    this.panel.datasource = this.panel.datasource || null;\n\n    if (!this.panel.targets) {\n      this.panel.targets = [{}];\n    }\n\n    this.events.on('refresh', this.onMetricsPanelRefresh.bind(this));\n    this.events.on('init-edit-mode', this.onInitMetricsPanelEditMode.bind(this));\n    this.events.on('panel-teardown', this.onPanelTearDown.bind(this));\n  }\n\n  private onPanelTearDown() {\n    if (this.dataSubscription) {\n      this.dataSubscription.unsubscribe();\n      this.dataSubscription = null;\n    }\n  }\n\n  private onInitMetricsPanelEditMode() {\n    this.addEditorTab('度量指标', metricsTabDirective);\n    this.addEditorTab('时间范围', 'public/app/features/panel/partials/panelTime.html');\n  }\n\n  private onMetricsPanelRefresh() {\n    // ignore fetching data if another panel is in fullscreen\n    if (this.otherPanelInFullscreenMode()) {\n      return;\n    }\n\n    // if we have snapshot data use that\n    if (this.panel.snapshotData) {\n      this.updateTimeRange();\n      let data = this.panel.snapshotData;\n      // backward compatibility\n      if (!_.isArray(data)) {\n        data = data.data;\n      }\n\n      // Defer panel rendering till the next digest cycle.\n      // For some reason snapshot panels don't init at this time, so this helps to avoid rendering issues.\n      return this.$timeout(() => {\n        this.events.emit('data-snapshot-load', data);\n      });\n    }\n\n    // // ignore if we have data stream\n    if (this.dataStream) {\n      return;\n    }\n\n    // clear loading/error state\n    delete this.error;\n    this.loading = true;\n\n    // load datasource service\n    this.setTimeQueryStart();\n    this.datasourceSrv\n      .get(this.panel.datasource)\n      .then(this.updateTimeRange.bind(this))\n      .then(this.issueQueries.bind(this))\n      .then(this.handleQueryResult.bind(this))\n      .catch(err => {\n        // if cancelled  keep loading set to true\n        if (err.cancelled) {\n          console.log('Panel request cancelled', err);\n          return;\n        }\n\n        this.loading = false;\n        this.error = err.message || 'Request Error';\n        this.inspector = { error: err };\n\n        if (err.data) {\n          if (err.data.message) {\n            this.error = err.data.message;\n          }\n          if (err.data.error) {\n            this.error = err.data.error;\n          }\n        }\n\n        this.events.emit('data-error', err);\n        console.log('Panel data error:', err);\n      });\n  }\n\n  setTimeQueryStart() {\n    this.timing.queryStart = new Date().getTime();\n  }\n\n  setTimeQueryEnd() {\n    this.timing.queryEnd = new Date().getTime();\n  }\n\n  updateTimeRange(datasource?) {\n    this.datasource = datasource || this.datasource;\n    this.range = this.timeSrv.timeRange();\n\n    this.applyPanelTimeOverrides();\n\n    if (this.panel.maxDataPoints) {\n      this.resolution = this.panel.maxDataPoints;\n    } else {\n      this.resolution = Math.ceil($(window).width() * (this.panel.gridPos.w / 24));\n    }\n\n    this.calculateInterval();\n\n    return this.datasource;\n  }\n\n  calculateInterval() {\n    let intervalOverride = this.panel.interval;\n\n    // if no panel interval check datasource\n    if (intervalOverride) {\n      intervalOverride = this.templateSrv.replace(intervalOverride, this.panel.scopedVars);\n    } else if (this.datasource && this.datasource.interval) {\n      intervalOverride = this.datasource.interval;\n    }\n\n    const res = kbn.calculateInterval(this.range, this.resolution, intervalOverride);\n    this.interval = res.interval;\n    this.intervalMs = res.intervalMs;\n  }\n\n  applyPanelTimeOverrides() {\n    this.timeInfo = '';\n\n    // check panel time overrrides\n    if (this.panel.timeFrom) {\n      const timeFromInterpolated = this.templateSrv.replace(this.panel.timeFrom, this.panel.scopedVars);\n      const timeFromInfo = rangeUtil.describeTextRange(timeFromInterpolated);\n      if (timeFromInfo.invalid) {\n        this.timeInfo = 'invalid time override';\n        return;\n      }\n\n      if (_.isString(this.range.raw.from)) {\n        const timeFromDate = dateMath.parse(timeFromInfo.from);\n        this.timeInfo = timeFromInfo.display;\n        this.range.from = timeFromDate;\n        this.range.to = dateMath.parse(timeFromInfo.to);\n        this.range.raw.from = timeFromInfo.from;\n        this.range.raw.to = timeFromInfo.to;\n      }\n    }\n\n    if (this.panel.timeShift) {\n      const timeShiftInterpolated = this.templateSrv.replace(this.panel.timeShift, this.panel.scopedVars);\n      const timeShiftInfo = rangeUtil.describeTextRange(timeShiftInterpolated);\n      if (timeShiftInfo.invalid) {\n        this.timeInfo = 'invalid timeshift';\n        return;\n      }\n\n      const timeShift = '-' + timeShiftInterpolated;\n      this.timeInfo += ' timeshift ' + timeShift;\n      this.range.from = dateMath.parseDateMath(timeShift, this.range.from, false);\n      this.range.to = dateMath.parseDateMath(timeShift, this.range.to, true);\n      this.range.raw = { from: this.range.from, to: this.range.to };\n    }\n\n    if (this.panel.hideTimeOverride) {\n      this.timeInfo = '';\n    }\n  }\n\n  issueQueries(datasource) {\n    this.datasource = datasource;\n\n    if (!this.panel.targets || this.panel.targets.length === 0) {\n      return this.$q.when([]);\n    }\n\n    // make shallow copy of scoped vars,\n    // and add built in variables interval and interval_ms\n    const scopedVars = Object.assign({}, this.panel.scopedVars, {\n      __interval: { text: this.interval, value: this.interval },\n      __interval_ms: { text: this.intervalMs, value: this.intervalMs },\n    });\n\n    const metricsQuery = {\n      timezone: this.dashboard.getTimezone(),\n      panelId: this.panel.id,\n      dashboardId: this.dashboard.id,\n      range: this.range,\n      rangeRaw: this.range.raw,\n      interval: this.interval,\n      intervalMs: this.intervalMs,\n      targets: this.panel.targets,\n      maxDataPoints: this.resolution,\n      scopedVars: scopedVars,\n      cacheTimeout: this.panel.cacheTimeout,\n    };\n\n    return datasource.query(metricsQuery);\n  }\n\n  handleQueryResult(result) {\n    this.setTimeQueryEnd();\n    this.loading = false;\n\n    // check for if data source returns subject\n    if (result && result.subscribe) {\n      this.handleDataStream(result);\n      return;\n    }\n\n    if (this.dashboard.snapshot) {\n      this.panel.snapshotData = result.data;\n    }\n\n    if (!result || !result.data) {\n      console.log('Data source query result invalid, missing data field:', result);\n      result = { data: [] };\n    }\n\n    this.events.emit('data-received', result.data);\n  }\n\n  handleDataStream(stream) {\n    // if we already have a connection\n    if (this.dataStream) {\n      console.log('two stream observables!');\n      return;\n    }\n\n    this.dataStream = stream;\n    this.dataSubscription = stream.subscribe({\n      next: data => {\n        console.log('dataSubject next!');\n        if (data.range) {\n          this.range = data.range;\n        }\n        this.events.emit('data-received', data.data);\n      },\n      error: error => {\n        this.events.emit('data-error', error);\n        console.log('panel: observer got error');\n      },\n      complete: () => {\n        console.log('panel: observer got complete');\n        this.dataStream = null;\n      },\n    });\n  }\n\n  setDatasource(datasource) {\n    // switching to mixed\n    if (datasource.meta.mixed) {\n      _.each(this.panel.targets, target => {\n        target.datasource = this.panel.datasource;\n        if (!target.datasource) {\n          target.datasource = config.defaultDatasource;\n        }\n      });\n    } else if (this.datasource && this.datasource.meta.mixed) {\n      _.each(this.panel.targets, target => {\n        delete target.datasource;\n      });\n    }\n\n    this.panel.datasource = datasource.value;\n    this.datasourceName = datasource.name;\n    this.datasource = null;\n    this.refresh();\n  }\n\n  getAdditionalMenuItems() {\n    const items = [];\n    if (config.exploreEnabled && this.contextSrv.isEditor && this.datasource && this.datasource.supportsExplore) {\n      items.push({\n        text: 'Explore',\n        click: 'ctrl.explore();',\n        icon: 'fa fa-fw fa-rocket',\n        shortcut: 'x',\n      });\n    }\n    return items;\n  }\n\n  explore() {\n    const range = this.timeSrv.timeRangeForUrl();\n    const state = {\n      ...this.datasource.getExploreState(this.panel),\n      range,\n    };\n    const exploreState = encodePathComponent(JSON.stringify(state));\n    this.$location.url(`/explore?state=${exploreState}`);\n  }\n\n  addQuery(target) {\n    target.refId = this.dashboard.getNextQueryLetter(this.panel);\n\n    this.panel.targets.push(target);\n    this.nextRefId = this.dashboard.getNextQueryLetter(this.panel);\n  }\n\n  removeQuery(target) {\n    const index = _.indexOf(this.panel.targets, target);\n    this.panel.targets.splice(index, 1);\n    this.nextRefId = this.dashboard.getNextQueryLetter(this.panel);\n    this.refresh();\n  }\n\n  moveQuery(target, direction) {\n    const index = _.indexOf(this.panel.targets, target);\n    _.move(this.panel.targets, index, index + direction);\n  }\n}\n\nexport { MetricsPanelCtrl };\n","import _ from 'lodash';\n\nexport class QueryCtrl {\n  target: any;\n  datasource: any;\n  panelCtrl: any;\n  panel: any;\n  hasRawMode: boolean;\n  error: string;\n  isLastQuery: boolean;\n\n  constructor(public $scope, public $injector) {\n    this.panel = this.panelCtrl.panel;\n    this.isLastQuery = _.indexOf(this.panel.targets, this.target) === this.panel.targets.length - 1;\n  }\n\n  refresh() {\n    this.panelCtrl.refresh();\n  }\n}\n","export class ThresholdMapper {\n  static alertToGraphThresholds(panel) {\n    for (let i = 0; i < panel.alert.conditions.length; i++) {\n      const condition = panel.alert.conditions[i];\n      if (condition.type !== 'query') {\n        continue;\n      }\n\n      const evaluator = condition.evaluator;\n      const thresholds = (panel.thresholds = []);\n\n      switch (evaluator.type) {\n        case 'gt': {\n          const value = evaluator.params[0];\n          thresholds.push({ value: value, op: 'gt' });\n          break;\n        }\n        case 'lt': {\n          const value = evaluator.params[0];\n          thresholds.push({ value: value, op: 'lt' });\n          break;\n        }\n        case 'outside_range': {\n          const value1 = evaluator.params[0];\n          const value2 = evaluator.params[1];\n\n          if (value1 > value2) {\n            thresholds.push({ value: value1, op: 'gt' });\n            thresholds.push({ value: value2, op: 'lt' });\n          } else {\n            thresholds.push({ value: value1, op: 'lt' });\n            thresholds.push({ value: value2, op: 'gt' });\n          }\n\n          break;\n        }\n        case 'within_range': {\n          const value1 = evaluator.params[0];\n          const value2 = evaluator.params[1];\n\n          if (value1 > value2) {\n            thresholds.push({ value: value1, op: 'lt' });\n            thresholds.push({ value: value2, op: 'gt' });\n          } else {\n            thresholds.push({ value: value1, op: 'gt' });\n            thresholds.push({ value: value2, op: 'lt' });\n          }\n          break;\n        }\n      }\n      break;\n    }\n\n    for (const t of panel.thresholds) {\n      t.fill = true;\n      t.line = true;\n      t.colorMode = 'critical';\n    }\n\n    const updated = true;\n    return updated;\n  }\n}\n","import _ from 'lodash';\nimport { ThresholdMapper } from './state/ThresholdMapper';\nimport { QueryPart } from 'app/core/components/query_part/query_part';\nimport alertDef from './state/alertDef';\nimport config from 'app/core/config';\nimport appEvents from 'app/core/app_events';\n\nexport class AlertTabCtrl {\n  panel: any;\n  panelCtrl: any;\n  testing: boolean;\n  testResult: any;\n  subTabIndex: number;\n  conditionTypes: any;\n  alert: any;\n  conditionModels: any;\n  evalFunctions: any;\n  evalOperators: any;\n  noDataModes: any;\n  executionErrorModes: any;\n  addNotificationSegment;\n  notifications;\n  alertNotifications;\n  error: string;\n  appSubUrl: string;\n  alertHistory: any;\n\n  /** @ngInject */\n  constructor(\n    private $scope,\n    private backendSrv,\n    private dashboardSrv,\n    private uiSegmentSrv,\n    private $q,\n    private datasourceSrv\n  ) {\n    this.panelCtrl = $scope.ctrl;\n    this.panel = this.panelCtrl.panel;\n    this.$scope.ctrl = this;\n    this.subTabIndex = 0;\n    this.evalFunctions = alertDef.evalFunctions;\n    this.evalOperators = alertDef.evalOperators;\n    this.conditionTypes = alertDef.conditionTypes;\n    this.noDataModes = alertDef.noDataModes;\n    this.executionErrorModes = alertDef.executionErrorModes;\n    this.appSubUrl = config.appSubUrl;\n  }\n\n  $onInit() {\n    this.addNotificationSegment = this.uiSegmentSrv.newPlusButton();\n\n    // subscribe to graph threshold handle changes\n    const thresholdChangedEventHandler = this.graphThresholdChanged.bind(this);\n    this.panelCtrl.events.on('threshold-changed', thresholdChangedEventHandler);\n\n    // set panel alert edit mode\n    this.$scope.$on('$destroy', () => {\n      this.panelCtrl.events.off('threshold-changed', thresholdChangedEventHandler);\n      this.panelCtrl.editingThresholds = false;\n      this.panelCtrl.render();\n    });\n\n    // build notification model\n    this.notifications = [];\n    this.alertNotifications = [];\n    this.alertHistory = [];\n\n    return this.backendSrv.get('/api/alert-notifications').then(res => {\n      this.notifications = res;\n\n      this.initModel();\n      this.validateModel();\n    });\n  }\n\n  getAlertHistory() {\n    this.backendSrv\n      .get(`/api/annotations?dashboardId=${this.panelCtrl.dashboard.id}&panelId=${this.panel.id}&limit=50&type=alert`)\n      .then(res => {\n        this.alertHistory = _.map(res, ah => {\n          ah.time = this.dashboardSrv.getCurrent().formatDate(ah.time, 'MMM D, YYYY HH:mm:ss');\n          ah.stateModel = alertDef.getStateDisplayModel(ah.newState);\n          ah.info = alertDef.getAlertAnnotationInfo(ah);\n          return ah;\n        });\n      });\n  }\n\n  getNotificationIcon(type): string {\n    switch (type) {\n      case 'email':\n        return 'fa fa-envelope';\n      case 'slack':\n        return 'fa fa-slack';\n      case 'victorops':\n        return 'fa fa-pagelines';\n      case 'webhook':\n        return 'fa fa-cubes';\n      case 'pagerduty':\n        return 'fa fa-bullhorn';\n      case 'opsgenie':\n        return 'fa fa-bell';\n      case 'hipchat':\n        return 'fa fa-mail-forward';\n      case 'pushover':\n        return 'fa fa-mobile';\n      case 'kafka':\n        return 'fa fa-random';\n      case 'teams':\n        return 'fa fa-windows';\n    }\n    return 'fa fa-bell';\n  }\n\n  getNotifications() {\n    return Promise.resolve(\n      this.notifications.map(item => {\n        return this.uiSegmentSrv.newSegment(item.name);\n      })\n    );\n  }\n\n  changeTabIndex(newTabIndex) {\n    this.subTabIndex = newTabIndex;\n\n    if (this.subTabIndex === 2) {\n      this.getAlertHistory();\n    }\n  }\n\n  notificationAdded() {\n    const model = _.find(this.notifications, {\n      name: this.addNotificationSegment.value,\n    });\n    if (!model) {\n      return;\n    }\n\n    this.alertNotifications.push({\n      name: model.name,\n      iconClass: this.getNotificationIcon(model.type),\n      isDefault: false,\n    });\n    this.alert.notifications.push({ id: model.id });\n\n    // reset plus button\n    this.addNotificationSegment.value = this.uiSegmentSrv.newPlusButton().value;\n    this.addNotificationSegment.html = this.uiSegmentSrv.newPlusButton().html;\n  }\n\n  removeNotification(index) {\n    this.alert.notifications.splice(index, 1);\n    this.alertNotifications.splice(index, 1);\n  }\n\n  initModel() {\n    const alert = (this.alert = this.panel.alert);\n    if (!alert) {\n      return;\n    }\n\n    alert.conditions = alert.conditions || [];\n    if (alert.conditions.length === 0) {\n      alert.conditions.push(this.buildDefaultCondition());\n    }\n\n    alert.noDataState = alert.noDataState || config.alertingNoDataOrNullValues;\n    alert.executionErrorState = alert.executionErrorState || config.alertingErrorOrTimeout;\n    alert.frequency = alert.frequency || '60s';\n    alert.handler = alert.handler || 1;\n    alert.notifications = alert.notifications || [];\n\n    const defaultName = this.panel.title + ' 告警';\n    alert.name = alert.name || defaultName;\n\n    this.conditionModels = _.reduce(\n      alert.conditions,\n      (memo, value) => {\n        memo.push(this.buildConditionModel(value));\n        return memo;\n      },\n      []\n    );\n\n    ThresholdMapper.alertToGraphThresholds(this.panel);\n\n    for (const addedNotification of alert.notifications) {\n      const model = _.find(this.notifications, { id: addedNotification.id });\n      if (model && model.isDefault === false) {\n        model.iconClass = this.getNotificationIcon(model.type);\n        this.alertNotifications.push(model);\n      }\n    }\n\n    for (const notification of this.notifications) {\n      if (notification.isDefault) {\n        notification.iconClass = this.getNotificationIcon(notification.type);\n        notification.bgColor = '#00678b';\n        this.alertNotifications.push(notification);\n      }\n    }\n\n    this.panelCtrl.editingThresholds = true;\n    this.panelCtrl.render();\n  }\n\n  graphThresholdChanged(evt) {\n    for (const condition of this.alert.conditions) {\n      if (condition.type === 'query') {\n        condition.evaluator.params[evt.handleIndex] = evt.threshold.value;\n        this.evaluatorParamsChanged();\n        break;\n      }\n    }\n  }\n\n  buildDefaultCondition() {\n    return {\n      type: 'query',\n      query: { params: ['A', '5m', 'now'] },\n      reducer: { type: 'avg', params: [] },\n      evaluator: { type: 'gt', params: [null] },\n      operator: { type: 'and' },\n    };\n  }\n\n  validateModel() {\n    if (!this.alert) {\n      return;\n    }\n\n    let firstTarget;\n    let foundTarget = null;\n\n    for (const condition of this.alert.conditions) {\n      if (condition.type !== 'query') {\n        continue;\n      }\n\n      for (const target of this.panel.targets) {\n        if (!firstTarget) {\n          firstTarget = target;\n        }\n        if (condition.query.params[0] === target.refId) {\n          foundTarget = target;\n          break;\n        }\n      }\n\n      if (!foundTarget) {\n        if (firstTarget) {\n          condition.query.params[0] = firstTarget.refId;\n          foundTarget = firstTarget;\n        } else {\n          this.error = 'Could not find any metric queries';\n        }\n      }\n\n      const datasourceName = foundTarget.datasource || this.panel.datasource;\n      this.datasourceSrv.get(datasourceName).then(ds => {\n        if (!ds.meta.alerting) {\n          this.error = 'The datasource does not support alerting queries';\n        } else if (ds.targetContainsTemplate(foundTarget)) {\n          this.error = 'Template variables are not supported in alert queries';\n        } else {\n          this.error = '';\n        }\n      });\n    }\n  }\n\n  buildConditionModel(source) {\n    const cm: any = { source: source, type: source.type };\n\n    cm.queryPart = new QueryPart(source.query, alertDef.alertQueryDef);\n    cm.reducerPart = alertDef.createReducerPart(source.reducer);\n    cm.evaluator = source.evaluator;\n    cm.operator = source.operator;\n\n    return cm;\n  }\n\n  handleQueryPartEvent(conditionModel, evt) {\n    switch (evt.name) {\n      case 'action-remove-part': {\n        break;\n      }\n      case 'get-part-actions': {\n        return this.$q.when([]);\n      }\n      case 'part-param-changed': {\n        this.validateModel();\n      }\n      case 'get-param-options': {\n        const result = this.panel.targets.map(target => {\n          return this.uiSegmentSrv.newSegment({ value: target.refId });\n        });\n\n        return this.$q.when(result);\n      }\n    }\n  }\n\n  handleReducerPartEvent(conditionModel, evt) {\n    switch (evt.name) {\n      case 'action': {\n        conditionModel.source.reducer.type = evt.action.value;\n        conditionModel.reducerPart = alertDef.createReducerPart(conditionModel.source.reducer);\n        break;\n      }\n      case 'get-part-actions': {\n        const result = [];\n        for (const type of alertDef.reducerTypes) {\n          if (type.value !== conditionModel.source.reducer.type) {\n            result.push(type);\n          }\n        }\n        return this.$q.when(result);\n      }\n    }\n  }\n\n  addCondition(type) {\n    const condition = this.buildDefaultCondition();\n    // add to persited model\n    this.alert.conditions.push(condition);\n    // add to view model\n    this.conditionModels.push(this.buildConditionModel(condition));\n  }\n\n  removeCondition(index) {\n    this.alert.conditions.splice(index, 1);\n    this.conditionModels.splice(index, 1);\n  }\n\n  delete() {\n    appEvents.emit('confirm-modal', {\n      title: '删除告警',\n      text: '确定希望删除这条告警规则?',\n      text2: '需要保存仪表盘使删除生效',\n      icon: 'fa-trash',\n      yesText: '删除',\n      onConfirm: () => {\n        delete this.panel.alert;\n        this.alert = null;\n        this.panel.thresholds = [];\n        this.conditionModels = [];\n        this.panelCtrl.alertState = null;\n        this.panelCtrl.render();\n      },\n    });\n  }\n\n  enable() {\n    this.panel.alert = {};\n    this.initModel();\n  }\n\n  evaluatorParamsChanged() {\n    ThresholdMapper.alertToGraphThresholds(this.panel);\n    this.panelCtrl.render();\n  }\n\n  evaluatorTypeChanged(evaluator) {\n    // ensure params array is correct length\n    switch (evaluator.type) {\n      case 'lt':\n      case 'gt': {\n        evaluator.params = [evaluator.params[0]];\n        break;\n      }\n      case 'within_range':\n      case 'outside_range': {\n        evaluator.params = [evaluator.params[0], evaluator.params[1]];\n        break;\n      }\n      case 'no_value': {\n        evaluator.params = [];\n      }\n    }\n\n    this.evaluatorParamsChanged();\n  }\n\n  clearHistory() {\n    appEvents.emit('confirm-modal', {\n      title: '删除历史状态',\n      text: '您确定要删除此告警的所有历史状态和注释吗?',\n      icon: 'fa-trash',\n      yesText: '是',\n      onConfirm: () => {\n        this.backendSrv\n          .post('/api/annotations/mass-delete', {\n            dashboardId: this.panelCtrl.dashboard.id,\n            panelId: this.panel.id,\n          })\n          .then(res => {\n            this.alertHistory = [];\n            this.panelCtrl.refresh();\n          });\n      },\n    });\n  }\n\n  test() {\n    this.testing = true;\n    this.testResult = false;\n\n    const payload = {\n      dashboard: this.dashboardSrv.getCurrent().getSaveModelClone(),\n      panelId: this.panelCtrl.panel.id,\n    };\n\n    return this.backendSrv.post('/api/alerts/test', payload).then(res => {\n      this.testResult = res;\n      this.testing = false;\n    });\n  }\n}\n\n/** @ngInject */\nexport function alertTab() {\n  'use strict';\n  return {\n    restrict: 'E',\n    scope: true,\n    templateUrl: 'public/app/features/alerting/partials/alert_tab.html',\n    controller: AlertTabCtrl,\n  };\n}\n","import { PanelCtrl } from 'app/features/panel/panel_ctrl';\nimport { MetricsPanelCtrl } from 'app/features/panel/metrics_panel_ctrl';\nimport { QueryCtrl } from 'app/features/panel/query_ctrl';\nimport { alertTab } from 'app/features/alerting/AlertTabCtrl';\nimport { loadPluginCss } from 'app/features/plugins/plugin_loader';\n\nexport { PanelCtrl, MetricsPanelCtrl, QueryCtrl, alertTab, loadPluginCss };\n","import { isBoolean, isNumber, sortedUniq, sortedIndexOf, unescape as htmlUnescaped } from 'lodash';\nimport moment from 'moment';\nimport { saveAs } from 'file-saver';\nimport { isNullOrUndefined } from 'util';\n\nconst DEFAULT_DATETIME_FORMAT = 'YYYY-MM-DDTHH:mm:ssZ';\nconst POINT_TIME_INDEX = 1;\nconst POINT_VALUE_INDEX = 0;\n\nconst END_COLUMN = ';';\nconst END_ROW = '\\r\\n';\nconst QUOTE = '\"';\nconst EXPORT_FILENAME = 'grafana_data_export.csv';\n\nfunction csvEscaped(text) {\n  if (!text) {\n    return text;\n  }\n\n  return text.split(QUOTE).join(QUOTE + QUOTE);\n}\n\nconst domParser = new DOMParser();\nfunction htmlDecoded(text) {\n  if (!text) {\n    return text;\n  }\n\n  const regexp = /&[^;]+;/g;\n  function htmlDecoded(value) {\n    const parsedDom = domParser.parseFromString(value, 'text/html');\n    return parsedDom.body.textContent;\n  }\n  return text.replace(regexp, htmlDecoded).replace(regexp, htmlDecoded);\n}\n\nfunction formatSpecialHeader(useExcelHeader) {\n  return useExcelHeader ? `sep=${END_COLUMN}${END_ROW}` : '';\n}\n\nfunction formatRow(row, addEndRowDelimiter = true) {\n  let text = '';\n  for (let i = 0; i < row.length; i += 1) {\n    if (isBoolean(row[i]) || isNullOrUndefined(row[i])) {\n      text += row[i];\n    } else if (isNumber(row[i])) {\n      text += row[i].toLocaleString();\n    } else {\n      text += `${QUOTE}${csvEscaped(htmlUnescaped(htmlDecoded(row[i])))}${QUOTE}`;\n    }\n\n    if (i < row.length - 1) {\n      text += END_COLUMN;\n    }\n  }\n  return addEndRowDelimiter ? text + END_ROW : text;\n}\n\nexport function convertSeriesListToCsv(seriesList, dateTimeFormat = DEFAULT_DATETIME_FORMAT, excel = false) {\n  let text = formatSpecialHeader(excel) + formatRow(['Series', 'Time', 'Value']);\n  for (let seriesIndex = 0; seriesIndex < seriesList.length; seriesIndex += 1) {\n    for (let i = 0; i < seriesList[seriesIndex].datapoints.length; i += 1) {\n      text += formatRow(\n        [\n          seriesList[seriesIndex].alias,\n          moment(seriesList[seriesIndex].datapoints[i][POINT_TIME_INDEX]).format(dateTimeFormat),\n          seriesList[seriesIndex].datapoints[i][POINT_VALUE_INDEX],\n        ],\n        i < seriesList[seriesIndex].datapoints.length - 1 || seriesIndex < seriesList.length - 1\n      );\n    }\n  }\n  return text;\n}\n\nexport function exportSeriesListToCsv(seriesList, dateTimeFormat = DEFAULT_DATETIME_FORMAT, excel = false) {\n  const text = convertSeriesListToCsv(seriesList, dateTimeFormat, excel);\n  saveSaveBlob(text, EXPORT_FILENAME);\n}\n\nexport function convertSeriesListToCsvColumns(seriesList, dateTimeFormat = DEFAULT_DATETIME_FORMAT, excel = false) {\n  // add header\n  let text =\n    formatSpecialHeader(excel) +\n    formatRow(\n      ['Time'].concat(\n        seriesList.map(val => {\n          return val.alias;\n        })\n      )\n    );\n  // process data\n  seriesList = mergeSeriesByTime(seriesList);\n\n  // make text\n  for (let i = 0; i < seriesList[0].datapoints.length; i += 1) {\n    const timestamp = moment(seriesList[0].datapoints[i][POINT_TIME_INDEX]).format(dateTimeFormat);\n    text += formatRow(\n      [timestamp].concat(\n        seriesList.map(series => {\n          return series.datapoints[i][POINT_VALUE_INDEX];\n        })\n      ),\n      i < seriesList[0].datapoints.length - 1\n    );\n  }\n\n  return text;\n}\n\n/**\n * Collect all unique timestamps from series list and use it to fill\n * missing points by null.\n */\nfunction mergeSeriesByTime(seriesList) {\n  let timestamps = [];\n  for (let i = 0; i < seriesList.length; i++) {\n    const seriesPoints = seriesList[i].datapoints;\n    for (let j = 0; j < seriesPoints.length; j++) {\n      timestamps.push(seriesPoints[j][POINT_TIME_INDEX]);\n    }\n  }\n  timestamps = sortedUniq(timestamps.sort());\n\n  for (let i = 0; i < seriesList.length; i++) {\n    const seriesPoints = seriesList[i].datapoints;\n    const seriesTimestamps = seriesPoints.map(p => p[POINT_TIME_INDEX]);\n    const extendedSeries = [];\n    let pointIndex;\n    for (let j = 0; j < timestamps.length; j++) {\n      pointIndex = sortedIndexOf(seriesTimestamps, timestamps[j]);\n      if (pointIndex !== -1) {\n        extendedSeries.push(seriesPoints[pointIndex]);\n      } else {\n        extendedSeries.push([null, timestamps[j]]);\n      }\n    }\n    seriesList[i].datapoints = extendedSeries;\n  }\n  return seriesList;\n}\n\nexport function exportSeriesListToCsvColumns(seriesList, dateTimeFormat = DEFAULT_DATETIME_FORMAT, excel = false) {\n  const text = convertSeriesListToCsvColumns(seriesList, dateTimeFormat, excel);\n  saveSaveBlob(text, EXPORT_FILENAME);\n}\n\nexport function convertTableDataToCsv(table, excel = false) {\n  let text = formatSpecialHeader(excel);\n  // add headline\n  text += formatRow(table.columns.map(val => val.title || val.text));\n  // process data\n  for (let i = 0; i < table.rows.length; i += 1) {\n    text += formatRow(table.rows[i], i < table.rows.length - 1);\n  }\n  return text;\n}\n\nexport function exportTableDataToCsv(table, excel = false) {\n  const text = convertTableDataToCsv(table, excel);\n  saveSaveBlob(text, EXPORT_FILENAME);\n}\n\nexport function saveSaveBlob(payload, fname) {\n  const blob = new Blob([payload], { type: 'text/csv;charset=utf-8;header=present;' });\n  saveAs(blob, fname);\n}\n","// Copyright (c) 2014, Hugh Kennedy\n// Based on code from https://github.com/hughsk/flat/blob/master/index.js\n//\nexport default function flatten(target, opts): any {\n  opts = opts || {};\n\n  const delimiter = opts.delimiter || '.';\n  let maxDepth = opts.maxDepth || 3;\n  let currentDepth = 1;\n  const output = {};\n\n  function step(object, prev) {\n    Object.keys(object).forEach(key => {\n      const value = object[key];\n      const isarray = opts.safe && Array.isArray(value);\n      const type = Object.prototype.toString.call(value);\n      const isobject = type === '[object Object]';\n\n      const newKey = prev ? prev + delimiter + key : key;\n\n      if (!opts.maxDepth) {\n        maxDepth = currentDepth + 1;\n      }\n\n      if (!isarray && isobject && Object.keys(value).length && currentDepth < maxDepth) {\n        ++currentDepth;\n        return step(value, newKey);\n      }\n\n      output[newKey] = value;\n    });\n  }\n\n  step(target, null);\n\n  return output;\n}\n","import _ from 'lodash';\n\nconst versionPattern = /^(\\d+)(?:\\.(\\d+))?(?:\\.(\\d+))?(?:-([0-9A-Za-z\\.]+))?/;\n\nexport class SemVersion {\n  major: number;\n  minor: number;\n  patch: number;\n  meta: string;\n\n  constructor(version: string) {\n    const match = versionPattern.exec(version);\n    if (match) {\n      this.major = Number(match[1]);\n      this.minor = Number(match[2] || 0);\n      this.patch = Number(match[3] || 0);\n      this.meta = match[4];\n    }\n  }\n\n  isGtOrEq(version: string): boolean {\n    const compared = new SemVersion(version);\n    return !(this.major < compared.major || this.minor < compared.minor || this.patch < compared.patch);\n  }\n\n  isValid(): boolean {\n    return _.isNumber(this.major);\n  }\n}\n\nexport function isVersionGtOrEq(a: string, b: string): boolean {\n  const aSemver = new SemVersion(a);\n  return aSemver.isGtOrEq(b);\n}\n","import _ from 'lodash';\nimport { isVersionGtOrEq } from 'app/core/utils/version';\n\nconst index = {};\n\nfunction addFuncDef(funcDef) {\n  funcDef.params = funcDef.params || [];\n  funcDef.defaultParams = funcDef.defaultParams || [];\n\n  index[funcDef.name] = funcDef;\n  if (funcDef.shortName) {\n    index[funcDef.shortName] = funcDef;\n  }\n}\n\nconst optionalSeriesRefArgs = [{ name: 'other', type: 'value_or_series', optional: true, multiple: true }];\n\naddFuncDef({\n  name: 'scaleToSeconds',\n  category: 'Transform',\n  params: [{ name: 'seconds', type: 'int' }],\n  defaultParams: [1],\n});\n\naddFuncDef({\n  name: 'perSecond',\n  category: 'Transform',\n  params: [{ name: 'max value', type: 'int', optional: true }],\n  defaultParams: [],\n});\n\naddFuncDef({\n  name: 'holtWintersForecast',\n  category: 'Calculate',\n});\n\naddFuncDef({\n  name: 'holtWintersConfidenceBands',\n  category: 'Calculate',\n  params: [{ name: 'delta', type: 'int' }],\n  defaultParams: [3],\n});\n\naddFuncDef({\n  name: 'holtWintersAberration',\n  category: 'Calculate',\n  params: [{ name: 'delta', type: 'int' }],\n  defaultParams: [3],\n});\n\naddFuncDef({\n  name: 'nPercentile',\n  category: 'Calculate',\n  params: [{ name: 'Nth percentile', type: 'int' }],\n  defaultParams: [95],\n});\n\naddFuncDef({\n  name: 'diffSeries',\n  params: optionalSeriesRefArgs,\n  defaultParams: ['#A'],\n  category: 'Combine',\n});\n\naddFuncDef({\n  name: 'stddevSeries',\n  params: optionalSeriesRefArgs,\n  defaultParams: [''],\n  category: 'Combine',\n});\n\naddFuncDef({\n  name: 'divideSeries',\n  params: optionalSeriesRefArgs,\n  defaultParams: ['#A'],\n  category: 'Combine',\n});\n\naddFuncDef({\n  name: 'multiplySeries',\n  params: optionalSeriesRefArgs,\n  defaultParams: ['#A'],\n  category: 'Combine',\n});\n\naddFuncDef({\n  name: 'asPercent',\n  params: optionalSeriesRefArgs,\n  defaultParams: ['#A'],\n  category: 'Combine',\n});\n\naddFuncDef({\n  name: 'group',\n  params: optionalSeriesRefArgs,\n  defaultParams: ['#A', '#B'],\n  category: 'Combine',\n});\n\naddFuncDef({\n  name: 'sumSeries',\n  shortName: 'sum',\n  category: 'Combine',\n  params: optionalSeriesRefArgs,\n  defaultParams: [''],\n});\n\naddFuncDef({\n  name: 'averageSeries',\n  shortName: 'avg',\n  category: 'Combine',\n  params: optionalSeriesRefArgs,\n  defaultParams: [''],\n});\n\naddFuncDef({\n  name: 'rangeOfSeries',\n  category: 'Combine',\n});\n\naddFuncDef({\n  name: 'percentileOfSeries',\n  category: 'Combine',\n  params: [{ name: 'n', type: 'int' }, { name: 'interpolate', type: 'boolean', options: ['true', 'false'] }],\n  defaultParams: [95, 'false'],\n});\n\naddFuncDef({\n  name: 'sumSeriesWithWildcards',\n  category: 'Combine',\n  params: [{ name: 'node', type: 'int', multiple: true }],\n  defaultParams: [3],\n});\n\naddFuncDef({\n  name: 'maxSeries',\n  shortName: 'max',\n  category: 'Combine',\n});\n\naddFuncDef({\n  name: 'minSeries',\n  shortName: 'min',\n  category: 'Combine',\n});\n\naddFuncDef({\n  name: 'averageSeriesWithWildcards',\n  category: 'Combine',\n  params: [{ name: 'node', type: 'int', multiple: true }],\n  defaultParams: [3],\n});\n\naddFuncDef({\n  name: 'alias',\n  category: 'Alias',\n  params: [{ name: 'alias', type: 'string' }],\n  defaultParams: ['alias'],\n});\n\naddFuncDef({\n  name: 'aliasSub',\n  category: 'Alias',\n  params: [{ name: 'search', type: 'string' }, { name: 'replace', type: 'string' }],\n  defaultParams: ['', '\\\\1'],\n});\n\naddFuncDef({\n  name: 'consolidateBy',\n  category: 'Special',\n  params: [\n    {\n      name: 'function',\n      type: 'string',\n      options: ['sum', 'average', 'min', 'max'],\n    },\n  ],\n  defaultParams: ['max'],\n});\n\naddFuncDef({\n  name: 'cumulative',\n  category: 'Special',\n  params: [],\n  defaultParams: [],\n});\n\naddFuncDef({\n  name: 'groupByNode',\n  category: 'Combine',\n  params: [\n    {\n      name: 'node',\n      type: 'int',\n      options: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12],\n    },\n    {\n      name: 'function',\n      type: 'string',\n      options: ['sum', 'avg', 'maxSeries'],\n    },\n  ],\n  defaultParams: [3, 'sum'],\n});\n\naddFuncDef({\n  name: 'aliasByNode',\n  category: 'Alias',\n  params: [\n    {\n      name: 'node',\n      type: 'int',\n      options: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12],\n      multiple: true,\n    },\n  ],\n  defaultParams: [3],\n});\n\naddFuncDef({\n  name: 'substr',\n  category: 'Special',\n  params: [\n    {\n      name: 'start',\n      type: 'int',\n      options: [-6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12],\n    },\n    {\n      name: 'stop',\n      type: 'int',\n      options: [-6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12],\n    },\n  ],\n  defaultParams: [0, 0],\n});\n\naddFuncDef({\n  name: 'sortByName',\n  category: 'Sorting',\n  params: [\n    {\n      name: 'natural',\n      type: 'boolean',\n      options: ['true', 'false'],\n      optional: true,\n    },\n  ],\n  defaultParams: ['false'],\n});\n\naddFuncDef({\n  name: 'sortByMaxima',\n  category: 'Sorting',\n});\n\naddFuncDef({\n  name: 'sortByMinima',\n  category: 'Sorting',\n});\n\naddFuncDef({\n  name: 'sortByTotal',\n  category: 'Sorting',\n});\n\naddFuncDef({\n  name: 'aliasByMetric',\n  category: 'Alias',\n});\n\naddFuncDef({\n  name: 'randomWalk',\n  fake: true,\n  category: 'Special',\n  params: [{ name: 'name', type: 'string' }],\n  defaultParams: ['randomWalk'],\n});\n\naddFuncDef({\n  name: 'countSeries',\n  category: 'Combine',\n});\n\naddFuncDef({\n  name: 'constantLine',\n  category: 'Special',\n  params: [{ name: 'value', type: 'int' }],\n  defaultParams: [10],\n});\n\naddFuncDef({\n  name: 'cactiStyle',\n  category: 'Special',\n});\n\naddFuncDef({\n  name: 'keepLastValue',\n  category: 'Transform',\n  params: [{ name: 'n', type: 'int' }],\n  defaultParams: [100],\n});\n\naddFuncDef({\n  name: 'changed',\n  category: 'Special',\n  params: [],\n  defaultParams: [],\n});\n\naddFuncDef({\n  name: 'scale',\n  category: 'Transform',\n  params: [{ name: 'factor', type: 'int' }],\n  defaultParams: [1],\n});\n\naddFuncDef({\n  name: 'offset',\n  category: 'Transform',\n  params: [{ name: 'amount', type: 'int' }],\n  defaultParams: [10],\n});\n\naddFuncDef({\n  name: 'transformNull',\n  category: 'Transform',\n  params: [{ name: 'amount', type: 'int' }],\n  defaultParams: [0],\n});\n\naddFuncDef({\n  name: 'integral',\n  category: 'Transform',\n});\n\naddFuncDef({\n  name: 'derivative',\n  category: 'Transform',\n});\n\naddFuncDef({\n  name: 'nonNegativeDerivative',\n  category: 'Transform',\n  params: [{ name: 'max value or 0', type: 'int', optional: true }],\n  defaultParams: [''],\n});\n\naddFuncDef({\n  name: 'timeShift',\n  category: 'Transform',\n  params: [\n    {\n      name: 'amount',\n      type: 'select',\n      options: ['1h', '6h', '12h', '1d', '2d', '7d', '14d', '30d'],\n    },\n  ],\n  defaultParams: ['1d'],\n});\n\naddFuncDef({\n  name: 'timeStack',\n  category: 'Transform',\n  params: [\n    {\n      name: 'timeShiftUnit',\n      type: 'select',\n      options: ['1h', '6h', '12h', '1d', '2d', '7d', '14d', '30d'],\n    },\n    { name: 'timeShiftStart', type: 'int' },\n    { name: 'timeShiftEnd', type: 'int' },\n  ],\n  defaultParams: ['1d', 0, 7],\n});\n\naddFuncDef({\n  name: 'summarize',\n  category: 'Transform',\n  params: [\n    { name: 'interval', type: 'string' },\n    {\n      name: 'func',\n      type: 'select',\n      options: ['sum', 'avg', 'min', 'max', 'last'],\n    },\n    {\n      name: 'alignToFrom',\n      type: 'boolean',\n      optional: true,\n      options: ['false', 'true'],\n    },\n  ],\n  defaultParams: ['1h', 'sum', 'false'],\n});\n\naddFuncDef({\n  name: 'smartSummarize',\n  category: 'Transform',\n  params: [\n    { name: 'interval', type: 'string' },\n    {\n      name: 'func',\n      type: 'select',\n      options: ['sum', 'avg', 'min', 'max', 'last'],\n    },\n  ],\n  defaultParams: ['1h', 'sum'],\n});\n\naddFuncDef({\n  name: 'absolute',\n  category: 'Transform',\n});\n\naddFuncDef({\n  name: 'hitcount',\n  category: 'Transform',\n  params: [{ name: 'interval', type: 'string' }],\n  defaultParams: ['10s'],\n});\n\naddFuncDef({\n  name: 'log',\n  category: 'Transform',\n  params: [{ name: 'base', type: 'int' }],\n  defaultParams: ['10'],\n});\n\naddFuncDef({\n  name: 'averageAbove',\n  category: 'Filter Series',\n  params: [{ name: 'n', type: 'int' }],\n  defaultParams: [25],\n});\n\naddFuncDef({\n  name: 'averageBelow',\n  category: 'Filter Series',\n  params: [{ name: 'n', type: 'int' }],\n  defaultParams: [25],\n});\n\naddFuncDef({\n  name: 'currentAbove',\n  category: 'Filter Series',\n  params: [{ name: 'n', type: 'int' }],\n  defaultParams: [25],\n});\n\naddFuncDef({\n  name: 'currentBelow',\n  category: 'Filter Series',\n  params: [{ name: 'n', type: 'int' }],\n  defaultParams: [25],\n});\n\naddFuncDef({\n  name: 'maximumAbove',\n  category: 'Filter Series',\n  params: [{ name: 'value', type: 'int' }],\n  defaultParams: [0],\n});\n\naddFuncDef({\n  name: 'maximumBelow',\n  category: 'Filter Series',\n  params: [{ name: 'value', type: 'int' }],\n  defaultParams: [0],\n});\n\naddFuncDef({\n  name: 'minimumAbove',\n  category: 'Filter Series',\n  params: [{ name: 'value', type: 'int' }],\n  defaultParams: [0],\n});\n\naddFuncDef({\n  name: 'minimumBelow',\n  category: 'Filter Series',\n  params: [{ name: 'value', type: 'int' }],\n  defaultParams: [0],\n});\n\naddFuncDef({\n  name: 'limit',\n  category: 'Filter Series',\n  params: [{ name: 'n', type: 'int' }],\n  defaultParams: [5],\n});\n\naddFuncDef({\n  name: 'mostDeviant',\n  category: 'Filter Series',\n  params: [{ name: 'n', type: 'int' }],\n  defaultParams: [10],\n});\n\naddFuncDef({\n  name: 'exclude',\n  category: 'Filter Series',\n  params: [{ name: 'exclude', type: 'string' }],\n  defaultParams: ['exclude'],\n});\n\naddFuncDef({\n  name: 'highestCurrent',\n  category: 'Filter Series',\n  params: [{ name: 'count', type: 'int' }],\n  defaultParams: [5],\n});\n\naddFuncDef({\n  name: 'highestMax',\n  category: 'Filter Series',\n  params: [{ name: 'count', type: 'int' }],\n  defaultParams: [5],\n});\n\naddFuncDef({\n  name: 'lowestCurrent',\n  category: 'Filter Series',\n  params: [{ name: 'count', type: 'int' }],\n  defaultParams: [5],\n});\n\naddFuncDef({\n  name: 'movingAverage',\n  category: 'Calculate',\n  params: [\n    {\n      name: 'windowSize',\n      type: 'int_or_interval',\n      options: ['5', '7', '10', '5min', '10min', '30min', '1hour'],\n    },\n  ],\n  defaultParams: [10],\n});\n\naddFuncDef({\n  name: 'movingMedian',\n  category: 'Calculate',\n  params: [\n    {\n      name: 'windowSize',\n      type: 'int_or_interval',\n      options: ['5', '7', '10', '5min', '10min', '30min', '1hour'],\n    },\n  ],\n  defaultParams: ['5'],\n});\n\naddFuncDef({\n  name: 'stdev',\n  category: 'Calculate',\n  params: [{ name: 'n', type: 'int' }, { name: 'tolerance', type: 'int' }],\n  defaultParams: [5, 0.1],\n});\n\naddFuncDef({\n  name: 'highestAverage',\n  category: 'Filter Series',\n  params: [{ name: 'count', type: 'int' }],\n  defaultParams: [5],\n});\n\naddFuncDef({\n  name: 'lowestAverage',\n  category: 'Filter Series',\n  params: [{ name: 'count', type: 'int' }],\n  defaultParams: [5],\n});\n\naddFuncDef({\n  name: 'removeAbovePercentile',\n  category: 'Filter Data',\n  params: [{ name: 'n', type: 'int' }],\n  defaultParams: [5],\n});\n\naddFuncDef({\n  name: 'removeAboveValue',\n  category: 'Filter Data',\n  params: [{ name: 'n', type: 'int' }],\n  defaultParams: [5],\n});\n\naddFuncDef({\n  name: 'removeBelowPercentile',\n  category: 'Filter Data',\n  params: [{ name: 'n', type: 'int' }],\n  defaultParams: [5],\n});\n\naddFuncDef({\n  name: 'removeBelowValue',\n  category: 'Filter Data',\n  params: [{ name: 'n', type: 'int' }],\n  defaultParams: [5],\n});\n\naddFuncDef({\n  name: 'useSeriesAbove',\n  category: 'Filter Series',\n  params: [{ name: 'value', type: 'int' }, { name: 'search', type: 'string' }, { name: 'replace', type: 'string' }],\n  defaultParams: [0, 'search', 'replace'],\n});\n\n////////////////////\n// Graphite 1.0.x //\n////////////////////\n\naddFuncDef({\n  name: 'aggregateLine',\n  category: 'Calculate',\n  params: [\n    {\n      name: 'func',\n      type: 'select',\n      options: ['sum', 'avg', 'min', 'max', 'last'],\n    },\n  ],\n  defaultParams: ['avg'],\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'averageOutsidePercentile',\n  category: 'Filter Series',\n  params: [{ name: 'n', type: 'int' }],\n  defaultParams: [95],\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'delay',\n  category: 'Transform',\n  params: [{ name: 'steps', type: 'int' }],\n  defaultParams: [1],\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'exponentialMovingAverage',\n  category: 'Calculate',\n  params: [\n    {\n      name: 'windowSize',\n      type: 'int_or_interval',\n      options: ['5', '7', '10', '5min', '10min', '30min', '1hour'],\n    },\n  ],\n  defaultParams: [10],\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'fallbackSeries',\n  category: 'Special',\n  params: [{ name: 'fallback', type: 'string' }],\n  defaultParams: ['constantLine(0)'],\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'grep',\n  category: 'Filter Series',\n  params: [{ name: 'grep', type: 'string' }],\n  defaultParams: ['grep'],\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'groupByNodes',\n  category: 'Combine',\n  params: [\n    {\n      name: 'function',\n      type: 'string',\n      options: ['sum', 'avg', 'maxSeries'],\n    },\n    {\n      name: 'node',\n      type: 'int',\n      options: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12],\n      multiple: true,\n    },\n  ],\n  defaultParams: ['sum', 3],\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'integralByInterval',\n  category: 'Transform',\n  params: [\n    {\n      name: 'intervalUnit',\n      type: 'select',\n      options: ['1h', '6h', '12h', '1d', '2d', '7d', '14d', '30d'],\n    },\n  ],\n  defaultParams: ['1d'],\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'interpolate',\n  category: 'Transform',\n  params: [{ name: 'limit', type: 'int', optional: true }],\n  defaultParams: [],\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'invert',\n  category: 'Transform',\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'isNonNull',\n  category: 'Combine',\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'linearRegression',\n  category: 'Calculate',\n  params: [\n    {\n      name: 'startSourceAt',\n      type: 'select',\n      options: ['-1h', '-6h', '-12h', '-1d', '-2d', '-7d', '-14d', '-30d'],\n      optional: true,\n    },\n    {\n      name: 'endSourceAt',\n      type: 'select',\n      options: ['-1h', '-6h', '-12h', '-1d', '-2d', '-7d', '-14d', '-30d'],\n      optional: true,\n    },\n  ],\n  defaultParams: [],\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'mapSeries',\n  shortName: 'map',\n  params: [{ name: 'node', type: 'int' }],\n  defaultParams: [3],\n  category: 'Combine',\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'movingMin',\n  category: 'Calculate',\n  params: [\n    {\n      name: 'windowSize',\n      type: 'int_or_interval',\n      options: ['5', '7', '10', '5min', '10min', '30min', '1hour'],\n    },\n  ],\n  defaultParams: [10],\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'movingMax',\n  category: 'Calculate',\n  params: [\n    {\n      name: 'windowSize',\n      type: 'int_or_interval',\n      options: ['5', '7', '10', '5min', '10min', '30min', '1hour'],\n    },\n  ],\n  defaultParams: [10],\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'movingSum',\n  category: 'Calculate',\n  params: [\n    {\n      name: 'windowSize',\n      type: 'int_or_interval',\n      options: ['5', '7', '10', '5min', '10min', '30min', '1hour'],\n    },\n  ],\n  defaultParams: [10],\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'multiplySeriesWithWildcards',\n  category: 'Combine',\n  params: [\n    {\n      name: 'position',\n      type: 'int',\n      options: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12],\n      multiple: true,\n    },\n  ],\n  defaultParams: [2],\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'offsetToZero',\n  category: 'Transform',\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'pow',\n  category: 'Transform',\n  params: [{ name: 'factor', type: 'int' }],\n  defaultParams: [10],\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'powSeries',\n  category: 'Transform',\n  params: optionalSeriesRefArgs,\n  defaultParams: [''],\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'reduceSeries',\n  shortName: 'reduce',\n  params: [\n    {\n      name: 'function',\n      type: 'string',\n      options: ['asPercent', 'diffSeries', 'divideSeries'],\n    },\n    {\n      name: 'reduceNode',\n      type: 'int',\n      options: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],\n    },\n    { name: 'reduceMatchers', type: 'string', multiple: true },\n  ],\n  defaultParams: ['asPercent', 2, 'used_bytes'],\n  category: 'Combine',\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'removeBetweenPercentile',\n  category: 'Filter Series',\n  params: [{ name: 'n', type: 'int' }],\n  defaultParams: [95],\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'removeEmptySeries',\n  category: 'Filter Series',\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'squareRoot',\n  category: 'Transform',\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'timeSlice',\n  category: 'Transform',\n  params: [\n    {\n      name: 'startSliceAt',\n      type: 'select',\n      options: ['-1h', '-6h', '-12h', '-1d', '-2d', '-7d', '-14d', '-30d'],\n    },\n    {\n      name: 'endSliceAt',\n      type: 'select',\n      options: ['-1h', '-6h', '-12h', '-1d', '-2d', '-7d', '-14d', '-30d'],\n      optional: true,\n    },\n  ],\n  defaultParams: ['-1h'],\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'weightedAverage',\n  category: 'Combine',\n  params: [\n    { name: 'other', type: 'value_or_series', optional: true },\n    {\n      name: 'node',\n      type: 'int',\n      options: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12],\n    },\n  ],\n  defaultParams: ['#A', 4],\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'seriesByTag',\n  category: 'Special',\n  params: [{ name: 'tagExpression', type: 'string', multiple: true }],\n  version: '1.1',\n});\n\naddFuncDef({\n  name: 'groupByTags',\n  category: 'Combine',\n  params: [\n    {\n      name: 'function',\n      type: 'string',\n      options: ['sum', 'avg', 'maxSeries'],\n    },\n    { name: 'tag', type: 'string', multiple: true },\n  ],\n  defaultParams: ['sum', 'tag'],\n  version: '1.1',\n});\n\naddFuncDef({\n  name: 'aliasByTags',\n  category: 'Alias',\n  params: [{ name: 'tag', type: 'string', multiple: true }],\n  defaultParams: ['tag'],\n  version: '1.1',\n});\n\nfunction isVersionRelatedFunction(obj, graphiteVersion) {\n  return !obj.version || isVersionGtOrEq(graphiteVersion, obj.version);\n}\n\nexport class FuncInstance {\n  def: any;\n  params: any;\n  text: any;\n  added: boolean;\n\n  constructor(funcDef, options) {\n    this.def = funcDef;\n    this.params = [];\n\n    if (options && options.withDefaultParams) {\n      this.params = funcDef.defaultParams.slice(0);\n    }\n\n    this.updateText();\n  }\n\n  render(metricExp) {\n    const str = this.def.name + '(';\n\n    const parameters = _.map(this.params, (value, index) => {\n      let paramType;\n      if (index < this.def.params.length) {\n        paramType = this.def.params[index].type;\n      } else if (_.get(_.last(this.def.params), 'multiple')) {\n        paramType = _.get(_.last(this.def.params), 'type');\n      }\n      // param types that should never be quoted\n      if (_.includes(['value_or_series', 'boolean', 'int', 'float', 'node'], paramType)) {\n        return value;\n      }\n      // param types that might be quoted\n      if (_.includes(['int_or_interval', 'node_or_tag'], paramType) && _.isFinite(+value)) {\n        return _.toString(+value);\n      }\n      return \"'\" + value + \"'\";\n    });\n\n    // don't send any blank parameters to graphite\n    while (parameters[parameters.length - 1] === '') {\n      parameters.pop();\n    }\n\n    if (metricExp) {\n      parameters.unshift(metricExp);\n    }\n\n    return str + parameters.join(', ') + ')';\n  }\n\n  _hasMultipleParamsInString(strValue, index) {\n    if (strValue.indexOf(',') === -1) {\n      return false;\n    }\n\n    if (this.def.params[index + 1] && this.def.params[index + 1].optional) {\n      return true;\n    }\n\n    if (index + 1 >= this.def.params.length && _.get(_.last(this.def.params), 'multiple')) {\n      return true;\n    }\n\n    return false;\n  }\n\n  updateParam(strValue, index) {\n    // handle optional parameters\n    // if string contains ',' and next param is optional, split and update both\n    if (this._hasMultipleParamsInString(strValue, index)) {\n      _.each(strValue.split(','), (partVal, idx) => {\n        this.updateParam(partVal.trim(), index + idx);\n      });\n      return;\n    }\n\n    if (strValue === '' && (index >= this.def.params.length || this.def.params[index].optional)) {\n      this.params.splice(index, 1);\n    } else {\n      this.params[index] = strValue;\n    }\n\n    this.updateText();\n  }\n\n  updateText() {\n    if (this.params.length === 0) {\n      this.text = this.def.name + '()';\n      return;\n    }\n\n    let text = this.def.name + '(';\n    text += this.params.join(', ');\n    text += ')';\n    this.text = text;\n  }\n}\n\nfunction createFuncInstance(funcDef, options?, idx?) {\n  if (_.isString(funcDef)) {\n    funcDef = getFuncDef(funcDef, idx);\n  }\n  return new FuncInstance(funcDef, options);\n}\n\nfunction getFuncDef(name, idx?) {\n  if (!(idx || index)[name]) {\n    throw { message: 'Method not found ' + name };\n  }\n  return (idx || index)[name];\n}\n\nfunction getFuncDefs(graphiteVersion, idx?) {\n  const funcs = {};\n  _.forEach(idx || index, funcDef => {\n    if (isVersionRelatedFunction(funcDef, graphiteVersion)) {\n      funcs[funcDef.name] = _.assign({}, funcDef, {\n        params: _.filter(funcDef.params, param => {\n          return isVersionRelatedFunction(param, graphiteVersion);\n        }),\n      });\n    }\n  });\n  return funcs;\n}\n\n// parse response from graphite /functions endpoint into internal format\nfunction parseFuncDefs(rawDefs) {\n  const funcDefs = {};\n\n  _.forEach(rawDefs || {}, (funcDef, funcName) => {\n    // skip graphite graph functions\n    if (funcDef.group === 'Graph') {\n      return;\n    }\n\n    let description = funcDef.description;\n    if (description) {\n      // tidy up some pydoc syntax that rst2html can't handle\n      description = description\n        .replace(/:py:func:`(.+)( <[^>]*>)?`/g, '``$1``')\n        .replace(/.. seealso:: /g, 'See also: ')\n        .replace(/.. code-block *:: *none/g, '.. code-block::');\n    }\n\n    const func = {\n      name: funcDef.name,\n      description: description,\n      category: funcDef.group,\n      params: [],\n      defaultParams: [],\n      fake: false,\n    };\n\n    // get rid of the first \"seriesList\" param\n    if (/^seriesLists?$/.test(_.get(funcDef, 'params[0].type', ''))) {\n      // handle functions that accept multiple seriesLists\n      // we leave the param in place but mark it optional, so users can add more series if they wish\n      if (funcDef.params[0].multiple) {\n        funcDef.params[0].required = false;\n        // otherwise chop off the first param, it'll be handled separately\n      } else {\n        funcDef.params.shift();\n      }\n      // tag function as fake\n    } else {\n      func.fake = true;\n    }\n\n    _.forEach(funcDef.params, rawParam => {\n      const param = {\n        name: rawParam.name,\n        type: 'string',\n        optional: !rawParam.required,\n        multiple: !!rawParam.multiple,\n        options: undefined,\n      };\n\n      if (rawParam.default !== undefined) {\n        func.defaultParams.push(_.toString(rawParam.default));\n      } else if (rawParam.suggestions) {\n        func.defaultParams.push(_.toString(rawParam.suggestions[0]));\n      } else {\n        func.defaultParams.push('');\n      }\n\n      if (rawParam.type === 'boolean') {\n        param.type = 'boolean';\n        param.options = ['true', 'false'];\n      } else if (rawParam.type === 'integer') {\n        param.type = 'int';\n      } else if (rawParam.type === 'float') {\n        param.type = 'float';\n      } else if (rawParam.type === 'node') {\n        param.type = 'node';\n        param.options = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12'];\n      } else if (rawParam.type === 'nodeOrTag') {\n        param.type = 'node_or_tag';\n        param.options = ['name', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12'];\n      } else if (rawParam.type === 'intOrInterval') {\n        param.type = 'int_or_interval';\n      } else if (rawParam.type === 'seriesList') {\n        param.type = 'value_or_series';\n      }\n\n      if (rawParam.options) {\n        param.options = _.map(rawParam.options, _.toString);\n      } else if (rawParam.suggestions) {\n        param.options = _.map(rawParam.suggestions, _.toString);\n      }\n\n      func.params.push(param);\n    });\n\n    funcDefs[funcName] = func;\n  });\n\n  return funcDefs;\n}\n\nexport default {\n  createFuncInstance: createFuncInstance,\n  getFuncDef: getFuncDef,\n  getFuncDefs: getFuncDefs,\n  parseFuncDefs: parseFuncDefs,\n};\n","import _ from 'lodash';\nimport * as dateMath from 'app/core/utils/datemath';\nimport { isVersionGtOrEq, SemVersion } from 'app/core/utils/version';\nimport gfunc from './gfunc';\n\n/** @ngInject */\nexport function GraphiteDatasource(this: any, instanceSettings, $q, backendSrv, templateSrv) {\n  this.basicAuth = instanceSettings.basicAuth;\n  this.url = instanceSettings.url;\n  this.name = instanceSettings.name;\n  this.graphiteVersion = instanceSettings.jsonData.graphiteVersion || '0.9';\n  this.supportsTags = supportsTags(this.graphiteVersion);\n  this.cacheTimeout = instanceSettings.cacheTimeout;\n  this.withCredentials = instanceSettings.withCredentials;\n  this.render_method = instanceSettings.render_method || 'POST';\n  this.funcDefs = null;\n  this.funcDefsPromise = null;\n\n  this.getQueryOptionsInfo = () => {\n    return {\n      maxDataPoints: true,\n      cacheTimeout: true,\n      links: [\n        {\n          text: '帮助',\n          url: 'http://docs.grafana.org/features/datasources/graphite/#using-graphite-in-grafana',\n        },\n      ],\n    };\n  };\n\n  this.query = function(options) {\n    const graphOptions = {\n      from: this.translateTime(options.rangeRaw.from, false),\n      until: this.translateTime(options.rangeRaw.to, true),\n      targets: options.targets,\n      format: options.format,\n      cacheTimeout: options.cacheTimeout || this.cacheTimeout,\n      maxDataPoints: options.maxDataPoints,\n    };\n\n    const params = this.buildGraphiteParams(graphOptions, options.scopedVars);\n    if (params.length === 0) {\n      return $q.when({ data: [] });\n    }\n\n    const httpOptions: any = {\n      method: 'POST',\n      url: '/render',\n      data: params.join('&'),\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n      },\n    };\n\n    this.addTracingHeaders(httpOptions, options);\n\n    if (options.panelId) {\n      httpOptions.requestId = this.name + '.panelId.' + options.panelId;\n    }\n\n    return this.doGraphiteRequest(httpOptions).then(this.convertDataPointsToMs);\n  };\n\n  this.addTracingHeaders = function(httpOptions, options) {\n    const proxyMode = !this.url.match(/^http/);\n    if (proxyMode) {\n      httpOptions.headers['X-Dashboard-Id'] = options.dashboardId;\n      httpOptions.headers['X-Panel-Id'] = options.panelId;\n    }\n  };\n\n  this.convertDataPointsToMs = result => {\n    if (!result || !result.data) {\n      return [];\n    }\n    for (let i = 0; i < result.data.length; i++) {\n      const series = result.data[i];\n      for (let y = 0; y < series.datapoints.length; y++) {\n        series.datapoints[y][1] *= 1000;\n      }\n    }\n    return result;\n  };\n\n  this.parseTags = tagString => {\n    let tags = [];\n    tags = tagString.split(',');\n    if (tags.length === 1) {\n      tags = tagString.split(' ');\n      if (tags[0] === '') {\n        tags = [];\n      }\n    }\n    return tags;\n  };\n\n  this.annotationQuery = function(options) {\n    // Graphite metric as annotation\n    if (options.annotation.target) {\n      const target = templateSrv.replace(options.annotation.target, {}, 'glob');\n      const graphiteQuery = {\n        rangeRaw: options.rangeRaw,\n        targets: [{ target: target }],\n        format: 'json',\n        maxDataPoints: 100,\n      };\n\n      return this.query(graphiteQuery).then(result => {\n        const list = [];\n\n        for (let i = 0; i < result.data.length; i++) {\n          const target = result.data[i];\n\n          for (let y = 0; y < target.datapoints.length; y++) {\n            const datapoint = target.datapoints[y];\n            if (!datapoint[0]) {\n              continue;\n            }\n\n            list.push({\n              annotation: options.annotation,\n              time: datapoint[1],\n              title: target.target,\n            });\n          }\n        }\n\n        return list;\n      });\n    } else {\n      // Graphite event as annotation\n      const tags = templateSrv.replace(options.annotation.tags);\n      return this.events({ range: options.rangeRaw, tags: tags }).then(results => {\n        const list = [];\n        for (let i = 0; i < results.data.length; i++) {\n          const e = results.data[i];\n\n          let tags = e.tags;\n          if (_.isString(e.tags)) {\n            tags = this.parseTags(e.tags);\n          }\n\n          list.push({\n            annotation: options.annotation,\n            time: e.when * 1000,\n            title: e.what,\n            tags: tags,\n            text: e.data,\n          });\n        }\n\n        return list;\n      });\n    }\n  };\n\n  this.events = function(options) {\n    try {\n      let tags = '';\n      if (options.tags) {\n        tags = '&tags=' + options.tags;\n      }\n      return this.doGraphiteRequest({\n        method: 'GET',\n        url:\n          '/events/get_data?from=' +\n          this.translateTime(options.range.from, false) +\n          '&until=' +\n          this.translateTime(options.range.to, true) +\n          tags,\n      });\n    } catch (err) {\n      return $q.reject(err);\n    }\n  };\n\n  this.targetContainsTemplate = target => {\n    return templateSrv.variableExists(target.target);\n  };\n\n  this.translateTime = (date, roundUp) => {\n    if (_.isString(date)) {\n      if (date === 'now') {\n        return 'now';\n      } else if (date.indexOf('now-') >= 0 && date.indexOf('/') === -1) {\n        date = date.substring(3);\n        date = date.replace('m', 'min');\n        date = date.replace('M', 'mon');\n        return date;\n      }\n      date = dateMath.parse(date, roundUp);\n    }\n\n    // graphite' s from filter is exclusive\n    // here we step back one minute in order\n    // to guarantee that we get all the data that\n    // exists for the specified range\n    if (roundUp) {\n      if (date.get('s')) {\n        date.add(1, 'm');\n      }\n    } else if (roundUp === false) {\n      if (date.get('s')) {\n        date.subtract(1, 'm');\n      }\n    }\n\n    return date.unix();\n  };\n\n  this.metricFindQuery = function(query, optionalOptions) {\n    const options = optionalOptions || {};\n    const interpolatedQuery = templateSrv.replace(query);\n\n    // special handling for tag_values(<tag>[,<expression>]*), this is used for template variables\n    let matches = interpolatedQuery.match(/^tag_values\\(([^,]+)((, *[^,]+)*)\\)$/);\n    if (matches) {\n      const expressions = [];\n      const exprRegex = /, *([^,]+)/g;\n      let match = exprRegex.exec(matches[2]);\n      while (match !== null) {\n        expressions.push(match[1]);\n        match = exprRegex.exec(matches[2]);\n      }\n      options.limit = 10000;\n      return this.getTagValuesAutoComplete(expressions, matches[1], undefined, options);\n    }\n\n    // special handling for tags(<expression>[,<expression>]*), this is used for template variables\n    matches = interpolatedQuery.match(/^tags\\(([^,]*)((, *[^,]+)*)\\)$/);\n    if (matches) {\n      const expressions = [];\n      if (matches[1]) {\n        expressions.push(matches[1]);\n        const exprRegex = /, *([^,]+)/g;\n        let match = exprRegex.exec(matches[2]);\n        while (match !== null) {\n          expressions.push(match[1]);\n          match = exprRegex.exec(matches[2]);\n        }\n      }\n      options.limit = 10000;\n      return this.getTagsAutoComplete(expressions, undefined, options);\n    }\n\n    const httpOptions: any = {\n      method: 'GET',\n      url: '/metrics/find',\n      params: {\n        query: interpolatedQuery,\n      },\n      // for cancellations\n      requestId: options.requestId,\n    };\n\n    if (options.range) {\n      httpOptions.params.from = this.translateTime(options.range.from, false);\n      httpOptions.params.until = this.translateTime(options.range.to, true);\n    }\n\n    return this.doGraphiteRequest(httpOptions).then(results => {\n      return _.map(results.data, metric => {\n        return {\n          text: metric.text,\n          expandable: metric.expandable ? true : false,\n        };\n      });\n    });\n  };\n\n  this.getTags = function(optionalOptions) {\n    const options = optionalOptions || {};\n\n    const httpOptions: any = {\n      method: 'GET',\n      url: '/tags',\n      // for cancellations\n      requestId: options.requestId,\n    };\n\n    if (options.range) {\n      httpOptions.params.from = this.translateTime(options.range.from, false);\n      httpOptions.params.until = this.translateTime(options.range.to, true);\n    }\n\n    return this.doGraphiteRequest(httpOptions).then(results => {\n      return _.map(results.data, tag => {\n        return {\n          text: tag.tag,\n          id: tag.id,\n        };\n      });\n    });\n  };\n\n  this.getTagValues = function(tag, optionalOptions) {\n    const options = optionalOptions || {};\n\n    const httpOptions: any = {\n      method: 'GET',\n      url: '/tags/' + templateSrv.replace(tag),\n      // for cancellations\n      requestId: options.requestId,\n    };\n\n    if (options.range) {\n      httpOptions.params.from = this.translateTime(options.range.from, false);\n      httpOptions.params.until = this.translateTime(options.range.to, true);\n    }\n\n    return this.doGraphiteRequest(httpOptions).then(results => {\n      if (results.data && results.data.values) {\n        return _.map(results.data.values, value => {\n          return {\n            text: value.value,\n            id: value.id,\n          };\n        });\n      } else {\n        return [];\n      }\n    });\n  };\n\n  this.getTagsAutoComplete = (expressions, tagPrefix, optionalOptions) => {\n    const options = optionalOptions || {};\n\n    const httpOptions: any = {\n      method: 'GET',\n      url: '/tags/autoComplete/tags',\n      params: {\n        expr: _.map(expressions, expression => templateSrv.replace((expression || '').trim())),\n      },\n      // for cancellations\n      requestId: options.requestId,\n    };\n\n    if (tagPrefix) {\n      httpOptions.params.tagPrefix = tagPrefix;\n    }\n    if (options.limit) {\n      httpOptions.params.limit = options.limit;\n    }\n    if (options.range) {\n      httpOptions.params.from = this.translateTime(options.range.from, false);\n      httpOptions.params.until = this.translateTime(options.range.to, true);\n    }\n\n    return this.doGraphiteRequest(httpOptions).then(results => {\n      if (results.data) {\n        return _.map(results.data, tag => {\n          return { text: tag };\n        });\n      } else {\n        return [];\n      }\n    });\n  };\n\n  this.getTagValuesAutoComplete = (expressions, tag, valuePrefix, optionalOptions) => {\n    const options = optionalOptions || {};\n\n    const httpOptions: any = {\n      method: 'GET',\n      url: '/tags/autoComplete/values',\n      params: {\n        expr: _.map(expressions, expression => templateSrv.replace((expression || '').trim())),\n        tag: templateSrv.replace((tag || '').trim()),\n      },\n      // for cancellations\n      requestId: options.requestId,\n    };\n\n    if (valuePrefix) {\n      httpOptions.params.valuePrefix = valuePrefix;\n    }\n    if (options.limit) {\n      httpOptions.params.limit = options.limit;\n    }\n    if (options.range) {\n      httpOptions.params.from = this.translateTime(options.range.from, false);\n      httpOptions.params.until = this.translateTime(options.range.to, true);\n    }\n\n    return this.doGraphiteRequest(httpOptions).then(results => {\n      if (results.data) {\n        return _.map(results.data, value => {\n          return { text: value };\n        });\n      } else {\n        return [];\n      }\n    });\n  };\n\n  this.getVersion = function(optionalOptions) {\n    const options = optionalOptions || {};\n\n    const httpOptions = {\n      method: 'GET',\n      url: '/version',\n      requestId: options.requestId,\n    };\n\n    return this.doGraphiteRequest(httpOptions)\n      .then(results => {\n        if (results.data) {\n          const semver = new SemVersion(results.data);\n          return semver.isValid() ? results.data : '';\n        }\n        return '';\n      })\n      .catch(() => {\n        return '';\n      });\n  };\n\n  this.createFuncInstance = function(funcDef, options?) {\n    return gfunc.createFuncInstance(funcDef, options, this.funcDefs);\n  };\n\n  this.getFuncDef = function(name) {\n    return gfunc.getFuncDef(name, this.funcDefs);\n  };\n\n  this.waitForFuncDefsLoaded = function() {\n    return this.getFuncDefs();\n  };\n\n  this.getFuncDefs = function() {\n    if (this.funcDefsPromise !== null) {\n      return this.funcDefsPromise;\n    }\n\n    if (!supportsFunctionIndex(this.graphiteVersion)) {\n      this.funcDefs = gfunc.getFuncDefs(this.graphiteVersion);\n      this.funcDefsPromise = Promise.resolve(this.funcDefs);\n      return this.funcDefsPromise;\n    }\n\n    const httpOptions = {\n      method: 'GET',\n      url: '/functions',\n    };\n\n    this.funcDefsPromise = this.doGraphiteRequest(httpOptions)\n      .then(results => {\n        if (results.status !== 200 || typeof results.data !== 'object') {\n          this.funcDefs = gfunc.getFuncDefs(this.graphiteVersion);\n        } else {\n          this.funcDefs = gfunc.parseFuncDefs(results.data);\n        }\n        return this.funcDefs;\n      })\n      .catch(err => {\n        console.log('Fetching graphite functions error', err);\n        this.funcDefs = gfunc.getFuncDefs(this.graphiteVersion);\n        return this.funcDefs;\n      });\n\n    return this.funcDefsPromise;\n  };\n\n  this.testDatasource = function() {\n    const query = {\n      panelId: 3,\n      rangeRaw: { from: 'now-1h', to: 'now' },\n      targets: [{ target: 'constantLine(100)' }],\n      maxDataPoints: 300,\n    };\n    return this.query(query).then(() => {\n      return { status: 'success', message: 'Data source is working' };\n    });\n  };\n\n  this.doGraphiteRequest = function(options) {\n    if (this.basicAuth || this.withCredentials) {\n      options.withCredentials = true;\n    }\n    if (this.basicAuth) {\n      options.headers = options.headers || {};\n      options.headers.Authorization = this.basicAuth;\n    }\n\n    options.url = this.url + options.url;\n    options.inspect = { type: 'graphite' };\n\n    return backendSrv.datasourceRequest(options);\n  };\n\n  this._seriesRefLetters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\n  this.buildGraphiteParams = function(options, scopedVars) {\n    const graphiteOptions = ['from', 'until', 'rawData', 'format', 'maxDataPoints', 'cacheTimeout'];\n    const cleanOptions = [],\n      targets = {};\n    let target, targetValue, i;\n    const regex = /\\#([A-Z])/g;\n    const intervalFormatFixRegex = /'(\\d+)m'/gi;\n    let hasTargets = false;\n\n    options['format'] = 'json';\n\n    function fixIntervalFormat(match) {\n      return match.replace('m', 'min').replace('M', 'mon');\n    }\n\n    for (i = 0; i < options.targets.length; i++) {\n      target = options.targets[i];\n      if (!target.target) {\n        continue;\n      }\n\n      if (!target.refId) {\n        target.refId = this._seriesRefLetters[i];\n      }\n\n      targetValue = templateSrv.replace(target.target, scopedVars);\n      targetValue = targetValue.replace(intervalFormatFixRegex, fixIntervalFormat);\n      targets[target.refId] = targetValue;\n    }\n\n    function nestedSeriesRegexReplacer(match, g1) {\n      return targets[g1] || match;\n    }\n\n    for (i = 0; i < options.targets.length; i++) {\n      target = options.targets[i];\n      if (!target.target) {\n        continue;\n      }\n\n      targetValue = targets[target.refId];\n      targetValue = targetValue.replace(regex, nestedSeriesRegexReplacer);\n      targets[target.refId] = targetValue;\n\n      if (!target.hide) {\n        hasTargets = true;\n        cleanOptions.push('target=' + encodeURIComponent(targetValue));\n      }\n    }\n\n    _.each(options, (value, key) => {\n      if (_.indexOf(graphiteOptions, key) === -1) {\n        return;\n      }\n      if (value) {\n        cleanOptions.push(key + '=' + encodeURIComponent(value));\n      }\n    });\n\n    if (!hasTargets) {\n      return [];\n    }\n\n    return cleanOptions;\n  };\n}\n\nfunction supportsTags(version: string): boolean {\n  return isVersionGtOrEq(version, '1.1');\n}\n\nfunction supportsFunctionIndex(version: string): boolean {\n  return isVersionGtOrEq(version, '1.1');\n}\n","import angular from 'angular';\nimport _ from 'lodash';\nimport $ from 'jquery';\nimport rst2html from 'rst2html';\nimport Drop from 'tether-drop';\n\n/** @ngInject */\nexport function graphiteAddFunc($compile) {\n  const inputTemplate =\n    '<input type=\"text\"' + ' class=\"gf-form-input\"' + ' spellcheck=\"false\" style=\"display:none\"></input>';\n\n  const buttonTemplate =\n    '<a class=\"gf-form-label query-part dropdown-toggle\"' +\n    ' tabindex=\"1\" gf-dropdown=\"functionMenu\" data-toggle=\"dropdown\">' +\n    '<i class=\"fa fa-plus\"></i></a>';\n\n  return {\n    link: function($scope, elem) {\n      const ctrl = $scope.ctrl;\n\n      const $input = $(inputTemplate);\n      const $button = $(buttonTemplate);\n\n      $input.appendTo(elem);\n      $button.appendTo(elem);\n\n      ctrl.datasource.getFuncDefs().then(funcDefs => {\n        const allFunctions = _.map(funcDefs, 'name').sort();\n\n        $scope.functionMenu = createFunctionDropDownMenu(funcDefs);\n\n        $input.attr('data-provide', 'typeahead');\n        $input.typeahead({\n          source: allFunctions,\n          minLength: 1,\n          items: 10,\n          updater: value => {\n            let funcDef = ctrl.datasource.getFuncDef(value);\n            if (!funcDef) {\n              // try find close match\n              value = value.toLowerCase();\n              funcDef = _.find(allFunctions, funcName => {\n                return funcName.toLowerCase().indexOf(value) === 0;\n              });\n\n              if (!funcDef) {\n                return '';\n              }\n            }\n\n            $scope.$apply(() => {\n              ctrl.addFunction(funcDef);\n            });\n\n            $input.trigger('blur');\n            return '';\n          },\n        });\n\n        $button.click(() => {\n          $button.hide();\n          $input.show();\n          $input.focus();\n        });\n\n        $input.keyup(() => {\n          elem.toggleClass('open', $input.val() === '');\n        });\n\n        $input.blur(() => {\n          // clicking the function dropdown menu won't\n          // work if you remove class at once\n          setTimeout(() => {\n            $input.val('');\n            $input.hide();\n            $button.show();\n            elem.removeClass('open');\n          }, 200);\n        });\n\n        $compile(elem.contents())($scope);\n      });\n\n      let drop;\n      const cleanUpDrop = () => {\n        if (drop) {\n          drop.destroy();\n          drop = null;\n        }\n      };\n\n      $(elem)\n        .on('mouseenter', 'ul.dropdown-menu li', () => {\n          cleanUpDrop();\n\n          let funcDef;\n          try {\n            funcDef = ctrl.datasource.getFuncDef($('a', this).text());\n          } catch (e) {\n            // ignore\n          }\n\n          if (funcDef && funcDef.description) {\n            let shortDesc = funcDef.description;\n            if (shortDesc.length > 500) {\n              shortDesc = shortDesc.substring(0, 497) + '...';\n            }\n\n            const contentElement = document.createElement('div');\n            contentElement.innerHTML = '<h4>' + funcDef.name + '</h4>' + rst2html(shortDesc);\n\n            drop = new Drop({\n              target: this,\n              content: contentElement,\n              classes: 'drop-popover',\n              openOn: 'always',\n              tetherOptions: {\n                attachment: 'bottom left',\n                targetAttachment: 'bottom right',\n              },\n            });\n          }\n        })\n        .on('mouseout', 'ul.dropdown-menu li', () => {\n          cleanUpDrop();\n        });\n\n      $scope.$on('$destroy', cleanUpDrop);\n    },\n  };\n}\n\nangular.module('grafana.directives').directive('graphiteAddFunc', graphiteAddFunc);\n\nfunction createFunctionDropDownMenu(funcDefs) {\n  const categories = {};\n\n  _.forEach(funcDefs, funcDef => {\n    if (!funcDef.category) {\n      return;\n    }\n    if (!categories[funcDef.category]) {\n      categories[funcDef.category] = [];\n    }\n    categories[funcDef.category].push({\n      text: funcDef.name,\n      click: \"ctrl.addFunction('\" + funcDef.name + \"')\",\n    });\n  });\n\n  return _.sortBy(\n    _.map(categories, (submenu, category) => {\n      return {\n        text: category,\n        submenu: _.sortBy(submenu, 'text'),\n      };\n    }),\n    'text'\n  );\n}\n","import angular from 'angular';\nimport _ from 'lodash';\nimport $ from 'jquery';\nimport rst2html from 'rst2html';\n\n/** @ngInject */\nexport function graphiteFuncEditor($compile, templateSrv, popoverSrv) {\n  const funcSpanTemplate = '<a ng-click=\"\">{{func.def.name}}</a><span>(</span>';\n  const paramTemplate =\n    '<input type=\"text\" style=\"display:none\"' + ' class=\"input-small tight-form-func-param\"></input>';\n\n  const funcControlsTemplate = `\n    <div class=\"tight-form-func-controls\">\n      <span class=\"pointer fa fa-arrow-left\"></span>\n      <span class=\"pointer fa fa-question-circle\"></span>\n      <span class=\"pointer fa fa-remove\" ></span>\n      <span class=\"pointer fa fa-arrow-right\"></span>\n    </div>`;\n\n  return {\n    restrict: 'A',\n    link: function postLink($scope, elem) {\n      const $funcLink = $(funcSpanTemplate);\n      const $funcControls = $(funcControlsTemplate);\n      const ctrl = $scope.ctrl;\n      const func = $scope.func;\n      let scheduledRelink = false;\n      let paramCountAtLink = 0;\n      let cancelBlur = null;\n\n      function clickFuncParam(this: any, paramIndex) {\n        /*jshint validthis:true */\n\n        const $link = $(this);\n        const $comma = $link.prev('.comma');\n        const $input = $link.next();\n\n        $input.val(func.params[paramIndex]);\n\n        $comma.removeClass('query-part__last');\n        $link.hide();\n        $input.show();\n        $input.focus();\n        $input.select();\n\n        const typeahead = $input.data('typeahead');\n        if (typeahead) {\n          $input.val('');\n          typeahead.lookup();\n        }\n      }\n\n      function scheduledRelinkIfNeeded() {\n        if (paramCountAtLink === func.params.length) {\n          return;\n        }\n\n        if (!scheduledRelink) {\n          scheduledRelink = true;\n          setTimeout(() => {\n            relink();\n            scheduledRelink = false;\n          }, 200);\n        }\n      }\n\n      function paramDef(index) {\n        if (index < func.def.params.length) {\n          return func.def.params[index];\n        }\n        if (_.last(func.def.params).multiple) {\n          return _.assign({}, _.last(func.def.params), { optional: true });\n        }\n        return {};\n      }\n\n      function switchToLink(inputElem, paramIndex) {\n        /*jshint validthis:true */\n        const $input = $(inputElem);\n\n        clearTimeout(cancelBlur);\n        cancelBlur = null;\n\n        const $link = $input.prev();\n        const $comma = $link.prev('.comma');\n        const newValue = $input.val();\n\n        // remove optional empty params\n        if (newValue !== '' || paramDef(paramIndex).optional) {\n          func.updateParam(newValue, paramIndex);\n          $link.html(newValue ? templateSrv.highlightVariablesAsHtml(newValue) : '&nbsp;');\n        }\n\n        scheduledRelinkIfNeeded();\n\n        $scope.$apply(() => {\n          ctrl.targetChanged();\n        });\n\n        if ($link.hasClass('query-part__last') && newValue === '') {\n          $comma.addClass('query-part__last');\n        } else {\n          $link.removeClass('query-part__last');\n        }\n\n        $input.hide();\n        $link.show();\n      }\n\n      // this = input element\n      function inputBlur(this: any, paramIndex) {\n        /*jshint validthis:true */\n        const inputElem = this;\n        // happens long before the click event on the typeahead options\n        // need to have long delay because the blur\n        cancelBlur = setTimeout(() => {\n          switchToLink(inputElem, paramIndex);\n        }, 200);\n      }\n\n      function inputKeyPress(this: any, paramIndex, e) {\n        /*jshint validthis:true */\n        if (e.which === 13) {\n          $(this).blur();\n        }\n      }\n\n      function inputKeyDown(this: any) {\n        /*jshint validthis:true */\n        this.style.width = (3 + this.value.length) * 8 + 'px';\n      }\n\n      function addTypeahead($input, paramIndex) {\n        $input.attr('data-provide', 'typeahead');\n\n        let options = paramDef(paramIndex).options;\n        if (paramDef(paramIndex).type === 'int') {\n          options = _.map(options, val => {\n            return val.toString();\n          });\n        }\n\n        $input.typeahead({\n          source: options,\n          minLength: 0,\n          items: 20,\n          updater: value => {\n            $input.val(value);\n            switchToLink($input[0], paramIndex);\n            return value;\n          },\n        });\n\n        const typeahead = $input.data('typeahead');\n        typeahead.lookup = function() {\n          this.query = this.$element.val() || '';\n          return this.process(this.source);\n        };\n      }\n\n      function toggleFuncControls() {\n        const targetDiv = elem.closest('.tight-form');\n\n        if (elem.hasClass('show-function-controls')) {\n          elem.removeClass('show-function-controls');\n          targetDiv.removeClass('has-open-function');\n          $funcControls.hide();\n          return;\n        }\n\n        elem.addClass('show-function-controls');\n        targetDiv.addClass('has-open-function');\n\n        $funcControls.show();\n      }\n\n      function addElementsAndCompile() {\n        $funcControls.appendTo(elem);\n        $funcLink.appendTo(elem);\n\n        const defParams = _.clone(func.def.params);\n        const lastParam = _.last(func.def.params);\n\n        while (func.params.length >= defParams.length && lastParam && lastParam.multiple) {\n          defParams.push(_.assign({}, lastParam, { optional: true }));\n        }\n\n        _.each(defParams, (param, index) => {\n          if (param.optional && func.params.length < index) {\n            return false;\n          }\n\n          let paramValue = templateSrv.highlightVariablesAsHtml(func.params[index]);\n\n          const last = index >= func.params.length - 1 && param.optional && !paramValue;\n          if (last && param.multiple) {\n            paramValue = '+';\n          }\n\n          if (index > 0) {\n            $('<span class=\"comma' + (last ? ' query-part__last' : '') + '\">, </span>').appendTo(elem);\n          }\n\n          const $paramLink = $(\n            '<a ng-click=\"\" class=\"graphite-func-param-link' +\n              (last ? ' query-part__last' : '') +\n              '\">' +\n              (paramValue || '&nbsp;') +\n              '</a>'\n          );\n          const $input = $(paramTemplate);\n          $input.attr('placeholder', param.name);\n\n          paramCountAtLink++;\n\n          $paramLink.appendTo(elem);\n          $input.appendTo(elem);\n\n          $input.blur(_.partial(inputBlur, index));\n          $input.keyup(inputKeyDown);\n          $input.keypress(_.partial(inputKeyPress, index));\n          $paramLink.click(_.partial(clickFuncParam, index));\n\n          if (param.options) {\n            addTypeahead($input, index);\n          }\n\n          return true;\n        });\n\n        $('<span>)</span>').appendTo(elem);\n\n        $compile(elem.contents())($scope);\n      }\n\n      function ifJustAddedFocusFirstParam() {\n        if ($scope.func.added) {\n          $scope.func.added = false;\n          setTimeout(() => {\n            elem\n              .find('.graphite-func-param-link')\n              .first()\n              .click();\n          }, 10);\n        }\n      }\n\n      function registerFuncControlsToggle() {\n        $funcLink.click(toggleFuncControls);\n      }\n\n      function registerFuncControlsActions() {\n        $funcControls.click(e => {\n          const $target = $(e.target);\n          if ($target.hasClass('fa-remove')) {\n            toggleFuncControls();\n            $scope.$apply(() => {\n              ctrl.removeFunction($scope.func);\n            });\n            return;\n          }\n\n          if ($target.hasClass('fa-arrow-left')) {\n            $scope.$apply(() => {\n              _.move(ctrl.queryModel.functions, $scope.$index, $scope.$index - 1);\n              ctrl.targetChanged();\n            });\n            return;\n          }\n\n          if ($target.hasClass('fa-arrow-right')) {\n            $scope.$apply(() => {\n              _.move(ctrl.queryModel.functions, $scope.$index, $scope.$index + 1);\n              ctrl.targetChanged();\n            });\n            return;\n          }\n\n          if ($target.hasClass('fa-question-circle')) {\n            const funcDef = ctrl.datasource.getFuncDef(func.def.name);\n            if (funcDef && funcDef.description) {\n              popoverSrv.show({\n                element: e.target,\n                position: 'bottom left',\n                classNames: 'drop-popover drop-function-def',\n                template: `\n                  <div style=\"overflow:auto;max-height:30rem;\">\n                    <h4> ${funcDef.name} </h4>\n                    ${rst2html(funcDef.description)}\n                  </div>`,\n                openOn: 'click',\n              });\n            } else {\n              window.open(\n                'http://graphite.readthedocs.org/en/latest/functions.html#graphite.render.functions.' + func.def.name,\n                '_blank'\n              );\n            }\n            return;\n          }\n        });\n      }\n\n      function relink() {\n        elem.children().remove();\n\n        addElementsAndCompile();\n        ifJustAddedFocusFirstParam();\n        registerFuncControlsToggle();\n        registerFuncControlsActions();\n      }\n\n      relink();\n    },\n  };\n}\n\nangular.module('grafana.directives').directive('graphiteFuncEditor', graphiteFuncEditor);\n","import _ from 'lodash';\n\n// This is auto generated from the unicode tables.\n// The tables are at:\n// http://www.fileformat.info/info/unicode/category/Lu/list.htm\n// http://www.fileformat.info/info/unicode/category/Ll/list.htm\n// http://www.fileformat.info/info/unicode/category/Lt/list.htm\n// http://www.fileformat.info/info/unicode/category/Lm/list.htm\n// http://www.fileformat.info/info/unicode/category/Lo/list.htm\n// http://www.fileformat.info/info/unicode/category/Nl/list.htm\n\nconst unicodeLetterTable = [\n  170,\n  170,\n  181,\n  181,\n  186,\n  186,\n  192,\n  214,\n  216,\n  246,\n  248,\n  705,\n  710,\n  721,\n  736,\n  740,\n  748,\n  748,\n  750,\n  750,\n  880,\n  884,\n  886,\n  887,\n  890,\n  893,\n  902,\n  902,\n  904,\n  906,\n  908,\n  908,\n  910,\n  929,\n  931,\n  1013,\n  1015,\n  1153,\n  1162,\n  1319,\n  1329,\n  1366,\n  1369,\n  1369,\n  1377,\n  1415,\n  1488,\n  1514,\n  1520,\n  1522,\n  1568,\n  1610,\n  1646,\n  1647,\n  1649,\n  1747,\n  1749,\n  1749,\n  1765,\n  1766,\n  1774,\n  1775,\n  1786,\n  1788,\n  1791,\n  1791,\n  1808,\n  1808,\n  1810,\n  1839,\n  1869,\n  1957,\n  1969,\n  1969,\n  1994,\n  2026,\n  2036,\n  2037,\n  2042,\n  2042,\n  2048,\n  2069,\n  2074,\n  2074,\n  2084,\n  2084,\n  2088,\n  2088,\n  2112,\n  2136,\n  2308,\n  2361,\n  2365,\n  2365,\n  2384,\n  2384,\n  2392,\n  2401,\n  2417,\n  2423,\n  2425,\n  2431,\n  2437,\n  2444,\n  2447,\n  2448,\n  2451,\n  2472,\n  2474,\n  2480,\n  2482,\n  2482,\n  2486,\n  2489,\n  2493,\n  2493,\n  2510,\n  2510,\n  2524,\n  2525,\n  2527,\n  2529,\n  2544,\n  2545,\n  2565,\n  2570,\n  2575,\n  2576,\n  2579,\n  2600,\n  2602,\n  2608,\n  2610,\n  2611,\n  2613,\n  2614,\n  2616,\n  2617,\n  2649,\n  2652,\n  2654,\n  2654,\n  2674,\n  2676,\n  2693,\n  2701,\n  2703,\n  2705,\n  2707,\n  2728,\n  2730,\n  2736,\n  2738,\n  2739,\n  2741,\n  2745,\n  2749,\n  2749,\n  2768,\n  2768,\n  2784,\n  2785,\n  2821,\n  2828,\n  2831,\n  2832,\n  2835,\n  2856,\n  2858,\n  2864,\n  2866,\n  2867,\n  2869,\n  2873,\n  2877,\n  2877,\n  2908,\n  2909,\n  2911,\n  2913,\n  2929,\n  2929,\n  2947,\n  2947,\n  2949,\n  2954,\n  2958,\n  2960,\n  2962,\n  2965,\n  2969,\n  2970,\n  2972,\n  2972,\n  2974,\n  2975,\n  2979,\n  2980,\n  2984,\n  2986,\n  2990,\n  3001,\n  3024,\n  3024,\n  3077,\n  3084,\n  3086,\n  3088,\n  3090,\n  3112,\n  3114,\n  3123,\n  3125,\n  3129,\n  3133,\n  3133,\n  3160,\n  3161,\n  3168,\n  3169,\n  3205,\n  3212,\n  3214,\n  3216,\n  3218,\n  3240,\n  3242,\n  3251,\n  3253,\n  3257,\n  3261,\n  3261,\n  3294,\n  3294,\n  3296,\n  3297,\n  3313,\n  3314,\n  3333,\n  3340,\n  3342,\n  3344,\n  3346,\n  3386,\n  3389,\n  3389,\n  3406,\n  3406,\n  3424,\n  3425,\n  3450,\n  3455,\n  3461,\n  3478,\n  3482,\n  3505,\n  3507,\n  3515,\n  3517,\n  3517,\n  3520,\n  3526,\n  3585,\n  3632,\n  3634,\n  3635,\n  3648,\n  3654,\n  3713,\n  3714,\n  3716,\n  3716,\n  3719,\n  3720,\n  3722,\n  3722,\n  3725,\n  3725,\n  3732,\n  3735,\n  3737,\n  3743,\n  3745,\n  3747,\n  3749,\n  3749,\n  3751,\n  3751,\n  3754,\n  3755,\n  3757,\n  3760,\n  3762,\n  3763,\n  3773,\n  3773,\n  3776,\n  3780,\n  3782,\n  3782,\n  3804,\n  3805,\n  3840,\n  3840,\n  3904,\n  3911,\n  3913,\n  3948,\n  3976,\n  3980,\n  4096,\n  4138,\n  4159,\n  4159,\n  4176,\n  4181,\n  4186,\n  4189,\n  4193,\n  4193,\n  4197,\n  4198,\n  4206,\n  4208,\n  4213,\n  4225,\n  4238,\n  4238,\n  4256,\n  4293,\n  4304,\n  4346,\n  4348,\n  4348,\n  4352,\n  4680,\n  4682,\n  4685,\n  4688,\n  4694,\n  4696,\n  4696,\n  4698,\n  4701,\n  4704,\n  4744,\n  4746,\n  4749,\n  4752,\n  4784,\n  4786,\n  4789,\n  4792,\n  4798,\n  4800,\n  4800,\n  4802,\n  4805,\n  4808,\n  4822,\n  4824,\n  4880,\n  4882,\n  4885,\n  4888,\n  4954,\n  4992,\n  5007,\n  5024,\n  5108,\n  5121,\n  5740,\n  5743,\n  5759,\n  5761,\n  5786,\n  5792,\n  5866,\n  5870,\n  5872,\n  5888,\n  5900,\n  5902,\n  5905,\n  5920,\n  5937,\n  5952,\n  5969,\n  5984,\n  5996,\n  5998,\n  6000,\n  6016,\n  6067,\n  6103,\n  6103,\n  6108,\n  6108,\n  6176,\n  6263,\n  6272,\n  6312,\n  6314,\n  6314,\n  6320,\n  6389,\n  6400,\n  6428,\n  6480,\n  6509,\n  6512,\n  6516,\n  6528,\n  6571,\n  6593,\n  6599,\n  6656,\n  6678,\n  6688,\n  6740,\n  6823,\n  6823,\n  6917,\n  6963,\n  6981,\n  6987,\n  7043,\n  7072,\n  7086,\n  7087,\n  7104,\n  7141,\n  7168,\n  7203,\n  7245,\n  7247,\n  7258,\n  7293,\n  7401,\n  7404,\n  7406,\n  7409,\n  7424,\n  7615,\n  7680,\n  7957,\n  7960,\n  7965,\n  7968,\n  8005,\n  8008,\n  8013,\n  8016,\n  8023,\n  8025,\n  8025,\n  8027,\n  8027,\n  8029,\n  8029,\n  8031,\n  8061,\n  8064,\n  8116,\n  8118,\n  8124,\n  8126,\n  8126,\n  8130,\n  8132,\n  8134,\n  8140,\n  8144,\n  8147,\n  8150,\n  8155,\n  8160,\n  8172,\n  8178,\n  8180,\n  8182,\n  8188,\n  8305,\n  8305,\n  8319,\n  8319,\n  8336,\n  8348,\n  8450,\n  8450,\n  8455,\n  8455,\n  8458,\n  8467,\n  8469,\n  8469,\n  8473,\n  8477,\n  8484,\n  8484,\n  8486,\n  8486,\n  8488,\n  8488,\n  8490,\n  8493,\n  8495,\n  8505,\n  8508,\n  8511,\n  8517,\n  8521,\n  8526,\n  8526,\n  8544,\n  8584,\n  11264,\n  11310,\n  11312,\n  11358,\n  11360,\n  11492,\n  11499,\n  11502,\n  11520,\n  11557,\n  11568,\n  11621,\n  11631,\n  11631,\n  11648,\n  11670,\n  11680,\n  11686,\n  11688,\n  11694,\n  11696,\n  11702,\n  11704,\n  11710,\n  11712,\n  11718,\n  11720,\n  11726,\n  11728,\n  11734,\n  11736,\n  11742,\n  11823,\n  11823,\n  12293,\n  12295,\n  12321,\n  12329,\n  12337,\n  12341,\n  12344,\n  12348,\n  12353,\n  12438,\n  12445,\n  12447,\n  12449,\n  12538,\n  12540,\n  12543,\n  12549,\n  12589,\n  12593,\n  12686,\n  12704,\n  12730,\n  12784,\n  12799,\n  13312,\n  13312,\n  19893,\n  19893,\n  19968,\n  19968,\n  40907,\n  40907,\n  40960,\n  42124,\n  42192,\n  42237,\n  42240,\n  42508,\n  42512,\n  42527,\n  42538,\n  42539,\n  42560,\n  42606,\n  42623,\n  42647,\n  42656,\n  42735,\n  42775,\n  42783,\n  42786,\n  42888,\n  42891,\n  42894,\n  42896,\n  42897,\n  42912,\n  42921,\n  43002,\n  43009,\n  43011,\n  43013,\n  43015,\n  43018,\n  43020,\n  43042,\n  43072,\n  43123,\n  43138,\n  43187,\n  43250,\n  43255,\n  43259,\n  43259,\n  43274,\n  43301,\n  43312,\n  43334,\n  43360,\n  43388,\n  43396,\n  43442,\n  43471,\n  43471,\n  43520,\n  43560,\n  43584,\n  43586,\n  43588,\n  43595,\n  43616,\n  43638,\n  43642,\n  43642,\n  43648,\n  43695,\n  43697,\n  43697,\n  43701,\n  43702,\n  43705,\n  43709,\n  43712,\n  43712,\n  43714,\n  43714,\n  43739,\n  43741,\n  43777,\n  43782,\n  43785,\n  43790,\n  43793,\n  43798,\n  43808,\n  43814,\n  43816,\n  43822,\n  43968,\n  44002,\n  44032,\n  44032,\n  55203,\n  55203,\n  55216,\n  55238,\n  55243,\n  55291,\n  63744,\n  64045,\n  64048,\n  64109,\n  64112,\n  64217,\n  64256,\n  64262,\n  64275,\n  64279,\n  64285,\n  64285,\n  64287,\n  64296,\n  64298,\n  64310,\n  64312,\n  64316,\n  64318,\n  64318,\n  64320,\n  64321,\n  64323,\n  64324,\n  64326,\n  64433,\n  64467,\n  64829,\n  64848,\n  64911,\n  64914,\n  64967,\n  65008,\n  65019,\n  65136,\n  65140,\n  65142,\n  65276,\n  65313,\n  65338,\n  65345,\n  65370,\n  65382,\n  65470,\n  65474,\n  65479,\n  65482,\n  65487,\n  65490,\n  65495,\n  65498,\n  65500,\n  65536,\n  65547,\n  65549,\n  65574,\n  65576,\n  65594,\n  65596,\n  65597,\n  65599,\n  65613,\n  65616,\n  65629,\n  65664,\n  65786,\n  65856,\n  65908,\n  66176,\n  66204,\n  66208,\n  66256,\n  66304,\n  66334,\n  66352,\n  66378,\n  66432,\n  66461,\n  66464,\n  66499,\n  66504,\n  66511,\n  66513,\n  66517,\n  66560,\n  66717,\n  67584,\n  67589,\n  67592,\n  67592,\n  67594,\n  67637,\n  67639,\n  67640,\n  67644,\n  67644,\n  67647,\n  67669,\n  67840,\n  67861,\n  67872,\n  67897,\n  68096,\n  68096,\n  68112,\n  68115,\n  68117,\n  68119,\n  68121,\n  68147,\n  68192,\n  68220,\n  68352,\n  68405,\n  68416,\n  68437,\n  68448,\n  68466,\n  68608,\n  68680,\n  69635,\n  69687,\n  69763,\n  69807,\n  73728,\n  74606,\n  74752,\n  74850,\n  77824,\n  78894,\n  92160,\n  92728,\n  110592,\n  110593,\n  119808,\n  119892,\n  119894,\n  119964,\n  119966,\n  119967,\n  119970,\n  119970,\n  119973,\n  119974,\n  119977,\n  119980,\n  119982,\n  119993,\n  119995,\n  119995,\n  119997,\n  120003,\n  120005,\n  120069,\n  120071,\n  120074,\n  120077,\n  120084,\n  120086,\n  120092,\n  120094,\n  120121,\n  120123,\n  120126,\n  120128,\n  120132,\n  120134,\n  120134,\n  120138,\n  120144,\n  120146,\n  120485,\n  120488,\n  120512,\n  120514,\n  120538,\n  120540,\n  120570,\n  120572,\n  120596,\n  120598,\n  120628,\n  120630,\n  120654,\n  120656,\n  120686,\n  120688,\n  120712,\n  120714,\n  120744,\n  120746,\n  120770,\n  120772,\n  120779,\n  131072,\n  131072,\n  173782,\n  173782,\n  173824,\n  173824,\n  177972,\n  177972,\n  177984,\n  177984,\n  178205,\n  178205,\n  194560,\n  195101,\n];\n\nconst identifierStartTable = [];\n\nfor (let i = 0; i < 128; i++) {\n  identifierStartTable[i] =\n    (i >= 48 && i <= 57) || // 0-9\n    i === 36 || // $\n    i === 126 || // ~\n    i === 124 || // |\n    (i >= 65 && i <= 90) || // A-Z\n    i === 95 || // _\n    i === 45 || // -\n    i === 42 || // *\n    i === 58 || // :\n    i === 91 || // templateStart [\n    i === 93 || // templateEnd ]\n    i === 63 || // ?\n    i === 37 || // %\n    i === 35 || // #\n    i === 61 || // =\n    (i >= 97 && i <= 122); // a-z\n}\n\nconst identifierPartTable = identifierStartTable;\n\nexport function Lexer(this: any, expression) {\n  this.input = expression;\n  this.char = 1;\n  this.from = 1;\n}\n\nLexer.prototype = {\n  peek: function(i) {\n    return this.input.charAt(i || 0);\n  },\n\n  skip: function(i) {\n    i = i || 1;\n    this.char += i;\n    this.input = this.input.slice(i);\n  },\n\n  tokenize: function() {\n    const list = [];\n    let token = this.next();\n    while (token) {\n      list.push(token);\n      token = this.next();\n    }\n    return list;\n  },\n\n  next: function() {\n    this.from = this.char;\n\n    // Move to the next non-space character.\n    if (/\\s/.test(this.peek())) {\n      while (/\\s/.test(this.peek())) {\n        this.from += 1;\n        this.skip();\n      }\n\n      if (this.peek() === '') {\n        // EOL\n        return null;\n      }\n    }\n\n    let match = this.scanStringLiteral();\n    if (match) {\n      return match;\n    }\n\n    match = this.scanPunctuator() || this.scanNumericLiteral() || this.scanIdentifier() || this.scanTemplateSequence();\n\n    if (match) {\n      this.skip(match.value.length);\n      return match;\n    }\n\n    // No token could be matched, give up.\n    return null;\n  },\n\n  scanTemplateSequence: function() {\n    if (this.peek() === '[' && this.peek(1) === '[') {\n      return {\n        type: 'templateStart',\n        value: '[[',\n        pos: this.char,\n      };\n    }\n\n    if (this.peek() === ']' && this.peek(1) === ']') {\n      return {\n        type: 'templateEnd',\n        value: '[[',\n        pos: this.char,\n      };\n    }\n\n    return null;\n  },\n\n  /*\n   * Extract a JavaScript identifier out of the next sequence of\n   * characters or return 'null' if its not possible. In addition,\n   * to Identifier this method can also produce BooleanLiteral\n   * (true/false) and NullLiteral (null).\n   */\n  scanIdentifier: function() {\n    let id = '';\n    let index = 0;\n    let type, char;\n\n    // Detects any character in the Unicode categories \"Uppercase\n    // letter (Lu)\", \"Lowercase letter (Ll)\", \"Titlecase letter\n    // (Lt)\", \"Modifier letter (Lm)\", \"Other letter (Lo)\", or\n    // \"Letter number (Nl)\".\n    //\n    // Both approach and unicodeLetterTable were borrowed from\n    // Google's Traceur.\n\n    function isUnicodeLetter(code) {\n      for (let i = 0; i < unicodeLetterTable.length; ) {\n        if (code < unicodeLetterTable[i++]) {\n          return false;\n        }\n\n        if (code <= unicodeLetterTable[i++]) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n\n    function isHexDigit(str) {\n      return /^[0-9a-fA-F]$/.test(str);\n    }\n\n    const readUnicodeEscapeSequence = _.bind(function(this: any) {\n      /*jshint validthis:true */\n      index += 1;\n\n      if (this.peek(index) !== 'u') {\n        return null;\n      }\n\n      const ch1 = this.peek(index + 1);\n      const ch2 = this.peek(index + 2);\n      const ch3 = this.peek(index + 3);\n      const ch4 = this.peek(index + 4);\n      let code;\n\n      if (isHexDigit(ch1) && isHexDigit(ch2) && isHexDigit(ch3) && isHexDigit(ch4)) {\n        code = parseInt(ch1 + ch2 + ch3 + ch4, 16);\n\n        if (isUnicodeLetter(code)) {\n          index += 5;\n          return '\\\\u' + ch1 + ch2 + ch3 + ch4;\n        }\n\n        return null;\n      }\n\n      return null;\n    }, this);\n\n    const getIdentifierStart = _.bind(function(this: any) {\n      /*jshint validthis:true */\n      const chr = this.peek(index);\n      const code = chr.charCodeAt(0);\n\n      if (chr === '*') {\n        index += 1;\n        return chr;\n      }\n\n      if (code === 92) {\n        return readUnicodeEscapeSequence();\n      }\n\n      if (code < 128) {\n        if (identifierStartTable[code]) {\n          index += 1;\n          return chr;\n        }\n\n        return null;\n      }\n\n      if (isUnicodeLetter(code)) {\n        index += 1;\n        return chr;\n      }\n\n      return null;\n    }, this);\n\n    const getIdentifierPart = _.bind(function(this: any) {\n      /*jshint validthis:true */\n      const chr = this.peek(index);\n      const code = chr.charCodeAt(0);\n\n      if (code === 92) {\n        return readUnicodeEscapeSequence();\n      }\n\n      if (code < 128) {\n        if (identifierPartTable[code]) {\n          index += 1;\n          return chr;\n        }\n\n        return null;\n      }\n\n      if (isUnicodeLetter(code)) {\n        index += 1;\n        return chr;\n      }\n\n      return null;\n    }, this);\n\n    char = getIdentifierStart();\n    if (char === null) {\n      return null;\n    }\n\n    id = char;\n    for (;;) {\n      char = getIdentifierPart();\n\n      if (char === null) {\n        break;\n      }\n\n      id += char;\n    }\n\n    switch (id) {\n      case 'true': {\n        type = 'bool';\n        break;\n      }\n      case 'false': {\n        type = 'bool';\n        break;\n      }\n      default:\n        type = 'identifier';\n    }\n\n    return {\n      type: type,\n      value: id,\n      pos: this.char,\n    };\n  },\n\n  /*\n   * Extract a numeric literal out of the next sequence of\n   * characters or return 'null' if its not possible. This method\n   * supports all numeric literals described in section 7.8.3\n   * of the EcmaScript 5 specification.\n   *\n   * This method's implementation was heavily influenced by the\n   * scanNumericLiteral function in the Esprima parser's source code.\n   */\n  scanNumericLiteral: function(): any {\n    let index = 0;\n    let value = '';\n    const length = this.input.length;\n    let char = this.peek(index);\n    let bad;\n\n    function isDecimalDigit(str) {\n      return /^[0-9]$/.test(str);\n    }\n\n    function isOctalDigit(str) {\n      return /^[0-7]$/.test(str);\n    }\n\n    function isHexDigit(str) {\n      return /^[0-9a-fA-F]$/.test(str);\n    }\n\n    function isIdentifierStart(ch) {\n      return ch === '$' || ch === '_' || ch === '\\\\' || (ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z');\n    }\n\n    // handle negative num literals\n    if (char === '-') {\n      value += char;\n      index += 1;\n      char = this.peek(index);\n    }\n\n    // Numbers must start either with a decimal digit or a point.\n    if (char !== '.' && !isDecimalDigit(char)) {\n      return null;\n    }\n\n    if (char !== '.') {\n      value += this.peek(index);\n      index += 1;\n      char = this.peek(index);\n\n      if (value === '0') {\n        // Base-16 numbers.\n        if (char === 'x' || char === 'X') {\n          index += 1;\n          value += char;\n\n          while (index < length) {\n            char = this.peek(index);\n            if (!isHexDigit(char)) {\n              break;\n            }\n            value += char;\n            index += 1;\n          }\n\n          if (value.length <= 2) {\n            // 0x\n            return {\n              type: 'number',\n              value: value,\n              isMalformed: true,\n              pos: this.char,\n            };\n          }\n\n          if (index < length) {\n            char = this.peek(index);\n            if (isIdentifierStart(char)) {\n              return null;\n            }\n          }\n\n          return {\n            type: 'number',\n            value: value,\n            base: 16,\n            isMalformed: false,\n            pos: this.char,\n          };\n        }\n\n        // Base-8 numbers.\n        if (isOctalDigit(char)) {\n          index += 1;\n          value += char;\n          bad = false;\n\n          while (index < length) {\n            char = this.peek(index);\n\n            // Numbers like '019' (note the 9) are not valid octals\n            // but we still parse them and mark as malformed.\n\n            if (isDecimalDigit(char)) {\n              bad = true;\n            }\n            if (!isOctalDigit(char)) {\n              // if the char is a non punctuator then its not a valid number\n              if (!this.isPunctuator(char)) {\n                return null;\n              }\n              break;\n            }\n            value += char;\n            index += 1;\n          }\n\n          if (index < length) {\n            char = this.peek(index);\n            if (isIdentifierStart(char)) {\n              return null;\n            }\n          }\n\n          return {\n            type: 'number',\n            value: value,\n            base: 8,\n            isMalformed: bad,\n          };\n        }\n\n        // Decimal numbers that start with '0' such as '09' are illegal\n        // but we still parse them and return as malformed.\n\n        if (isDecimalDigit(char)) {\n          index += 1;\n          value += char;\n        }\n      }\n\n      while (index < length) {\n        char = this.peek(index);\n        if (!isDecimalDigit(char)) {\n          break;\n        }\n        value += char;\n        index += 1;\n      }\n    }\n\n    // Decimal digits.\n\n    if (char === '.') {\n      value += char;\n      index += 1;\n\n      while (index < length) {\n        char = this.peek(index);\n        if (!isDecimalDigit(char)) {\n          break;\n        }\n        value += char;\n        index += 1;\n      }\n    }\n\n    // Exponent part.\n\n    if (char === 'e' || char === 'E') {\n      value += char;\n      index += 1;\n      char = this.peek(index);\n\n      if (char === '+' || char === '-') {\n        value += this.peek(index);\n        index += 1;\n      }\n\n      char = this.peek(index);\n      if (isDecimalDigit(char)) {\n        value += char;\n        index += 1;\n\n        while (index < length) {\n          char = this.peek(index);\n          if (!isDecimalDigit(char)) {\n            break;\n          }\n          value += char;\n          index += 1;\n        }\n      } else {\n        return null;\n      }\n    }\n\n    if (index < length) {\n      char = this.peek(index);\n      if (!this.isPunctuator(char)) {\n        return null;\n      }\n    }\n\n    return {\n      type: 'number',\n      value: value,\n      base: 10,\n      pos: this.char,\n      isMalformed: !isFinite(+value),\n    };\n  },\n\n  isPunctuator: ch1 => {\n    switch (ch1) {\n      case '.':\n      case '(':\n      case ')':\n      case ',':\n      case '{':\n      case '}':\n        return true;\n    }\n\n    return false;\n  },\n\n  scanPunctuator: function() {\n    const ch1 = this.peek();\n\n    if (this.isPunctuator(ch1)) {\n      return {\n        type: ch1,\n        value: ch1,\n        pos: this.char,\n      };\n    }\n\n    return null;\n  },\n\n  /*\n   * Extract a string out of the next sequence of characters and/or\n   * lines or return 'null' if its not possible. Since strings can\n   * span across multiple lines this method has to move the char\n   * pointer.\n   *\n   * This method recognizes pseudo-multiline JavaScript strings:\n   *\n   *   var str = \"hello\\\n   *   world\";\n   */\n  scanStringLiteral: function() {\n    /*jshint loopfunc:true */\n    const quote = this.peek();\n\n    // String must start with a quote.\n    if (quote !== '\"' && quote !== \"'\") {\n      return null;\n    }\n\n    let value = '';\n\n    this.skip();\n\n    while (this.peek() !== quote) {\n      if (this.peek() === '') {\n        // End Of Line\n        return {\n          type: 'string',\n          value: value,\n          isUnclosed: true,\n          quote: quote,\n          pos: this.char,\n        };\n      }\n\n      const char = this.peek();\n      const jump = 1; // A length of a jump, after we're done\n      // parsing this character.\n\n      value += char;\n      this.skip(jump);\n    }\n\n    this.skip();\n    return {\n      type: 'string',\n      value: value,\n      isUnclosed: false,\n      quote: quote,\n      pos: this.char,\n    };\n  },\n};\n","import { Lexer } from './lexer';\n\nexport function Parser(this: any, expression) {\n  this.expression = expression;\n  this.lexer = new Lexer(expression);\n  this.tokens = this.lexer.tokenize();\n  this.index = 0;\n}\n\nParser.prototype = {\n  getAst: function() {\n    return this.start();\n  },\n\n  start: function() {\n    try {\n      return this.functionCall() || this.metricExpression();\n    } catch (e) {\n      return {\n        type: 'error',\n        message: e.message,\n        pos: e.pos,\n      };\n    }\n  },\n\n  curlyBraceSegment: function() {\n    if (this.match('identifier', '{') || this.match('{')) {\n      let curlySegment = '';\n\n      while (!this.match('') && !this.match('}')) {\n        curlySegment += this.consumeToken().value;\n      }\n\n      if (!this.match('}')) {\n        this.errorMark(\"Expected closing '}'\");\n      }\n\n      curlySegment += this.consumeToken().value;\n\n      // if curly segment is directly followed by identifier\n      // include it in the segment\n      if (this.match('identifier')) {\n        curlySegment += this.consumeToken().value;\n      }\n\n      return {\n        type: 'segment',\n        value: curlySegment,\n      };\n    } else {\n      return null;\n    }\n  },\n\n  metricSegment: function() {\n    const curly = this.curlyBraceSegment();\n    if (curly) {\n      return curly;\n    }\n\n    if (this.match('identifier') || this.match('number')) {\n      // hack to handle float numbers in metric segments\n      const parts = this.consumeToken().value.split('.');\n      if (parts.length === 2) {\n        this.tokens.splice(this.index, 0, { type: '.' });\n        this.tokens.splice(this.index + 1, 0, {\n          type: 'number',\n          value: parts[1],\n        });\n      }\n\n      return {\n        type: 'segment',\n        value: parts[0],\n      };\n    }\n\n    if (!this.match('templateStart')) {\n      this.errorMark('Expected metric identifier');\n    }\n\n    this.consumeToken();\n\n    if (!this.match('identifier')) {\n      this.errorMark('Expected identifier after templateStart');\n    }\n\n    const node = {\n      type: 'template',\n      value: this.consumeToken().value,\n    };\n\n    if (!this.match('templateEnd')) {\n      this.errorMark('Expected templateEnd');\n    }\n\n    this.consumeToken();\n    return node;\n  },\n\n  metricExpression: function() {\n    if (!this.match('templateStart') && !this.match('identifier') && !this.match('number') && !this.match('{')) {\n      return null;\n    }\n\n    const node = {\n      type: 'metric',\n      segments: [],\n    };\n\n    node.segments.push(this.metricSegment());\n\n    while (this.match('.')) {\n      this.consumeToken();\n\n      const segment = this.metricSegment();\n      if (!segment) {\n        this.errorMark('Expected metric identifier');\n      }\n\n      node.segments.push(segment);\n    }\n\n    return node;\n  },\n\n  functionCall: function() {\n    if (!this.match('identifier', '(')) {\n      return null;\n    }\n\n    const node: any = {\n      type: 'function',\n      name: this.consumeToken().value,\n    };\n\n    // consume left parenthesis\n    this.consumeToken();\n\n    node.params = this.functionParameters();\n\n    if (!this.match(')')) {\n      this.errorMark('Expected closing parenthesis');\n    }\n\n    this.consumeToken();\n\n    return node;\n  },\n\n  boolExpression: function() {\n    if (!this.match('bool')) {\n      return null;\n    }\n\n    return {\n      type: 'bool',\n      value: this.consumeToken().value === 'true',\n    };\n  },\n\n  functionParameters: function() {\n    if (this.match(')') || this.match('')) {\n      return [];\n    }\n\n    const param =\n      this.functionCall() ||\n      this.numericLiteral() ||\n      this.seriesRefExpression() ||\n      this.boolExpression() ||\n      this.metricExpression() ||\n      this.stringLiteral();\n\n    if (!this.match(',')) {\n      return [param];\n    }\n\n    this.consumeToken();\n    return [param].concat(this.functionParameters());\n  },\n\n  seriesRefExpression: function() {\n    if (!this.match('identifier')) {\n      return null;\n    }\n\n    const value = this.tokens[this.index].value;\n    if (!value.match(/\\#[A-Z]/)) {\n      return null;\n    }\n\n    const token = this.consumeToken();\n\n    return {\n      type: 'series-ref',\n      value: token.value,\n    };\n  },\n\n  numericLiteral: function() {\n    if (!this.match('number')) {\n      return null;\n    }\n\n    return {\n      type: 'number',\n      value: parseFloat(this.consumeToken().value),\n    };\n  },\n\n  stringLiteral: function() {\n    if (!this.match('string')) {\n      return null;\n    }\n\n    const token = this.consumeToken();\n    if (token.isUnclosed) {\n      throw { message: 'Unclosed string parameter', pos: token.pos };\n    }\n\n    return {\n      type: 'string',\n      value: token.value,\n    };\n  },\n\n  errorMark: function(text) {\n    const currentToken = this.tokens[this.index];\n    const type = currentToken ? currentToken.type : 'end of string';\n    throw {\n      message: text + ' instead found ' + type,\n      pos: currentToken ? currentToken.pos : this.lexer.char,\n    };\n  },\n\n  // returns token value and incre\n  consumeToken: function() {\n    this.index++;\n    return this.tokens[this.index - 1];\n  },\n\n  matchToken: function(type, index) {\n    const token = this.tokens[this.index + index];\n    return (token === undefined && type === '') || (token && token.type === type);\n  },\n\n  match: function(token1, token2) {\n    return this.matchToken(token1, 0) && (!token2 || this.matchToken(token2, 1));\n  },\n};\n","import _ from 'lodash';\nimport { Parser } from './parser';\n\nexport default class GraphiteQuery {\n  datasource: any;\n  target: any;\n  functions: any[];\n  segments: any[];\n  tags: any[];\n  error: any;\n  seriesByTagUsed: boolean;\n  checkOtherSegmentsIndex: number;\n  removeTagValue: string;\n  templateSrv: any;\n  scopedVars: any;\n\n  /** @ngInject */\n  constructor(datasource, target, templateSrv?, scopedVars?) {\n    this.datasource = datasource;\n    this.target = target;\n    this.parseTarget();\n\n    this.removeTagValue = '-- remove tag --';\n  }\n\n  parseTarget() {\n    this.functions = [];\n    this.segments = [];\n    this.tags = [];\n    this.error = null;\n\n    if (this.target.textEditor) {\n      return;\n    }\n\n    const parser = new Parser(this.target.target);\n    const astNode = parser.getAst();\n    if (astNode === null) {\n      this.checkOtherSegmentsIndex = 0;\n      return;\n    }\n\n    if (astNode.type === 'error') {\n      this.error = astNode.message + ' at position: ' + astNode.pos;\n      this.target.textEditor = true;\n      return;\n    }\n\n    try {\n      this.parseTargetRecursive(astNode, null);\n    } catch (err) {\n      console.log('error parsing target:', err.message);\n      this.error = err.message;\n      this.target.textEditor = true;\n    }\n\n    this.checkOtherSegmentsIndex = this.segments.length - 1;\n    this.checkForSeriesByTag();\n  }\n\n  checkForSeriesByTag() {\n    const seriesByTagFunc = _.find(this.functions, func => func.def.name === 'seriesByTag');\n    if (seriesByTagFunc) {\n      this.seriesByTagUsed = true;\n      seriesByTagFunc.hidden = true;\n      const tags = this.splitSeriesByTagParams(seriesByTagFunc);\n      this.tags = tags;\n    }\n  }\n\n  getSegmentPathUpTo(index) {\n    const arr = this.segments.slice(0, index);\n\n    return _.reduce(\n      arr,\n      (result, segment) => {\n        return result ? result + '.' + segment.value : segment.value;\n      },\n      ''\n    );\n  }\n\n  parseTargetRecursive(astNode, func) {\n    if (astNode === null) {\n      return null;\n    }\n\n    switch (astNode.type) {\n      case 'function':\n        const innerFunc = this.datasource.createFuncInstance(astNode.name, {\n          withDefaultParams: false,\n        });\n        _.each(astNode.params, param => {\n          this.parseTargetRecursive(param, innerFunc);\n        });\n\n        innerFunc.updateText();\n        this.functions.push(innerFunc);\n        break;\n      case 'series-ref':\n        if (this.segments.length > 0) {\n          this.addFunctionParameter(func, astNode.value);\n        } else {\n          this.segments.push(astNode);\n        }\n        break;\n      case 'bool':\n      case 'string':\n      case 'number':\n        this.addFunctionParameter(func, astNode.value);\n        break;\n      case 'metric':\n        if (this.segments.length > 0) {\n          this.addFunctionParameter(func, _.join(_.map(astNode.segments, 'value'), '.'));\n        } else {\n          this.segments = astNode.segments;\n        }\n        break;\n    }\n  }\n\n  updateSegmentValue(segment, index) {\n    this.segments[index].value = segment.value;\n  }\n\n  addSelectMetricSegment() {\n    this.segments.push({ value: 'select metric' });\n  }\n\n  addFunction(newFunc) {\n    this.functions.push(newFunc);\n    this.moveAliasFuncLast();\n  }\n\n  moveAliasFuncLast() {\n    const aliasFunc = _.find(this.functions, func => {\n      return func.def.name.startsWith('alias');\n    });\n\n    if (aliasFunc) {\n      this.functions = _.without(this.functions, aliasFunc);\n      this.functions.push(aliasFunc);\n    }\n  }\n\n  addFunctionParameter(func, value) {\n    if (func.params.length >= func.def.params.length && !_.get(_.last(func.def.params), 'multiple', false)) {\n      throw { message: 'too many parameters for function ' + func.def.name };\n    }\n    func.params.push(value);\n  }\n\n  removeFunction(func) {\n    this.functions = _.without(this.functions, func);\n  }\n\n  updateModelTarget(targets) {\n    // render query\n    if (!this.target.textEditor) {\n      const metricPath = this.getSegmentPathUpTo(this.segments.length).replace(/\\.select metric$/, '');\n      this.target.target = _.reduce(this.functions, wrapFunction, metricPath);\n    }\n\n    this.updateRenderedTarget(this.target, targets);\n\n    // loop through other queries and update targetFull as needed\n    for (const target of targets || []) {\n      if (target.refId !== this.target.refId) {\n        this.updateRenderedTarget(target, targets);\n      }\n    }\n  }\n\n  updateRenderedTarget(target, targets) {\n    // render nested query\n    const targetsByRefId = _.keyBy(targets, 'refId');\n\n    // no references to self\n    delete targetsByRefId[target.refId];\n\n    const nestedSeriesRefRegex = /\\#([A-Z])/g;\n    let targetWithNestedQueries = target.target;\n\n    // Use ref count to track circular references\n    function countTargetRefs(targetsByRefId, refId) {\n      let refCount = 0;\n      _.each(targetsByRefId, (t, id) => {\n        if (id !== refId) {\n          const match = nestedSeriesRefRegex.exec(t.target);\n          const count = match && match.length ? match.length - 1 : 0;\n          refCount += count;\n        }\n      });\n      targetsByRefId[refId].refCount = refCount;\n    }\n    _.each(targetsByRefId, (t, id) => {\n      countTargetRefs(targetsByRefId, id);\n    });\n\n    // Keep interpolating until there are no query references\n    // The reason for the loop is that the referenced query might contain another reference to another query\n    while (targetWithNestedQueries.match(nestedSeriesRefRegex)) {\n      const updated = targetWithNestedQueries.replace(nestedSeriesRefRegex, (match, g1) => {\n        const t = targetsByRefId[g1];\n        if (!t) {\n          return match;\n        }\n\n        // no circular references\n        if (t.refCount === 0) {\n          delete targetsByRefId[g1];\n        }\n        t.refCount--;\n\n        return t.target;\n      });\n\n      if (updated === targetWithNestedQueries) {\n        break;\n      }\n\n      targetWithNestedQueries = updated;\n    }\n\n    delete target.targetFull;\n    if (target.target !== targetWithNestedQueries) {\n      target.targetFull = targetWithNestedQueries;\n    }\n  }\n\n  splitSeriesByTagParams(func) {\n    const tagPattern = /([^\\!=~]+)(\\!?=~?)(.*)/;\n    return _.flatten(\n      _.map(func.params, (param: string) => {\n        const matches = tagPattern.exec(param);\n        if (matches) {\n          const tag = matches.slice(1);\n          if (tag.length === 3) {\n            return {\n              key: tag[0],\n              operator: tag[1],\n              value: tag[2],\n            };\n          }\n        }\n        return [];\n      })\n    );\n  }\n\n  getSeriesByTagFuncIndex() {\n    return _.findIndex(this.functions, func => func.def.name === 'seriesByTag');\n  }\n\n  getSeriesByTagFunc() {\n    const seriesByTagFuncIndex = this.getSeriesByTagFuncIndex();\n    if (seriesByTagFuncIndex >= 0) {\n      return this.functions[seriesByTagFuncIndex];\n    } else {\n      return undefined;\n    }\n  }\n\n  addTag(tag) {\n    const newTagParam = renderTagString(tag);\n    this.getSeriesByTagFunc().params.push(newTagParam);\n    this.tags.push(tag);\n  }\n\n  removeTag(index) {\n    this.getSeriesByTagFunc().params.splice(index, 1);\n    this.tags.splice(index, 1);\n  }\n\n  updateTag(tag, tagIndex) {\n    this.error = null;\n\n    if (tag.key === this.removeTagValue) {\n      this.removeTag(tagIndex);\n      return;\n    }\n\n    const newTagParam = renderTagString(tag);\n    this.getSeriesByTagFunc().params[tagIndex] = newTagParam;\n    this.tags[tagIndex] = tag;\n  }\n\n  renderTagExpressions(excludeIndex = -1) {\n    return _.compact(\n      _.map(this.tags, (tagExpr, index) => {\n        // Don't render tag that we want to lookup\n        if (index !== excludeIndex) {\n          return tagExpr.key + tagExpr.operator + tagExpr.value;\n        }\n      })\n    );\n  }\n}\n\nfunction wrapFunction(target, func) {\n  return func.render(target);\n}\n\nfunction renderTagString(tag) {\n  return tag.key + tag.operator + tag.value;\n}\n","import './add_graphite_func';\nimport './func_editor';\n\nimport _ from 'lodash';\nimport GraphiteQuery from './graphite_query';\nimport { QueryCtrl } from 'app/plugins/sdk';\nimport appEvents from 'app/core/app_events';\n\nconst GRAPHITE_TAG_OPERATORS = ['=', '!=', '=~', '!=~'];\nconst TAG_PREFIX = 'tag: ';\n\nexport class GraphiteQueryCtrl extends QueryCtrl {\n  static templateUrl = 'partials/query.editor.html';\n\n  queryModel: GraphiteQuery;\n  segments: any[];\n  addTagSegments: any[];\n  removeTagValue: string;\n  supportsTags: boolean;\n  paused: boolean;\n\n  /** @ngInject */\n  constructor($scope, $injector, private uiSegmentSrv, private templateSrv, $timeout) {\n    super($scope, $injector);\n    this.supportsTags = this.datasource.supportsTags;\n    this.paused = false;\n    this.target.target = this.target.target || '';\n\n    this.datasource.waitForFuncDefsLoaded().then(() => {\n      this.queryModel = new GraphiteQuery(this.datasource, this.target, templateSrv);\n      this.buildSegments();\n    });\n\n    this.removeTagValue = '-- remove tag --';\n  }\n\n  parseTarget() {\n    this.queryModel.parseTarget();\n    this.buildSegments();\n  }\n\n  toggleEditorMode() {\n    this.target.textEditor = !this.target.textEditor;\n    this.parseTarget();\n  }\n\n  buildSegments() {\n    this.segments = _.map(this.queryModel.segments, segment => {\n      return this.uiSegmentSrv.newSegment(segment);\n    });\n\n    const checkOtherSegmentsIndex = this.queryModel.checkOtherSegmentsIndex || 0;\n    this.checkOtherSegments(checkOtherSegmentsIndex);\n\n    if (this.queryModel.seriesByTagUsed) {\n      this.fixTagSegments();\n    }\n  }\n\n  addSelectMetricSegment() {\n    this.queryModel.addSelectMetricSegment();\n    this.segments.push(this.uiSegmentSrv.newSelectMetric());\n  }\n\n  checkOtherSegments(fromIndex) {\n    if (this.queryModel.segments.length === 1 && this.queryModel.segments[0].type === 'series-ref') {\n      return;\n    }\n\n    if (fromIndex === 0) {\n      this.addSelectMetricSegment();\n      return;\n    }\n\n    const path = this.queryModel.getSegmentPathUpTo(fromIndex + 1);\n    if (path === '') {\n      return Promise.resolve();\n    }\n\n    return this.datasource\n      .metricFindQuery(path)\n      .then(segments => {\n        if (segments.length === 0) {\n          if (path !== '') {\n            this.queryModel.segments = this.queryModel.segments.splice(0, fromIndex);\n            this.segments = this.segments.splice(0, fromIndex);\n            this.addSelectMetricSegment();\n          }\n        } else if (segments[0].expandable) {\n          if (this.segments.length === fromIndex) {\n            this.addSelectMetricSegment();\n          } else {\n            return this.checkOtherSegments(fromIndex + 1);\n          }\n        }\n      })\n      .catch(err => {\n        appEvents.emit('alert-error', ['Error', err]);\n      });\n  }\n\n  setSegmentFocus(segmentIndex) {\n    _.each(this.segments, (segment, index) => {\n      segment.focus = segmentIndex === index;\n    });\n  }\n\n  getAltSegments(index, prefix) {\n    let query = prefix && prefix.length > 0 ? '*' + prefix + '*' : '*';\n    if (index > 0) {\n      query = this.queryModel.getSegmentPathUpTo(index) + '.' + query;\n    }\n    const options = {\n      range: this.panelCtrl.range,\n      requestId: 'get-alt-segments',\n    };\n\n    return this.datasource\n      .metricFindQuery(query, options)\n      .then(segments => {\n        const altSegments = _.map(segments, segment => {\n          return this.uiSegmentSrv.newSegment({\n            value: segment.text,\n            expandable: segment.expandable,\n          });\n        });\n\n        if (index > 0 && altSegments.length === 0) {\n          return altSegments;\n        }\n\n        // add query references\n        if (index === 0) {\n          _.eachRight(this.panelCtrl.panel.targets, target => {\n            if (target.refId === this.queryModel.target.refId) {\n              return;\n            }\n\n            altSegments.unshift(\n              this.uiSegmentSrv.newSegment({\n                type: 'series-ref',\n                value: '#' + target.refId,\n                expandable: false,\n              })\n            );\n          });\n        }\n\n        // add template variables\n        _.eachRight(this.templateSrv.variables, variable => {\n          altSegments.unshift(\n            this.uiSegmentSrv.newSegment({\n              type: 'template',\n              value: '$' + variable.name,\n              expandable: true,\n            })\n          );\n        });\n\n        // add wildcard option\n        altSegments.unshift(this.uiSegmentSrv.newSegment('*'));\n\n        if (this.supportsTags && index === 0) {\n          this.removeTaggedEntry(altSegments);\n          return this.addAltTagSegments(prefix, altSegments);\n        } else {\n          return altSegments;\n        }\n      })\n      .catch(err => {\n        return [];\n      });\n  }\n\n  addAltTagSegments(prefix, altSegments) {\n    return this.getTagsAsSegments(prefix).then(tagSegments => {\n      tagSegments = _.map(tagSegments, segment => {\n        segment.value = TAG_PREFIX + segment.value;\n        return segment;\n      });\n      return altSegments.concat(...tagSegments);\n    });\n  }\n\n  removeTaggedEntry(altSegments) {\n    altSegments = _.remove(altSegments, s => s.value === '_tagged');\n  }\n\n  segmentValueChanged(segment, segmentIndex) {\n    this.error = null;\n    this.queryModel.updateSegmentValue(segment, segmentIndex);\n\n    if (this.queryModel.functions.length > 0 && this.queryModel.functions[0].def.fake) {\n      this.queryModel.functions = [];\n    }\n\n    if (segment.type === 'tag') {\n      const tag = removeTagPrefix(segment.value);\n      this.pause();\n      this.addSeriesByTagFunc(tag);\n      return;\n    }\n\n    if (segment.expandable) {\n      return this.checkOtherSegments(segmentIndex + 1).then(() => {\n        this.setSegmentFocus(segmentIndex + 1);\n        this.targetChanged();\n      });\n    } else {\n      this.spliceSegments(segmentIndex + 1);\n    }\n\n    this.setSegmentFocus(segmentIndex + 1);\n    this.targetChanged();\n  }\n\n  spliceSegments(index) {\n    this.segments = this.segments.splice(0, index);\n    this.queryModel.segments = this.queryModel.segments.splice(0, index);\n  }\n\n  emptySegments() {\n    this.queryModel.segments = [];\n    this.segments = [];\n  }\n\n  targetTextChanged() {\n    this.updateModelTarget();\n    this.refresh();\n  }\n\n  updateModelTarget() {\n    this.queryModel.updateModelTarget(this.panelCtrl.panel.targets);\n  }\n\n  targetChanged() {\n    if (this.queryModel.error) {\n      return;\n    }\n\n    const oldTarget = this.queryModel.target.target;\n    this.updateModelTarget();\n\n    if (this.queryModel.target !== oldTarget && !this.paused) {\n      this.panelCtrl.refresh();\n    }\n  }\n\n  addFunction(funcDef) {\n    const newFunc = this.datasource.createFuncInstance(funcDef, {\n      withDefaultParams: true,\n    });\n    newFunc.added = true;\n    this.queryModel.addFunction(newFunc);\n    this.smartlyHandleNewAliasByNode(newFunc);\n\n    if (this.segments.length === 1 && this.segments[0].fake) {\n      this.emptySegments();\n    }\n\n    if (!newFunc.params.length && newFunc.added) {\n      this.targetChanged();\n    }\n\n    if (newFunc.def.name === 'seriesByTag') {\n      this.parseTarget();\n    }\n  }\n\n  removeFunction(func) {\n    this.queryModel.removeFunction(func);\n    this.targetChanged();\n  }\n\n  addSeriesByTagFunc(tag) {\n    const newFunc = this.datasource.createFuncInstance('seriesByTag', {\n      withDefaultParams: false,\n    });\n    const tagParam = `${tag}=`;\n    newFunc.params = [tagParam];\n    this.queryModel.addFunction(newFunc);\n    newFunc.added = true;\n\n    this.emptySegments();\n    this.targetChanged();\n    this.parseTarget();\n  }\n\n  smartlyHandleNewAliasByNode(func) {\n    if (func.def.name !== 'aliasByNode') {\n      return;\n    }\n\n    for (let i = 0; i < this.segments.length; i++) {\n      if (this.segments[i].value.indexOf('*') >= 0) {\n        func.params[0] = i;\n        func.added = false;\n        this.targetChanged();\n        return;\n      }\n    }\n  }\n\n  getAllTags() {\n    return this.datasource.getTags().then(values => {\n      const altTags = _.map(values, 'text');\n      altTags.splice(0, 0, this.removeTagValue);\n      return mapToDropdownOptions(altTags);\n    });\n  }\n\n  getTags(index, tagPrefix) {\n    const tagExpressions = this.queryModel.renderTagExpressions(index);\n    return this.datasource.getTagsAutoComplete(tagExpressions, tagPrefix).then(values => {\n      const altTags = _.map(values, 'text');\n      altTags.splice(0, 0, this.removeTagValue);\n      return mapToDropdownOptions(altTags);\n    });\n  }\n\n  getTagsAsSegments(tagPrefix) {\n    const tagExpressions = this.queryModel.renderTagExpressions();\n    return this.datasource.getTagsAutoComplete(tagExpressions, tagPrefix).then(values => {\n      return _.map(values, val => {\n        return this.uiSegmentSrv.newSegment({\n          value: val.text,\n          type: 'tag',\n          expandable: false,\n        });\n      });\n    });\n  }\n\n  getTagOperators() {\n    return mapToDropdownOptions(GRAPHITE_TAG_OPERATORS);\n  }\n\n  getAllTagValues(tag) {\n    const tagKey = tag.key;\n    return this.datasource.getTagValues(tagKey).then(values => {\n      const altValues = _.map(values, 'text');\n      return mapToDropdownOptions(altValues);\n    });\n  }\n\n  getTagValues(tag, index, valuePrefix) {\n    const tagExpressions = this.queryModel.renderTagExpressions(index);\n    const tagKey = tag.key;\n    return this.datasource.getTagValuesAutoComplete(tagExpressions, tagKey, valuePrefix).then(values => {\n      const altValues = _.map(values, 'text');\n      // Add template variables as additional values\n      _.eachRight(this.templateSrv.variables, variable => {\n        altValues.push('${' + variable.name + ':regex}');\n      });\n      return mapToDropdownOptions(altValues);\n    });\n  }\n\n  tagChanged(tag, tagIndex) {\n    this.queryModel.updateTag(tag, tagIndex);\n    this.targetChanged();\n  }\n\n  addNewTag(segment) {\n    const newTagKey = segment.value;\n    const newTag = { key: newTagKey, operator: '=', value: '' };\n    this.queryModel.addTag(newTag);\n    this.targetChanged();\n    this.fixTagSegments();\n  }\n\n  removeTag(index) {\n    this.queryModel.removeTag(index);\n    this.targetChanged();\n  }\n\n  fixTagSegments() {\n    // Adding tag with the same name as just removed works incorrectly if single segment is used (instead of array)\n    this.addTagSegments = [this.uiSegmentSrv.newPlusButton()];\n  }\n\n  showDelimiter(index) {\n    return index !== this.queryModel.tags.length - 1;\n  }\n\n  pause() {\n    this.paused = true;\n  }\n\n  unpause() {\n    this.paused = false;\n    this.panelCtrl.refresh();\n  }\n}\n\nfunction mapToDropdownOptions(results) {\n  return _.map(results, value => {\n    return { text: value, value: value };\n  });\n}\n\nfunction removeTagPrefix(value: string): string {\n  return value.replace(TAG_PREFIX, '');\n}\n","export class GraphiteConfigCtrl {\n  static templateUrl = 'public/app/plugins/datasource/graphite/partials/config.html';\n  datasourceSrv: any;\n  current: any;\n\n  /** @ngInject */\n  constructor($scope, datasourceSrv) {\n    this.datasourceSrv = datasourceSrv;\n    this.current.jsonData = this.current.jsonData || {};\n    this.current.jsonData.graphiteVersion = this.current.jsonData.graphiteVersion || '0.9';\n    this.autoDetectGraphiteVersion();\n  }\n\n  autoDetectGraphiteVersion() {\n    if (!this.current.id) {\n      return;\n    }\n\n    this.datasourceSrv\n      .loadDatasource(this.current.name)\n      .then(ds => {\n        return ds.getVersion();\n      })\n      .then(version => {\n        this.graphiteVersions.push({ name: version, value: version });\n        this.current.jsonData.graphiteVersion = version;\n      });\n  }\n\n  graphiteVersions = [\n    { name: '0.9.x', value: '0.9' },\n    { name: '1.0.x', value: '1.0' },\n    { name: '1.1.x', value: '1.1' },\n  ];\n}\n","import { GraphiteDatasource } from './datasource';\nimport { GraphiteQueryCtrl } from './query_ctrl';\nimport { GraphiteConfigCtrl } from './config_ctrl';\n\nclass AnnotationsQueryCtrl {\n  static templateUrl = 'partials/annotations.editor.html';\n}\n\nexport {\n  GraphiteDatasource as Datasource,\n  GraphiteQueryCtrl as QueryCtrl,\n  GraphiteConfigCtrl as ConfigCtrl,\n  AnnotationsQueryCtrl,\n};\n","import angular from 'angular';\nimport _ from 'lodash';\n\nexport class CloudWatchQueryParameter {\n  constructor() {\n    return {\n      templateUrl: 'public/app/plugins/datasource/cloudwatch/partials/query.parameter.html',\n      controller: 'CloudWatchQueryParameterCtrl',\n      restrict: 'E',\n      scope: {\n        target: '=',\n        datasource: '=',\n        onChange: '&',\n      },\n    };\n  }\n}\n\nexport class CloudWatchQueryParameterCtrl {\n  /** @ngInject */\n  constructor($scope, templateSrv, uiSegmentSrv, datasourceSrv, $q) {\n    $scope.init = () => {\n      const target = $scope.target;\n      target.namespace = target.namespace || '';\n      target.metricName = target.metricName || '';\n      target.statistics = target.statistics || ['Average'];\n      target.dimensions = target.dimensions || {};\n      target.period = target.period || '';\n      target.region = target.region || 'default';\n      target.id = target.id || '';\n      target.expression = target.expression || '';\n      target.returnData = target.returnData || false;\n      target.highResolution = target.highResolution || false;\n\n      $scope.regionSegment = uiSegmentSrv.getSegmentForValue($scope.target.region, 'select region');\n      $scope.namespaceSegment = uiSegmentSrv.getSegmentForValue($scope.target.namespace, 'select namespace');\n      $scope.metricSegment = uiSegmentSrv.getSegmentForValue($scope.target.metricName, 'select metric');\n\n      $scope.dimSegments = _.reduce(\n        $scope.target.dimensions,\n        (memo, value, key) => {\n          memo.push(uiSegmentSrv.newKey(key));\n          memo.push(uiSegmentSrv.newOperator('='));\n          memo.push(uiSegmentSrv.newKeyValue(value));\n          return memo;\n        },\n        []\n      );\n\n      $scope.statSegments = _.map($scope.target.statistics, stat => {\n        return uiSegmentSrv.getSegmentForValue(stat);\n      });\n\n      $scope.ensurePlusButton($scope.statSegments);\n      $scope.ensurePlusButton($scope.dimSegments);\n      $scope.removeDimSegment = uiSegmentSrv.newSegment({\n        fake: true,\n        value: '-- remove dimension --',\n      });\n      $scope.removeStatSegment = uiSegmentSrv.newSegment({\n        fake: true,\n        value: '-- remove stat --',\n      });\n\n      if (_.isEmpty($scope.target.region)) {\n        $scope.target.region = 'default';\n      }\n\n      if (!$scope.onChange) {\n        $scope.onChange = () => {};\n      }\n    };\n\n    $scope.getStatSegments = () => {\n      return $q.when(\n        _.flatten([\n          angular.copy($scope.removeStatSegment),\n          _.map($scope.datasource.standardStatistics, s => {\n            return uiSegmentSrv.getSegmentForValue(s);\n          }),\n          uiSegmentSrv.getSegmentForValue('pNN.NN'),\n        ])\n      );\n    };\n\n    $scope.statSegmentChanged = (segment, index) => {\n      if (segment.value === $scope.removeStatSegment.value) {\n        $scope.statSegments.splice(index, 1);\n      } else {\n        segment.type = 'value';\n      }\n\n      $scope.target.statistics = _.reduce(\n        $scope.statSegments,\n        (memo, seg) => {\n          if (!seg.fake) {\n            memo.push(seg.value);\n          }\n          return memo;\n        },\n        []\n      );\n\n      $scope.ensurePlusButton($scope.statSegments);\n      $scope.onChange();\n    };\n\n    $scope.ensurePlusButton = segments => {\n      const count = segments.length;\n      const lastSegment = segments[Math.max(count - 1, 0)];\n\n      if (!lastSegment || lastSegment.type !== 'plus-button') {\n        segments.push(uiSegmentSrv.newPlusButton());\n      }\n    };\n\n    $scope.getDimSegments = (segment, $index) => {\n      if (segment.type === 'operator') {\n        return $q.when([]);\n      }\n\n      const target = $scope.target;\n      let query = $q.when([]);\n\n      if (segment.type === 'key' || segment.type === 'plus-button') {\n        query = $scope.datasource.getDimensionKeys($scope.target.namespace, $scope.target.region);\n      } else if (segment.type === 'value') {\n        const dimensionKey = $scope.dimSegments[$index - 2].value;\n        query = $scope.datasource.getDimensionValues(\n          target.region,\n          target.namespace,\n          target.metricName,\n          dimensionKey,\n          target.dimensions\n        );\n      }\n\n      return query.then($scope.transformToSegments(true)).then(results => {\n        if (segment.type === 'key') {\n          results.splice(0, 0, angular.copy($scope.removeDimSegment));\n        }\n        return results;\n      });\n    };\n\n    $scope.dimSegmentChanged = (segment, index) => {\n      $scope.dimSegments[index] = segment;\n\n      if (segment.value === $scope.removeDimSegment.value) {\n        $scope.dimSegments.splice(index, 3);\n      } else if (segment.type === 'plus-button') {\n        $scope.dimSegments.push(uiSegmentSrv.newOperator('='));\n        $scope.dimSegments.push(uiSegmentSrv.newFake('select dimension value', 'value', 'query-segment-value'));\n        segment.type = 'key';\n        segment.cssClass = 'query-segment-key';\n      }\n\n      $scope.syncDimSegmentsWithModel();\n      $scope.ensurePlusButton($scope.dimSegments);\n      $scope.onChange();\n    };\n\n    $scope.syncDimSegmentsWithModel = () => {\n      const dims = {};\n      const length = $scope.dimSegments.length;\n\n      for (let i = 0; i < length - 2; i += 3) {\n        const keySegment = $scope.dimSegments[i];\n        const valueSegment = $scope.dimSegments[i + 2];\n        if (!valueSegment.fake) {\n          dims[keySegment.value] = valueSegment.value;\n        }\n      }\n\n      $scope.target.dimensions = dims;\n    };\n\n    $scope.getRegions = () => {\n      return $scope.datasource\n        .metricFindQuery('regions()')\n        .then(results => {\n          results.unshift({ text: 'default' });\n          return results;\n        })\n        .then($scope.transformToSegments(true));\n    };\n\n    $scope.getNamespaces = () => {\n      return $scope.datasource.metricFindQuery('namespaces()').then($scope.transformToSegments(true));\n    };\n\n    $scope.getMetrics = () => {\n      return $scope.datasource\n        .metricFindQuery('metrics(' + $scope.target.namespace + ',' + $scope.target.region + ')')\n        .then($scope.transformToSegments(true));\n    };\n\n    $scope.regionChanged = () => {\n      $scope.target.region = $scope.regionSegment.value;\n      $scope.onChange();\n    };\n\n    $scope.namespaceChanged = () => {\n      $scope.target.namespace = $scope.namespaceSegment.value;\n      $scope.onChange();\n    };\n\n    $scope.metricChanged = () => {\n      $scope.target.metricName = $scope.metricSegment.value;\n      $scope.onChange();\n    };\n\n    $scope.transformToSegments = addTemplateVars => {\n      return results => {\n        const segments = _.map(results, segment => {\n          return uiSegmentSrv.newSegment({\n            value: segment.text,\n            expandable: segment.expandable,\n          });\n        });\n\n        if (addTemplateVars) {\n          _.each(templateSrv.variables, variable => {\n            segments.unshift(\n              uiSegmentSrv.newSegment({\n                type: 'template',\n                value: '$' + variable.name,\n                expandable: true,\n              })\n            );\n          });\n        }\n\n        return segments;\n      };\n    };\n\n    $scope.init();\n  }\n}\n\nangular.module('grafana.controllers').directive('cloudwatchQueryParameter', CloudWatchQueryParameter);\nangular.module('grafana.controllers').controller('CloudWatchQueryParameterCtrl', CloudWatchQueryParameterCtrl);\n","import angular from 'angular';\nimport _ from 'lodash';\nimport * as dateMath from 'app/core/utils/datemath';\nimport kbn from 'app/core/utils/kbn';\nimport * as templatingVariable from 'app/features/templating/variable';\n// import * as moment from 'moment';\n\nexport default class CloudWatchDatasource {\n  type: any;\n  name: any;\n  supportMetrics: any;\n  proxyUrl: any;\n  defaultRegion: any;\n  instanceSettings: any;\n  standardStatistics: any;\n  /** @ngInject */\n  constructor(instanceSettings, private $q, private backendSrv, private templateSrv, private timeSrv) {\n    this.type = 'cloudwatch';\n    this.name = instanceSettings.name;\n    this.supportMetrics = true;\n    this.proxyUrl = instanceSettings.url;\n    this.defaultRegion = instanceSettings.jsonData.defaultRegion;\n    this.instanceSettings = instanceSettings;\n    this.standardStatistics = ['Average', 'Maximum', 'Minimum', 'Sum', 'SampleCount'];\n  }\n\n  query(options) {\n    options = angular.copy(options);\n    options.targets = this.expandTemplateVariable(options.targets, options.scopedVars, this.templateSrv);\n\n    const queries = _.filter(options.targets, item => {\n      return (\n        (item.id !== '' || item.hide !== true) &&\n        ((!!item.region && !!item.namespace && !!item.metricName && !_.isEmpty(item.statistics)) ||\n          item.expression.length > 0)\n      );\n    }).map(item => {\n      item.region = this.templateSrv.replace(this.getActualRegion(item.region), options.scopedVars);\n      item.namespace = this.templateSrv.replace(item.namespace, options.scopedVars);\n      item.metricName = this.templateSrv.replace(item.metricName, options.scopedVars);\n      item.dimensions = this.convertDimensionFormat(item.dimensions, options.scopedVars);\n      item.period = String(this.getPeriod(item, options)); // use string format for period in graph query, and alerting\n      item.id = this.templateSrv.replace(item.id, options.scopedVars);\n      item.expression = this.templateSrv.replace(item.expression, options.scopedVars);\n      item.returnData = typeof item.hide === 'undefined' ? true : !item.hide;\n\n      // valid ExtendedStatistics is like p90.00, check the pattern\n      const hasInvalidStatistics = item.statistics.some(s => {\n        return s.indexOf('p') === 0 && !/p\\d{2}\\.\\d{2}/.test(s);\n      });\n      if (hasInvalidStatistics) {\n        throw { message: 'Invalid extended statistics' };\n      }\n\n      return _.extend(\n        {\n          refId: item.refId,\n          intervalMs: options.intervalMs,\n          maxDataPoints: options.maxDataPoints,\n          datasourceId: this.instanceSettings.id,\n          type: 'timeSeriesQuery',\n        },\n        item\n      );\n    });\n\n    // No valid targets, return the empty result to save a round trip.\n    if (_.isEmpty(queries)) {\n      const d = this.$q.defer();\n      d.resolve({ data: [] });\n      return d.promise;\n    }\n\n    const request = {\n      from: options.range.from.valueOf().toString(),\n      to: options.range.to.valueOf().toString(),\n      queries: queries,\n    };\n\n    return this.performTimeSeriesQuery(request);\n  }\n\n  getPeriod(target, options, now?) {\n    const start = this.convertToCloudWatchTime(options.range.from, false);\n    const end = this.convertToCloudWatchTime(options.range.to, true);\n    now = Math.round((now || Date.now()) / 1000);\n\n    let period;\n    const range = end - start;\n\n    const hourSec = 60 * 60;\n    const daySec = hourSec * 24;\n    let periodUnit = 60;\n    if (!target.period) {\n      if (now - start <= daySec * 15) {\n        // until 15 days ago\n        if (target.namespace === 'AWS/EC2') {\n          periodUnit = period = 300;\n        } else {\n          periodUnit = period = 60;\n        }\n      } else if (now - start <= daySec * 63) {\n        // until 63 days ago\n        periodUnit = period = 60 * 5;\n      } else if (now - start <= daySec * 455) {\n        // until 455 days ago\n        periodUnit = period = 60 * 60;\n      } else {\n        // over 455 days, should return error, but try to long period\n        periodUnit = period = 60 * 60;\n      }\n    } else {\n      if (/^\\d+$/.test(target.period)) {\n        period = parseInt(target.period, 10);\n      } else {\n        period = kbn.interval_to_seconds(this.templateSrv.replace(target.period, options.scopedVars));\n      }\n    }\n    if (period < 1) {\n      period = 1;\n    }\n    if (!target.highResolution && range / period >= 1440) {\n      period = Math.ceil(range / 1440 / periodUnit) * periodUnit;\n    }\n\n    return period;\n  }\n\n  performTimeSeriesQuery(request) {\n    return this.awsRequest('/api/tsdb/query', request).then(res => {\n      const data = [];\n\n      if (res.results) {\n        _.forEach(res.results, queryRes => {\n          _.forEach(queryRes.series, series => {\n            data.push({ target: series.name, datapoints: series.points });\n          });\n        });\n      }\n\n      return { data: data };\n    });\n  }\n\n  transformSuggestDataFromTable(suggestData) {\n    return _.map(suggestData.results['metricFindQuery'].tables[0].rows, v => {\n      return {\n        text: v[0],\n        value: v[1],\n      };\n    });\n  }\n\n  doMetricQueryRequest(subtype, parameters) {\n    const range = this.timeSrv.timeRange();\n    return this.awsRequest('/api/tsdb/query', {\n      from: range.from.valueOf().toString(),\n      to: range.to.valueOf().toString(),\n      queries: [\n        _.extend(\n          {\n            refId: 'metricFindQuery',\n            intervalMs: 1, // dummy\n            maxDataPoints: 1, // dummy\n            datasourceId: this.instanceSettings.id,\n            type: 'metricFindQuery',\n            subtype: subtype,\n          },\n          parameters\n        ),\n      ],\n    }).then(r => {\n      return this.transformSuggestDataFromTable(r);\n    });\n  }\n\n  getRegions() {\n    return this.doMetricQueryRequest('regions', null);\n  }\n\n  getNamespaces() {\n    return this.doMetricQueryRequest('namespaces', null);\n  }\n\n  getMetrics(namespace, region) {\n    return this.doMetricQueryRequest('metrics', {\n      region: this.templateSrv.replace(this.getActualRegion(region)),\n      namespace: this.templateSrv.replace(namespace),\n    });\n  }\n\n  getDimensionKeys(namespace, region) {\n    return this.doMetricQueryRequest('dimension_keys', {\n      region: this.templateSrv.replace(this.getActualRegion(region)),\n      namespace: this.templateSrv.replace(namespace),\n    });\n  }\n\n  getDimensionValues(region, namespace, metricName, dimensionKey, filterDimensions) {\n    return this.doMetricQueryRequest('dimension_values', {\n      region: this.templateSrv.replace(this.getActualRegion(region)),\n      namespace: this.templateSrv.replace(namespace),\n      metricName: this.templateSrv.replace(metricName),\n      dimensionKey: this.templateSrv.replace(dimensionKey),\n      dimensions: this.convertDimensionFormat(filterDimensions, {}),\n    });\n  }\n\n  getEbsVolumeIds(region, instanceId) {\n    return this.doMetricQueryRequest('ebs_volume_ids', {\n      region: this.templateSrv.replace(this.getActualRegion(region)),\n      instanceId: this.templateSrv.replace(instanceId),\n    });\n  }\n\n  getEc2InstanceAttribute(region, attributeName, filters) {\n    return this.doMetricQueryRequest('ec2_instance_attribute', {\n      region: this.templateSrv.replace(this.getActualRegion(region)),\n      attributeName: this.templateSrv.replace(attributeName),\n      filters: filters,\n    });\n  }\n\n  metricFindQuery(query) {\n    let region;\n    let namespace;\n    let metricName;\n    let filterJson;\n\n    const regionQuery = query.match(/^regions\\(\\)/);\n    if (regionQuery) {\n      return this.getRegions();\n    }\n\n    const namespaceQuery = query.match(/^namespaces\\(\\)/);\n    if (namespaceQuery) {\n      return this.getNamespaces();\n    }\n\n    const metricNameQuery = query.match(/^metrics\\(([^\\)]+?)(,\\s?([^,]+?))?\\)/);\n    if (metricNameQuery) {\n      namespace = metricNameQuery[1];\n      region = metricNameQuery[3];\n      return this.getMetrics(namespace, region);\n    }\n\n    const dimensionKeysQuery = query.match(/^dimension_keys\\(([^\\)]+?)(,\\s?([^,]+?))?\\)/);\n    if (dimensionKeysQuery) {\n      namespace = dimensionKeysQuery[1];\n      region = dimensionKeysQuery[3];\n      return this.getDimensionKeys(namespace, region);\n    }\n\n    const dimensionValuesQuery = query.match(\n      /^dimension_values\\(([^,]+?),\\s?([^,]+?),\\s?([^,]+?),\\s?([^,]+?)(,\\s?(.+))?\\)/\n    );\n    if (dimensionValuesQuery) {\n      region = dimensionValuesQuery[1];\n      namespace = dimensionValuesQuery[2];\n      metricName = dimensionValuesQuery[3];\n      const dimensionKey = dimensionValuesQuery[4];\n      filterJson = {};\n      if (dimensionValuesQuery[6]) {\n        filterJson = JSON.parse(this.templateSrv.replace(dimensionValuesQuery[6]));\n      }\n\n      return this.getDimensionValues(region, namespace, metricName, dimensionKey, filterJson);\n    }\n\n    const ebsVolumeIdsQuery = query.match(/^ebs_volume_ids\\(([^,]+?),\\s?([^,]+?)\\)/);\n    if (ebsVolumeIdsQuery) {\n      region = ebsVolumeIdsQuery[1];\n      const instanceId = ebsVolumeIdsQuery[2];\n      return this.getEbsVolumeIds(region, instanceId);\n    }\n\n    const ec2InstanceAttributeQuery = query.match(/^ec2_instance_attribute\\(([^,]+?),\\s?([^,]+?),\\s?(.+?)\\)/);\n    if (ec2InstanceAttributeQuery) {\n      region = ec2InstanceAttributeQuery[1];\n      const targetAttributeName = ec2InstanceAttributeQuery[2];\n      filterJson = JSON.parse(this.templateSrv.replace(ec2InstanceAttributeQuery[3]));\n      return this.getEc2InstanceAttribute(region, targetAttributeName, filterJson);\n    }\n\n    return this.$q.when([]);\n  }\n\n  annotationQuery(options) {\n    const annotation = options.annotation;\n    const statistics = _.map(annotation.statistics, s => {\n      return this.templateSrv.replace(s);\n    });\n    const defaultPeriod = annotation.prefixMatching ? '' : '300';\n    let period = annotation.period || defaultPeriod;\n    period = parseInt(period, 10);\n    const parameters = {\n      prefixMatching: annotation.prefixMatching,\n      region: this.templateSrv.replace(this.getActualRegion(annotation.region)),\n      namespace: this.templateSrv.replace(annotation.namespace),\n      metricName: this.templateSrv.replace(annotation.metricName),\n      dimensions: this.convertDimensionFormat(annotation.dimensions, {}),\n      statistics: statistics,\n      period: period,\n      actionPrefix: annotation.actionPrefix || '',\n      alarmNamePrefix: annotation.alarmNamePrefix || '',\n    };\n\n    return this.awsRequest('/api/tsdb/query', {\n      from: options.range.from.valueOf().toString(),\n      to: options.range.to.valueOf().toString(),\n      queries: [\n        _.extend(\n          {\n            refId: 'annotationQuery',\n            intervalMs: 1, // dummy\n            maxDataPoints: 1, // dummy\n            datasourceId: this.instanceSettings.id,\n            type: 'annotationQuery',\n          },\n          parameters\n        ),\n      ],\n    }).then(r => {\n      return _.map(r.results['annotationQuery'].tables[0].rows, v => {\n        return {\n          annotation: annotation,\n          time: Date.parse(v[0]),\n          title: v[1],\n          tags: [v[2]],\n          text: v[3],\n        };\n      });\n    });\n  }\n\n  targetContainsTemplate(target) {\n    return (\n      this.templateSrv.variableExists(target.region) ||\n      this.templateSrv.variableExists(target.namespace) ||\n      this.templateSrv.variableExists(target.metricName) ||\n      _.find(target.dimensions, (v, k) => {\n        return this.templateSrv.variableExists(k) || this.templateSrv.variableExists(v);\n      })\n    );\n  }\n\n  testDatasource() {\n    /* use billing metrics for test */\n    const region = this.defaultRegion;\n    const namespace = 'AWS/Billing';\n    const metricName = 'EstimatedCharges';\n    const dimensions = {};\n\n    return this.getDimensionValues(region, namespace, metricName, 'ServiceName', dimensions).then(\n      () => {\n        return { status: 'success', message: 'Data source is working' };\n      },\n      err => {\n        return { status: 'error', message: err.message };\n      }\n    );\n  }\n\n  awsRequest(url, data) {\n    const options = {\n      method: 'POST',\n      url: url,\n      data: data,\n    };\n\n    return this.backendSrv.datasourceRequest(options).then(result => {\n      return result.data;\n    });\n  }\n\n  getDefaultRegion() {\n    return this.defaultRegion;\n  }\n\n  getActualRegion(region) {\n    if (region === 'default' || _.isEmpty(region)) {\n      return this.getDefaultRegion();\n    }\n    return region;\n  }\n\n  getExpandedVariables(target, dimensionKey, variable, templateSrv) {\n    /* if the all checkbox is marked we should add all values to the targets */\n    const allSelected = _.find(variable.options, { selected: true, text: 'All' });\n    const selectedVariables = _.filter(variable.options, v => {\n      if (allSelected) {\n        return v.text !== 'All';\n      } else {\n        return v.selected;\n      }\n    });\n    const currentVariables = !_.isArray(variable.current.value)\n      ? [variable.current]\n      : variable.current.value.map(v => {\n          return {\n            text: v,\n            value: v,\n          };\n        });\n    const useSelectedVariables =\n      selectedVariables.some(s => {\n        return s.value === currentVariables[0].value;\n      }) || currentVariables[0].value === '$__all';\n    return (useSelectedVariables ? selectedVariables : currentVariables).map(v => {\n      const t = angular.copy(target);\n      const scopedVar = {};\n      scopedVar[variable.name] = v;\n      t.refId = target.refId + '_' + v.value;\n      t.dimensions[dimensionKey] = templateSrv.replace(t.dimensions[dimensionKey], scopedVar);\n      if (variable.multi && target.id) {\n        t.id = target.id + window.btoa(v.value).replace(/=/g, '0'); // generate unique id\n      } else {\n        t.id = target.id;\n      }\n      return t;\n    });\n  }\n\n  expandTemplateVariable(targets, scopedVars, templateSrv) {\n    // Datasource and template srv logic uber-complected. This should be cleaned up.\n    return _.chain(targets)\n      .map(target => {\n        const dimensionKey = _.findKey(target.dimensions, v => {\n          return templateSrv.variableExists(v) && !_.has(scopedVars, templateSrv.getVariableName(v));\n        });\n\n        if (dimensionKey) {\n          const multiVariable = _.find(templateSrv.variables, variable => {\n            return (\n              templatingVariable.containsVariable(target.dimensions[dimensionKey], variable.name) && variable.multi\n            );\n          });\n          const variable = _.find(templateSrv.variables, variable => {\n            return templatingVariable.containsVariable(target.dimensions[dimensionKey], variable.name);\n          });\n          return this.getExpandedVariables(target, dimensionKey, multiVariable || variable, templateSrv);\n        } else {\n          return [target];\n        }\n      })\n      .flatten()\n      .value();\n  }\n\n  convertToCloudWatchTime(date, roundUp) {\n    if (_.isString(date)) {\n      date = dateMath.parse(date, roundUp);\n    }\n    return Math.round(date.valueOf() / 1000);\n  }\n\n  convertDimensionFormat(dimensions, scopedVars) {\n    const convertedDimensions = {};\n    _.each(dimensions, (value, key) => {\n      convertedDimensions[this.templateSrv.replace(key, scopedVars)] = this.templateSrv.replace(value, scopedVars);\n    });\n    return convertedDimensions;\n  }\n}\n","export class CloudWatchConfigCtrl {\n  static templateUrl = 'partials/config.html';\n  current: any;\n\n  accessKeyExist = false;\n  secretKeyExist = false;\n\n  /** @ngInject */\n  constructor($scope) {\n    this.current.jsonData.timeField = this.current.jsonData.timeField || '@timestamp';\n    this.current.jsonData.authType = this.current.jsonData.authType || 'credentials';\n\n    this.accessKeyExist = this.current.secureJsonFields.accessKey;\n    this.secretKeyExist = this.current.secureJsonFields.secretKey;\n  }\n\n  resetAccessKey() {\n    this.accessKeyExist = false;\n  }\n\n  resetSecretKey() {\n    this.secretKeyExist = false;\n  }\n\n  authTypes = [\n    { name: '存取密钥', value: 'keys' },\n    { name: '凭证', value: 'credentials' },\n    { name: 'ARN', value: 'arn' },\n  ];\n\n  indexPatternTypes = [\n    { name: '无模式', value: undefined },\n    { name: '每时', value: 'Hourly', example: '[logstash-]YYYY.MM.DD.HH' },\n    { name: '每天', value: 'Daily', example: '[logstash-]YYYY.MM.DD' },\n    { name: '每周', value: 'Weekly', example: '[logstash-]GGGG.WW' },\n    { name: '每月', value: 'Monthly', example: '[logstash-]YYYY.MM' },\n    { name: '每年', value: 'Yearly', example: '[logstash-]YYYY' },\n  ];\n}\n","import './query_parameter_ctrl';\nimport { QueryCtrl } from 'app/plugins/sdk';\n\nexport class CloudWatchQueryCtrl extends QueryCtrl {\n  static templateUrl = 'partials/query.editor.html';\n\n  aliasSyntax: string;\n\n  /** @ngInject */\n  constructor($scope, $injector) {\n    super($scope, $injector);\n    this.aliasSyntax = '{{metric}} {{stat}} {{namespace}} {{region}} {{<dimension name>}}';\n  }\n}\n","import './query_parameter_ctrl';\n\nimport CloudWatchDatasource from './datasource';\nimport { CloudWatchQueryCtrl } from './query_ctrl';\nimport { CloudWatchConfigCtrl } from './config_ctrl';\n\nclass CloudWatchAnnotationsQueryCtrl {\n  static templateUrl = 'partials/annotations.editor.html';\n}\n\nexport {\n  CloudWatchDatasource as Datasource,\n  CloudWatchQueryCtrl as QueryCtrl,\n  CloudWatchConfigCtrl as ConfigCtrl,\n  CloudWatchAnnotationsQueryCtrl as AnnotationsQueryCtrl,\n};\n","import _ from 'lodash';\n\nexport const metricAggTypes = [\n  { text: 'Count', value: 'count', requiresField: false },\n  {\n    text: 'Average',\n    value: 'avg',\n    requiresField: true,\n    supportsInlineScript: true,\n    supportsMissing: true,\n  },\n  {\n    text: 'Sum',\n    value: 'sum',\n    requiresField: true,\n    supportsInlineScript: true,\n    supportsMissing: true,\n  },\n  {\n    text: 'Max',\n    value: 'max',\n    requiresField: true,\n    supportsInlineScript: true,\n    supportsMissing: true,\n  },\n  {\n    text: 'Min',\n    value: 'min',\n    requiresField: true,\n    supportsInlineScript: true,\n    supportsMissing: true,\n  },\n  {\n    text: 'Extended Stats',\n    value: 'extended_stats',\n    requiresField: true,\n    supportsMissing: true,\n    supportsInlineScript: true,\n  },\n  {\n    text: 'Percentiles',\n    value: 'percentiles',\n    requiresField: true,\n    supportsMissing: true,\n    supportsInlineScript: true,\n  },\n  {\n    text: 'Unique Count',\n    value: 'cardinality',\n    requiresField: true,\n    supportsMissing: true,\n  },\n  {\n    text: 'Moving Average',\n    value: 'moving_avg',\n    requiresField: false,\n    isPipelineAgg: true,\n    minVersion: 2,\n  },\n  {\n    text: 'Derivative',\n    value: 'derivative',\n    requiresField: false,\n    isPipelineAgg: true,\n    minVersion: 2,\n  },\n  { text: 'Raw Document', value: 'raw_document', requiresField: false },\n];\n\nexport const bucketAggTypes = [\n  { text: 'Terms', value: 'terms', requiresField: true },\n  { text: 'Filters', value: 'filters' },\n  { text: 'Geo Hash Grid', value: 'geohash_grid', requiresField: true },\n  { text: 'Date Histogram', value: 'date_histogram', requiresField: true },\n  { text: 'Histogram', value: 'histogram', requiresField: true },\n];\n\nexport const orderByOptions = [{ text: 'Doc Count', value: '_count' }, { text: 'Term value', value: '_term' }];\n\nexport const orderOptions = [{ text: 'Top', value: 'desc' }, { text: 'Bottom', value: 'asc' }];\n\nexport const sizeOptions = [\n  { text: 'No limit', value: '0' },\n  { text: '1', value: '1' },\n  { text: '2', value: '2' },\n  { text: '3', value: '3' },\n  { text: '5', value: '5' },\n  { text: '10', value: '10' },\n  { text: '15', value: '15' },\n  { text: '20', value: '20' },\n];\n\nexport const extendedStats = [\n  { text: 'Avg', value: 'avg' },\n  { text: 'Min', value: 'min' },\n  { text: 'Max', value: 'max' },\n  { text: 'Sum', value: 'sum' },\n  { text: 'Count', value: 'count' },\n  { text: 'Std Dev', value: 'std_deviation' },\n  { text: 'Std Dev Upper', value: 'std_deviation_bounds_upper' },\n  { text: 'Std Dev Lower', value: 'std_deviation_bounds_lower' },\n];\n\nexport const intervalOptions = [\n  { text: 'auto', value: 'auto' },\n  { text: '10s', value: '10s' },\n  { text: '1m', value: '1m' },\n  { text: '5m', value: '5m' },\n  { text: '10m', value: '10m' },\n  { text: '20m', value: '20m' },\n  { text: '1h', value: '1h' },\n  { text: '1d', value: '1d' },\n];\n\nexport const movingAvgModelOptions = [\n  { text: 'Simple', value: 'simple' },\n  { text: 'Linear', value: 'linear' },\n  { text: 'Exponentially Weighted', value: 'ewma' },\n  { text: 'Holt Linear', value: 'holt' },\n  { text: 'Holt Winters', value: 'holt_winters' },\n];\n\nexport const pipelineOptions = {\n  moving_avg: [\n    { text: 'window', default: 5 },\n    { text: 'model', default: 'simple' },\n    { text: 'predict', default: undefined },\n    { text: 'minimize', default: false },\n  ],\n  derivative: [{ text: 'unit', default: undefined }],\n};\n\nexport const movingAvgModelSettings = {\n  simple: [],\n  linear: [],\n  ewma: [{ text: 'Alpha', value: 'alpha', default: undefined }],\n  holt: [{ text: 'Alpha', value: 'alpha', default: undefined }, { text: 'Beta', value: 'beta', default: undefined }],\n  holt_winters: [\n    { text: 'Alpha', value: 'alpha', default: undefined },\n    { text: 'Beta', value: 'beta', default: undefined },\n    { text: 'Gamma', value: 'gamma', default: undefined },\n    { text: 'Period', value: 'period', default: undefined },\n    { text: 'Pad', value: 'pad', default: undefined, isCheckbox: true },\n  ],\n};\n\nexport function getMetricAggTypes(esVersion) {\n  return _.filter(metricAggTypes, f => {\n    if (f.minVersion) {\n      return f.minVersion <= esVersion;\n    } else {\n      return true;\n    }\n  });\n}\n\nexport function getPipelineOptions(metric) {\n  if (!isPipelineAgg(metric.type)) {\n    return [];\n  }\n\n  return pipelineOptions[metric.type];\n}\n\nexport function isPipelineAgg(metricType) {\n  if (metricType) {\n    const po = pipelineOptions[metricType];\n    return po !== null && po !== undefined;\n  }\n\n  return false;\n}\n\nexport function getPipelineAggOptions(targets) {\n  const result = [];\n  _.each(targets.metrics, metric => {\n    if (!isPipelineAgg(metric.type)) {\n      result.push({ text: describeMetric(metric), value: metric.id });\n    }\n  });\n\n  return result;\n}\n\nexport function getMovingAvgSettings(model, filtered) {\n  const filteredResult = [];\n  if (filtered) {\n    _.each(movingAvgModelSettings[model], setting => {\n      if (!setting.isCheckbox) {\n        filteredResult.push(setting);\n      }\n    });\n    return filteredResult;\n  }\n  return movingAvgModelSettings[model];\n}\n\nexport function getOrderByOptions(target) {\n  const metricRefs = [];\n  _.each(target.metrics, metric => {\n    if (metric.type !== 'count') {\n      metricRefs.push({ text: describeMetric(metric), value: metric.id });\n    }\n  });\n\n  return orderByOptions.concat(metricRefs);\n}\n\nexport function describeOrder(order) {\n  const def = _.find(orderOptions, { value: order });\n  return def.text;\n}\n\nexport function describeMetric(metric) {\n  const def = _.find(metricAggTypes, { value: metric.type });\n  return def.text + ' ' + metric.field;\n}\n\nexport function describeOrderBy(orderBy, target) {\n  const def = _.find(orderByOptions, { value: orderBy });\n  if (def) {\n    return def.text;\n  }\n  const metric = _.find(target.metrics, { id: orderBy });\n  if (metric) {\n    return describeMetric(metric);\n  } else {\n    return 'metric not found';\n  }\n}\n","import * as queryDef from './query_def';\n\nexport class ElasticQueryBuilder {\n  timeField: string;\n  esVersion: number;\n\n  constructor(options) {\n    this.timeField = options.timeField;\n    this.esVersion = options.esVersion;\n  }\n\n  getRangeFilter() {\n    const filter = {};\n    filter[this.timeField] = {\n      gte: '$timeFrom',\n      lte: '$timeTo',\n      format: 'epoch_millis',\n    };\n\n    return filter;\n  }\n\n  buildTermsAgg(aggDef, queryNode, target) {\n    let metricRef, metric, y;\n    queryNode.terms = { field: aggDef.field };\n\n    if (!aggDef.settings) {\n      return queryNode;\n    }\n\n    queryNode.terms.size = parseInt(aggDef.settings.size, 10) === 0 ? 500 : parseInt(aggDef.settings.size, 10);\n    if (aggDef.settings.orderBy !== void 0) {\n      queryNode.terms.order = {};\n      queryNode.terms.order[aggDef.settings.orderBy] = aggDef.settings.order;\n\n      // if metric ref, look it up and add it to this agg level\n      metricRef = parseInt(aggDef.settings.orderBy, 10);\n      if (!isNaN(metricRef)) {\n        for (y = 0; y < target.metrics.length; y++) {\n          metric = target.metrics[y];\n          if (metric.id === aggDef.settings.orderBy) {\n            queryNode.aggs = {};\n            queryNode.aggs[metric.id] = {};\n            queryNode.aggs[metric.id][metric.type] = { field: metric.field };\n            break;\n          }\n        }\n      }\n    }\n\n    if (aggDef.settings.min_doc_count !== void 0) {\n      queryNode.terms.min_doc_count = parseInt(aggDef.settings.min_doc_count, 10);\n    }\n\n    if (aggDef.settings.missing) {\n      queryNode.terms.missing = aggDef.settings.missing;\n    }\n\n    return queryNode;\n  }\n\n  getDateHistogramAgg(aggDef) {\n    const esAgg: any = {};\n    const settings = aggDef.settings || {};\n    esAgg.interval = settings.interval;\n    esAgg.field = this.timeField;\n    esAgg.min_doc_count = settings.min_doc_count || 0;\n    esAgg.extended_bounds = { min: '$timeFrom', max: '$timeTo' };\n    esAgg.format = 'epoch_millis';\n\n    if (esAgg.interval === 'auto') {\n      esAgg.interval = '$__interval';\n    }\n\n    if (settings.missing) {\n      esAgg.missing = settings.missing;\n    }\n\n    return esAgg;\n  }\n\n  getHistogramAgg(aggDef) {\n    const esAgg: any = {};\n    const settings = aggDef.settings || {};\n    esAgg.interval = settings.interval;\n    esAgg.field = aggDef.field;\n    esAgg.min_doc_count = settings.min_doc_count || 0;\n\n    if (settings.missing) {\n      esAgg.missing = settings.missing;\n    }\n    return esAgg;\n  }\n\n  getFiltersAgg(aggDef) {\n    const filterObj = {};\n    for (let i = 0; i < aggDef.settings.filters.length; i++) {\n      const query = aggDef.settings.filters[i].query;\n      let label = aggDef.settings.filters[i].label;\n      label = label === '' || label === undefined ? query : label;\n      filterObj[label] = {\n        query_string: {\n          query: query,\n          analyze_wildcard: true,\n        },\n      };\n    }\n\n    return filterObj;\n  }\n\n  documentQuery(query, size) {\n    query.size = size;\n    query.sort = {};\n    query.sort[this.timeField] = { order: 'desc', unmapped_type: 'boolean' };\n\n    // fields field not supported on ES 5.x\n    if (this.esVersion < 5) {\n      query.fields = ['*', '_source'];\n    }\n\n    query.script_fields = {};\n    if (this.esVersion < 5) {\n      query.fielddata_fields = [this.timeField];\n    } else {\n      query.docvalue_fields = [this.timeField];\n    }\n    return query;\n  }\n\n  addAdhocFilters(query, adhocFilters) {\n    if (!adhocFilters) {\n      return;\n    }\n\n    let i, filter, condition, queryCondition;\n\n    for (i = 0; i < adhocFilters.length; i++) {\n      filter = adhocFilters[i];\n      condition = {};\n      condition[filter.key] = filter.value;\n      queryCondition = {};\n      queryCondition[filter.key] = { query: filter.value };\n\n      switch (filter.operator) {\n        case '=':\n          if (!query.query.bool.must) {\n            query.query.bool.must = [];\n          }\n          query.query.bool.must.push({ match_phrase: queryCondition });\n          break;\n        case '!=':\n          if (!query.query.bool.must_not) {\n            query.query.bool.must_not = [];\n          }\n          query.query.bool.must_not.push({ match_phrase: queryCondition });\n          break;\n        case '<':\n          condition[filter.key] = { lt: filter.value };\n          query.query.bool.filter.push({ range: condition });\n          break;\n        case '>':\n          condition[filter.key] = { gt: filter.value };\n          query.query.bool.filter.push({ range: condition });\n          break;\n        case '=~':\n          query.query.bool.filter.push({ regexp: condition });\n          break;\n        case '!~':\n          query.query.bool.filter.push({\n            bool: { must_not: { regexp: condition } },\n          });\n          break;\n      }\n    }\n  }\n\n  build(target, adhocFilters?, queryString?) {\n    // make sure query has defaults;\n    target.metrics = target.metrics || [{ type: 'count', id: '1' }];\n    target.bucketAggs = target.bucketAggs || [{ type: 'date_histogram', id: '2', settings: { interval: 'auto' } }];\n    target.timeField = this.timeField;\n\n    let i, nestedAggs, metric;\n    const query = {\n      size: 0,\n      query: {\n        bool: {\n          filter: [\n            { range: this.getRangeFilter() },\n            {\n              query_string: {\n                analyze_wildcard: true,\n                query: queryString,\n              },\n            },\n          ],\n        },\n      },\n    };\n\n    this.addAdhocFilters(query, adhocFilters);\n\n    // handle document query\n    if (target.bucketAggs.length === 0) {\n      metric = target.metrics[0];\n      if (!metric || metric.type !== 'raw_document') {\n        throw { message: 'Invalid query' };\n      }\n\n      const size = (metric.settings && metric.settings.size) || 500;\n      return this.documentQuery(query, size);\n    }\n\n    nestedAggs = query;\n\n    for (i = 0; i < target.bucketAggs.length; i++) {\n      const aggDef = target.bucketAggs[i];\n      const esAgg = {};\n\n      switch (aggDef.type) {\n        case 'date_histogram': {\n          esAgg['date_histogram'] = this.getDateHistogramAgg(aggDef);\n          break;\n        }\n        case 'histogram': {\n          esAgg['histogram'] = this.getHistogramAgg(aggDef);\n          break;\n        }\n        case 'filters': {\n          esAgg['filters'] = { filters: this.getFiltersAgg(aggDef) };\n          break;\n        }\n        case 'terms': {\n          this.buildTermsAgg(aggDef, esAgg, target);\n          break;\n        }\n        case 'geohash_grid': {\n          esAgg['geohash_grid'] = {\n            field: aggDef.field,\n            precision: aggDef.settings.precision,\n          };\n          break;\n        }\n      }\n\n      nestedAggs.aggs = nestedAggs.aggs || {};\n      nestedAggs.aggs[aggDef.id] = esAgg;\n      nestedAggs = esAgg;\n    }\n\n    nestedAggs.aggs = {};\n\n    for (i = 0; i < target.metrics.length; i++) {\n      metric = target.metrics[i];\n      if (metric.type === 'count') {\n        continue;\n      }\n\n      const aggField = {};\n      let metricAgg = null;\n\n      if (queryDef.isPipelineAgg(metric.type)) {\n        if (metric.pipelineAgg && /^\\d*$/.test(metric.pipelineAgg)) {\n          metricAgg = { buckets_path: metric.pipelineAgg };\n        } else {\n          continue;\n        }\n      } else {\n        metricAgg = { field: metric.field };\n      }\n\n      for (const prop in metric.settings) {\n        if (metric.settings.hasOwnProperty(prop) && metric.settings[prop] !== null) {\n          metricAgg[prop] = metric.settings[prop];\n        }\n      }\n\n      aggField[metric.type] = metricAgg;\n      nestedAggs.aggs[metric.id] = aggField;\n    }\n\n    return query;\n  }\n\n  getTermsQuery(queryDef) {\n    const query: any = {\n      size: 0,\n      query: {\n        bool: {\n          filter: [{ range: this.getRangeFilter() }],\n        },\n      },\n    };\n\n    if (queryDef.query) {\n      query.query.bool.filter.push({\n        query_string: {\n          analyze_wildcard: true,\n          query: queryDef.query,\n        },\n      });\n    }\n\n    let size = 500;\n    if (queryDef.size) {\n      size = queryDef.size;\n    }\n\n    query.aggs = {\n      '1': {\n        terms: {\n          field: queryDef.field,\n          size: size,\n          order: {\n            _term: 'asc',\n          },\n        },\n      },\n    };\n    return query;\n  }\n}\n","import moment from 'moment';\n\nconst intervalMap = {\n  Hourly: { startOf: 'hour', amount: 'hours' },\n  Daily: { startOf: 'day', amount: 'days' },\n  Weekly: { startOf: 'isoWeek', amount: 'weeks' },\n  Monthly: { startOf: 'month', amount: 'months' },\n  Yearly: { startOf: 'year', amount: 'years' },\n};\n\nexport class IndexPattern {\n  constructor(private pattern, private interval: string | null) {}\n\n  getIndexForToday() {\n    if (this.interval) {\n      return moment.utc().format(this.pattern);\n    } else {\n      return this.pattern;\n    }\n  }\n\n  getIndexList(from, to) {\n    if (!this.interval) {\n      return this.pattern;\n    }\n\n    const intervalInfo = intervalMap[this.interval];\n    const start = moment(from)\n      .utc()\n      .startOf(intervalInfo.startOf);\n    const endEpoch = moment(to)\n      .utc()\n      .startOf(intervalInfo.startOf)\n      .valueOf();\n    const indexList = [];\n\n    while (start.valueOf() <= endEpoch) {\n      indexList.push(start.format(this.pattern));\n      start.add(1, intervalInfo.amount);\n    }\n\n    return indexList;\n  }\n}\n","import _ from 'lodash';\nimport * as queryDef from './query_def';\nimport TableModel from 'app/core/table_model';\n\nexport class ElasticResponse {\n  constructor(private targets, private response) {\n    this.targets = targets;\n    this.response = response;\n  }\n\n  processMetrics(esAgg, target, seriesList, props) {\n    let metric, y, i, newSeries, bucket, value;\n\n    for (y = 0; y < target.metrics.length; y++) {\n      metric = target.metrics[y];\n      if (metric.hide) {\n        continue;\n      }\n\n      switch (metric.type) {\n        case 'count': {\n          newSeries = { datapoints: [], metric: 'count', props: props };\n          for (i = 0; i < esAgg.buckets.length; i++) {\n            bucket = esAgg.buckets[i];\n            value = bucket.doc_count;\n            newSeries.datapoints.push([value, bucket.key]);\n          }\n          seriesList.push(newSeries);\n          break;\n        }\n        case 'percentiles': {\n          if (esAgg.buckets.length === 0) {\n            break;\n          }\n\n          const firstBucket = esAgg.buckets[0];\n          const percentiles = firstBucket[metric.id].values;\n\n          for (const percentileName in percentiles) {\n            newSeries = {\n              datapoints: [],\n              metric: 'p' + percentileName,\n              props: props,\n              field: metric.field,\n            };\n\n            for (i = 0; i < esAgg.buckets.length; i++) {\n              bucket = esAgg.buckets[i];\n              const values = bucket[metric.id].values;\n              newSeries.datapoints.push([values[percentileName], bucket.key]);\n            }\n            seriesList.push(newSeries);\n          }\n\n          break;\n        }\n        case 'extended_stats': {\n          for (const statName in metric.meta) {\n            if (!metric.meta[statName]) {\n              continue;\n            }\n\n            newSeries = {\n              datapoints: [],\n              metric: statName,\n              props: props,\n              field: metric.field,\n            };\n\n            for (i = 0; i < esAgg.buckets.length; i++) {\n              bucket = esAgg.buckets[i];\n              const stats = bucket[metric.id];\n\n              // add stats that are in nested obj to top level obj\n              stats.std_deviation_bounds_upper = stats.std_deviation_bounds.upper;\n              stats.std_deviation_bounds_lower = stats.std_deviation_bounds.lower;\n\n              newSeries.datapoints.push([stats[statName], bucket.key]);\n            }\n\n            seriesList.push(newSeries);\n          }\n\n          break;\n        }\n        default: {\n          newSeries = {\n            datapoints: [],\n            metric: metric.type,\n            field: metric.field,\n            props: props,\n          };\n          for (i = 0; i < esAgg.buckets.length; i++) {\n            bucket = esAgg.buckets[i];\n\n            value = bucket[metric.id];\n            if (value !== undefined) {\n              if (value.normalized_value) {\n                newSeries.datapoints.push([value.normalized_value, bucket.key]);\n              } else {\n                newSeries.datapoints.push([value.value, bucket.key]);\n              }\n            }\n          }\n          seriesList.push(newSeries);\n          break;\n        }\n      }\n    }\n  }\n\n  processAggregationDocs(esAgg, aggDef, target, table, props) {\n    // add columns\n    if (table.columns.length === 0) {\n      for (const propKey of _.keys(props)) {\n        table.addColumn({ text: propKey, filterable: true });\n      }\n      table.addColumn({ text: aggDef.field, filterable: true });\n    }\n\n    // helper func to add values to value array\n    const addMetricValue = (values, metricName, value) => {\n      table.addColumn({ text: metricName });\n      values.push(value);\n    };\n\n    for (const bucket of esAgg.buckets) {\n      const values = [];\n\n      for (const propValues of _.values(props)) {\n        values.push(propValues);\n      }\n\n      // add bucket key (value)\n      values.push(bucket.key);\n\n      for (const metric of target.metrics) {\n        switch (metric.type) {\n          case 'count': {\n            addMetricValue(values, this.getMetricName(metric.type), bucket.doc_count);\n            break;\n          }\n          case 'extended_stats': {\n            for (const statName in metric.meta) {\n              if (!metric.meta[statName]) {\n                continue;\n              }\n\n              const stats = bucket[metric.id];\n              // add stats that are in nested obj to top level obj\n              stats.std_deviation_bounds_upper = stats.std_deviation_bounds.upper;\n              stats.std_deviation_bounds_lower = stats.std_deviation_bounds.lower;\n\n              addMetricValue(values, this.getMetricName(statName), stats[statName]);\n            }\n            break;\n          }\n          default: {\n            let metricName = this.getMetricName(metric.type);\n            const otherMetrics = _.filter(target.metrics, { type: metric.type });\n\n            // if more of the same metric type include field field name in property\n            if (otherMetrics.length > 1) {\n              metricName += ' ' + metric.field;\n            }\n\n            addMetricValue(values, metricName, bucket[metric.id].value);\n            break;\n          }\n        }\n      }\n\n      table.rows.push(values);\n    }\n  }\n\n  // This is quite complex\n  // need to recurise down the nested buckets to build series\n  processBuckets(aggs, target, seriesList, table, props, depth) {\n    let bucket, aggDef, esAgg, aggId;\n    const maxDepth = target.bucketAggs.length - 1;\n\n    for (aggId in aggs) {\n      aggDef = _.find(target.bucketAggs, { id: aggId });\n      esAgg = aggs[aggId];\n\n      if (!aggDef) {\n        continue;\n      }\n\n      if (depth === maxDepth) {\n        if (aggDef.type === 'date_histogram') {\n          this.processMetrics(esAgg, target, seriesList, props);\n        } else {\n          this.processAggregationDocs(esAgg, aggDef, target, table, props);\n        }\n      } else {\n        for (const nameIndex in esAgg.buckets) {\n          bucket = esAgg.buckets[nameIndex];\n          props = _.clone(props);\n          if (bucket.key !== void 0) {\n            props[aggDef.field] = bucket.key;\n          } else {\n            props['filter'] = nameIndex;\n          }\n          if (bucket.key_as_string) {\n            props[aggDef.field] = bucket.key_as_string;\n          }\n          this.processBuckets(bucket, target, seriesList, table, props, depth + 1);\n        }\n      }\n    }\n  }\n\n  private getMetricName(metric) {\n    let metricDef = _.find(queryDef.metricAggTypes, { value: metric });\n    if (!metricDef) {\n      metricDef = _.find(queryDef.extendedStats, { value: metric });\n    }\n\n    return metricDef ? metricDef.text : metric;\n  }\n\n  private getSeriesName(series, target, metricTypeCount) {\n    let metricName = this.getMetricName(series.metric);\n\n    if (target.alias) {\n      const regex = /\\{\\{([\\s\\S]+?)\\}\\}/g;\n\n      return target.alias.replace(regex, (match, g1, g2) => {\n        const group = g1 || g2;\n\n        if (group.indexOf('term ') === 0) {\n          return series.props[group.substring(5)];\n        }\n        if (series.props[group] !== void 0) {\n          return series.props[group];\n        }\n        if (group === 'metric') {\n          return metricName;\n        }\n        if (group === 'field') {\n          return series.field;\n        }\n\n        return match;\n      });\n    }\n\n    if (series.field && queryDef.isPipelineAgg(series.metric)) {\n      const appliedAgg = _.find(target.metrics, { id: series.field });\n      if (appliedAgg) {\n        metricName += ' ' + queryDef.describeMetric(appliedAgg);\n      } else {\n        metricName = 'Unset';\n      }\n    } else if (series.field) {\n      metricName += ' ' + series.field;\n    }\n\n    const propKeys = _.keys(series.props);\n    if (propKeys.length === 0) {\n      return metricName;\n    }\n\n    let name = '';\n    for (const propName in series.props) {\n      name += series.props[propName] + ' ';\n    }\n\n    if (metricTypeCount === 1) {\n      return name.trim();\n    }\n\n    return name.trim() + ' ' + metricName;\n  }\n\n  nameSeries(seriesList, target) {\n    const metricTypeCount = _.uniq(_.map(seriesList, 'metric')).length;\n\n    for (let i = 0; i < seriesList.length; i++) {\n      const series = seriesList[i];\n      series.target = this.getSeriesName(series, target, metricTypeCount);\n    }\n  }\n\n  processHits(hits, seriesList) {\n    const series = {\n      target: 'docs',\n      type: 'docs',\n      datapoints: [],\n      total: hits.total,\n      filterable: true,\n    };\n    let propName, hit, doc, i;\n\n    for (i = 0; i < hits.hits.length; i++) {\n      hit = hits.hits[i];\n      doc = {\n        _id: hit._id,\n        _type: hit._type,\n        _index: hit._index,\n      };\n\n      if (hit._source) {\n        for (propName in hit._source) {\n          doc[propName] = hit._source[propName];\n        }\n      }\n\n      for (propName in hit.fields) {\n        doc[propName] = hit.fields[propName];\n      }\n      series.datapoints.push(doc);\n    }\n\n    seriesList.push(series);\n  }\n\n  trimDatapoints(aggregations, target) {\n    const histogram = _.find(target.bucketAggs, { type: 'date_histogram' });\n\n    const shouldDropFirstAndLast = histogram && histogram.settings && histogram.settings.trimEdges;\n    if (shouldDropFirstAndLast) {\n      const trim = histogram.settings.trimEdges;\n      for (const prop in aggregations) {\n        const points = aggregations[prop];\n        if (points.datapoints.length > trim * 2) {\n          points.datapoints = points.datapoints.slice(trim, points.datapoints.length - trim);\n        }\n      }\n    }\n  }\n\n  getErrorFromElasticResponse(response, err) {\n    const result: any = {};\n    result.data = JSON.stringify(err, null, 4);\n    if (err.root_cause && err.root_cause.length > 0 && err.root_cause[0].reason) {\n      result.message = err.root_cause[0].reason;\n    } else {\n      result.message = err.reason || 'Unkown elastic error response';\n    }\n\n    if (response.$$config) {\n      result.config = response.$$config;\n    }\n\n    return result;\n  }\n\n  getTimeSeries() {\n    const seriesList = [];\n\n    for (let i = 0; i < this.response.responses.length; i++) {\n      const response = this.response.responses[i];\n      if (response.error) {\n        throw this.getErrorFromElasticResponse(this.response, response.error);\n      }\n\n      if (response.hits && response.hits.hits.length > 0) {\n        this.processHits(response.hits, seriesList);\n      }\n\n      if (response.aggregations) {\n        const aggregations = response.aggregations;\n        const target = this.targets[i];\n        const tmpSeriesList = [];\n        const table = new TableModel();\n\n        this.processBuckets(aggregations, target, tmpSeriesList, table, {}, 0);\n        this.trimDatapoints(tmpSeriesList, target);\n        this.nameSeries(tmpSeriesList, target);\n\n        for (let y = 0; y < tmpSeriesList.length; y++) {\n          seriesList.push(tmpSeriesList[y]);\n        }\n\n        if (table.rows.length > 0) {\n          seriesList.push(table);\n        }\n      }\n    }\n\n    return { data: seriesList };\n  }\n}\n","import angular from 'angular';\nimport _ from 'lodash';\nimport moment from 'moment';\nimport { ElasticQueryBuilder } from './query_builder';\nimport { IndexPattern } from './index_pattern';\nimport { ElasticResponse } from './elastic_response';\n\nexport class ElasticDatasource {\n  basicAuth: string;\n  withCredentials: boolean;\n  url: string;\n  name: string;\n  index: string;\n  timeField: string;\n  esVersion: number;\n  interval: string;\n  maxConcurrentShardRequests: number;\n  queryBuilder: ElasticQueryBuilder;\n  indexPattern: IndexPattern;\n\n  /** @ngInject */\n  constructor(instanceSettings, private $q, private backendSrv, private templateSrv, private timeSrv) {\n    this.basicAuth = instanceSettings.basicAuth;\n    this.withCredentials = instanceSettings.withCredentials;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.index = instanceSettings.index;\n    this.timeField = instanceSettings.jsonData.timeField;\n    this.esVersion = instanceSettings.jsonData.esVersion;\n    this.indexPattern = new IndexPattern(instanceSettings.index, instanceSettings.jsonData.interval);\n    this.interval = instanceSettings.jsonData.timeInterval;\n    this.maxConcurrentShardRequests = instanceSettings.jsonData.maxConcurrentShardRequests;\n    this.queryBuilder = new ElasticQueryBuilder({\n      timeField: this.timeField,\n      esVersion: this.esVersion,\n    });\n  }\n\n  private request(method, url, data?) {\n    const options: any = {\n      url: this.url + '/' + url,\n      method: method,\n      data: data,\n    };\n\n    if (this.basicAuth || this.withCredentials) {\n      options.withCredentials = true;\n    }\n    if (this.basicAuth) {\n      options.headers = {\n        Authorization: this.basicAuth,\n      };\n    }\n\n    return this.backendSrv.datasourceRequest(options);\n  }\n\n  private get(url) {\n    const range = this.timeSrv.timeRange();\n    const indexList = this.indexPattern.getIndexList(range.from.valueOf(), range.to.valueOf());\n    if (_.isArray(indexList) && indexList.length) {\n      return this.request('GET', indexList[0] + url).then(results => {\n        results.data.$$config = results.config;\n        return results.data;\n      });\n    } else {\n      return this.request('GET', this.indexPattern.getIndexForToday() + url).then(results => {\n        results.data.$$config = results.config;\n        return results.data;\n      });\n    }\n  }\n\n  private post(url, data) {\n    return this.request('POST', url, data)\n      .then(results => {\n        results.data.$$config = results.config;\n        return results.data;\n      })\n      .catch(err => {\n        if (err.data && err.data.error) {\n          throw {\n            message: 'Elasticsearch error: ' + err.data.error.reason,\n            error: err.data.error,\n          };\n        }\n\n        throw err;\n      });\n  }\n\n  annotationQuery(options) {\n    const annotation = options.annotation;\n    const timeField = annotation.timeField || '@timestamp';\n    const queryString = annotation.query || '*';\n    const tagsField = annotation.tagsField || 'tags';\n    const textField = annotation.textField || null;\n\n    const range = {};\n    range[timeField] = {\n      from: options.range.from.valueOf(),\n      to: options.range.to.valueOf(),\n      format: 'epoch_millis',\n    };\n\n    const queryInterpolated = this.templateSrv.replace(queryString, {}, 'lucene');\n    const query = {\n      bool: {\n        filter: [\n          { range: range },\n          {\n            query_string: {\n              query: queryInterpolated,\n            },\n          },\n        ],\n      },\n    };\n\n    const data = {\n      query: query,\n      size: 10000,\n    };\n\n    // fields field not supported on ES 5.x\n    if (this.esVersion < 5) {\n      data['fields'] = [timeField, '_source'];\n    }\n\n    const header: any = {\n      search_type: 'query_then_fetch',\n      ignore_unavailable: true,\n    };\n\n    // old elastic annotations had index specified on them\n    if (annotation.index) {\n      header.index = annotation.index;\n    } else {\n      header.index = this.indexPattern.getIndexList(options.range.from, options.range.to);\n    }\n\n    const payload = angular.toJson(header) + '\\n' + angular.toJson(data) + '\\n';\n\n    return this.post('_msearch', payload).then(res => {\n      const list = [];\n      const hits = res.responses[0].hits.hits;\n\n      const getFieldFromSource = (source, fieldName) => {\n        if (!fieldName) {\n          return;\n        }\n\n        const fieldNames = fieldName.split('.');\n        let fieldValue = source;\n\n        for (let i = 0; i < fieldNames.length; i++) {\n          fieldValue = fieldValue[fieldNames[i]];\n          if (!fieldValue) {\n            console.log('could not find field in annotation: ', fieldName);\n            return '';\n          }\n        }\n\n        return fieldValue;\n      };\n\n      for (let i = 0; i < hits.length; i++) {\n        const source = hits[i]._source;\n        let time = getFieldFromSource(source, timeField);\n        if (typeof hits[i].fields !== 'undefined') {\n          const fields = hits[i].fields;\n          if (_.isString(fields[timeField]) || _.isNumber(fields[timeField])) {\n            time = fields[timeField];\n          }\n        }\n\n        const event = {\n          annotation: annotation,\n          time: moment.utc(time).valueOf(),\n          text: getFieldFromSource(source, textField),\n          tags: getFieldFromSource(source, tagsField),\n        };\n\n        // legacy support for title tield\n        if (annotation.titleField) {\n          const title = getFieldFromSource(source, annotation.titleField);\n          if (title) {\n            event.text = title + '\\n' + event.text;\n          }\n        }\n\n        if (typeof event.tags === 'string') {\n          event.tags = event.tags.split(',');\n        }\n\n        list.push(event);\n      }\n      return list;\n    });\n  }\n\n  testDatasource() {\n    this.timeSrv.setTime({ from: 'now-1m', to: 'now' }, true);\n    // validate that the index exist and has date field\n    return this.getFields({ type: 'date' }).then(\n      dateFields => {\n        const timeField = _.find(dateFields, { text: this.timeField });\n        if (!timeField) {\n          return {\n            status: 'error',\n            message: 'No date field named ' + this.timeField + ' found',\n          };\n        }\n        return { status: 'success', message: 'Index OK. Time field name OK.' };\n      },\n      err => {\n        console.log(err);\n        if (err.data && err.data.error) {\n          let message = angular.toJson(err.data.error);\n          if (err.data.error.reason) {\n            message = err.data.error.reason;\n          }\n          return { status: 'error', message: message };\n        } else {\n          return { status: 'error', message: err.status };\n        }\n      }\n    );\n  }\n\n  getQueryHeader(searchType, timeFrom, timeTo) {\n    const queryHeader: any = {\n      search_type: searchType,\n      ignore_unavailable: true,\n      index: this.indexPattern.getIndexList(timeFrom, timeTo),\n    };\n    if (this.esVersion >= 56) {\n      queryHeader['max_concurrent_shard_requests'] = this.maxConcurrentShardRequests;\n    }\n    return angular.toJson(queryHeader);\n  }\n\n  query(options) {\n    let payload = '';\n    let target;\n    const sentTargets = [];\n\n    // add global adhoc filters to timeFilter\n    const adhocFilters = this.templateSrv.getAdhocFilters(this.name);\n\n    for (let i = 0; i < options.targets.length; i++) {\n      target = options.targets[i];\n      if (target.hide) {\n        continue;\n      }\n\n      const queryString = this.templateSrv.replace(target.query || '*', options.scopedVars, 'lucene');\n      const queryObj = this.queryBuilder.build(target, adhocFilters, queryString);\n      const esQuery = angular.toJson(queryObj);\n\n      const searchType = queryObj.size === 0 && this.esVersion < 5 ? 'count' : 'query_then_fetch';\n      const header = this.getQueryHeader(searchType, options.range.from, options.range.to);\n      payload += header + '\\n';\n\n      payload += esQuery + '\\n';\n      sentTargets.push(target);\n    }\n\n    if (sentTargets.length === 0) {\n      return this.$q.when([]);\n    }\n\n    payload = payload.replace(/\\$timeFrom/g, options.range.from.valueOf());\n    payload = payload.replace(/\\$timeTo/g, options.range.to.valueOf());\n    payload = this.templateSrv.replace(payload, options.scopedVars);\n\n    return this.post('_msearch', payload).then(res => {\n      return new ElasticResponse(sentTargets, res).getTimeSeries();\n    });\n  }\n\n  getFields(query) {\n    return this.get('/_mapping').then(result => {\n      const typeMap = {\n        float: 'number',\n        double: 'number',\n        integer: 'number',\n        long: 'number',\n        date: 'date',\n        string: 'string',\n        text: 'string',\n        scaled_float: 'number',\n        nested: 'nested',\n      };\n\n      function shouldAddField(obj, key, query) {\n        if (key[0] === '_') {\n          return false;\n        }\n\n        if (!query.type) {\n          return true;\n        }\n\n        // equal query type filter, or via typemap translation\n        return query.type === obj.type || query.type === typeMap[obj.type];\n      }\n\n      // Store subfield names: [system, process, cpu, total] -> system.process.cpu.total\n      const fieldNameParts = [];\n      const fields = {};\n\n      function getFieldsRecursively(obj) {\n        for (const key in obj) {\n          const subObj = obj[key];\n\n          // Check mapping field for nested fields\n          if (_.isObject(subObj.properties)) {\n            fieldNameParts.push(key);\n            getFieldsRecursively(subObj.properties);\n          }\n\n          if (_.isObject(subObj.fields)) {\n            fieldNameParts.push(key);\n            getFieldsRecursively(subObj.fields);\n          }\n\n          if (_.isString(subObj.type)) {\n            const fieldName = fieldNameParts.concat(key).join('.');\n\n            // Hide meta-fields and check field type\n            if (shouldAddField(subObj, key, query)) {\n              fields[fieldName] = {\n                text: fieldName,\n                type: subObj.type,\n              };\n            }\n          }\n        }\n        fieldNameParts.pop();\n      }\n\n      for (const indexName in result) {\n        const index = result[indexName];\n        if (index && index.mappings) {\n          const mappings = index.mappings;\n          for (const typeName in mappings) {\n            const properties = mappings[typeName].properties;\n            getFieldsRecursively(properties);\n          }\n        }\n      }\n\n      // transform to array\n      return _.map(fields, value => {\n        return value;\n      });\n    });\n  }\n\n  getTerms(queryDef) {\n    const range = this.timeSrv.timeRange();\n    const searchType = this.esVersion >= 5 ? 'query_then_fetch' : 'count';\n    const header = this.getQueryHeader(searchType, range.from, range.to);\n    let esQuery = angular.toJson(this.queryBuilder.getTermsQuery(queryDef));\n\n    esQuery = esQuery.replace(/\\$timeFrom/g, range.from.valueOf());\n    esQuery = esQuery.replace(/\\$timeTo/g, range.to.valueOf());\n    esQuery = header + '\\n' + esQuery + '\\n';\n\n    return this.post('_msearch?search_type=' + searchType, esQuery).then(res => {\n      if (!res.responses[0].aggregations) {\n        return [];\n      }\n\n      const buckets = res.responses[0].aggregations['1'].buckets;\n      return _.map(buckets, bucket => {\n        return {\n          text: bucket.key_as_string || bucket.key,\n          value: bucket.key,\n        };\n      });\n    });\n  }\n\n  metricFindQuery(query) {\n    query = angular.fromJson(query);\n    if (!query) {\n      return this.$q.when([]);\n    }\n\n    if (query.find === 'fields') {\n      query.field = this.templateSrv.replace(query.field, {}, 'lucene');\n      return this.getFields(query);\n    }\n\n    if (query.find === 'terms') {\n      query.field = this.templateSrv.replace(query.field, {}, 'lucene');\n      query.query = this.templateSrv.replace(query.query || '*', {}, 'lucene');\n      return this.getTerms(query);\n    }\n  }\n\n  getTagKeys() {\n    return this.getFields({});\n  }\n\n  getTagValues(options) {\n    return this.getTerms({ field: options.key, query: '*' });\n  }\n\n  targetContainsTemplate(target) {\n    if (this.templateSrv.variableExists(target.query) || this.templateSrv.variableExists(target.alias)) {\n      return true;\n    }\n\n    for (const bucketAgg of target.bucketAggs) {\n      if (this.templateSrv.variableExists(bucketAgg.field) || this.objectContainsTemplate(bucketAgg.settings)) {\n        return true;\n      }\n    }\n\n    for (const metric of target.metrics) {\n      if (\n        this.templateSrv.variableExists(metric.field) ||\n        this.objectContainsTemplate(metric.settings) ||\n        this.objectContainsTemplate(metric.meta)\n      ) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  private isPrimitive(obj) {\n    if (obj === null || obj === undefined) {\n      return true;\n    }\n    if (['string', 'number', 'boolean'].some(type => type === typeof true)) {\n      return true;\n    }\n\n    return false;\n  }\n\n  private objectContainsTemplate(obj) {\n    if (!obj) {\n      return false;\n    }\n\n    for (const key of Object.keys(obj)) {\n      if (this.isPrimitive(obj[key])) {\n        if (this.templateSrv.variableExists(obj[key])) {\n          return true;\n        }\n      } else if (Array.isArray(obj[key])) {\n        for (const item of obj[key]) {\n          if (this.objectContainsTemplate(item)) {\n            return true;\n          }\n        }\n      } else {\n        if (this.objectContainsTemplate(obj[key])) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n}\n","import angular from 'angular';\nimport _ from 'lodash';\nimport * as queryDef from './query_def';\n\nexport function elasticBucketAgg() {\n  return {\n    templateUrl: 'public/app/plugins/datasource/elasticsearch/partials/bucket_agg.html',\n    controller: 'ElasticBucketAggCtrl',\n    restrict: 'E',\n    scope: {\n      target: '=',\n      index: '=',\n      onChange: '&',\n      getFields: '&',\n    },\n  };\n}\n\nexport class ElasticBucketAggCtrl {\n  /** @nginject */\n  constructor($scope, uiSegmentSrv, $q, $rootScope) {\n    const bucketAggs = $scope.target.bucketAggs;\n\n    $scope.orderByOptions = [];\n\n    $scope.getBucketAggTypes = () => {\n      return queryDef.bucketAggTypes;\n    };\n\n    $scope.getOrderOptions = () => {\n      return queryDef.orderOptions;\n    };\n\n    $scope.getSizeOptions = () => {\n      return queryDef.sizeOptions;\n    };\n\n    $rootScope.onAppEvent(\n      'elastic-query-updated',\n      () => {\n        $scope.validateModel();\n      },\n      $scope\n    );\n\n    $scope.init = () => {\n      $scope.agg = bucketAggs[$scope.index];\n      $scope.validateModel();\n    };\n\n    $scope.onChangeInternal = () => {\n      $scope.onChange();\n    };\n\n    $scope.onTypeChanged = () => {\n      $scope.agg.settings = {};\n      $scope.showOptions = false;\n\n      switch ($scope.agg.type) {\n        case 'date_histogram':\n        case 'histogram':\n        case 'terms': {\n          delete $scope.agg.query;\n          $scope.agg.field = 'select field';\n          break;\n        }\n        case 'filters': {\n          delete $scope.agg.field;\n          $scope.agg.query = '*';\n          break;\n        }\n        case 'geohash_grid': {\n          $scope.agg.settings.precision = 3;\n          break;\n        }\n      }\n\n      $scope.validateModel();\n      $scope.onChange();\n    };\n\n    $scope.validateModel = () => {\n      $scope.index = _.indexOf(bucketAggs, $scope.agg);\n      $scope.isFirst = $scope.index === 0;\n      $scope.bucketAggCount = bucketAggs.length;\n\n      let settingsLinkText = '';\n      const settings = $scope.agg.settings || {};\n\n      switch ($scope.agg.type) {\n        case 'terms': {\n          settings.order = settings.order || 'desc';\n          settings.size = settings.size || '10';\n          settings.min_doc_count = settings.min_doc_count || 1;\n          settings.orderBy = settings.orderBy || '_term';\n\n          if (settings.size !== '0') {\n            settingsLinkText = queryDef.describeOrder(settings.order) + ' ' + settings.size + ', ';\n          }\n\n          if (settings.min_doc_count > 0) {\n            settingsLinkText += 'Min Doc Count: ' + settings.min_doc_count + ', ';\n          }\n\n          settingsLinkText += 'Order by: ' + queryDef.describeOrderBy(settings.orderBy, $scope.target);\n\n          if (settings.size === '0') {\n            settingsLinkText += ' (' + settings.order + ')';\n          }\n\n          break;\n        }\n        case 'filters': {\n          settings.filters = settings.filters || [{ query: '*' }];\n          settingsLinkText = _.reduce(\n            settings.filters,\n            (memo, value, index) => {\n              memo += 'Q' + (index + 1) + '  = ' + value.query + ' ';\n              return memo;\n            },\n            ''\n          );\n          if (settingsLinkText.length > 50) {\n            settingsLinkText = settingsLinkText.substr(0, 50) + '...';\n          }\n          settingsLinkText = 'Filter Queries (' + settings.filters.length + ')';\n          break;\n        }\n        case 'date_histogram': {\n          settings.interval = settings.interval || 'auto';\n          settings.min_doc_count = settings.min_doc_count || 0;\n          $scope.agg.field = $scope.target.timeField;\n          settingsLinkText = 'Interval: ' + settings.interval;\n\n          if (settings.min_doc_count > 0) {\n            settingsLinkText += ', Min Doc Count: ' + settings.min_doc_count;\n          }\n\n          if (settings.trimEdges === undefined || settings.trimEdges < 0) {\n            settings.trimEdges = 0;\n          }\n\n          if (settings.trimEdges && settings.trimEdges > 0) {\n            settingsLinkText += ', Trim edges: ' + settings.trimEdges;\n          }\n          break;\n        }\n        case 'histogram': {\n          settings.interval = settings.interval || 1000;\n          settings.min_doc_count = _.defaultTo(settings.min_doc_count, 1);\n          settingsLinkText = 'Interval: ' + settings.interval;\n\n          if (settings.min_doc_count > 0) {\n            settingsLinkText += ', Min Doc Count: ' + settings.min_doc_count;\n          }\n          break;\n        }\n        case 'geohash_grid': {\n          // limit precision to 7\n          settings.precision = Math.max(Math.min(settings.precision, 7), 1);\n          settingsLinkText = 'Precision: ' + settings.precision;\n          break;\n        }\n      }\n\n      $scope.settingsLinkText = settingsLinkText;\n      $scope.agg.settings = settings;\n      return true;\n    };\n\n    $scope.addFiltersQuery = () => {\n      $scope.agg.settings.filters.push({ query: '*' });\n    };\n\n    $scope.removeFiltersQuery = filter => {\n      $scope.agg.settings.filters = _.without($scope.agg.settings.filters, filter);\n    };\n\n    $scope.toggleOptions = () => {\n      $scope.showOptions = !$scope.showOptions;\n    };\n\n    $scope.getOrderByOptions = () => {\n      return queryDef.getOrderByOptions($scope.target);\n    };\n\n    $scope.getFieldsInternal = () => {\n      if ($scope.agg.type === 'date_histogram') {\n        return $scope.getFields({ $fieldType: 'date' });\n      } else {\n        return $scope.getFields();\n      }\n    };\n\n    $scope.getIntervalOptions = () => {\n      return $q.when(uiSegmentSrv.transformToSegments(true, 'interval')(queryDef.intervalOptions));\n    };\n\n    $scope.addBucketAgg = () => {\n      // if last is date histogram add it before\n      const lastBucket = bucketAggs[bucketAggs.length - 1];\n      let addIndex = bucketAggs.length - 1;\n\n      if (lastBucket && lastBucket.type === 'date_histogram') {\n        addIndex -= 1;\n      }\n\n      const id = _.reduce(\n        $scope.target.bucketAggs.concat($scope.target.metrics),\n        (max, val) => {\n          return parseInt(val.id, 10) > max ? parseInt(val.id, 10) : max;\n        },\n        0\n      );\n\n      bucketAggs.splice(addIndex, 0, { type: 'terms', field: 'select field', id: (id + 1).toString(), fake: true });\n      $scope.onChange();\n    };\n\n    $scope.removeBucketAgg = () => {\n      bucketAggs.splice($scope.index, 1);\n      $scope.onChange();\n    };\n\n    $scope.init();\n  }\n}\n\nconst module = angular.module('grafana.directives');\nmodule.directive('elasticBucketAgg', elasticBucketAgg);\nmodule.controller('ElasticBucketAggCtrl', ElasticBucketAggCtrl);\n","import angular from 'angular';\nimport _ from 'lodash';\nimport * as queryDef from './query_def';\n\nexport function elasticMetricAgg() {\n  return {\n    templateUrl: 'public/app/plugins/datasource/elasticsearch/partials/metric_agg.html',\n    controller: 'ElasticMetricAggCtrl',\n    restrict: 'E',\n    scope: {\n      target: '=',\n      index: '=',\n      onChange: '&',\n      getFields: '&',\n      esVersion: '=',\n    },\n  };\n}\n\nexport class ElasticMetricAggCtrl {\n  constructor($scope, uiSegmentSrv, $q, $rootScope) {\n    const metricAggs = $scope.target.metrics;\n    $scope.metricAggTypes = queryDef.getMetricAggTypes($scope.esVersion);\n    $scope.extendedStats = queryDef.extendedStats;\n    $scope.pipelineAggOptions = [];\n    $scope.modelSettingsValues = {};\n\n    $scope.init = () => {\n      $scope.agg = metricAggs[$scope.index];\n      $scope.validateModel();\n      $scope.updatePipelineAggOptions();\n    };\n\n    $scope.updatePipelineAggOptions = () => {\n      $scope.pipelineAggOptions = queryDef.getPipelineAggOptions($scope.target);\n    };\n\n    $rootScope.onAppEvent(\n      'elastic-query-updated',\n      () => {\n        $scope.index = _.indexOf(metricAggs, $scope.agg);\n        $scope.updatePipelineAggOptions();\n        $scope.validateModel();\n      },\n      $scope\n    );\n\n    $scope.validateModel = () => {\n      $scope.isFirst = $scope.index === 0;\n      $scope.isSingle = metricAggs.length === 1;\n      $scope.settingsLinkText = '';\n      $scope.aggDef = _.find($scope.metricAggTypes, { value: $scope.agg.type });\n\n      if (queryDef.isPipelineAgg($scope.agg.type)) {\n        $scope.agg.pipelineAgg = $scope.agg.pipelineAgg || 'select metric';\n        $scope.agg.field = $scope.agg.pipelineAgg;\n\n        const pipelineOptions = queryDef.getPipelineOptions($scope.agg);\n        if (pipelineOptions.length > 0) {\n          _.each(pipelineOptions, opt => {\n            $scope.agg.settings[opt.text] = $scope.agg.settings[opt.text] || opt.default;\n          });\n          $scope.settingsLinkText = 'Options';\n        }\n      } else if (!$scope.agg.field) {\n        $scope.agg.field = 'select field';\n      }\n      switch ($scope.agg.type) {\n        case 'cardinality': {\n          const precisionThreshold = $scope.agg.settings.precision_threshold || '';\n          $scope.settingsLinkText = 'Precision threshold: ' + precisionThreshold;\n          break;\n        }\n        case 'percentiles': {\n          $scope.agg.settings.percents = $scope.agg.settings.percents || [25, 50, 75, 95, 99];\n          $scope.settingsLinkText = 'Values: ' + $scope.agg.settings.percents.join(',');\n          break;\n        }\n        case 'extended_stats': {\n          if (_.keys($scope.agg.meta).length === 0) {\n            $scope.agg.meta.std_deviation_bounds_lower = true;\n            $scope.agg.meta.std_deviation_bounds_upper = true;\n          }\n\n          const stats = _.reduce(\n            $scope.agg.meta,\n            (memo, val, key) => {\n              if (val) {\n                const def = _.find($scope.extendedStats, { value: key });\n                memo.push(def.text);\n              }\n              return memo;\n            },\n            []\n          );\n\n          $scope.settingsLinkText = 'Stats: ' + stats.join(', ');\n          break;\n        }\n        case 'moving_avg': {\n          $scope.movingAvgModelTypes = queryDef.movingAvgModelOptions;\n          $scope.modelSettings = queryDef.getMovingAvgSettings($scope.agg.settings.model, true);\n          $scope.updateMovingAvgModelSettings();\n          break;\n        }\n        case 'raw_document': {\n          $scope.agg.settings.size = $scope.agg.settings.size || 500;\n          $scope.settingsLinkText = 'Size: ' + $scope.agg.settings.size;\n          $scope.target.metrics.splice(0, $scope.target.metrics.length, $scope.agg);\n\n          $scope.target.bucketAggs = [];\n          break;\n        }\n      }\n      if ($scope.aggDef.supportsInlineScript) {\n        // I know this stores the inline script twice\n        // but having it like this simplifes the query_builder\n        const inlineScript = $scope.agg.inlineScript;\n        if (inlineScript) {\n          $scope.agg.settings.script = { inline: inlineScript };\n        } else {\n          delete $scope.agg.settings.script;\n        }\n\n        if ($scope.settingsLinkText === '') {\n          $scope.settingsLinkText = 'Options';\n        }\n      }\n    };\n\n    $scope.toggleOptions = () => {\n      $scope.showOptions = !$scope.showOptions;\n      $scope.updatePipelineAggOptions();\n    };\n\n    $scope.onChangeInternal = () => {\n      $scope.onChange();\n    };\n\n    $scope.updateMovingAvgModelSettings = () => {\n      const modelSettingsKeys = [];\n      const modelSettings = queryDef.getMovingAvgSettings($scope.agg.settings.model, false);\n      for (let i = 0; i < modelSettings.length; i++) {\n        modelSettingsKeys.push(modelSettings[i].value);\n      }\n\n      for (const key in $scope.agg.settings.settings) {\n        if ($scope.agg.settings.settings[key] === null || modelSettingsKeys.indexOf(key) === -1) {\n          delete $scope.agg.settings.settings[key];\n        }\n      }\n    };\n\n    $scope.onChangeClearInternal = () => {\n      delete $scope.agg.settings.minimize;\n      $scope.onChange();\n    };\n\n    $scope.onTypeChange = () => {\n      $scope.agg.settings = {};\n      $scope.agg.meta = {};\n      $scope.showOptions = false;\n      $scope.updatePipelineAggOptions();\n      $scope.onChange();\n    };\n\n    $scope.getFieldsInternal = () => {\n      if ($scope.agg.type === 'cardinality') {\n        return $scope.getFields();\n      }\n      return $scope.getFields({ $fieldType: 'number' });\n    };\n\n    $scope.addMetricAgg = () => {\n      const addIndex = metricAggs.length;\n\n      const id = _.reduce(\n        $scope.target.bucketAggs.concat($scope.target.metrics),\n        (max, val) => {\n          return parseInt(val.id, 10) > max ? parseInt(val.id, 10) : max;\n        },\n        0\n      );\n\n      metricAggs.splice(addIndex, 0, { type: 'count', field: 'select field', id: (id + 1).toString() });\n      $scope.onChange();\n    };\n\n    $scope.removeMetricAgg = () => {\n      metricAggs.splice($scope.index, 1);\n      $scope.onChange();\n    };\n\n    $scope.toggleShowMetric = () => {\n      $scope.agg.hide = !$scope.agg.hide;\n      if (!$scope.agg.hide) {\n        delete $scope.agg.hide;\n      }\n      $scope.onChange();\n    };\n\n    $scope.init();\n  }\n}\n\nconst module = angular.module('grafana.directives');\nmodule.directive('elasticMetricAgg', elasticMetricAgg);\nmodule.controller('ElasticMetricAggCtrl', ElasticMetricAggCtrl);\n","import './bucket_agg';\nimport './metric_agg';\n\nimport angular from 'angular';\nimport _ from 'lodash';\nimport * as queryDef from './query_def';\nimport { QueryCtrl } from 'app/plugins/sdk';\n\nexport class ElasticQueryCtrl extends QueryCtrl {\n  static templateUrl = 'partials/query.editor.html';\n\n  esVersion: any;\n  rawQueryOld: string;\n\n  /** @ngInject */\n  constructor($scope, $injector, private $rootScope, private uiSegmentSrv) {\n    super($scope, $injector);\n\n    this.esVersion = this.datasource.esVersion;\n    this.queryUpdated();\n  }\n\n  getFields(type) {\n    const jsonStr = angular.toJson({ find: 'fields', type: type });\n    return this.datasource\n      .metricFindQuery(jsonStr)\n      .then(this.uiSegmentSrv.transformToSegments(false))\n      .catch(this.handleQueryError.bind(this));\n  }\n\n  queryUpdated() {\n    const newJson = angular.toJson(this.datasource.queryBuilder.build(this.target), true);\n    if (this.rawQueryOld && newJson !== this.rawQueryOld) {\n      this.refresh();\n    }\n\n    this.rawQueryOld = newJson;\n    this.$rootScope.appEvent('elastic-query-updated');\n  }\n\n  getCollapsedText() {\n    const metricAggs = this.target.metrics;\n    const bucketAggs = this.target.bucketAggs;\n    const metricAggTypes = queryDef.getMetricAggTypes(this.esVersion);\n    const bucketAggTypes = queryDef.bucketAggTypes;\n    let text = '';\n\n    if (this.target.query) {\n      text += 'Query: ' + this.target.query + ', ';\n    }\n\n    text += 'Metrics: ';\n\n    _.each(metricAggs, (metric, index) => {\n      const aggDef = _.find(metricAggTypes, { value: metric.type });\n      text += aggDef.text + '(';\n      if (aggDef.requiresField) {\n        text += metric.field;\n      }\n      text += '), ';\n    });\n\n    _.each(bucketAggs, (bucketAgg, index) => {\n      if (index === 0) {\n        text += ' Group by: ';\n      }\n\n      const aggDef = _.find(bucketAggTypes, { value: bucketAgg.type });\n      text += aggDef.text + '(';\n      if (aggDef.requiresField) {\n        text += bucketAgg.field;\n      }\n      text += '), ';\n    });\n\n    if (this.target.alias) {\n      text += 'Alias: ' + this.target.alias;\n    }\n\n    return text;\n  }\n\n  handleQueryError(err) {\n    this.error = err.message || 'Failed to issue metric query';\n    return [];\n  }\n}\n","import _ from 'lodash';\n\nexport class ElasticConfigCtrl {\n  static templateUrl = 'public/app/plugins/datasource/elasticsearch/partials/config.html';\n  current: any;\n\n  /** @ngInject */\n  constructor($scope) {\n    this.current.jsonData.timeField = this.current.jsonData.timeField || '@timestamp';\n    this.current.jsonData.esVersion = this.current.jsonData.esVersion || 5;\n    this.current.jsonData.maxConcurrentShardRequests = this.current.jsonData.maxConcurrentShardRequests || 256;\n  }\n\n  indexPatternTypes = [\n    { name: 'No pattern', value: undefined },\n    { name: 'Hourly', value: 'Hourly', example: '[logstash-]YYYY.MM.DD.HH' },\n    { name: 'Daily', value: 'Daily', example: '[logstash-]YYYY.MM.DD' },\n    { name: 'Weekly', value: 'Weekly', example: '[logstash-]GGGG.WW' },\n    { name: 'Monthly', value: 'Monthly', example: '[logstash-]YYYY.MM' },\n    { name: 'Yearly', value: 'Yearly', example: '[logstash-]YYYY' },\n  ];\n\n  esVersions = [{ name: '2.x', value: 2 }, { name: '5.x', value: 5 }, { name: '5.6+', value: 56 }];\n\n  indexPatternTypeChanged() {\n    const def = _.find(this.indexPatternTypes, {\n      value: this.current.jsonData.interval,\n    });\n    this.current.database = def.example || 'es-index-name';\n  }\n}\n","import { ElasticDatasource } from './datasource';\nimport { ElasticQueryCtrl } from './query_ctrl';\nimport { ElasticConfigCtrl } from './config_ctrl';\n\nclass ElasticAnnotationsQueryCtrl {\n  static templateUrl = 'partials/annotations.editor.html';\n}\n\nexport {\n  ElasticDatasource as Datasource,\n  ElasticQueryCtrl as QueryCtrl,\n  ElasticConfigCtrl as ConfigCtrl,\n  ElasticAnnotationsQueryCtrl as AnnotationsQueryCtrl,\n};\n","import angular from 'angular';\nimport _ from 'lodash';\nimport * as dateMath from 'app/core/utils/datemath';\n\nexport default class OpenTsDatasource {\n  type: any;\n  url: any;\n  name: any;\n  withCredentials: any;\n  basicAuth: any;\n  tsdbVersion: any;\n  tsdbResolution: any;\n  supportMetrics: any;\n  tagKeys: any;\n\n  aggregatorsPromise: any;\n  filterTypesPromise: any;\n\n  /** @ngInject */\n  constructor(instanceSettings, private $q, private backendSrv, private templateSrv) {\n    this.type = 'opentsdb';\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.withCredentials = instanceSettings.withCredentials;\n    this.basicAuth = instanceSettings.basicAuth;\n    instanceSettings.jsonData = instanceSettings.jsonData || {};\n    this.tsdbVersion = instanceSettings.jsonData.tsdbVersion || 1;\n    this.tsdbResolution = instanceSettings.jsonData.tsdbResolution || 1;\n    this.supportMetrics = true;\n    this.tagKeys = {};\n\n    this.aggregatorsPromise = null;\n    this.filterTypesPromise = null;\n  }\n\n  // Called once per panel (graph)\n  query(options) {\n    const start = this.convertToTSDBTime(options.rangeRaw.from, false);\n    const end = this.convertToTSDBTime(options.rangeRaw.to, true);\n    const qs = [];\n\n    _.each(options.targets, target => {\n      if (!target.metric) {\n        return;\n      }\n      qs.push(this.convertTargetToQuery(target, options, this.tsdbVersion));\n    });\n\n    const queries = _.compact(qs);\n\n    // No valid targets, return the empty result to save a round trip.\n    if (_.isEmpty(queries)) {\n      const d = this.$q.defer();\n      d.resolve({ data: [] });\n      return d.promise;\n    }\n\n    const groupByTags = {};\n    _.each(queries, query => {\n      if (query.filters && query.filters.length > 0) {\n        _.each(query.filters, val => {\n          groupByTags[val.tagk] = true;\n        });\n      } else {\n        _.each(query.tags, (val, key) => {\n          groupByTags[key] = true;\n        });\n      }\n    });\n\n    options.targets = _.filter(options.targets, query => {\n      return query.hide !== true;\n    });\n\n    return this.performTimeSeriesQuery(queries, start, end).then(response => {\n      const metricToTargetMapping = this.mapMetricsToTargets(response.data, options, this.tsdbVersion);\n      const result = _.map(response.data, (metricData, index) => {\n        index = metricToTargetMapping[index];\n        if (index === -1) {\n          index = 0;\n        }\n        this._saveTagKeys(metricData);\n\n        return this.transformMetricData(metricData, groupByTags, options.targets[index], options, this.tsdbResolution);\n      });\n      return { data: result };\n    });\n  }\n\n  annotationQuery(options) {\n    const start = this.convertToTSDBTime(options.rangeRaw.from, false);\n    const end = this.convertToTSDBTime(options.rangeRaw.to, true);\n    const qs = [];\n    const eventList = [];\n\n    qs.push({ aggregator: 'sum', metric: options.annotation.target });\n\n    const queries = _.compact(qs);\n\n    return this.performTimeSeriesQuery(queries, start, end).then(results => {\n      if (results.data[0]) {\n        let annotationObject = results.data[0].annotations;\n        if (options.annotation.isGlobal) {\n          annotationObject = results.data[0].globalAnnotations;\n        }\n        if (annotationObject) {\n          _.each(annotationObject, annotation => {\n            const event = {\n              text: annotation.description,\n              time: Math.floor(annotation.startTime) * 1000,\n              annotation: options.annotation,\n            };\n\n            eventList.push(event);\n          });\n        }\n      }\n      return eventList;\n    });\n  }\n\n  targetContainsTemplate(target) {\n    if (target.filters && target.filters.length > 0) {\n      for (let i = 0; i < target.filters.length; i++) {\n        if (this.templateSrv.variableExists(target.filters[i].filter)) {\n          return true;\n        }\n      }\n    }\n\n    if (target.tags && Object.keys(target.tags).length > 0) {\n      for (const tagKey in target.tags) {\n        if (this.templateSrv.variableExists(target.tags[tagKey])) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  performTimeSeriesQuery(queries, start, end) {\n    let msResolution = false;\n    if (this.tsdbResolution === 2) {\n      msResolution = true;\n    }\n    const reqBody: any = {\n      start: start,\n      queries: queries,\n      msResolution: msResolution,\n      globalAnnotations: true,\n    };\n    if (this.tsdbVersion === 3) {\n      reqBody.showQuery = true;\n    }\n\n    // Relative queries (e.g. last hour) don't include an end time\n    if (end) {\n      reqBody.end = end;\n    }\n\n    const options = {\n      method: 'POST',\n      url: this.url + '/api/query',\n      data: reqBody,\n    };\n\n    this._addCredentialOptions(options);\n    return this.backendSrv.datasourceRequest(options);\n  }\n\n  suggestTagKeys(metric) {\n    return this.$q.when(this.tagKeys[metric] || []);\n  }\n\n  _saveTagKeys(metricData) {\n    const tagKeys = Object.keys(metricData.tags);\n    _.each(metricData.aggregateTags, tag => {\n      tagKeys.push(tag);\n    });\n\n    this.tagKeys[metricData.metric] = tagKeys;\n  }\n\n  _performSuggestQuery(query, type) {\n    return this._get('/api/suggest', { type: type, q: query, max: 1000 }).then(result => {\n      return result.data;\n    });\n  }\n\n  _performMetricKeyValueLookup(metric, keys) {\n    if (!metric || !keys) {\n      return this.$q.when([]);\n    }\n\n    const keysArray = keys.split(',').map(key => {\n      return key.trim();\n    });\n    const key = keysArray[0];\n    let keysQuery = key + '=*';\n\n    if (keysArray.length > 1) {\n      keysQuery += ',' + keysArray.splice(1).join(',');\n    }\n\n    const m = metric + '{' + keysQuery + '}';\n\n    return this._get('/api/search/lookup', { m: m, limit: 3000 }).then(result => {\n      result = result.data.results;\n      const tagvs = [];\n      _.each(result, r => {\n        if (tagvs.indexOf(r.tags[key]) === -1) {\n          tagvs.push(r.tags[key]);\n        }\n      });\n      return tagvs;\n    });\n  }\n\n  _performMetricKeyLookup(metric) {\n    if (!metric) {\n      return this.$q.when([]);\n    }\n\n    return this._get('/api/search/lookup', { m: metric, limit: 1000 }).then(result => {\n      result = result.data.results;\n      const tagks = [];\n      _.each(result, r => {\n        _.each(r.tags, (tagv, tagk) => {\n          if (tagks.indexOf(tagk) === -1) {\n            tagks.push(tagk);\n          }\n        });\n      });\n      return tagks;\n    });\n  }\n\n  _get(relativeUrl, params?) {\n    const options = {\n      method: 'GET',\n      url: this.url + relativeUrl,\n      params: params,\n    };\n\n    this._addCredentialOptions(options);\n\n    return this.backendSrv.datasourceRequest(options);\n  }\n\n  _addCredentialOptions(options) {\n    if (this.basicAuth || this.withCredentials) {\n      options.withCredentials = true;\n    }\n    if (this.basicAuth) {\n      options.headers = { Authorization: this.basicAuth };\n    }\n  }\n\n  metricFindQuery(query) {\n    if (!query) {\n      return this.$q.when([]);\n    }\n\n    let interpolated;\n    try {\n      interpolated = this.templateSrv.replace(query, {}, 'distributed');\n    } catch (err) {\n      return this.$q.reject(err);\n    }\n\n    const responseTransform = result => {\n      return _.map(result, value => {\n        return { text: value };\n      });\n    };\n\n    const metricsRegex = /metrics\\((.*)\\)/;\n    const tagNamesRegex = /tag_names\\((.*)\\)/;\n    const tagValuesRegex = /tag_values\\((.*?),\\s?(.*)\\)/;\n    const tagNamesSuggestRegex = /suggest_tagk\\((.*)\\)/;\n    const tagValuesSuggestRegex = /suggest_tagv\\((.*)\\)/;\n\n    const metricsQuery = interpolated.match(metricsRegex);\n    if (metricsQuery) {\n      return this._performSuggestQuery(metricsQuery[1], 'metrics').then(responseTransform);\n    }\n\n    const tagNamesQuery = interpolated.match(tagNamesRegex);\n    if (tagNamesQuery) {\n      return this._performMetricKeyLookup(tagNamesQuery[1]).then(responseTransform);\n    }\n\n    const tagValuesQuery = interpolated.match(tagValuesRegex);\n    if (tagValuesQuery) {\n      return this._performMetricKeyValueLookup(tagValuesQuery[1], tagValuesQuery[2]).then(responseTransform);\n    }\n\n    const tagNamesSuggestQuery = interpolated.match(tagNamesSuggestRegex);\n    if (tagNamesSuggestQuery) {\n      return this._performSuggestQuery(tagNamesSuggestQuery[1], 'tagk').then(responseTransform);\n    }\n\n    const tagValuesSuggestQuery = interpolated.match(tagValuesSuggestRegex);\n    if (tagValuesSuggestQuery) {\n      return this._performSuggestQuery(tagValuesSuggestQuery[1], 'tagv').then(responseTransform);\n    }\n\n    return this.$q.when([]);\n  }\n\n  testDatasource() {\n    return this._performSuggestQuery('cpu', 'metrics').then(() => {\n      return { status: 'success', message: 'Data source is working' };\n    });\n  }\n\n  getAggregators() {\n    if (this.aggregatorsPromise) {\n      return this.aggregatorsPromise;\n    }\n\n    this.aggregatorsPromise = this._get('/api/aggregators').then(result => {\n      if (result.data && _.isArray(result.data)) {\n        return result.data.sort();\n      }\n      return [];\n    });\n    return this.aggregatorsPromise;\n  }\n\n  getFilterTypes() {\n    if (this.filterTypesPromise) {\n      return this.filterTypesPromise;\n    }\n\n    this.filterTypesPromise = this._get('/api/config/filters').then(result => {\n      if (result.data) {\n        return Object.keys(result.data).sort();\n      }\n      return [];\n    });\n    return this.filterTypesPromise;\n  }\n\n  transformMetricData(md, groupByTags, target, options, tsdbResolution) {\n    const metricLabel = this.createMetricLabel(md, target, groupByTags, options);\n    const dps = [];\n\n    // TSDB returns datapoints has a hash of ts => value.\n    // Can't use _.pairs(invert()) because it stringifies keys/values\n    _.each(md.dps, (v, k) => {\n      if (tsdbResolution === 2) {\n        dps.push([v, k * 1]);\n      } else {\n        dps.push([v, k * 1000]);\n      }\n    });\n\n    return { target: metricLabel, datapoints: dps };\n  }\n\n  createMetricLabel(md, target, groupByTags, options) {\n    if (target.alias) {\n      const scopedVars = _.clone(options.scopedVars || {});\n      _.each(md.tags, (value, key) => {\n        scopedVars['tag_' + key] = { value: value };\n      });\n      return this.templateSrv.replace(target.alias, scopedVars);\n    }\n\n    let label = md.metric;\n    const tagData = [];\n\n    if (!_.isEmpty(md.tags)) {\n      _.each(_.toPairs(md.tags), tag => {\n        if (_.has(groupByTags, tag[0])) {\n          tagData.push(tag[0] + '=' + tag[1]);\n        }\n      });\n    }\n\n    if (!_.isEmpty(tagData)) {\n      label += '{' + tagData.join(', ') + '}';\n    }\n\n    return label;\n  }\n\n  convertTargetToQuery(target, options, tsdbVersion) {\n    if (!target.metric || target.hide) {\n      return null;\n    }\n\n    const query: any = {\n      metric: this.templateSrv.replace(target.metric, options.scopedVars, 'pipe'),\n      aggregator: 'avg',\n    };\n\n    if (target.aggregator) {\n      query.aggregator = this.templateSrv.replace(target.aggregator);\n    }\n\n    if (target.shouldComputeRate) {\n      query.rate = true;\n      query.rateOptions = {\n        counter: !!target.isCounter,\n      };\n\n      if (target.counterMax && target.counterMax.length) {\n        query.rateOptions.counterMax = parseInt(target.counterMax, 10);\n      }\n\n      if (target.counterResetValue && target.counterResetValue.length) {\n        query.rateOptions.resetValue = parseInt(target.counterResetValue, 10);\n      }\n\n      if (tsdbVersion >= 2) {\n        query.rateOptions.dropResets =\n          !query.rateOptions.counterMax && (!query.rateOptions.ResetValue || query.rateOptions.ResetValue === 0);\n      }\n    }\n\n    if (!target.disableDownsampling) {\n      let interval = this.templateSrv.replace(target.downsampleInterval || options.interval);\n\n      if (interval.match(/\\.[0-9]+s/)) {\n        interval = parseFloat(interval) * 1000 + 'ms';\n      }\n\n      query.downsample = interval + '-' + target.downsampleAggregator;\n\n      if (target.downsampleFillPolicy && target.downsampleFillPolicy !== 'none') {\n        query.downsample += '-' + target.downsampleFillPolicy;\n      }\n    }\n\n    if (target.filters && target.filters.length > 0) {\n      query.filters = angular.copy(target.filters);\n      if (query.filters) {\n        for (const filterKey in query.filters) {\n          query.filters[filterKey].filter = this.templateSrv.replace(\n            query.filters[filterKey].filter,\n            options.scopedVars,\n            'pipe'\n          );\n        }\n      }\n    } else {\n      query.tags = angular.copy(target.tags);\n      if (query.tags) {\n        for (const tagKey in query.tags) {\n          query.tags[tagKey] = this.templateSrv.replace(query.tags[tagKey], options.scopedVars, 'pipe');\n        }\n      }\n    }\n\n    if (target.explicitTags) {\n      query.explicitTags = true;\n    }\n\n    return query;\n  }\n\n  mapMetricsToTargets(metrics, options, tsdbVersion) {\n    let interpolatedTagValue, arrTagV;\n    return _.map(metrics, metricData => {\n      if (tsdbVersion === 3) {\n        return metricData.query.index;\n      } else {\n        return _.findIndex(options.targets, target => {\n          if (target.filters && target.filters.length > 0) {\n            return target.metric === metricData.metric;\n          } else {\n            return (\n              target.metric === metricData.metric &&\n              _.every(target.tags, (tagV, tagK) => {\n                interpolatedTagValue = this.templateSrv.replace(tagV, options.scopedVars, 'pipe');\n                arrTagV = interpolatedTagValue.split('|');\n                return _.includes(arrTagV, metricData.tags[tagK]) || interpolatedTagValue === '*';\n              })\n            );\n          }\n        });\n      }\n    });\n  }\n\n  convertToTSDBTime(date, roundUp) {\n    if (date === 'now') {\n      return null;\n    }\n\n    date = dateMath.parse(date, roundUp);\n    return date.valueOf();\n  }\n}\n","import _ from 'lodash';\nimport kbn from 'app/core/utils/kbn';\nimport { QueryCtrl } from 'app/plugins/sdk';\n\nexport class OpenTsQueryCtrl extends QueryCtrl {\n  static templateUrl = 'partials/query.editor.html';\n  aggregators: any;\n  fillPolicies: any;\n  filterTypes: any;\n  tsdbVersion: any;\n  aggregator: any;\n  downsampleInterval: any;\n  downsampleAggregator: any;\n  downsampleFillPolicy: any;\n  errors: any;\n  suggestMetrics: any;\n  suggestTagKeys: any;\n  suggestTagValues: any;\n  addTagMode: boolean;\n  addFilterMode: boolean;\n\n  /** @ngInject */\n  constructor($scope, $injector) {\n    super($scope, $injector);\n\n    this.errors = this.validateTarget();\n    this.aggregators = ['avg', 'sum', 'min', 'max', 'dev', 'zimsum', 'mimmin', 'mimmax'];\n    this.fillPolicies = ['none', 'nan', 'null', 'zero'];\n    this.filterTypes = [\n      'wildcard',\n      'iliteral_or',\n      'not_iliteral_or',\n      'not_literal_or',\n      'iwildcard',\n      'literal_or',\n      'regexp',\n    ];\n\n    this.tsdbVersion = this.datasource.tsdbVersion;\n\n    if (!this.target.aggregator) {\n      this.target.aggregator = 'sum';\n    }\n\n    if (!this.target.downsampleAggregator) {\n      this.target.downsampleAggregator = 'avg';\n    }\n\n    if (!this.target.downsampleFillPolicy) {\n      this.target.downsampleFillPolicy = 'none';\n    }\n\n    this.datasource.getAggregators().then(aggs => {\n      if (aggs.length !== 0) {\n        this.aggregators = aggs;\n      }\n    });\n\n    this.datasource.getFilterTypes().then(filterTypes => {\n      if (filterTypes.length !== 0) {\n        this.filterTypes = filterTypes;\n      }\n    });\n\n    // needs to be defined here as it is called from typeahead\n    this.suggestMetrics = (query, callback) => {\n      this.datasource\n        .metricFindQuery('metrics(' + query + ')')\n        .then(this.getTextValues)\n        .then(callback);\n    };\n\n    this.suggestTagKeys = (query, callback) => {\n      this.datasource.suggestTagKeys(this.target.metric).then(callback);\n    };\n\n    this.suggestTagValues = (query, callback) => {\n      this.datasource\n        .metricFindQuery('suggest_tagv(' + query + ')')\n        .then(this.getTextValues)\n        .then(callback);\n    };\n  }\n\n  targetBlur() {\n    this.errors = this.validateTarget();\n    this.refresh();\n  }\n\n  getTextValues(metricFindResult) {\n    return _.map(metricFindResult, value => {\n      return value.text;\n    });\n  }\n\n  addTag() {\n    if (this.target.filters && this.target.filters.length > 0) {\n      this.errors.tags = 'Please remove filters to use tags, tags and filters are mutually exclusive.';\n    }\n\n    if (!this.addTagMode) {\n      this.addTagMode = true;\n      return;\n    }\n\n    if (!this.target.tags) {\n      this.target.tags = {};\n    }\n\n    this.errors = this.validateTarget();\n\n    if (!this.errors.tags) {\n      this.target.tags[this.target.currentTagKey] = this.target.currentTagValue;\n      this.target.currentTagKey = '';\n      this.target.currentTagValue = '';\n      this.targetBlur();\n    }\n\n    this.addTagMode = false;\n  }\n\n  removeTag(key) {\n    delete this.target.tags[key];\n    this.targetBlur();\n  }\n\n  editTag(key, value) {\n    this.removeTag(key);\n    this.target.currentTagKey = key;\n    this.target.currentTagValue = value;\n    this.addTag();\n  }\n\n  closeAddTagMode() {\n    this.addTagMode = false;\n    return;\n  }\n\n  addFilter() {\n    if (this.target.tags && _.size(this.target.tags) > 0) {\n      this.errors.filters = 'Please remove tags to use filters, tags and filters are mutually exclusive.';\n    }\n\n    if (!this.addFilterMode) {\n      this.addFilterMode = true;\n      return;\n    }\n\n    if (!this.target.filters) {\n      this.target.filters = [];\n    }\n\n    if (!this.target.currentFilterType) {\n      this.target.currentFilterType = 'iliteral_or';\n    }\n\n    if (!this.target.currentFilterGroupBy) {\n      this.target.currentFilterGroupBy = false;\n    }\n\n    this.errors = this.validateTarget();\n\n    if (!this.errors.filters) {\n      const currentFilter = {\n        type: this.target.currentFilterType,\n        tagk: this.target.currentFilterKey,\n        filter: this.target.currentFilterValue,\n        groupBy: this.target.currentFilterGroupBy,\n      };\n      this.target.filters.push(currentFilter);\n      this.target.currentFilterType = 'literal_or';\n      this.target.currentFilterKey = '';\n      this.target.currentFilterValue = '';\n      this.target.currentFilterGroupBy = false;\n      this.targetBlur();\n    }\n\n    this.addFilterMode = false;\n  }\n\n  removeFilter(index) {\n    this.target.filters.splice(index, 1);\n    this.targetBlur();\n  }\n\n  editFilter(fil, index) {\n    this.removeFilter(index);\n    this.target.currentFilterKey = fil.tagk;\n    this.target.currentFilterValue = fil.filter;\n    this.target.currentFilterType = fil.type;\n    this.target.currentFilterGroupBy = fil.groupBy;\n    this.addFilter();\n  }\n\n  closeAddFilterMode() {\n    this.addFilterMode = false;\n    return;\n  }\n\n  validateTarget() {\n    const errs: any = {};\n\n    if (this.target.shouldDownsample) {\n      try {\n        if (this.target.downsampleInterval) {\n          kbn.describe_interval(this.target.downsampleInterval);\n        } else {\n          errs.downsampleInterval = \"You must supply a downsample interval (e.g. '1m' or '1h').\";\n        }\n      } catch (err) {\n        errs.downsampleInterval = err.message;\n      }\n    }\n\n    if (this.target.tags && _.has(this.target.tags, this.target.currentTagKey)) {\n      errs.tags = \"Duplicate tag key '\" + this.target.currentTagKey + \"'.\";\n    }\n\n    return errs;\n  }\n}\n","export class OpenTsConfigCtrl {\n  static templateUrl = 'public/app/plugins/datasource/opentsdb/partials/config.html';\n  current: any;\n\n  /** @ngInject */\n  constructor($scope) {\n    this.current.jsonData = this.current.jsonData || {};\n    this.current.jsonData.tsdbVersion = this.current.jsonData.tsdbVersion || 1;\n    this.current.jsonData.tsdbResolution = this.current.jsonData.tsdbResolution || 1;\n  }\n\n  tsdbVersions = [{ name: '<=2.1', value: 1 }, { name: '==2.2', value: 2 }, { name: '==2.3', value: 3 }];\n\n  tsdbResolutions = [{ name: 'second', value: 1 }, { name: 'millisecond', value: 2 }];\n}\n","import OpenTsDatasource from './datasource';\nimport { OpenTsQueryCtrl } from './query_ctrl';\nimport { OpenTsConfigCtrl } from './config_ctrl';\n\nclass AnnotationsQueryCtrl {\n  static templateUrl = 'partials/annotations.editor.html';\n}\n\nexport {\n  OpenTsDatasource as Datasource,\n  OpenTsQueryCtrl as QueryCtrl,\n  OpenTsConfigCtrl as ConfigCtrl,\n  AnnotationsQueryCtrl,\n};\n","import _ from 'lodash';\n\nclass GrafanaDatasource {\n  /** @ngInject */\n  constructor(private backendSrv, private $q) {}\n\n  query(options) {\n    return this.backendSrv\n      .get('/api/tsdb/testdata/random-walk', {\n        from: options.range.from.valueOf(),\n        to: options.range.to.valueOf(),\n        intervalMs: options.intervalMs,\n        maxDataPoints: options.maxDataPoints,\n      })\n      .then(res => {\n        const data = [];\n\n        if (res.results) {\n          _.forEach(res.results, queryRes => {\n            for (const series of queryRes.series) {\n              data.push({\n                target: series.name,\n                datapoints: series.points,\n              });\n            }\n          });\n        }\n\n        return { data: data };\n      });\n  }\n\n  metricFindQuery(options) {\n    return this.$q.when({ data: [] });\n  }\n\n  annotationQuery(options) {\n    const params: any = {\n      from: options.range.from.valueOf(),\n      to: options.range.to.valueOf(),\n      limit: options.annotation.limit,\n      tags: options.annotation.tags,\n    };\n\n    if (options.annotation.type === 'dashboard') {\n      // if no dashboard id yet return\n      if (!options.dashboard.id) {\n        return this.$q.when([]);\n      }\n      // filter by dashboard id\n      params.dashboardId = options.dashboard.id;\n      // remove tags filter if any\n      delete params.tags;\n    } else {\n      // require at least one tag\n      if (!_.isArray(options.annotation.tags) || options.annotation.tags.length === 0) {\n        return this.$q.when([]);\n      }\n    }\n\n    return this.backendSrv.get('/api/annotations', params);\n  }\n}\n\nexport { GrafanaDatasource };\n","import { GrafanaDatasource } from './datasource';\nimport { QueryCtrl } from 'app/plugins/sdk';\n\nclass GrafanaQueryCtrl extends QueryCtrl {\n  static templateUrl = 'partials/query.editor.html';\n}\n\nclass GrafanaAnnotationsQueryCtrl {\n  annotation: any;\n\n  types = [{ text: '仪表盘', value: 'dashboard' }, { text: '标签', value: 'tags' }];\n\n  constructor() {\n    this.annotation.type = this.annotation.type || 'tags';\n    this.annotation.limit = this.annotation.limit || 100;\n  }\n\n  static templateUrl = 'partials/annotations.editor.html';\n}\n\nexport {\n  GrafanaDatasource,\n  GrafanaDatasource as Datasource,\n  GrafanaQueryCtrl as QueryCtrl,\n  GrafanaAnnotationsQueryCtrl as AnnotationsQueryCtrl,\n};\n","import _ from 'lodash';\nimport TableModel from 'app/core/table_model';\n\nexport default class InfluxSeries {\n  series: any;\n  alias: any;\n  annotation: any;\n\n  constructor(options) {\n    this.series = options.series;\n    this.alias = options.alias;\n    this.annotation = options.annotation;\n  }\n\n  getTimeSeries() {\n    const output = [];\n    let i, j;\n\n    if (this.series.length === 0) {\n      return output;\n    }\n\n    _.each(this.series, series => {\n      const columns = series.columns.length;\n      const tags = _.map(series.tags, (value, key) => {\n        return key + ': ' + value;\n      });\n\n      for (j = 1; j < columns; j++) {\n        let seriesName = series.name;\n        const columnName = series.columns[j];\n        if (columnName !== 'value') {\n          seriesName = seriesName + '.' + columnName;\n        }\n\n        if (this.alias) {\n          seriesName = this._getSeriesName(series, j);\n        } else if (series.tags) {\n          seriesName = seriesName + ' {' + tags.join(', ') + '}';\n        }\n\n        const datapoints = [];\n        if (series.values) {\n          for (i = 0; i < series.values.length; i++) {\n            datapoints[i] = [series.values[i][j], series.values[i][0]];\n          }\n        }\n\n        output.push({ target: seriesName, datapoints: datapoints });\n      }\n    });\n\n    return output;\n  }\n\n  _getSeriesName(series, index) {\n    const regex = /\\$(\\w+)|\\[\\[([\\s\\S]+?)\\]\\]/g;\n    const segments = series.name.split('.');\n\n    return this.alias.replace(regex, (match, g1, g2) => {\n      const group = g1 || g2;\n      const segIndex = parseInt(group, 10);\n\n      if (group === 'm' || group === 'measurement') {\n        return series.name;\n      }\n      if (group === 'col') {\n        return series.columns[index];\n      }\n      if (!isNaN(segIndex)) {\n        return segments[segIndex];\n      }\n      if (group.indexOf('tag_') !== 0) {\n        return match;\n      }\n\n      const tag = group.replace('tag_', '');\n      if (!series.tags) {\n        return match;\n      }\n      return series.tags[tag];\n    });\n  }\n\n  getAnnotations() {\n    const list = [];\n\n    _.each(this.series, series => {\n      let titleCol = null;\n      let timeCol = null;\n      const tagsCol = [];\n      let textCol = null;\n\n      _.each(series.columns, (column, index) => {\n        if (column === 'time') {\n          timeCol = index;\n          return;\n        }\n        if (column === 'sequence_number') {\n          return;\n        }\n        if (!titleCol) {\n          titleCol = index;\n        }\n        if (column === this.annotation.titleColumn) {\n          titleCol = index;\n          return;\n        }\n        if (_.includes((this.annotation.tagsColumn || '').replace(' ', '').split(','), column)) {\n          tagsCol.push(index);\n          return;\n        }\n        if (column === this.annotation.textColumn) {\n          textCol = index;\n          return;\n        }\n      });\n\n      _.each(series.values, value => {\n        const data = {\n          annotation: this.annotation,\n          time: +new Date(value[timeCol]),\n          title: value[titleCol],\n          // Remove empty values, then split in different tags for comma separated values\n          tags: _.flatten(\n            tagsCol\n              .filter(t => {\n                return value[t];\n              })\n              .map(t => {\n                return value[t].split(',');\n              })\n          ),\n          text: value[textCol],\n        };\n\n        list.push(data);\n      });\n    });\n\n    return list;\n  }\n\n  getTable() {\n    const table = new TableModel();\n    let i, j;\n\n    if (this.series.length === 0) {\n      return table;\n    }\n\n    _.each(this.series, (series, seriesIndex) => {\n      if (seriesIndex === 0) {\n        j = 0;\n        // Check that the first column is indeed 'time'\n        if (series.columns[0] === 'time') {\n          // Push this now before the tags and with the right type\n          table.columns.push({ text: 'Time', type: 'time' });\n          j++;\n        }\n        _.each(_.keys(series.tags), key => {\n          table.columns.push({ text: key });\n        });\n        for (; j < series.columns.length; j++) {\n          table.columns.push({ text: series.columns[j] });\n        }\n      }\n\n      if (series.values) {\n        for (i = 0; i < series.values.length; i++) {\n          const values = series.values[i];\n          const reordered = [values[0]];\n          if (series.tags) {\n            for (const key in series.tags) {\n              if (series.tags.hasOwnProperty(key)) {\n                reordered.push(series.tags[key]);\n              }\n            }\n          }\n          for (j = 1; j < values.length; j++) {\n            reordered.push(values[j]);\n          }\n          table.rows.push(reordered);\n        }\n      }\n    });\n\n    return table;\n  }\n}\n","import _ from 'lodash';\nimport { QueryPartDef, QueryPart, functionRenderer, suffixRenderer } from 'app/core/components/query_part/query_part';\n\nconst index = [];\nconst categories = {\n  Aggregations: [],\n  Selectors: [],\n  Transformations: [],\n  Predictors: [],\n  Math: [],\n  Aliasing: [],\n  Fields: [],\n};\n\nfunction createPart(part): any {\n  const def = index[part.type];\n  if (!def) {\n    throw { message: 'Could not find query part ' + part.type };\n  }\n\n  return new QueryPart(part, def);\n}\n\nfunction register(options: any) {\n  index[options.type] = new QueryPartDef(options);\n  options.category.push(index[options.type]);\n}\n\nconst groupByTimeFunctions = [];\n\nfunction aliasRenderer(part, innerExpr) {\n  return innerExpr + ' AS ' + '\"' + part.params[0] + '\"';\n}\n\nfunction fieldRenderer(part, innerExpr) {\n  if (part.params[0] === '*') {\n    return '*';\n  }\n  return '\"' + part.params[0] + '\"';\n}\n\nfunction replaceAggregationAddStrategy(selectParts, partModel) {\n  // look for existing aggregation\n  for (let i = 0; i < selectParts.length; i++) {\n    const part = selectParts[i];\n    if (part.def.category === categories.Aggregations) {\n      if (part.def.type === partModel.def.type) {\n        return;\n      }\n      // count distinct is allowed\n      if (part.def.type === 'count' && partModel.def.type === 'distinct') {\n        break;\n      }\n      // remove next aggregation if distinct was replaced\n      if (part.def.type === 'distinct') {\n        const morePartsAvailable = selectParts.length >= i + 2;\n        if (partModel.def.type !== 'count' && morePartsAvailable) {\n          const nextPart = selectParts[i + 1];\n          if (nextPart.def.category === categories.Aggregations) {\n            selectParts.splice(i + 1, 1);\n          }\n        } else if (partModel.def.type === 'count') {\n          if (!morePartsAvailable || selectParts[i + 1].def.type !== 'count') {\n            selectParts.splice(i + 1, 0, partModel);\n          }\n          return;\n        }\n      }\n      selectParts[i] = partModel;\n      return;\n    }\n    if (part.def.category === categories.Selectors) {\n      selectParts[i] = partModel;\n      return;\n    }\n  }\n\n  selectParts.splice(1, 0, partModel);\n}\n\nfunction addTransformationStrategy(selectParts, partModel) {\n  let i;\n  // look for index to add transformation\n  for (i = 0; i < selectParts.length; i++) {\n    const part = selectParts[i];\n    if (part.def.category === categories.Math || part.def.category === categories.Aliasing) {\n      break;\n    }\n  }\n\n  selectParts.splice(i, 0, partModel);\n}\n\nfunction addMathStrategy(selectParts, partModel) {\n  const partCount = selectParts.length;\n  if (partCount > 0) {\n    // if last is math, replace it\n    if (selectParts[partCount - 1].def.type === 'math') {\n      selectParts[partCount - 1] = partModel;\n      return;\n    }\n    // if next to last is math, replace it\n    if (partCount > 1 && selectParts[partCount - 2].def.type === 'math') {\n      selectParts[partCount - 2] = partModel;\n      return;\n    } else if (selectParts[partCount - 1].def.type === 'alias') {\n      // if last is alias add it before\n      selectParts.splice(partCount - 1, 0, partModel);\n      return;\n    }\n  }\n  selectParts.push(partModel);\n}\n\nfunction addAliasStrategy(selectParts, partModel) {\n  const partCount = selectParts.length;\n  if (partCount > 0) {\n    // if last is alias, replace it\n    if (selectParts[partCount - 1].def.type === 'alias') {\n      selectParts[partCount - 1] = partModel;\n      return;\n    }\n  }\n  selectParts.push(partModel);\n}\n\nfunction addFieldStrategy(selectParts, partModel, query) {\n  // copy all parts\n  const parts = _.map(selectParts, (part: any) => {\n    return createPart({ type: part.def.type, params: _.clone(part.params) });\n  });\n\n  query.selectModels.push(parts);\n}\n\nregister({\n  type: 'field',\n  addStrategy: addFieldStrategy,\n  category: categories.Fields,\n  params: [{ type: 'field', dynamicLookup: true }],\n  defaultParams: ['value'],\n  renderer: fieldRenderer,\n});\n\n// Aggregations\nregister({\n  type: 'count',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Aggregations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'distinct',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Aggregations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'integral',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Aggregations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'mean',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Aggregations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'median',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Aggregations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'mode',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Aggregations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'sum',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Aggregations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\n// transformations\n\nregister({\n  type: 'derivative',\n  addStrategy: addTransformationStrategy,\n  category: categories.Transformations,\n  params: [\n    {\n      name: 'duration',\n      type: 'interval',\n      options: ['1s', '10s', '1m', '5m', '10m', '15m', '1h'],\n    },\n  ],\n  defaultParams: ['10s'],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'spread',\n  addStrategy: addTransformationStrategy,\n  category: categories.Transformations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'non_negative_derivative',\n  addStrategy: addTransformationStrategy,\n  category: categories.Transformations,\n  params: [\n    {\n      name: 'duration',\n      type: 'interval',\n      options: ['1s', '10s', '1m', '5m', '10m', '15m', '1h'],\n    },\n  ],\n  defaultParams: ['10s'],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'difference',\n  addStrategy: addTransformationStrategy,\n  category: categories.Transformations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'non_negative_difference',\n  addStrategy: addTransformationStrategy,\n  category: categories.Transformations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'moving_average',\n  addStrategy: addTransformationStrategy,\n  category: categories.Transformations,\n  params: [{ name: 'window', type: 'int', options: [5, 10, 20, 30, 40] }],\n  defaultParams: [10],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'cumulative_sum',\n  addStrategy: addTransformationStrategy,\n  category: categories.Transformations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'stddev',\n  addStrategy: addTransformationStrategy,\n  category: categories.Transformations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'time',\n  category: groupByTimeFunctions,\n  params: [\n    {\n      name: 'interval',\n      type: 'time',\n      options: ['$__interval', '1s', '10s', '1m', '5m', '10m', '15m', '1h'],\n    },\n  ],\n  defaultParams: ['$__interval'],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'fill',\n  category: groupByTimeFunctions,\n  params: [\n    {\n      name: 'fill',\n      type: 'string',\n      options: ['none', 'null', '0', 'previous', 'linear'],\n    },\n  ],\n  defaultParams: ['null'],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'elapsed',\n  addStrategy: addTransformationStrategy,\n  category: categories.Transformations,\n  params: [\n    {\n      name: 'duration',\n      type: 'interval',\n      options: ['1s', '10s', '1m', '5m', '10m', '15m', '1h'],\n    },\n  ],\n  defaultParams: ['10s'],\n  renderer: functionRenderer,\n});\n\n// predictions\nregister({\n  type: 'holt_winters',\n  addStrategy: addTransformationStrategy,\n  category: categories.Predictors,\n  params: [\n    { name: 'number', type: 'int', options: [5, 10, 20, 30, 40] },\n    { name: 'season', type: 'int', options: [0, 1, 2, 5, 10] },\n  ],\n  defaultParams: [10, 2],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'holt_winters_with_fit',\n  addStrategy: addTransformationStrategy,\n  category: categories.Predictors,\n  params: [\n    { name: 'number', type: 'int', options: [5, 10, 20, 30, 40] },\n    { name: 'season', type: 'int', options: [0, 1, 2, 5, 10] },\n  ],\n  defaultParams: [10, 2],\n  renderer: functionRenderer,\n});\n\n// Selectors\nregister({\n  type: 'bottom',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Selectors,\n  params: [{ name: 'count', type: 'int' }],\n  defaultParams: [3],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'first',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Selectors,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'last',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Selectors,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'max',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Selectors,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'min',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Selectors,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'percentile',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Selectors,\n  params: [{ name: 'nth', type: 'int' }],\n  defaultParams: [95],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'top',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Selectors,\n  params: [{ name: 'count', type: 'int' }],\n  defaultParams: [3],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'tag',\n  category: groupByTimeFunctions,\n  params: [{ name: 'tag', type: 'string', dynamicLookup: true }],\n  defaultParams: ['tag'],\n  renderer: fieldRenderer,\n});\n\nregister({\n  type: 'math',\n  addStrategy: addMathStrategy,\n  category: categories.Math,\n  params: [{ name: 'expr', type: 'string' }],\n  defaultParams: [' / 100'],\n  renderer: suffixRenderer,\n});\n\nregister({\n  type: 'alias',\n  addStrategy: addAliasStrategy,\n  category: categories.Aliasing,\n  params: [{ name: 'name', type: 'string', quote: 'double' }],\n  defaultParams: ['alias'],\n  renderMode: 'suffix',\n  renderer: aliasRenderer,\n});\n\nexport default {\n  create: createPart,\n  getCategories: () => {\n    return categories;\n  },\n  replaceAggregationAdd: replaceAggregationAddStrategy,\n};\n","import _ from 'lodash';\nimport queryPart from './query_part';\nimport kbn from 'app/core/utils/kbn';\n\nexport default class InfluxQuery {\n  target: any;\n  selectModels: any[];\n  queryBuilder: any;\n  groupByParts: any;\n  templateSrv: any;\n  scopedVars: any;\n\n  /** @ngInject */\n  constructor(target, templateSrv?, scopedVars?) {\n    this.target = target;\n    this.templateSrv = templateSrv;\n    this.scopedVars = scopedVars;\n\n    target.policy = target.policy || 'default';\n    target.resultFormat = target.resultFormat || 'time_series';\n    target.orderByTime = target.orderByTime || 'ASC';\n    target.tags = target.tags || [];\n    target.groupBy = target.groupBy || [{ type: 'time', params: ['$__interval'] }, { type: 'fill', params: ['null'] }];\n    target.select = target.select || [[{ type: 'field', params: ['value'] }, { type: 'mean', params: [] }]];\n\n    this.updateProjection();\n  }\n\n  updateProjection() {\n    this.selectModels = _.map(this.target.select, (parts: any) => {\n      return _.map(parts, queryPart.create);\n    });\n    this.groupByParts = _.map(this.target.groupBy, queryPart.create);\n  }\n\n  updatePersistedParts() {\n    this.target.select = _.map(this.selectModels, selectParts => {\n      return _.map(selectParts, (part: any) => {\n        return { type: part.def.type, params: part.params };\n      });\n    });\n  }\n\n  hasGroupByTime() {\n    return _.find(this.target.groupBy, (g: any) => g.type === 'time');\n  }\n\n  hasFill() {\n    return _.find(this.target.groupBy, (g: any) => g.type === 'fill');\n  }\n\n  addGroupBy(value) {\n    const stringParts = value.match(/^(\\w+)\\((.*)\\)$/);\n    const typePart = stringParts[1];\n    const arg = stringParts[2];\n    const partModel = queryPart.create({ type: typePart, params: [arg] });\n    const partCount = this.target.groupBy.length;\n\n    if (partCount === 0) {\n      this.target.groupBy.push(partModel.part);\n    } else if (typePart === 'time') {\n      this.target.groupBy.splice(0, 0, partModel.part);\n    } else if (typePart === 'tag') {\n      if (this.target.groupBy[partCount - 1].type === 'fill') {\n        this.target.groupBy.splice(partCount - 1, 0, partModel.part);\n      } else {\n        this.target.groupBy.push(partModel.part);\n      }\n    } else {\n      this.target.groupBy.push(partModel.part);\n    }\n\n    this.updateProjection();\n  }\n\n  removeGroupByPart(part, index) {\n    const categories = queryPart.getCategories();\n\n    if (part.def.type === 'time') {\n      // remove fill\n      this.target.groupBy = _.filter(this.target.groupBy, (g: any) => g.type !== 'fill');\n      // remove aggregations\n      this.target.select = _.map(this.target.select, (s: any) => {\n        return _.filter(s, (part: any) => {\n          const partModel = queryPart.create(part);\n          if (partModel.def.category === categories.Aggregations) {\n            return false;\n          }\n          if (partModel.def.category === categories.Selectors) {\n            return false;\n          }\n          return true;\n        });\n      });\n    }\n\n    this.target.groupBy.splice(index, 1);\n    this.updateProjection();\n  }\n\n  removeSelect(index: number) {\n    this.target.select.splice(index, 1);\n    this.updateProjection();\n  }\n\n  removeSelectPart(selectParts, part) {\n    // if we remove the field remove the whole statement\n    if (part.def.type === 'field') {\n      if (this.selectModels.length > 1) {\n        const modelsIndex = _.indexOf(this.selectModels, selectParts);\n        this.selectModels.splice(modelsIndex, 1);\n      }\n    } else {\n      const partIndex = _.indexOf(selectParts, part);\n      selectParts.splice(partIndex, 1);\n    }\n\n    this.updatePersistedParts();\n  }\n\n  addSelectPart(selectParts, type) {\n    const partModel = queryPart.create({ type: type });\n    partModel.def.addStrategy(selectParts, partModel, this);\n    this.updatePersistedParts();\n  }\n\n  private renderTagCondition(tag, index, interpolate) {\n    let str = '';\n    let operator = tag.operator;\n    let value = tag.value;\n    if (index > 0) {\n      str = (tag.condition || 'AND') + ' ';\n    }\n\n    if (!operator) {\n      if (/^\\/.*\\/$/.test(value)) {\n        operator = '=~';\n      } else {\n        operator = '=';\n      }\n    }\n\n    // quote value unless regex\n    if (operator !== '=~' && operator !== '!~') {\n      if (interpolate) {\n        value = this.templateSrv.replace(value, this.scopedVars);\n      }\n      if (operator !== '>' && operator !== '<') {\n        value = \"'\" + value.replace(/\\\\/g, '\\\\\\\\') + \"'\";\n      }\n    } else if (interpolate) {\n      value = this.templateSrv.replace(value, this.scopedVars, 'regex');\n    }\n\n    return str + '\"' + tag.key + '\" ' + operator + ' ' + value;\n  }\n\n  getMeasurementAndPolicy(interpolate) {\n    let policy = this.target.policy;\n    let measurement = this.target.measurement || 'measurement';\n\n    if (!measurement.match('^/.*/$')) {\n      measurement = '\"' + measurement + '\"';\n    } else if (interpolate) {\n      measurement = this.templateSrv.replace(measurement, this.scopedVars, 'regex');\n    }\n\n    if (policy !== 'default') {\n      policy = '\"' + this.target.policy + '\".';\n    } else {\n      policy = '';\n    }\n\n    return policy + measurement;\n  }\n\n  interpolateQueryStr(value, variable, defaultFormatFn) {\n    // if no multi or include all do not regexEscape\n    if (!variable.multi && !variable.includeAll) {\n      return value;\n    }\n\n    if (typeof value === 'string') {\n      return kbn.regexEscape(value);\n    }\n\n    const escapedValues = _.map(value, kbn.regexEscape);\n    return '(' + escapedValues.join('|') + ')';\n  }\n\n  render(interpolate?) {\n    const target = this.target;\n\n    if (target.rawQuery) {\n      if (interpolate) {\n        return this.templateSrv.replace(target.query, this.scopedVars, this.interpolateQueryStr);\n      } else {\n        return target.query;\n      }\n    }\n\n    let query = 'SELECT ';\n    let i, y;\n    for (i = 0; i < this.selectModels.length; i++) {\n      const parts = this.selectModels[i];\n      let selectText = '';\n      for (y = 0; y < parts.length; y++) {\n        const part = parts[y];\n        selectText = part.render(selectText);\n      }\n\n      if (i > 0) {\n        query += ', ';\n      }\n      query += selectText;\n    }\n\n    query += ' FROM ' + this.getMeasurementAndPolicy(interpolate) + ' WHERE ';\n    const conditions = _.map(target.tags, (tag, index) => {\n      return this.renderTagCondition(tag, index, interpolate);\n    });\n\n    if (conditions.length > 0) {\n      query += '(' + conditions.join(' ') + ') AND ';\n    }\n\n    query += '$timeFilter';\n\n    let groupBySection = '';\n    for (i = 0; i < this.groupByParts.length; i++) {\n      const part = this.groupByParts[i];\n      if (i > 0) {\n        // for some reason fill has no separator\n        groupBySection += part.def.type === 'fill' ? ' ' : ', ';\n      }\n      groupBySection += part.render('');\n    }\n\n    if (groupBySection.length) {\n      query += ' GROUP BY ' + groupBySection;\n    }\n\n    if (target.fill) {\n      query += ' fill(' + target.fill + ')';\n    }\n\n    if (target.orderByTime === 'DESC') {\n      query += ' ORDER BY time DESC';\n    }\n\n    if (target.limit) {\n      query += ' LIMIT ' + target.limit;\n    }\n\n    if (target.slimit) {\n      query += ' SLIMIT ' + target.slimit;\n    }\n\n    return query;\n  }\n\n  renderAdhocFilters(filters) {\n    const conditions = _.map(filters, (tag, index) => {\n      return this.renderTagCondition(tag, index, false);\n    });\n    return conditions.join(' ');\n  }\n}\n","import _ from 'lodash';\n\nexport default class ResponseParser {\n  parse(query, results) {\n    if (!results || results.results.length === 0) {\n      return [];\n    }\n\n    const influxResults = results.results[0];\n    if (!influxResults.series) {\n      return [];\n    }\n\n    const normalizedQuery = query.toLowerCase();\n    const isValueFirst =\n      normalizedQuery.indexOf('show field keys') >= 0 || normalizedQuery.indexOf('show retention policies') >= 0;\n\n    const res = {};\n    _.each(influxResults.series, serie => {\n      _.each(serie.values, value => {\n        if (_.isArray(value)) {\n          // In general, there are 2 possible shapes for the returned value.\n          // The first one is a two-element array,\n          // where the first element is somewhat a metadata value:\n          // the tag name for SHOW TAG VALUES queries,\n          // the time field for SELECT queries, etc.\n          // The second shape is an one-element array,\n          // that is containing an immediate value.\n          // For example, SHOW FIELD KEYS queries return such shape.\n          // Note, pre-0.11 versions return\n          // the second shape for SHOW TAG VALUES queries\n          // (while the newer versions—first).\n\n          if (isValueFirst) {\n            addUnique(res, value[0]);\n          } else if (value[1] !== undefined) {\n            addUnique(res, value[1]);\n          } else {\n            addUnique(res, value[0]);\n          }\n        } else {\n          addUnique(res, value);\n        }\n      });\n    });\n\n    return _.map(res, value => {\n      return { text: value.toString() };\n    });\n  }\n}\n\nfunction addUnique(arr, value) {\n  arr[value] = value;\n}\n","import _ from 'lodash';\n\nfunction renderTagCondition(tag, index) {\n  let str = '';\n  let operator = tag.operator;\n  let value = tag.value;\n  if (index > 0) {\n    str = (tag.condition || 'AND') + ' ';\n  }\n\n  if (!operator) {\n    if (/^\\/.*\\/$/.test(tag.value)) {\n      operator = '=~';\n    } else {\n      operator = '=';\n    }\n  }\n\n  // quote value unless regex or number\n  if (operator !== '=~' && operator !== '!~' && isNaN(+value)) {\n    value = \"'\" + value + \"'\";\n  }\n\n  return str + '\"' + tag.key + '\" ' + operator + ' ' + value;\n}\n\nexport class InfluxQueryBuilder {\n  constructor(private target, private database?) {}\n\n  buildExploreQuery(type: string, withKey?: string, withMeasurementFilter?: string) {\n    let query;\n    let measurement;\n    let policy;\n\n    if (type === 'TAG_KEYS') {\n      query = 'SHOW TAG KEYS';\n      measurement = this.target.measurement;\n      policy = this.target.policy;\n    } else if (type === 'TAG_VALUES') {\n      query = 'SHOW TAG VALUES';\n      measurement = this.target.measurement;\n      policy = this.target.policy;\n    } else if (type === 'MEASUREMENTS') {\n      query = 'SHOW MEASUREMENTS';\n      if (withMeasurementFilter) {\n        query += ' WITH MEASUREMENT =~ /' + withMeasurementFilter + '/';\n      }\n    } else if (type === 'FIELDS') {\n      measurement = this.target.measurement;\n      policy = this.target.policy;\n\n      if (!measurement.match('^/.*/')) {\n        measurement = '\"' + measurement + '\"';\n\n        if (policy && policy !== 'default') {\n          policy = '\"' + policy + '\"';\n          measurement = policy + '.' + measurement;\n        }\n      }\n\n      return 'SHOW FIELD KEYS FROM ' + measurement;\n    } else if (type === 'RETENTION POLICIES') {\n      query = 'SHOW RETENTION POLICIES on \"' + this.database + '\"';\n      return query;\n    }\n\n    if (measurement) {\n      if (!measurement.match('^/.*/') && !measurement.match(/^merge\\(.*\\)/)) {\n        measurement = '\"' + measurement + '\"';\n      }\n\n      if (policy && policy !== 'default') {\n        policy = '\"' + policy + '\"';\n        measurement = policy + '.' + measurement;\n      }\n\n      query += ' FROM ' + measurement;\n    }\n\n    if (withKey) {\n      query += ' WITH KEY = \"' + withKey + '\"';\n    }\n\n    if (this.target.tags && this.target.tags.length > 0) {\n      const whereConditions = _.reduce(\n        this.target.tags,\n        (memo, tag) => {\n          // do not add a condition for the key we want to explore for\n          if (tag.key === withKey) {\n            return memo;\n          }\n          memo.push(renderTagCondition(tag, memo.length));\n          return memo;\n        },\n        []\n      );\n\n      if (whereConditions.length > 0) {\n        query += ' WHERE ' + whereConditions.join(' ');\n      }\n    }\n    if (type === 'MEASUREMENTS') {\n      query += ' LIMIT 100';\n      //Solve issue #2524 by limiting the number of measurements returned\n      //LIMIT must be after WITH MEASUREMENT and WHERE clauses\n      //This also could be used for TAG KEYS and TAG VALUES, if desired\n    }\n    return query;\n  }\n}\n","import _ from 'lodash';\n\nimport * as dateMath from 'app/core/utils/datemath';\nimport InfluxSeries from './influx_series';\nimport InfluxQuery from './influx_query';\nimport ResponseParser from './response_parser';\nimport { InfluxQueryBuilder } from './query_builder';\n\nexport default class InfluxDatasource {\n  type: string;\n  urls: any;\n  username: string;\n  password: string;\n  name: string;\n  database: any;\n  basicAuth: any;\n  withCredentials: any;\n  interval: any;\n  supportAnnotations: boolean;\n  supportMetrics: boolean;\n  responseParser: any;\n\n  /** @ngInject */\n  constructor(instanceSettings, private $q, private backendSrv, private templateSrv) {\n    this.type = 'influxdb';\n    this.urls = _.map(instanceSettings.url.split(','), url => {\n      return url.trim();\n    });\n\n    this.username = instanceSettings.username;\n    this.password = instanceSettings.password;\n    this.name = instanceSettings.name;\n    this.database = instanceSettings.database;\n    this.basicAuth = instanceSettings.basicAuth;\n    this.withCredentials = instanceSettings.withCredentials;\n    this.interval = (instanceSettings.jsonData || {}).timeInterval;\n    this.supportAnnotations = true;\n    this.supportMetrics = true;\n    this.responseParser = new ResponseParser();\n  }\n\n  query(options) {\n    let timeFilter = this.getTimeFilter(options);\n    const scopedVars = options.scopedVars;\n    const targets = _.cloneDeep(options.targets);\n    const queryTargets = [];\n    let queryModel;\n    let i, y;\n\n    let allQueries = _.map(targets, target => {\n      if (target.hide) {\n        return '';\n      }\n\n      queryTargets.push(target);\n\n      // backward compatibility\n      scopedVars.interval = scopedVars.__interval;\n\n      queryModel = new InfluxQuery(target, this.templateSrv, scopedVars);\n      return queryModel.render(true);\n    }).reduce((acc, current) => {\n      if (current !== '') {\n        acc += ';' + current;\n      }\n      return acc;\n    });\n\n    if (allQueries === '') {\n      return this.$q.when({ data: [] });\n    }\n\n    // add global adhoc filters to timeFilter\n    const adhocFilters = this.templateSrv.getAdhocFilters(this.name);\n    if (adhocFilters.length > 0) {\n      timeFilter += ' AND ' + queryModel.renderAdhocFilters(adhocFilters);\n    }\n\n    // replace grafana variables\n    scopedVars.timeFilter = { value: timeFilter };\n\n    // replace templated variables\n    allQueries = this.templateSrv.replace(allQueries, scopedVars);\n\n    return this._seriesQuery(allQueries, options).then((data): any => {\n      if (!data || !data.results) {\n        return [];\n      }\n\n      const seriesList = [];\n      for (i = 0; i < data.results.length; i++) {\n        const result = data.results[i];\n        if (!result || !result.series) {\n          continue;\n        }\n\n        const target = queryTargets[i];\n        let alias = target.alias;\n        if (alias) {\n          alias = this.templateSrv.replace(target.alias, options.scopedVars);\n        }\n\n        const influxSeries = new InfluxSeries({\n          series: data.results[i].series,\n          alias: alias,\n        });\n\n        switch (target.resultFormat) {\n          case 'table': {\n            seriesList.push(influxSeries.getTable());\n            break;\n          }\n          default: {\n            const timeSeries = influxSeries.getTimeSeries();\n            for (y = 0; y < timeSeries.length; y++) {\n              seriesList.push(timeSeries[y]);\n            }\n            break;\n          }\n        }\n      }\n\n      return { data: seriesList };\n    });\n  }\n\n  annotationQuery(options) {\n    if (!options.annotation.query) {\n      return this.$q.reject({\n        message: 'Query missing in annotation definition',\n      });\n    }\n\n    const timeFilter = this.getTimeFilter({ rangeRaw: options.rangeRaw });\n    let query = options.annotation.query.replace('$timeFilter', timeFilter);\n    query = this.templateSrv.replace(query, null, 'regex');\n\n    return this._seriesQuery(query, options).then(data => {\n      if (!data || !data.results || !data.results[0]) {\n        throw { message: 'No results in response from InfluxDB' };\n      }\n      return new InfluxSeries({\n        series: data.results[0].series,\n        annotation: options.annotation,\n      }).getAnnotations();\n    });\n  }\n\n  targetContainsTemplate(target) {\n    for (const group of target.groupBy) {\n      for (const param of group.params) {\n        if (this.templateSrv.variableExists(param)) {\n          return true;\n        }\n      }\n    }\n\n    for (const i in target.tags) {\n      if (this.templateSrv.variableExists(target.tags[i].value)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  metricFindQuery(query: string, options?: any) {\n    const interpolated = this.templateSrv.replace(query, null, 'regex');\n\n    return this._seriesQuery(interpolated, options).then(_.curry(this.responseParser.parse)(query));\n  }\n\n  getTagKeys(options) {\n    const queryBuilder = new InfluxQueryBuilder({ measurement: '', tags: [] }, this.database);\n    const query = queryBuilder.buildExploreQuery('TAG_KEYS');\n    return this.metricFindQuery(query, options);\n  }\n\n  getTagValues(options) {\n    const queryBuilder = new InfluxQueryBuilder({ measurement: '', tags: [] }, this.database);\n    const query = queryBuilder.buildExploreQuery('TAG_VALUES', options.key);\n    return this.metricFindQuery(query, options);\n  }\n\n  _seriesQuery(query: string, options?: any) {\n    if (!query) {\n      return this.$q.when({ results: [] });\n    }\n\n    if (options && options.range) {\n      const timeFilter = this.getTimeFilter({ rangeRaw: options.range });\n      query = query.replace('$timeFilter', timeFilter);\n    }\n\n    return this._influxRequest('GET', '/query', { q: query, epoch: 'ms' }, options);\n  }\n\n  serializeParams(params) {\n    if (!params) {\n      return '';\n    }\n\n    return _.reduce(\n      params,\n      (memo, value, key) => {\n        if (value === null || value === undefined) {\n          return memo;\n        }\n        memo.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));\n        return memo;\n      },\n      []\n    ).join('&');\n  }\n\n  testDatasource() {\n    const queryBuilder = new InfluxQueryBuilder({ measurement: '', tags: [] }, this.database);\n    const query = queryBuilder.buildExploreQuery('RETENTION POLICIES');\n\n    return this._seriesQuery(query)\n      .then(res => {\n        const error = _.get(res, 'results[0].error');\n        if (error) {\n          return { status: 'error', message: error };\n        }\n        return { status: 'success', message: 'Data source is working' };\n      })\n      .catch(err => {\n        return { status: 'error', message: err.message };\n      });\n  }\n\n  _influxRequest(method: string, url: string, data: any, options?: any) {\n    const currentUrl = this.urls.shift();\n    this.urls.push(currentUrl);\n\n    const params: any = {};\n\n    if (this.username) {\n      params.u = this.username;\n      params.p = this.password;\n    }\n\n    if (options && options.database) {\n      params.db = options.database;\n    } else if (this.database) {\n      params.db = this.database;\n    }\n\n    if (method === 'GET') {\n      _.extend(params, data);\n      data = null;\n    }\n\n    const req: any = {\n      method: method,\n      url: currentUrl + url,\n      params: params,\n      data: data,\n      precision: 'ms',\n      inspect: { type: 'influxdb' },\n      paramSerializer: this.serializeParams,\n    };\n\n    req.headers = req.headers || {};\n    if (this.basicAuth || this.withCredentials) {\n      req.withCredentials = true;\n    }\n    if (this.basicAuth) {\n      req.headers.Authorization = this.basicAuth;\n    }\n\n    return this.backendSrv.datasourceRequest(req).then(\n      result => {\n        return result.data;\n      },\n      err => {\n        if (err.status !== 0 || err.status >= 300) {\n          if (err.data && err.data.error) {\n            throw {\n              message: 'InfluxDB Error: ' + err.data.error,\n              data: err.data,\n              config: err.config,\n            };\n          } else {\n            throw {\n              message: 'Network Error: ' + err.statusText + '(' + err.status + ')',\n              data: err.data,\n              config: err.config,\n            };\n          }\n        }\n      }\n    );\n  }\n\n  getTimeFilter(options) {\n    const from = this.getInfluxTime(options.rangeRaw.from, false);\n    const until = this.getInfluxTime(options.rangeRaw.to, true);\n    const fromIsAbsolute = from[from.length - 1] === 'ms';\n\n    if (until === 'now()' && !fromIsAbsolute) {\n      return 'time >= ' + from;\n    }\n\n    return 'time >= ' + from + ' and time <= ' + until;\n  }\n\n  getInfluxTime(date, roundUp) {\n    if (_.isString(date)) {\n      if (date === 'now') {\n        return 'now()';\n      }\n\n      const parts = /^now-(\\d+)([d|h|m|s])$/.exec(date);\n      if (parts) {\n        const amount = parseInt(parts[1], 10);\n        const unit = parts[2];\n        return 'now() - ' + amount + unit;\n      }\n      date = dateMath.parse(date, roundUp);\n    }\n\n    return date.valueOf() + 'ms';\n  }\n}\n","import angular from 'angular';\nimport _ from 'lodash';\nimport { InfluxQueryBuilder } from './query_builder';\nimport InfluxQuery from './influx_query';\nimport queryPart from './query_part';\nimport { QueryCtrl } from 'app/plugins/sdk';\n\nexport class InfluxQueryCtrl extends QueryCtrl {\n  static templateUrl = 'partials/query.editor.html';\n\n  queryModel: InfluxQuery;\n  queryBuilder: any;\n  groupBySegment: any;\n  resultFormats: any[];\n  orderByTime: any[];\n  policySegment: any;\n  tagSegments: any[];\n  selectMenu: any;\n  measurementSegment: any;\n  removeTagFilterSegment: any;\n\n  /** @ngInject */\n  constructor($scope, $injector, private templateSrv, private $q, private uiSegmentSrv) {\n    super($scope, $injector);\n    this.target = this.target;\n    this.queryModel = new InfluxQuery(this.target, templateSrv, this.panel.scopedVars);\n    this.queryBuilder = new InfluxQueryBuilder(this.target, this.datasource.database);\n    this.groupBySegment = this.uiSegmentSrv.newPlusButton();\n    this.resultFormats = [{ text: 'Time series', value: 'time_series' }, { text: 'Table', value: 'table' }];\n    this.policySegment = uiSegmentSrv.newSegment(this.target.policy);\n\n    if (!this.target.measurement) {\n      this.measurementSegment = uiSegmentSrv.newSelectMeasurement();\n    } else {\n      this.measurementSegment = uiSegmentSrv.newSegment(this.target.measurement);\n    }\n\n    this.tagSegments = [];\n    for (const tag of this.target.tags) {\n      if (!tag.operator) {\n        if (/^\\/.*\\/$/.test(tag.value)) {\n          tag.operator = '=~';\n        } else {\n          tag.operator = '=';\n        }\n      }\n\n      if (tag.condition) {\n        this.tagSegments.push(uiSegmentSrv.newCondition(tag.condition));\n      }\n\n      this.tagSegments.push(uiSegmentSrv.newKey(tag.key));\n      this.tagSegments.push(uiSegmentSrv.newOperator(tag.operator));\n      this.tagSegments.push(uiSegmentSrv.newKeyValue(tag.value));\n    }\n\n    this.fixTagSegments();\n    this.buildSelectMenu();\n    this.removeTagFilterSegment = uiSegmentSrv.newSegment({\n      fake: true,\n      value: '-- remove tag filter --',\n    });\n  }\n\n  removeOrderByTime() {\n    this.target.orderByTime = 'ASC';\n  }\n\n  buildSelectMenu() {\n    const categories = queryPart.getCategories();\n    this.selectMenu = _.reduce(\n      categories,\n      (memo, cat, key) => {\n        const menu = {\n          text: key,\n          submenu: cat.map(item => {\n            return { text: item.type, value: item.type };\n          }),\n        };\n        memo.push(menu);\n        return memo;\n      },\n      []\n    );\n  }\n\n  getGroupByOptions() {\n    const query = this.queryBuilder.buildExploreQuery('TAG_KEYS');\n\n    return this.datasource\n      .metricFindQuery(query)\n      .then(tags => {\n        const options = [];\n        if (!this.queryModel.hasFill()) {\n          options.push(this.uiSegmentSrv.newSegment({ value: 'fill(null)' }));\n        }\n        if (!this.target.limit) {\n          options.push(this.uiSegmentSrv.newSegment({ value: 'LIMIT' }));\n        }\n        if (!this.target.slimit) {\n          options.push(this.uiSegmentSrv.newSegment({ value: 'SLIMIT' }));\n        }\n        if (this.target.orderByTime === 'ASC') {\n          options.push(this.uiSegmentSrv.newSegment({ value: 'ORDER BY time DESC' }));\n        }\n        if (!this.queryModel.hasGroupByTime()) {\n          options.push(this.uiSegmentSrv.newSegment({ value: 'time($interval)' }));\n        }\n        for (const tag of tags) {\n          options.push(this.uiSegmentSrv.newSegment({ value: 'tag(' + tag.text + ')' }));\n        }\n        return options;\n      })\n      .catch(this.handleQueryError.bind(this));\n  }\n\n  groupByAction() {\n    switch (this.groupBySegment.value) {\n      case 'LIMIT': {\n        this.target.limit = 10;\n        break;\n      }\n      case 'SLIMIT': {\n        this.target.slimit = 10;\n        break;\n      }\n      case 'ORDER BY time DESC': {\n        this.target.orderByTime = 'DESC';\n        break;\n      }\n      default: {\n        this.queryModel.addGroupBy(this.groupBySegment.value);\n      }\n    }\n\n    const plusButton = this.uiSegmentSrv.newPlusButton();\n    this.groupBySegment.value = plusButton.value;\n    this.groupBySegment.html = plusButton.html;\n    this.panelCtrl.refresh();\n  }\n\n  addSelectPart(selectParts, cat, subitem) {\n    this.queryModel.addSelectPart(selectParts, subitem.value);\n    this.panelCtrl.refresh();\n  }\n\n  handleSelectPartEvent(selectParts, part, evt) {\n    switch (evt.name) {\n      case 'get-param-options': {\n        const fieldsQuery = this.queryBuilder.buildExploreQuery('FIELDS');\n        return this.datasource\n          .metricFindQuery(fieldsQuery)\n          .then(this.transformToSegments(true))\n          .catch(this.handleQueryError.bind(this));\n      }\n      case 'part-param-changed': {\n        this.panelCtrl.refresh();\n        break;\n      }\n      case 'action': {\n        this.queryModel.removeSelectPart(selectParts, part);\n        this.panelCtrl.refresh();\n        break;\n      }\n      case 'get-part-actions': {\n        return this.$q.when([{ text: 'Remove', value: 'remove-part' }]);\n      }\n    }\n  }\n\n  handleGroupByPartEvent(part, index, evt) {\n    switch (evt.name) {\n      case 'get-param-options': {\n        const tagsQuery = this.queryBuilder.buildExploreQuery('TAG_KEYS');\n        return this.datasource\n          .metricFindQuery(tagsQuery)\n          .then(this.transformToSegments(true))\n          .catch(this.handleQueryError.bind(this));\n      }\n      case 'part-param-changed': {\n        this.panelCtrl.refresh();\n        break;\n      }\n      case 'action': {\n        this.queryModel.removeGroupByPart(part, index);\n        this.panelCtrl.refresh();\n        break;\n      }\n      case 'get-part-actions': {\n        return this.$q.when([{ text: 'Remove', value: 'remove-part' }]);\n      }\n    }\n  }\n\n  fixTagSegments() {\n    const count = this.tagSegments.length;\n    const lastSegment = this.tagSegments[Math.max(count - 1, 0)];\n\n    if (!lastSegment || lastSegment.type !== 'plus-button') {\n      this.tagSegments.push(this.uiSegmentSrv.newPlusButton());\n    }\n  }\n\n  measurementChanged() {\n    this.target.measurement = this.measurementSegment.value;\n    this.panelCtrl.refresh();\n  }\n\n  getPolicySegments() {\n    const policiesQuery = this.queryBuilder.buildExploreQuery('RETENTION POLICIES');\n    return this.datasource\n      .metricFindQuery(policiesQuery)\n      .then(this.transformToSegments(false))\n      .catch(this.handleQueryError.bind(this));\n  }\n\n  policyChanged() {\n    this.target.policy = this.policySegment.value;\n    this.panelCtrl.refresh();\n  }\n\n  toggleEditorMode() {\n    try {\n      this.target.query = this.queryModel.render(false);\n    } catch (err) {\n      console.log('query render error');\n    }\n    this.target.rawQuery = !this.target.rawQuery;\n  }\n\n  getMeasurements(measurementFilter) {\n    const query = this.queryBuilder.buildExploreQuery('MEASUREMENTS', undefined, measurementFilter);\n    return this.datasource\n      .metricFindQuery(query)\n      .then(this.transformToSegments(true))\n      .catch(this.handleQueryError.bind(this));\n  }\n\n  handleQueryError(err) {\n    this.error = err.message || 'Failed to issue metric query';\n    return [];\n  }\n\n  transformToSegments(addTemplateVars) {\n    return results => {\n      const segments = _.map(results, segment => {\n        return this.uiSegmentSrv.newSegment({\n          value: segment.text,\n          expandable: segment.expandable,\n        });\n      });\n\n      if (addTemplateVars) {\n        for (const variable of this.templateSrv.variables) {\n          segments.unshift(\n            this.uiSegmentSrv.newSegment({\n              type: 'value',\n              value: '/^$' + variable.name + '$/',\n              expandable: true,\n            })\n          );\n        }\n      }\n\n      return segments;\n    };\n  }\n\n  getTagsOrValues(segment, index) {\n    if (segment.type === 'condition') {\n      return this.$q.when([this.uiSegmentSrv.newSegment('AND'), this.uiSegmentSrv.newSegment('OR')]);\n    }\n    if (segment.type === 'operator') {\n      const nextValue = this.tagSegments[index + 1].value;\n      if (/^\\/.*\\/$/.test(nextValue)) {\n        return this.$q.when(this.uiSegmentSrv.newOperators(['=~', '!~']));\n      } else {\n        return this.$q.when(this.uiSegmentSrv.newOperators(['=', '!=', '<>', '<', '>']));\n      }\n    }\n\n    let query, addTemplateVars;\n    if (segment.type === 'key' || segment.type === 'plus-button') {\n      query = this.queryBuilder.buildExploreQuery('TAG_KEYS');\n      addTemplateVars = false;\n    } else if (segment.type === 'value') {\n      query = this.queryBuilder.buildExploreQuery('TAG_VALUES', this.tagSegments[index - 2].value);\n      addTemplateVars = true;\n    }\n\n    return this.datasource\n      .metricFindQuery(query)\n      .then(this.transformToSegments(addTemplateVars))\n      .then(results => {\n        if (segment.type === 'key') {\n          results.splice(0, 0, angular.copy(this.removeTagFilterSegment));\n        }\n        return results;\n      })\n      .catch(this.handleQueryError.bind(this));\n  }\n\n  getFieldSegments() {\n    const fieldsQuery = this.queryBuilder.buildExploreQuery('FIELDS');\n    return this.datasource\n      .metricFindQuery(fieldsQuery)\n      .then(this.transformToSegments(false))\n      .catch(this.handleQueryError);\n  }\n\n  tagSegmentUpdated(segment, index) {\n    this.tagSegments[index] = segment;\n\n    // handle remove tag condition\n    if (segment.value === this.removeTagFilterSegment.value) {\n      this.tagSegments.splice(index, 3);\n      if (this.tagSegments.length === 0) {\n        this.tagSegments.push(this.uiSegmentSrv.newPlusButton());\n      } else if (this.tagSegments.length > 2) {\n        this.tagSegments.splice(Math.max(index - 1, 0), 1);\n        if (this.tagSegments[this.tagSegments.length - 1].type !== 'plus-button') {\n          this.tagSegments.push(this.uiSegmentSrv.newPlusButton());\n        }\n      }\n    } else {\n      if (segment.type === 'plus-button') {\n        if (index > 2) {\n          this.tagSegments.splice(index, 0, this.uiSegmentSrv.newCondition('AND'));\n        }\n        this.tagSegments.push(this.uiSegmentSrv.newOperator('='));\n        this.tagSegments.push(this.uiSegmentSrv.newFake('select tag value', 'value', 'query-segment-value'));\n        segment.type = 'key';\n        segment.cssClass = 'query-segment-key';\n      }\n\n      if (index + 1 === this.tagSegments.length) {\n        this.tagSegments.push(this.uiSegmentSrv.newPlusButton());\n      }\n    }\n\n    this.rebuildTargetTagConditions();\n  }\n\n  rebuildTargetTagConditions() {\n    const tags = [];\n    let tagIndex = 0;\n    let tagOperator = '';\n\n    _.each(this.tagSegments, (segment2, index) => {\n      if (segment2.type === 'key') {\n        if (tags.length === 0) {\n          tags.push({});\n        }\n        tags[tagIndex].key = segment2.value;\n      } else if (segment2.type === 'value') {\n        tagOperator = this.getTagValueOperator(segment2.value, tags[tagIndex].operator);\n        if (tagOperator) {\n          this.tagSegments[index - 1] = this.uiSegmentSrv.newOperator(tagOperator);\n          tags[tagIndex].operator = tagOperator;\n        }\n        tags[tagIndex].value = segment2.value;\n      } else if (segment2.type === 'condition') {\n        tags.push({ condition: segment2.value });\n        tagIndex += 1;\n      } else if (segment2.type === 'operator') {\n        tags[tagIndex].operator = segment2.value;\n      }\n    });\n\n    this.target.tags = tags;\n    this.panelCtrl.refresh();\n  }\n\n  getTagValueOperator(tagValue, tagOperator): string {\n    if (tagOperator !== '=~' && tagOperator !== '!~' && /^\\/.*\\/$/.test(tagValue)) {\n      return '=~';\n    } else if ((tagOperator === '=~' || tagOperator === '!~') && /^(?!\\/.*\\/$)/.test(tagValue)) {\n      return '=';\n    }\n    return null;\n  }\n\n  getCollapsedText() {\n    return this.queryModel.render(false);\n  }\n}\n","import _ from 'lodash';\nimport moment from 'moment';\n\nimport { LogLevel, LogsModel, LogRow } from 'app/core/logs_model';\n\nexport function getLogLevel(line: string): LogLevel {\n  if (!line) {\n    return undefined;\n  }\n  let level: LogLevel;\n  Object.keys(LogLevel).forEach(key => {\n    if (!level) {\n      const regexp = new RegExp(`\\\\b${key}\\\\b`, 'i');\n      if (regexp.test(line)) {\n        level = LogLevel[key];\n      }\n    }\n  });\n  return level;\n}\n\nexport function getSearchMatches(line: string, search: string) {\n  // Empty search can send re.exec() into infinite loop, exit early\n  if (!line || !search) {\n    return [];\n  }\n  const regexp = new RegExp(`(?:${search})`, 'g');\n  const matches = [];\n  let match = regexp.exec(line);\n  while (match) {\n    matches.push({\n      text: match[0],\n      start: match.index,\n      length: match[0].length,\n    });\n    match = regexp.exec(line);\n  }\n  return matches;\n}\n\nexport function processEntry(entry: { line: string; timestamp: string }, stream): LogRow {\n  const { line, timestamp } = entry;\n  const { labels } = stream;\n  const key = `EK${timestamp}${labels}`;\n  const time = moment(timestamp);\n  const timeFromNow = time.fromNow();\n  const timeLocal = time.format('YYYY-MM-DD HH:mm:ss');\n  const searchMatches = getSearchMatches(line, stream.search);\n  const logLevel = getLogLevel(line);\n\n  return {\n    key,\n    logLevel,\n    searchMatches,\n    timeFromNow,\n    timeLocal,\n    entry: line,\n    timestamp: timestamp,\n  };\n}\n\nexport function processStreams(streams, limit?: number): LogsModel {\n  const combinedEntries = streams.reduce((acc, stream) => {\n    return [...acc, ...stream.entries.map(entry => processEntry(entry, stream))];\n  }, []);\n  const sortedEntries = _.chain(combinedEntries)\n    .sortBy('timestamp')\n    .reverse()\n    .slice(0, limit || combinedEntries.length)\n    .value();\n  return { rows: sortedEntries };\n}\n","import InfluxDatasource from './datasource';\nimport { InfluxQueryCtrl } from './query_ctrl';\n\nclass InfluxConfigCtrl {\n  static templateUrl = 'partials/config.html';\n}\n\nclass InfluxAnnotationsQueryCtrl {\n  static templateUrl = 'partials/annotations.editor.html';\n}\n\nexport {\n  InfluxDatasource as Datasource,\n  InfluxQueryCtrl as QueryCtrl,\n  InfluxConfigCtrl as ConfigCtrl,\n  InfluxAnnotationsQueryCtrl as AnnotationsQueryCtrl,\n};\n","export enum LogLevel {\n  crit = 'crit',\n  warn = 'warn',\n  err = 'error',\n  error = 'error',\n  info = 'info',\n  debug = 'debug',\n  trace = 'trace',\n}\n\nexport interface LogSearchMatch {\n  start: number;\n  length: number;\n  text?: string;\n}\n\nexport interface LogRow {\n  key: string;\n  entry: string;\n  logLevel: LogLevel;\n  timestamp: string;\n  timeFromNow: string;\n  timeLocal: string;\n  searchMatches?: LogSearchMatch[];\n}\n\nexport interface LogsModel {\n  rows: LogRow[];\n}\n","import _ from 'lodash';\n\nimport * as dateMath from 'app/core/utils/datemath';\n\nimport { processStreams } from './result_transformer';\n\nconst DEFAULT_LIMIT = 100;\n\nconst DEFAULT_QUERY_PARAMS = {\n  direction: 'BACKWARD',\n  limit: DEFAULT_LIMIT,\n  regexp: '',\n  query: '',\n};\n\nconst QUERY_REGEXP = /({\\w+=\"[^\"]+\"})?\\s*(\\w[^{]+)?\\s*({\\w+=\"[^\"]+\"})?/;\nexport function parseQuery(input: string) {\n  const match = input.match(QUERY_REGEXP);\n  let query = '';\n  let regexp = '';\n\n  if (match) {\n    if (match[1]) {\n      query = match[1];\n    }\n    if (match[2]) {\n      regexp = match[2].trim();\n    }\n    if (match[3]) {\n      if (match[1]) {\n        query = `${match[1].slice(0, -1)},${match[3].slice(1)}`;\n      } else {\n        query = match[3];\n      }\n    }\n  }\n\n  return { query, regexp };\n}\n\nfunction serializeParams(data: any) {\n  return Object.keys(data)\n    .map(k => {\n      const v = data[k];\n      return encodeURIComponent(k) + '=' + encodeURIComponent(v);\n    })\n    .join('&');\n}\n\nexport default class LoggingDatasource {\n  /** @ngInject */\n  constructor(private instanceSettings, private backendSrv, private templateSrv) {}\n\n  _request(apiUrl: string, data?, options?: any) {\n    const baseUrl = this.instanceSettings.url;\n    const params = data ? serializeParams(data) : '';\n    const url = `${baseUrl}${apiUrl}?${params}`;\n    const req = {\n      ...options,\n      url,\n    };\n    return this.backendSrv.datasourceRequest(req);\n  }\n\n  prepareQueryTarget(target, options) {\n    const interpolated = this.templateSrv.replace(target.expr);\n    const start = this.getTime(options.range.from, false);\n    const end = this.getTime(options.range.to, true);\n    return {\n      ...DEFAULT_QUERY_PARAMS,\n      ...parseQuery(interpolated),\n      start,\n      end,\n    };\n  }\n\n  query(options) {\n    const queryTargets = options.targets\n      .filter(target => target.expr)\n      .map(target => this.prepareQueryTarget(target, options));\n    if (queryTargets.length === 0) {\n      return Promise.resolve({ data: [] });\n    }\n\n    const queries = queryTargets.map(target => this._request('/api/prom/query', target));\n\n    return Promise.all(queries).then((results: any[]) => {\n      // Flatten streams from multiple queries\n      const allStreams = results.reduce((acc, response, i) => {\n        const streams = response.data.streams || [];\n        // Inject search for match highlighting\n        const search = queryTargets[i].regexp;\n        streams.forEach(s => {\n          s.search = search;\n        });\n        return [...acc, ...streams];\n      }, []);\n      const model = processStreams(allStreams, DEFAULT_LIMIT);\n      return { data: model };\n    });\n  }\n\n  metadataRequest(url) {\n    // HACK to get label values for {job=|}, will be replaced when implementing LoggingQueryField\n    const apiUrl = url.replace('v1', 'prom');\n    return this._request(apiUrl, { silent: true }).then(res => {\n      const data = { data: { data: res.data.values || [] } };\n      return data;\n    });\n  }\n\n  getTime(date, roundUp) {\n    if (_.isString(date)) {\n      date = dateMath.parse(date, roundUp);\n    }\n    return Math.ceil(date.valueOf() * 1e6);\n  }\n\n  testDatasource() {\n    return this._request('/api/prom/label')\n      .then(res => {\n        if (res && res.data && res.data.values && res.data.values.length > 0) {\n          return { status: 'success', message: 'Data source connected and labels found.' };\n        }\n        return {\n          status: 'error',\n          message: 'Data source connected, but no labels received. Verify that logging is configured properly.',\n        };\n      })\n      .catch(err => {\n        return { status: 'error', message: err.message };\n      });\n  }\n}\n","import _ from 'lodash';\n\nexport default class ResponseParser {\n  constructor(private $q) {}\n\n  processQueryResult(res) {\n    const data = [];\n\n    if (!res.data.results) {\n      return { data: data };\n    }\n\n    for (const key in res.data.results) {\n      const queryRes = res.data.results[key];\n\n      if (queryRes.series) {\n        for (const series of queryRes.series) {\n          data.push({\n            target: series.name,\n            datapoints: series.points,\n            refId: queryRes.refId,\n            meta: queryRes.meta,\n          });\n        }\n      }\n\n      if (queryRes.tables) {\n        for (const table of queryRes.tables) {\n          table.type = 'table';\n          table.refId = queryRes.refId;\n          table.meta = queryRes.meta;\n          data.push(table);\n        }\n      }\n    }\n\n    return { data: data };\n  }\n\n  parseMetricFindQueryResult(refId, results) {\n    if (!results || results.data.length === 0 || results.data.results[refId].meta.rowCount === 0) {\n      return [];\n    }\n\n    const columns = results.data.results[refId].tables[0].columns;\n    const rows = results.data.results[refId].tables[0].rows;\n    const textColIndex = this.findColIndex(columns, '__text');\n    const valueColIndex = this.findColIndex(columns, '__value');\n\n    if (columns.length === 2 && textColIndex !== -1 && valueColIndex !== -1) {\n      return this.transformToKeyValueList(rows, textColIndex, valueColIndex);\n    }\n\n    return this.transformToSimpleList(rows);\n  }\n\n  transformToKeyValueList(rows, textColIndex, valueColIndex) {\n    const res = [];\n\n    for (let i = 0; i < rows.length; i++) {\n      if (!this.containsKey(res, rows[i][textColIndex])) {\n        res.push({\n          text: rows[i][textColIndex],\n          value: rows[i][valueColIndex],\n        });\n      }\n    }\n\n    return res;\n  }\n\n  transformToSimpleList(rows) {\n    const res = [];\n\n    for (let i = 0; i < rows.length; i++) {\n      for (let j = 0; j < rows[i].length; j++) {\n        const value = rows[i][j];\n        if (res.indexOf(value) === -1) {\n          res.push(value);\n        }\n      }\n    }\n\n    return _.map(res, value => {\n      return { text: value };\n    });\n  }\n\n  findColIndex(columns, colName) {\n    for (let i = 0; i < columns.length; i++) {\n      if (columns[i].text === colName) {\n        return i;\n      }\n    }\n\n    return -1;\n  }\n\n  containsKey(res, key) {\n    for (let i = 0; i < res.length; i++) {\n      if (res[i].text === key) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  transformAnnotationResponse(options, data) {\n    const table = data.data.results[options.annotation.name].tables[0];\n\n    let timeColumnIndex = -1;\n    let textColumnIndex = -1;\n    let tagsColumnIndex = -1;\n\n    for (let i = 0; i < table.columns.length; i++) {\n      if (table.columns[i].text === 'time_sec' || table.columns[i].text === 'time') {\n        timeColumnIndex = i;\n      } else if (table.columns[i].text === 'title') {\n        return this.$q.reject({\n          message: 'The title column for annotations is deprecated, now only a column named text is returned',\n        });\n      } else if (table.columns[i].text === 'text') {\n        textColumnIndex = i;\n      } else if (table.columns[i].text === 'tags') {\n        tagsColumnIndex = i;\n      }\n    }\n\n    if (timeColumnIndex === -1) {\n      return this.$q.reject({\n        message: 'Missing mandatory time column (with time_sec column alias) in annotation query.',\n      });\n    }\n\n    const list = [];\n    for (let i = 0; i < table.rows.length; i++) {\n      const row = table.rows[i];\n      list.push({\n        annotation: options.annotation,\n        time: Math.floor(row[timeColumnIndex]),\n        text: row[textColumnIndex] ? row[textColumnIndex].toString() : '',\n        tags: row[tagsColumnIndex] ? row[tagsColumnIndex].trim().split(/\\s*,\\s*/) : [],\n      });\n    }\n\n    return list;\n  }\n}\n","import Datasource from './datasource';\n\nexport class LoggingConfigCtrl {\n  static templateUrl = 'partials/config.html';\n}\n\nexport { Datasource, LoggingConfigCtrl as ConfigCtrl };\n","import angular from 'angular';\nimport _ from 'lodash';\n\nclass MixedDatasource {\n  /** @ngInject */\n  constructor(private $q, private datasourceSrv) {}\n\n  query(options) {\n    const sets = _.groupBy(options.targets, 'datasource');\n    const promises = _.map(sets, targets => {\n      const dsName = targets[0].datasource;\n      if (dsName === '-- Mixed --') {\n        return this.$q([]);\n      }\n\n      return this.datasourceSrv.get(dsName).then(ds => {\n        const opt = angular.copy(options);\n        opt.targets = targets;\n        return ds.query(opt);\n      });\n    });\n\n    return this.$q.all(promises).then(results => {\n      return { data: _.flatten(_.map(results, 'data')) };\n    });\n  }\n}\n\nexport { MixedDatasource, MixedDatasource as Datasource };\n","import { MixedDatasource } from './datasource';\nexport { MixedDatasource, MixedDatasource as Datasource };\n","import _ from 'lodash';\nimport ResponseParser from './response_parser';\n\nexport class MysqlDatasource {\n  id: any;\n  name: any;\n  responseParser: ResponseParser;\n  interval: string;\n\n  /** @ngInject */\n  constructor(instanceSettings, private backendSrv, private $q, private templateSrv) {\n    this.name = instanceSettings.name;\n    this.id = instanceSettings.id;\n    this.responseParser = new ResponseParser(this.$q);\n    this.interval = (instanceSettings.jsonData || {}).timeInterval;\n  }\n\n  interpolateVariable(value, variable) {\n    if (typeof value === 'string') {\n      if (variable.multi || variable.includeAll) {\n        return \"'\" + value.replace(/'/g, `''`) + \"'\";\n      } else {\n        return value;\n      }\n    }\n\n    if (typeof value === 'number') {\n      return value;\n    }\n\n    const quotedValues = _.map(value, val => {\n      if (typeof value === 'number') {\n        return value;\n      }\n\n      return \"'\" + val.replace(/'/g, `''`) + \"'\";\n    });\n    return quotedValues.join(',');\n  }\n\n  query(options) {\n    const queries = _.filter(options.targets, item => {\n      return item.hide !== true;\n    }).map(item => {\n      return {\n        refId: item.refId,\n        intervalMs: options.intervalMs,\n        maxDataPoints: options.maxDataPoints,\n        datasourceId: this.id,\n        rawSql: this.templateSrv.replace(item.rawSql, options.scopedVars, this.interpolateVariable),\n        format: item.format,\n      };\n    });\n\n    if (queries.length === 0) {\n      return this.$q.when({ data: [] });\n    }\n\n    return this.backendSrv\n      .datasourceRequest({\n        url: '/api/tsdb/query',\n        method: 'POST',\n        data: {\n          from: options.range.from.valueOf().toString(),\n          to: options.range.to.valueOf().toString(),\n          queries: queries,\n        },\n      })\n      .then(this.responseParser.processQueryResult);\n  }\n\n  annotationQuery(options) {\n    if (!options.annotation.rawQuery) {\n      return this.$q.reject({\n        message: 'Query missing in annotation definition',\n      });\n    }\n\n    const query = {\n      refId: options.annotation.name,\n      datasourceId: this.id,\n      rawSql: this.templateSrv.replace(options.annotation.rawQuery, options.scopedVars, this.interpolateVariable),\n      format: 'table',\n    };\n\n    return this.backendSrv\n      .datasourceRequest({\n        url: '/api/tsdb/query',\n        method: 'POST',\n        data: {\n          from: options.range.from.valueOf().toString(),\n          to: options.range.to.valueOf().toString(),\n          queries: [query],\n        },\n      })\n      .then(data => this.responseParser.transformAnnotationResponse(options, data));\n  }\n\n  metricFindQuery(query, optionalOptions) {\n    let refId = 'tempvar';\n    if (optionalOptions && optionalOptions.variable && optionalOptions.variable.name) {\n      refId = optionalOptions.variable.name;\n    }\n\n    const interpolatedQuery = {\n      refId: refId,\n      datasourceId: this.id,\n      rawSql: this.templateSrv.replace(query, {}, this.interpolateVariable),\n      format: 'table',\n    };\n\n    const data = {\n      queries: [interpolatedQuery],\n    };\n\n    if (optionalOptions && optionalOptions.range && optionalOptions.range.from) {\n      data['from'] = optionalOptions.range.from.valueOf().toString();\n    }\n    if (optionalOptions && optionalOptions.range && optionalOptions.range.to) {\n      data['to'] = optionalOptions.range.to.valueOf().toString();\n    }\n\n    return this.backendSrv\n      .datasourceRequest({\n        url: '/api/tsdb/query',\n        method: 'POST',\n        data: data,\n      })\n      .then(data => this.responseParser.parseMetricFindQueryResult(refId, data));\n  }\n\n  testDatasource() {\n    return this.backendSrv\n      .datasourceRequest({\n        url: '/api/tsdb/query',\n        method: 'POST',\n        data: {\n          from: '5m',\n          to: 'now',\n          queries: [\n            {\n              refId: 'A',\n              intervalMs: 1,\n              maxDataPoints: 1,\n              datasourceId: this.id,\n              rawSql: 'SELECT 1',\n              format: 'table',\n            },\n          ],\n        },\n      })\n      .then(res => {\n        return { status: 'success', message: 'Database Connection OK' };\n      })\n      .catch(err => {\n        console.log(err);\n        if (err.data && err.data.message) {\n          return { status: 'error', message: err.data.message };\n        } else {\n          return { status: 'error', message: err.status };\n        }\n      });\n  }\n}\n","import { MysqlDatasource } from './datasource';\nimport { MysqlQueryCtrl } from './query_ctrl';\n\nclass MysqlConfigCtrl {\n  static templateUrl = 'partials/config.html';\n}\n\nconst defaultQuery = `SELECT\n    UNIX_TIMESTAMP(<time_column>) as time_sec,\n    <text_column> as text,\n    <tags_column> as tags\n  FROM <table name>\n  WHERE $__timeFilter(time_column)\n  ORDER BY <time_column> ASC\n  LIMIT 100\n  `;\n\nclass MysqlAnnotationsQueryCtrl {\n  static templateUrl = 'partials/annotations.editor.html';\n\n  annotation: any;\n\n  /** @ngInject */\n  constructor() {\n    this.annotation.rawQuery = this.annotation.rawQuery || defaultQuery;\n  }\n}\n\nexport {\n  MysqlDatasource,\n  MysqlDatasource as Datasource,\n  MysqlQueryCtrl as QueryCtrl,\n  MysqlConfigCtrl as ConfigCtrl,\n  MysqlAnnotationsQueryCtrl as AnnotationsQueryCtrl,\n};\n","import _ from 'lodash';\nimport { QueryCtrl } from 'app/plugins/sdk';\n\nexport interface MysqlQuery {\n  refId: string;\n  format: string;\n  alias: string;\n  rawSql: string;\n}\n\nexport interface QueryMeta {\n  sql: string;\n}\n\nconst defaultQuery = `SELECT\n  UNIX_TIMESTAMP(<time_column>) as time_sec,\n  <value column> as value,\n  <series name column> as metric\nFROM <table name>\nWHERE $__timeFilter(time_column)\nORDER BY <time_column> ASC\n`;\n\nexport class MysqlQueryCtrl extends QueryCtrl {\n  static templateUrl = 'partials/query.editor.html';\n\n  showLastQuerySQL: boolean;\n  formats: any[];\n  target: MysqlQuery;\n  lastQueryMeta: QueryMeta;\n  lastQueryError: string;\n  showHelp: boolean;\n\n  /** @ngInject */\n  constructor($scope, $injector) {\n    super($scope, $injector);\n\n    this.target.format = this.target.format || 'time_series';\n    this.target.alias = '';\n    this.formats = [{ text: 'Time series', value: 'time_series' }, { text: 'Table', value: 'table' }];\n\n    if (!this.target.rawSql) {\n      // special handling when in table panel\n      if (this.panelCtrl.panel.type === 'table') {\n        this.target.format = 'table';\n        this.target.rawSql = 'SELECT 1';\n      } else {\n        this.target.rawSql = defaultQuery;\n      }\n    }\n\n    this.panelCtrl.events.on('data-received', this.onDataReceived.bind(this), $scope);\n    this.panelCtrl.events.on('data-error', this.onDataError.bind(this), $scope);\n  }\n\n  onDataReceived(dataList) {\n    this.lastQueryMeta = null;\n    this.lastQueryError = null;\n\n    const anySeriesFromQuery = _.find(dataList, { refId: this.target.refId });\n    if (anySeriesFromQuery) {\n      this.lastQueryMeta = anySeriesFromQuery.meta;\n    }\n  }\n\n  onDataError(err) {\n    if (err.data && err.data.results) {\n      const queryRes = err.data.results[this.target.refId];\n      if (queryRes) {\n        this.lastQueryMeta = queryRes.meta;\n        this.lastQueryError = queryRes.error;\n      }\n    }\n  }\n}\n","import _ from 'lodash';\n\nexport default class ResponseParser {\n  constructor(private $q) {}\n\n  processQueryResult(res) {\n    const data = [];\n\n    if (!res.data.results) {\n      return { data: data };\n    }\n\n    for (const key in res.data.results) {\n      const queryRes = res.data.results[key];\n\n      if (queryRes.series) {\n        for (const series of queryRes.series) {\n          data.push({\n            target: series.name,\n            datapoints: series.points,\n            refId: queryRes.refId,\n            meta: queryRes.meta,\n          });\n        }\n      }\n\n      if (queryRes.tables) {\n        for (const table of queryRes.tables) {\n          table.type = 'table';\n          table.refId = queryRes.refId;\n          table.meta = queryRes.meta;\n          data.push(table);\n        }\n      }\n    }\n\n    return { data: data };\n  }\n\n  parseMetricFindQueryResult(refId, results) {\n    if (!results || results.data.length === 0 || results.data.results[refId].meta.rowCount === 0) {\n      return [];\n    }\n\n    const columns = results.data.results[refId].tables[0].columns;\n    const rows = results.data.results[refId].tables[0].rows;\n    const textColIndex = this.findColIndex(columns, '__text');\n    const valueColIndex = this.findColIndex(columns, '__value');\n\n    if (columns.length === 2 && textColIndex !== -1 && valueColIndex !== -1) {\n      return this.transformToKeyValueList(rows, textColIndex, valueColIndex);\n    }\n\n    return this.transformToSimpleList(rows);\n  }\n\n  transformToKeyValueList(rows, textColIndex, valueColIndex) {\n    const res = [];\n\n    for (let i = 0; i < rows.length; i++) {\n      if (!this.containsKey(res, rows[i][textColIndex])) {\n        res.push({\n          text: rows[i][textColIndex],\n          value: rows[i][valueColIndex],\n        });\n      }\n    }\n\n    return res;\n  }\n\n  transformToSimpleList(rows) {\n    const res = [];\n\n    for (let i = 0; i < rows.length; i++) {\n      for (let j = 0; j < rows[i].length; j++) {\n        const value = rows[i][j];\n        if (res.indexOf(value) === -1) {\n          res.push(value);\n        }\n      }\n    }\n\n    return _.map(res, value => {\n      return { text: value };\n    });\n  }\n\n  findColIndex(columns, colName) {\n    for (let i = 0; i < columns.length; i++) {\n      if (columns[i].text === colName) {\n        return i;\n      }\n    }\n\n    return -1;\n  }\n\n  containsKey(res, key) {\n    for (let i = 0; i < res.length; i++) {\n      if (res[i].text === key) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  transformAnnotationResponse(options, data) {\n    const table = data.data.results[options.annotation.name].tables[0];\n\n    let timeColumnIndex = -1;\n    const titleColumnIndex = -1;\n    let textColumnIndex = -1;\n    let tagsColumnIndex = -1;\n\n    for (let i = 0; i < table.columns.length; i++) {\n      if (table.columns[i].text === 'time') {\n        timeColumnIndex = i;\n      } else if (table.columns[i].text === 'text') {\n        textColumnIndex = i;\n      } else if (table.columns[i].text === 'tags') {\n        tagsColumnIndex = i;\n      }\n    }\n\n    if (timeColumnIndex === -1) {\n      return this.$q.reject({\n        message: 'Missing mandatory time column in annotation query.',\n      });\n    }\n\n    const list = [];\n    for (let i = 0; i < table.rows.length; i++) {\n      const row = table.rows[i];\n      list.push({\n        annotation: options.annotation,\n        time: Math.floor(row[timeColumnIndex]),\n        title: row[titleColumnIndex],\n        text: row[textColumnIndex],\n        tags: row[tagsColumnIndex] ? row[tagsColumnIndex].trim().split(/\\s*,\\s*/) : [],\n      });\n    }\n\n    return list;\n  }\n}\n","import _ from 'lodash';\n\nexport default class PostgresQuery {\n  target: any;\n  templateSrv: any;\n  scopedVars: any;\n\n  /** @ngInject */\n  constructor(target, templateSrv?, scopedVars?) {\n    this.target = target;\n    this.templateSrv = templateSrv;\n    this.scopedVars = scopedVars;\n\n    target.format = target.format || 'time_series';\n    target.timeColumn = target.timeColumn || 'time';\n    target.metricColumn = target.metricColumn || 'none';\n\n    target.group = target.group || [];\n    target.where = target.where || [{ type: 'macro', name: '$__timeFilter', params: [] }];\n    target.select = target.select || [[{ type: 'column', params: ['value'] }]];\n\n    // handle pre query gui panels gracefully\n    if (!('rawQuery' in this.target)) {\n      if ('rawSql' in target) {\n        // pre query gui panel\n        target.rawQuery = true;\n      } else {\n        // new panel\n        target.rawQuery = false;\n      }\n    }\n\n    // give interpolateQueryStr access to this\n    this.interpolateQueryStr = this.interpolateQueryStr.bind(this);\n  }\n\n  // remove identifier quoting from identifier to use in metadata queries\n  unquoteIdentifier(value) {\n    if (value[0] === '\"' && value[value.length - 1] === '\"') {\n      return value.substring(1, value.length - 1).replace(/\"\"/g, '\"');\n    } else {\n      return value;\n    }\n  }\n\n  quoteIdentifier(value) {\n    return '\"' + String(value).replace(/\"/g, '\"\"') + '\"';\n  }\n\n  quoteLiteral(value) {\n    return \"'\" + String(value).replace(/'/g, \"''\") + \"'\";\n  }\n\n  escapeLiteral(value) {\n    return String(value).replace(/'/g, \"''\");\n  }\n\n  hasTimeGroup() {\n    return _.find(this.target.group, (g: any) => g.type === 'time');\n  }\n\n  hasMetricColumn() {\n    return this.target.metricColumn !== 'none';\n  }\n\n  interpolateQueryStr(value, variable, defaultFormatFn) {\n    // if no multi or include all do not regexEscape\n    if (!variable.multi && !variable.includeAll) {\n      return this.escapeLiteral(value);\n    }\n\n    if (typeof value === 'string') {\n      return this.quoteLiteral(value);\n    }\n\n    const escapedValues = _.map(value, this.quoteLiteral);\n    return escapedValues.join(',');\n  }\n\n  render(interpolate?) {\n    const target = this.target;\n\n    // new query with no table set yet\n    if (!this.target.rawQuery && !('table' in this.target)) {\n      return '';\n    }\n\n    if (!target.rawQuery) {\n      target.rawSql = this.buildQuery();\n    }\n\n    if (interpolate) {\n      return this.templateSrv.replace(target.rawSql, this.scopedVars, this.interpolateQueryStr);\n    } else {\n      return target.rawSql;\n    }\n  }\n\n  hasUnixEpochTimecolumn() {\n    return ['int4', 'int8', 'float4', 'float8', 'numeric'].indexOf(this.target.timeColumnType) > -1;\n  }\n\n  buildTimeColumn(alias = true) {\n    const timeGroup = this.hasTimeGroup();\n    let query;\n    let macro = '$__timeGroup';\n\n    if (timeGroup) {\n      let args;\n      if (timeGroup.params.length > 1 && timeGroup.params[1] !== 'none') {\n        args = timeGroup.params.join(',');\n      } else {\n        args = timeGroup.params[0];\n      }\n      if (this.hasUnixEpochTimecolumn()) {\n        macro = '$__unixEpochGroup';\n      }\n      if (alias) {\n        macro += 'Alias';\n      }\n      query = macro + '(' + this.target.timeColumn + ',' + args + ')';\n    } else {\n      query = this.target.timeColumn;\n      if (alias) {\n        query += ' AS \"time\"';\n      }\n    }\n\n    return query;\n  }\n\n  buildMetricColumn() {\n    if (this.hasMetricColumn()) {\n      return this.target.metricColumn + ' AS metric';\n    }\n\n    return '';\n  }\n\n  buildValueColumns() {\n    let query = '';\n    for (const column of this.target.select) {\n      query += ',\\n  ' + this.buildValueColumn(column);\n    }\n\n    return query;\n  }\n\n  buildValueColumn(column) {\n    let query = '';\n\n    const columnName = _.find(column, (g: any) => g.type === 'column');\n    query = columnName.params[0];\n\n    const aggregate = _.find(column, (g: any) => g.type === 'aggregate' || g.type === 'percentile');\n    const windows = _.find(column, (g: any) => g.type === 'window' || g.type === 'moving_window');\n\n    if (aggregate) {\n      const func = aggregate.params[0];\n      switch (aggregate.type) {\n        case 'aggregate':\n          if (func === 'first' || func === 'last') {\n            query = func + '(' + query + ',' + this.target.timeColumn + ')';\n          } else {\n            query = func + '(' + query + ')';\n          }\n          break;\n        case 'percentile':\n          query = func + '(' + aggregate.params[1] + ') WITHIN GROUP (ORDER BY ' + query + ')';\n          break;\n      }\n    }\n\n    if (windows) {\n      const overParts = [];\n      if (this.hasMetricColumn()) {\n        overParts.push('PARTITION BY ' + this.target.metricColumn);\n      }\n      overParts.push('ORDER BY ' + this.buildTimeColumn(false));\n\n      const over = overParts.join(' ');\n      let curr: string;\n      let prev: string;\n      switch (windows.type) {\n        case 'window':\n          switch (windows.params[0]) {\n            case 'increase':\n              curr = query;\n              prev = 'lag(' + curr + ') OVER (' + over + ')';\n              query = '(CASE WHEN ' + curr + ' >= ' + prev + ' THEN ' + curr + ' - ' + prev;\n              query += ' WHEN ' + prev + ' IS NULL THEN NULL ELSE ' + curr + ' END)';\n              break;\n            case 'rate':\n              let timeColumn = this.target.timeColumn;\n              if (aggregate) {\n                timeColumn = 'min(' + timeColumn + ')';\n              }\n\n              curr = query;\n              prev = 'lag(' + curr + ') OVER (' + over + ')';\n              query = '(CASE WHEN ' + curr + ' >= ' + prev + ' THEN ' + curr + ' - ' + prev;\n              query += ' WHEN ' + prev + ' IS NULL THEN NULL ELSE ' + curr + ' END)';\n              query += '/extract(epoch from ' + timeColumn + ' - lag(' + timeColumn + ') OVER (' + over + '))';\n              break;\n            default:\n              query = windows.params[0] + '(' + query + ') OVER (' + over + ')';\n              break;\n          }\n          break;\n        case 'moving_window':\n          query = windows.params[0] + '(' + query + ') OVER (' + over + ' ROWS ' + windows.params[1] + ' PRECEDING)';\n          break;\n      }\n    }\n\n    const alias = _.find(column, (g: any) => g.type === 'alias');\n    if (alias) {\n      query += ' AS ' + this.quoteIdentifier(alias.params[0]);\n    }\n\n    return query;\n  }\n\n  buildWhereClause() {\n    let query = '';\n    const conditions = _.map(this.target.where, (tag, index) => {\n      switch (tag.type) {\n        case 'macro':\n          return tag.name + '(' + this.target.timeColumn + ')';\n          break;\n        case 'expression':\n          return tag.params.join(' ');\n          break;\n      }\n    });\n\n    if (conditions.length > 0) {\n      query = '\\nWHERE\\n  ' + conditions.join(' AND\\n  ');\n    }\n\n    return query;\n  }\n\n  buildGroupClause() {\n    let query = '';\n    let groupSection = '';\n\n    for (let i = 0; i < this.target.group.length; i++) {\n      const part = this.target.group[i];\n      if (i > 0) {\n        groupSection += ', ';\n      }\n      if (part.type === 'time') {\n        groupSection += '1';\n      } else {\n        groupSection += part.params[0];\n      }\n    }\n\n    if (groupSection.length) {\n      query = '\\nGROUP BY ' + groupSection;\n      if (this.hasMetricColumn()) {\n        query += ',2';\n      }\n    }\n    return query;\n  }\n\n  buildQuery() {\n    let query = 'SELECT';\n\n    query += '\\n  ' + this.buildTimeColumn();\n    if (this.hasMetricColumn()) {\n      query += ',\\n  ' + this.buildMetricColumn();\n    }\n    query += this.buildValueColumns();\n\n    query += '\\nFROM ' + this.target.table;\n\n    query += this.buildWhereClause();\n    query += this.buildGroupClause();\n\n    query += '\\nORDER BY 1';\n    if (this.hasMetricColumn()) {\n      query += ',2';\n    }\n\n    return query;\n  }\n}\n","import _ from 'lodash';\nimport ResponseParser from './response_parser';\nimport PostgresQuery from 'app/plugins/datasource/postgres/postgres_query';\n\nexport class PostgresDatasource {\n  id: any;\n  name: any;\n  jsonData: any;\n  responseParser: ResponseParser;\n  queryModel: PostgresQuery;\n  interval: string;\n\n  /** @ngInject */\n  constructor(instanceSettings, private backendSrv, private $q, private templateSrv, private timeSrv) {\n    this.name = instanceSettings.name;\n    this.id = instanceSettings.id;\n    this.jsonData = instanceSettings.jsonData;\n    this.responseParser = new ResponseParser(this.$q);\n    this.queryModel = new PostgresQuery({});\n    this.interval = (instanceSettings.jsonData || {}).timeInterval;\n  }\n\n  interpolateVariable(value, variable) {\n    if (typeof value === 'string') {\n      if (variable.multi || variable.includeAll) {\n        return this.queryModel.quoteLiteral(value);\n      } else {\n        return value;\n      }\n    }\n\n    if (typeof value === 'number') {\n      return value;\n    }\n\n    const quotedValues = _.map(value, v => {\n      return this.queryModel.quoteLiteral(v);\n    });\n    return quotedValues.join(',');\n  }\n\n  query(options) {\n    const queries = _.filter(options.targets, target => {\n      return target.hide !== true;\n    }).map(target => {\n      const queryModel = new PostgresQuery(target, this.templateSrv, options.scopedVars);\n\n      return {\n        refId: target.refId,\n        intervalMs: options.intervalMs,\n        maxDataPoints: options.maxDataPoints,\n        datasourceId: this.id,\n        rawSql: queryModel.render(this.interpolateVariable),\n        format: target.format,\n      };\n    });\n\n    if (queries.length === 0) {\n      return this.$q.when({ data: [] });\n    }\n\n    return this.backendSrv\n      .datasourceRequest({\n        url: '/api/tsdb/query',\n        method: 'POST',\n        data: {\n          from: options.range.from.valueOf().toString(),\n          to: options.range.to.valueOf().toString(),\n          queries: queries,\n        },\n      })\n      .then(this.responseParser.processQueryResult);\n  }\n\n  annotationQuery(options) {\n    if (!options.annotation.rawQuery) {\n      return this.$q.reject({\n        message: 'Query missing in annotation definition',\n      });\n    }\n\n    const query = {\n      refId: options.annotation.name,\n      datasourceId: this.id,\n      rawSql: this.templateSrv.replace(options.annotation.rawQuery, options.scopedVars, this.interpolateVariable),\n      format: 'table',\n    };\n\n    return this.backendSrv\n      .datasourceRequest({\n        url: '/api/tsdb/query',\n        method: 'POST',\n        data: {\n          from: options.range.from.valueOf().toString(),\n          to: options.range.to.valueOf().toString(),\n          queries: [query],\n        },\n      })\n      .then(data => this.responseParser.transformAnnotationResponse(options, data));\n  }\n\n  metricFindQuery(query, optionalOptions) {\n    let refId = 'tempvar';\n    if (optionalOptions && optionalOptions.variable && optionalOptions.variable.name) {\n      refId = optionalOptions.variable.name;\n    }\n\n    const interpolatedQuery = {\n      refId: refId,\n      datasourceId: this.id,\n      rawSql: this.templateSrv.replace(query, {}, this.interpolateVariable),\n      format: 'table',\n    };\n\n    const range = this.timeSrv.timeRange();\n    const data = {\n      queries: [interpolatedQuery],\n      from: range.from.valueOf().toString(),\n      to: range.to.valueOf().toString(),\n    };\n\n    return this.backendSrv\n      .datasourceRequest({\n        url: '/api/tsdb/query',\n        method: 'POST',\n        data: data,\n      })\n      .then(data => this.responseParser.parseMetricFindQueryResult(refId, data));\n  }\n\n  getVersion() {\n    return this.metricFindQuery(\"SELECT current_setting('server_version_num')::int/100\", {});\n  }\n\n  getTimescaleDBVersion() {\n    return this.metricFindQuery(\"SELECT extversion FROM pg_extension WHERE extname = 'timescaledb'\", {});\n  }\n\n  testDatasource() {\n    return this.metricFindQuery('SELECT 1', {})\n      .then(res => {\n        return { status: 'success', message: 'Database Connection OK' };\n      })\n      .catch(err => {\n        console.log(err);\n        if (err.data && err.data.message) {\n          return { status: 'error', message: err.data.message };\n        } else {\n          return { status: 'error', message: err.status };\n        }\n      });\n  }\n}\n","export class PostgresMetaQuery {\n  constructor(private target, private queryModel) {}\n\n  getOperators(datatype: string) {\n    switch (datatype) {\n      case 'float4':\n      case 'float8': {\n        return ['=', '!=', '<', '<=', '>', '>='];\n      }\n      case 'text':\n      case 'varchar':\n      case 'char': {\n        return ['=', '!=', '<', '<=', '>', '>=', 'IN', 'NOT IN', 'LIKE', 'NOT LIKE', '~', '~*', '!~', '!~*'];\n      }\n      default: {\n        return ['=', '!=', '<', '<=', '>', '>=', 'IN', 'NOT IN'];\n      }\n    }\n  }\n\n  // quote identifier as literal to use in metadata queries\n  quoteIdentAsLiteral(value) {\n    return this.queryModel.quoteLiteral(this.queryModel.unquoteIdentifier(value));\n  }\n\n  findMetricTable() {\n    // query that returns first table found that has a timestamp(tz) column and a float column\n    const query = `\nSELECT\n\tquote_ident(table_name) as table_name,\n\t( SELECT\n\t    quote_ident(column_name) as column_name\n\t  FROM information_schema.columns c\n    WHERE\n      c.table_schema = t.table_schema AND\n      c.table_name = t.table_name AND\n      udt_name IN ('timestamptz','timestamp')\n    ORDER BY ordinal_position LIMIT 1\n  ) AS time_column,\n  ( SELECT\n      quote_ident(column_name) AS column_name\n    FROM information_schema.columns c\n    WHERE\n      c.table_schema = t.table_schema AND\n      c.table_name = t.table_name AND\n      udt_name='float8'\n    ORDER BY ordinal_position LIMIT 1\n  ) AS value_column\nFROM information_schema.tables t\nWHERE\n  table_schema IN (\n\t\tSELECT CASE WHEN trim(unnest) = '\"$user\"' THEN user ELSE trim(unnest) END\n    FROM unnest(string_to_array(current_setting('search_path'),','))\n  ) AND\n  EXISTS\n  ( SELECT 1\n    FROM information_schema.columns c\n    WHERE\n      c.table_schema = t.table_schema AND\n      c.table_name = t.table_name AND\n      udt_name IN ('timestamptz','timestamp')\n  ) AND\n  EXISTS\n  ( SELECT 1\n    FROM information_schema.columns c\n    WHERE\n      c.table_schema = t.table_schema AND\n      c.table_name = t.table_name AND\n      udt_name='float8'\n  )\nLIMIT 1\n;`;\n    return query;\n  }\n\n  buildSchemaConstraint() {\n    const query = `\ntable_schema IN (\n\tSELECT CASE WHEN trim(unnest) = \\'\"$user\"\\' THEN user ELSE trim(unnest) END\n  FROM unnest(string_to_array(current_setting(\\'search_path\\'),\\',\\'))\n)`;\n    return query;\n  }\n\n  buildTableConstraint(table: string) {\n    let query = '';\n\n    // check for schema qualified table\n    if (table.includes('.')) {\n      const parts = table.split('.');\n      query = 'table_schema = ' + this.quoteIdentAsLiteral(parts[0]);\n      query += ' AND table_name = ' + this.quoteIdentAsLiteral(parts[1]);\n      return query;\n    } else {\n      query = `\ntable_schema IN (\n\tSELECT CASE WHEN trim(unnest) = \\'\"$user\"\\' THEN user ELSE trim(unnest) END\n  FROM unnest(string_to_array(current_setting(\\'search_path\\'),\\',\\'))\n)`;\n      query += ' AND table_name = ' + this.quoteIdentAsLiteral(table);\n\n      return query;\n    }\n  }\n\n  buildTableQuery() {\n    let query = 'SELECT quote_ident(table_name) FROM information_schema.tables WHERE ';\n    query += this.buildSchemaConstraint();\n    query += ' ORDER BY table_name';\n    return query;\n  }\n\n  buildColumnQuery(type?: string) {\n    let query = 'SELECT quote_ident(column_name) FROM information_schema.columns WHERE ';\n    query += this.buildTableConstraint(this.target.table);\n\n    switch (type) {\n      case 'time': {\n        query +=\n          \" AND data_type IN ('timestamp without time zone','timestamp with time zone','bigint','integer','double precision','real')\";\n        break;\n      }\n      case 'metric': {\n        query += \" AND data_type IN ('text','character','character varying')\";\n        break;\n      }\n      case 'value': {\n        query += \" AND data_type IN ('bigint','integer','double precision','real')\";\n        query += ' AND column_name <> ' + this.quoteIdentAsLiteral(this.target.timeColumn);\n        break;\n      }\n      case 'group': {\n        query += \" AND data_type IN ('text','character','character varying')\";\n        break;\n      }\n    }\n\n    query += ' ORDER BY column_name';\n\n    return query;\n  }\n\n  buildValueQuery(column: string) {\n    let query = 'SELECT DISTINCT quote_literal(' + column + ')';\n    query += ' FROM ' + this.target.table;\n    query += ' WHERE $__timeFilter(' + this.target.timeColumn + ')';\n    query += ' ORDER BY 1 LIMIT 100';\n    return query;\n  }\n\n  buildDatatypeQuery(column: string) {\n    let query = `\nSELECT udt_name\nFROM information_schema.columns\nWHERE\n  table_schema IN (\n  SELECT schema FROM (\n\t\t  SELECT CASE WHEN trim(unnest) = \\'\"$user\"\\' THEN user ELSE trim(unnest) END as schema\n      FROM unnest(string_to_array(current_setting(\\'search_path\\'),\\',\\'))\n    ) s\n    WHERE EXISTS (SELECT 1 FROM information_schema.schemata WHERE schema_name = s.schema)\n  )\n`;\n    query += ' AND table_name = ' + this.quoteIdentAsLiteral(this.target.table);\n    query += ' AND column_name = ' + this.quoteIdentAsLiteral(column);\n    return query;\n  }\n\n  buildAggregateQuery() {\n    let query = 'SELECT DISTINCT proname FROM pg_aggregate ';\n    query += 'INNER JOIN pg_proc ON pg_aggregate.aggfnoid = pg_proc.oid ';\n    query += 'INNER JOIN pg_type ON pg_type.oid=pg_proc.prorettype ';\n    query += \"WHERE pronargs=1 AND typname IN ('float8') AND aggkind='n' ORDER BY 1\";\n    return query;\n  }\n}\n","import { SqlPartDef, SqlPart } from 'app/core/components/sql_part/sql_part';\n\nconst index = [];\n\nfunction createPart(part): any {\n  const def = index[part.type];\n  if (!def) {\n    return null;\n  }\n\n  return new SqlPart(part, def);\n}\n\nfunction register(options: any) {\n  index[options.type] = new SqlPartDef(options);\n}\n\nregister({\n  type: 'column',\n  style: 'label',\n  params: [{ type: 'column', dynamicLookup: true }],\n  defaultParams: ['value'],\n});\n\nregister({\n  type: 'expression',\n  style: 'expression',\n  label: 'Expr:',\n  params: [\n    { name: 'left', type: 'string', dynamicLookup: true },\n    { name: 'op', type: 'string', dynamicLookup: true },\n    { name: 'right', type: 'string', dynamicLookup: true },\n  ],\n  defaultParams: ['value', '=', 'value'],\n});\n\nregister({\n  type: 'macro',\n  style: 'label',\n  label: 'Macro:',\n  params: [],\n  defaultParams: [],\n});\n\nregister({\n  type: 'aggregate',\n  style: 'label',\n  params: [\n    {\n      name: 'name',\n      type: 'string',\n      options: ['avg', 'count', 'min', 'max', 'sum', 'stddev', 'variance'],\n    },\n  ],\n  defaultParams: ['avg'],\n});\n\nregister({\n  type: 'percentile',\n  label: 'Aggregate:',\n  style: 'label',\n  params: [\n    {\n      name: 'name',\n      type: 'string',\n      options: ['percentile_cont', 'percentile_disc'],\n    },\n    {\n      name: 'fraction',\n      type: 'number',\n      options: ['0.5', '0.75', '0.9', '0.95', '0.99'],\n    },\n  ],\n  defaultParams: ['percentile_cont', '0.95'],\n});\n\nregister({\n  type: 'alias',\n  style: 'label',\n  params: [{ name: 'name', type: 'string', quote: 'double' }],\n  defaultParams: ['alias'],\n});\n\nregister({\n  type: 'time',\n  style: 'function',\n  label: 'time',\n  params: [\n    {\n      name: 'interval',\n      type: 'interval',\n      options: ['$__interval', '1s', '10s', '1m', '5m', '10m', '15m', '1h'],\n    },\n    {\n      name: 'fill',\n      type: 'string',\n      options: ['none', 'NULL', 'previous', '0'],\n    },\n  ],\n  defaultParams: ['$__interval', 'none'],\n});\n\nregister({\n  type: 'window',\n  style: 'label',\n  params: [\n    {\n      name: 'function',\n      type: 'string',\n      options: ['increase', 'rate', 'sum'],\n    },\n  ],\n  defaultParams: ['increase'],\n});\n\nregister({\n  type: 'moving_window',\n  style: 'label',\n  label: 'Moving Window:',\n  params: [\n    {\n      name: 'function',\n      type: 'string',\n      options: ['avg'],\n    },\n    {\n      name: 'window_size',\n      type: 'number',\n      options: ['3', '5', '7', '10', '20'],\n    },\n  ],\n  defaultParams: ['avg', '5'],\n});\n\nexport default {\n  create: createPart,\n};\n","import _ from 'lodash';\n\nexport class SqlPartDef {\n  type: string;\n  style: string;\n  label: string;\n  params: any[];\n  defaultParams: any[];\n  wrapOpen: string;\n  wrapClose: string;\n  separator: string;\n\n  constructor(options: any) {\n    this.type = options.type;\n    if (options.label) {\n      this.label = options.label;\n    } else {\n      this.label = this.type[0].toUpperCase() + this.type.substring(1) + ':';\n    }\n    this.style = options.style;\n    if (this.style === 'function') {\n      this.wrapOpen = '(';\n      this.wrapClose = ')';\n      this.separator = ', ';\n    } else {\n      this.wrapOpen = ' ';\n      this.wrapClose = ' ';\n      this.separator = ' ';\n    }\n    this.params = options.params;\n    this.defaultParams = options.defaultParams;\n  }\n}\n\nexport class SqlPart {\n  part: any;\n  def: SqlPartDef;\n  params: any[];\n  label: string;\n  name: string;\n  datatype: string;\n\n  constructor(part: any, def: any) {\n    this.part = part;\n    this.def = def;\n    if (!this.def) {\n      throw { message: 'Could not find sql part ' + part.type };\n    }\n\n    this.datatype = part.datatype;\n\n    if (part.name) {\n      this.name = part.name;\n      this.label = def.label + ' ' + part.name;\n    } else {\n      this.name = '';\n      this.label = def.label;\n    }\n\n    part.params = part.params || _.clone(this.def.defaultParams);\n    this.params = part.params;\n  }\n\n  updateParam(strValue, index) {\n    // handle optional parameters\n    if (strValue === '' && this.def.params[index].optional) {\n      this.params.splice(index, 1);\n    } else {\n      this.params[index] = strValue;\n    }\n\n    this.part.params = this.params;\n  }\n}\n","import _ from 'lodash';\nimport appEvents from 'app/core/app_events';\nimport { PostgresMetaQuery } from './meta_query';\nimport { QueryCtrl } from 'app/plugins/sdk';\nimport { SqlPart } from 'app/core/components/sql_part/sql_part';\nimport PostgresQuery from './postgres_query';\nimport sqlPart from './sql_part';\n\nexport interface QueryMeta {\n  sql: string;\n}\n\nconst defaultQuery = `SELECT\n  $__time(time_column),\n  value1\nFROM\n  metric_table\nWHERE\n  $__timeFilter(time_column)\n`;\n\nexport class PostgresQueryCtrl extends QueryCtrl {\n  static templateUrl = 'partials/query.editor.html';\n\n  showLastQuerySQL: boolean;\n  formats: any[];\n  queryModel: PostgresQuery;\n  metaBuilder: PostgresMetaQuery;\n  lastQueryMeta: QueryMeta;\n  lastQueryError: string;\n  showHelp: boolean;\n  tableSegment: any;\n  whereAdd: any;\n  timeColumnSegment: any;\n  metricColumnSegment: any;\n  selectMenu: any[];\n  selectParts: SqlPart[][];\n  groupParts: SqlPart[];\n  whereParts: SqlPart[];\n  groupAdd: any;\n\n  /** @ngInject */\n  constructor($scope, $injector, private templateSrv, private $q, private uiSegmentSrv) {\n    super($scope, $injector);\n    this.target = this.target;\n    this.queryModel = new PostgresQuery(this.target, templateSrv, this.panel.scopedVars);\n    this.metaBuilder = new PostgresMetaQuery(this.target, this.queryModel);\n    this.updateProjection();\n\n    this.formats = [{ text: 'Time series', value: 'time_series' }, { text: 'Table', value: 'table' }];\n\n    if (!this.target.rawSql) {\n      // special handling when in table panel\n      if (this.panelCtrl.panel.type === 'table') {\n        this.target.format = 'table';\n        this.target.rawSql = 'SELECT 1';\n        this.target.rawQuery = true;\n      } else {\n        this.target.rawSql = defaultQuery;\n        this.datasource.metricFindQuery(this.metaBuilder.findMetricTable()).then(result => {\n          if (result.length > 0) {\n            this.target.table = result[0].text;\n            let segment = this.uiSegmentSrv.newSegment(this.target.table);\n            this.tableSegment.html = segment.html;\n            this.tableSegment.value = segment.value;\n\n            this.target.timeColumn = result[1].text;\n            segment = this.uiSegmentSrv.newSegment(this.target.timeColumn);\n            this.timeColumnSegment.html = segment.html;\n            this.timeColumnSegment.value = segment.value;\n\n            this.target.timeColumnType = 'timestamp';\n            this.target.select = [[{ type: 'column', params: [result[2].text] }]];\n            this.updateProjection();\n            this.panelCtrl.refresh();\n          }\n        });\n      }\n    }\n\n    if (!this.target.table) {\n      this.tableSegment = uiSegmentSrv.newSegment({ value: 'select table', fake: true });\n    } else {\n      this.tableSegment = uiSegmentSrv.newSegment(this.target.table);\n    }\n\n    this.timeColumnSegment = uiSegmentSrv.newSegment(this.target.timeColumn);\n    this.metricColumnSegment = uiSegmentSrv.newSegment(this.target.metricColumn);\n\n    this.buildSelectMenu();\n    this.whereAdd = this.uiSegmentSrv.newPlusButton();\n    this.groupAdd = this.uiSegmentSrv.newPlusButton();\n\n    this.panelCtrl.events.on('data-received', this.onDataReceived.bind(this), $scope);\n    this.panelCtrl.events.on('data-error', this.onDataError.bind(this), $scope);\n  }\n\n  updateProjection() {\n    this.selectParts = _.map(this.target.select, (parts: any) => {\n      return _.map(parts, sqlPart.create).filter(n => n);\n    });\n    this.whereParts = _.map(this.target.where, sqlPart.create).filter(n => n);\n    this.groupParts = _.map(this.target.group, sqlPart.create).filter(n => n);\n  }\n\n  updatePersistedParts() {\n    this.target.select = _.map(this.selectParts, selectParts => {\n      return _.map(selectParts, (part: any) => {\n        return { type: part.def.type, datatype: part.datatype, params: part.params };\n      });\n    });\n    this.target.where = _.map(this.whereParts, (part: any) => {\n      return { type: part.def.type, datatype: part.datatype, name: part.name, params: part.params };\n    });\n    this.target.group = _.map(this.groupParts, (part: any) => {\n      return { type: part.def.type, datatype: part.datatype, params: part.params };\n    });\n  }\n\n  buildSelectMenu() {\n    this.selectMenu = [];\n    const aggregates = {\n      text: 'Aggregate Functions',\n      value: 'aggregate',\n      submenu: [\n        { text: 'Average', value: 'avg' },\n        { text: 'Count', value: 'count' },\n        { text: 'Maximum', value: 'max' },\n        { text: 'Minimum', value: 'min' },\n        { text: 'Sum', value: 'sum' },\n        { text: 'Standard deviation', value: 'stddev' },\n        { text: 'Variance', value: 'variance' },\n      ],\n    };\n\n    // first and last aggregate are timescaledb specific\n    if (this.datasource.jsonData.timescaledb === true) {\n      aggregates.submenu.push({ text: 'First', value: 'first' });\n      aggregates.submenu.push({ text: 'Last', value: 'last' });\n    }\n\n    this.selectMenu.push(aggregates);\n\n    // ordered set aggregates require postgres 9.4+\n    if (this.datasource.jsonData.postgresVersion >= 904) {\n      const aggregates2 = {\n        text: 'Ordered-Set Aggregate Functions',\n        value: 'percentile',\n        submenu: [\n          { text: 'Percentile (continuous)', value: 'percentile_cont' },\n          { text: 'Percentile (discrete)', value: 'percentile_disc' },\n        ],\n      };\n      this.selectMenu.push(aggregates2);\n    }\n\n    const windows = {\n      text: 'Window Functions',\n      value: 'window',\n      submenu: [\n        { text: 'Increase', value: 'increase' },\n        { text: 'Rate', value: 'rate' },\n        { text: 'Sum', value: 'sum' },\n        { text: 'Moving Average', value: 'avg', type: 'moving_window' },\n      ],\n    };\n    this.selectMenu.push(windows);\n\n    this.selectMenu.push({ text: 'Alias', value: 'alias' });\n    this.selectMenu.push({ text: 'Column', value: 'column' });\n  }\n\n  toggleEditorMode() {\n    if (this.target.rawQuery) {\n      appEvents.emit('confirm-modal', {\n        title: 'Warning',\n        text2: 'Switching to query builder may overwrite your raw SQL.',\n        icon: 'fa-exclamation',\n        yesText: 'Switch',\n        onConfirm: () => {\n          this.target.rawQuery = !this.target.rawQuery;\n        },\n      });\n    } else {\n      this.target.rawQuery = !this.target.rawQuery;\n    }\n  }\n\n  resetPlusButton(button) {\n    const plusButton = this.uiSegmentSrv.newPlusButton();\n    button.html = plusButton.html;\n    button.value = plusButton.value;\n  }\n\n  getTableSegments() {\n    return this.datasource\n      .metricFindQuery(this.metaBuilder.buildTableQuery())\n      .then(this.transformToSegments({}))\n      .catch(this.handleQueryError.bind(this));\n  }\n\n  tableChanged() {\n    this.target.table = this.tableSegment.value;\n    this.target.where = [];\n    this.target.group = [];\n    this.updateProjection();\n\n    const segment = this.uiSegmentSrv.newSegment('none');\n    this.metricColumnSegment.html = segment.html;\n    this.metricColumnSegment.value = segment.value;\n    this.target.metricColumn = 'none';\n\n    const task1 = this.datasource.metricFindQuery(this.metaBuilder.buildColumnQuery('time')).then(result => {\n      // check if time column is still valid\n      if (result.length > 0 && !_.find(result, (r: any) => r.text === this.target.timeColumn)) {\n        const segment = this.uiSegmentSrv.newSegment(result[0].text);\n        this.timeColumnSegment.html = segment.html;\n        this.timeColumnSegment.value = segment.value;\n      }\n      return this.timeColumnChanged(false);\n    });\n    const task2 = this.datasource.metricFindQuery(this.metaBuilder.buildColumnQuery('value')).then(result => {\n      if (result.length > 0) {\n        this.target.select = [[{ type: 'column', params: [result[0].text] }]];\n        this.updateProjection();\n      }\n    });\n\n    this.$q.all([task1, task2]).then(() => {\n      this.panelCtrl.refresh();\n    });\n  }\n\n  getTimeColumnSegments() {\n    return this.datasource\n      .metricFindQuery(this.metaBuilder.buildColumnQuery('time'))\n      .then(this.transformToSegments({}))\n      .catch(this.handleQueryError.bind(this));\n  }\n\n  timeColumnChanged(refresh?: boolean) {\n    this.target.timeColumn = this.timeColumnSegment.value;\n    return this.datasource.metricFindQuery(this.metaBuilder.buildDatatypeQuery(this.target.timeColumn)).then(result => {\n      if (result.length === 1) {\n        if (this.target.timeColumnType !== result[0].text) {\n          this.target.timeColumnType = result[0].text;\n        }\n        let partModel;\n        if (this.queryModel.hasUnixEpochTimecolumn()) {\n          partModel = sqlPart.create({ type: 'macro', name: '$__unixEpochFilter', params: [] });\n        } else {\n          partModel = sqlPart.create({ type: 'macro', name: '$__timeFilter', params: [] });\n        }\n\n        if (this.whereParts.length >= 1 && this.whereParts[0].def.type === 'macro') {\n          // replace current macro\n          this.whereParts[0] = partModel;\n        } else {\n          this.whereParts.splice(0, 0, partModel);\n        }\n      }\n\n      this.updatePersistedParts();\n      if (refresh !== false) {\n        this.panelCtrl.refresh();\n      }\n    });\n  }\n\n  getMetricColumnSegments() {\n    return this.datasource\n      .metricFindQuery(this.metaBuilder.buildColumnQuery('metric'))\n      .then(this.transformToSegments({ addNone: true }))\n      .catch(this.handleQueryError.bind(this));\n  }\n\n  metricColumnChanged() {\n    this.target.metricColumn = this.metricColumnSegment.value;\n    this.panelCtrl.refresh();\n  }\n\n  onDataReceived(dataList) {\n    this.lastQueryMeta = null;\n    this.lastQueryError = null;\n\n    const anySeriesFromQuery = _.find(dataList, { refId: this.target.refId });\n    if (anySeriesFromQuery) {\n      this.lastQueryMeta = anySeriesFromQuery.meta;\n    }\n  }\n\n  onDataError(err) {\n    if (err.data && err.data.results) {\n      const queryRes = err.data.results[this.target.refId];\n      if (queryRes) {\n        this.lastQueryMeta = queryRes.meta;\n        this.lastQueryError = queryRes.error;\n      }\n    }\n  }\n\n  transformToSegments(config) {\n    return results => {\n      const segments = _.map(results, segment => {\n        return this.uiSegmentSrv.newSegment({\n          value: segment.text,\n          expandable: segment.expandable,\n        });\n      });\n\n      if (config.addTemplateVars) {\n        for (const variable of this.templateSrv.variables) {\n          let value;\n          value = '$' + variable.name;\n          if (config.templateQuoter && variable.multi === false) {\n            value = config.templateQuoter(value);\n          }\n\n          segments.unshift(\n            this.uiSegmentSrv.newSegment({\n              type: 'template',\n              value: value,\n              expandable: true,\n            })\n          );\n        }\n      }\n\n      if (config.addNone) {\n        segments.unshift(this.uiSegmentSrv.newSegment({ type: 'template', value: 'none', expandable: true }));\n      }\n\n      return segments;\n    };\n  }\n\n  findAggregateIndex(selectParts) {\n    return _.findIndex(selectParts, (p: any) => p.def.type === 'aggregate' || p.def.type === 'percentile');\n  }\n\n  findWindowIndex(selectParts) {\n    return _.findIndex(selectParts, (p: any) => p.def.type === 'window' || p.def.type === 'moving_window');\n  }\n\n  addSelectPart(selectParts, item, subItem) {\n    let partType = item.value;\n    if (subItem && subItem.type) {\n      partType = subItem.type;\n    }\n    let partModel = sqlPart.create({ type: partType });\n    if (subItem) {\n      partModel.params[0] = subItem.value;\n    }\n    let addAlias = false;\n\n    switch (partType) {\n      case 'column':\n        const parts = _.map(selectParts, (part: any) => {\n          return sqlPart.create({ type: part.def.type, params: _.clone(part.params) });\n        });\n        this.selectParts.push(parts);\n        break;\n      case 'percentile':\n      case 'aggregate':\n        // add group by if no group by yet\n        if (this.target.group.length === 0) {\n          this.addGroup('time', '$__interval');\n        }\n        const aggIndex = this.findAggregateIndex(selectParts);\n        if (aggIndex !== -1) {\n          // replace current aggregation\n          selectParts[aggIndex] = partModel;\n        } else {\n          selectParts.splice(1, 0, partModel);\n        }\n        if (!_.find(selectParts, (p: any) => p.def.type === 'alias')) {\n          addAlias = true;\n        }\n        break;\n      case 'moving_window':\n      case 'window':\n        const windowIndex = this.findWindowIndex(selectParts);\n        if (windowIndex !== -1) {\n          // replace current window function\n          selectParts[windowIndex] = partModel;\n        } else {\n          const aggIndex = this.findAggregateIndex(selectParts);\n          if (aggIndex !== -1) {\n            selectParts.splice(aggIndex + 1, 0, partModel);\n          } else {\n            selectParts.splice(1, 0, partModel);\n          }\n        }\n        if (!_.find(selectParts, (p: any) => p.def.type === 'alias')) {\n          addAlias = true;\n        }\n        break;\n      case 'alias':\n        addAlias = true;\n        break;\n    }\n\n    if (addAlias) {\n      // set initial alias name to column name\n      partModel = sqlPart.create({ type: 'alias', params: [selectParts[0].params[0].replace(/\"/g, '')] });\n      if (selectParts[selectParts.length - 1].def.type === 'alias') {\n        selectParts[selectParts.length - 1] = partModel;\n      } else {\n        selectParts.push(partModel);\n      }\n    }\n\n    this.updatePersistedParts();\n    this.panelCtrl.refresh();\n  }\n\n  removeSelectPart(selectParts, part) {\n    if (part.def.type === 'column') {\n      // remove all parts of column unless its last column\n      if (this.selectParts.length > 1) {\n        const modelsIndex = _.indexOf(this.selectParts, selectParts);\n        this.selectParts.splice(modelsIndex, 1);\n      }\n    } else {\n      const partIndex = _.indexOf(selectParts, part);\n      selectParts.splice(partIndex, 1);\n    }\n\n    this.updatePersistedParts();\n  }\n\n  handleSelectPartEvent(selectParts, part, evt) {\n    switch (evt.name) {\n      case 'get-param-options': {\n        switch (part.def.type) {\n          case 'aggregate':\n            return this.datasource\n              .metricFindQuery(this.metaBuilder.buildAggregateQuery())\n              .then(this.transformToSegments({}))\n              .catch(this.handleQueryError.bind(this));\n          case 'column':\n            return this.datasource\n              .metricFindQuery(this.metaBuilder.buildColumnQuery('value'))\n              .then(this.transformToSegments({}))\n              .catch(this.handleQueryError.bind(this));\n        }\n      }\n      case 'part-param-changed': {\n        this.updatePersistedParts();\n        this.panelCtrl.refresh();\n        break;\n      }\n      case 'action': {\n        this.removeSelectPart(selectParts, part);\n        this.panelCtrl.refresh();\n        break;\n      }\n      case 'get-part-actions': {\n        return this.$q.when([{ text: 'Remove', value: 'remove-part' }]);\n      }\n    }\n  }\n\n  handleGroupPartEvent(part, index, evt) {\n    switch (evt.name) {\n      case 'get-param-options': {\n        return this.datasource\n          .metricFindQuery(this.metaBuilder.buildColumnQuery())\n          .then(this.transformToSegments({}))\n          .catch(this.handleQueryError.bind(this));\n      }\n      case 'part-param-changed': {\n        this.updatePersistedParts();\n        this.panelCtrl.refresh();\n        break;\n      }\n      case 'action': {\n        this.removeGroup(part, index);\n        this.panelCtrl.refresh();\n        break;\n      }\n      case 'get-part-actions': {\n        return this.$q.when([{ text: 'Remove', value: 'remove-part' }]);\n      }\n    }\n  }\n\n  addGroup(partType, value) {\n    let params = [value];\n    if (partType === 'time') {\n      params = ['$__interval', 'none'];\n    }\n    const partModel = sqlPart.create({ type: partType, params: params });\n\n    if (partType === 'time') {\n      // put timeGroup at start\n      this.groupParts.splice(0, 0, partModel);\n    } else {\n      this.groupParts.push(partModel);\n    }\n\n    // add aggregates when adding group by\n    for (const selectParts of this.selectParts) {\n      if (!selectParts.some(part => part.def.type === 'aggregate')) {\n        const aggregate = sqlPart.create({ type: 'aggregate', params: ['avg'] });\n        selectParts.splice(1, 0, aggregate);\n        if (!selectParts.some(part => part.def.type === 'alias')) {\n          const alias = sqlPart.create({ type: 'alias', params: [selectParts[0].part.params[0]] });\n          selectParts.push(alias);\n        }\n      }\n    }\n\n    this.updatePersistedParts();\n  }\n\n  removeGroup(part, index) {\n    if (part.def.type === 'time') {\n      // remove aggregations\n      this.selectParts = _.map(this.selectParts, (s: any) => {\n        return _.filter(s, (part: any) => {\n          if (part.def.type === 'aggregate' || part.def.type === 'percentile') {\n            return false;\n          }\n          return true;\n        });\n      });\n    }\n\n    this.groupParts.splice(index, 1);\n    this.updatePersistedParts();\n  }\n\n  handleWherePartEvent(whereParts, part, evt, index) {\n    switch (evt.name) {\n      case 'get-param-options': {\n        switch (evt.param.name) {\n          case 'left':\n            return this.datasource\n              .metricFindQuery(this.metaBuilder.buildColumnQuery())\n              .then(this.transformToSegments({}))\n              .catch(this.handleQueryError.bind(this));\n          case 'right':\n            if (['int4', 'int8', 'float4', 'float8', 'timestamp', 'timestamptz'].indexOf(part.datatype) > -1) {\n              // don't do value lookups for numerical fields\n              return this.$q.when([]);\n            } else {\n              return this.datasource\n                .metricFindQuery(this.metaBuilder.buildValueQuery(part.params[0]))\n                .then(\n                  this.transformToSegments({\n                    addTemplateVars: true,\n                    templateQuoter: (v: string) => {\n                      return this.queryModel.quoteLiteral(v);\n                    },\n                  })\n                )\n                .catch(this.handleQueryError.bind(this));\n            }\n          case 'op':\n            return this.$q.when(this.uiSegmentSrv.newOperators(this.metaBuilder.getOperators(part.datatype)));\n          default:\n            return this.$q.when([]);\n        }\n      }\n      case 'part-param-changed': {\n        this.updatePersistedParts();\n        this.datasource.metricFindQuery(this.metaBuilder.buildDatatypeQuery(part.params[0])).then((d: any) => {\n          if (d.length === 1) {\n            part.datatype = d[0].text;\n          }\n        });\n        this.panelCtrl.refresh();\n        break;\n      }\n      case 'action': {\n        // remove element\n        whereParts.splice(index, 1);\n        this.updatePersistedParts();\n        this.panelCtrl.refresh();\n        break;\n      }\n      case 'get-part-actions': {\n        return this.$q.when([{ text: 'Remove', value: 'remove-part' }]);\n      }\n    }\n  }\n\n  getWhereOptions() {\n    const options = [];\n    if (this.queryModel.hasUnixEpochTimecolumn()) {\n      options.push(this.uiSegmentSrv.newSegment({ type: 'macro', value: '$__unixEpochFilter' }));\n    } else {\n      options.push(this.uiSegmentSrv.newSegment({ type: 'macro', value: '$__timeFilter' }));\n    }\n    options.push(this.uiSegmentSrv.newSegment({ type: 'expression', value: 'Expression' }));\n    return this.$q.when(options);\n  }\n\n  addWhereAction(part, index) {\n    switch (this.whereAdd.type) {\n      case 'macro': {\n        const partModel = sqlPart.create({ type: 'macro', name: this.whereAdd.value, params: [] });\n        if (this.whereParts.length >= 1 && this.whereParts[0].def.type === 'macro') {\n          // replace current macro\n          this.whereParts[0] = partModel;\n        } else {\n          this.whereParts.splice(0, 0, partModel);\n        }\n        break;\n      }\n      default: {\n        this.whereParts.push(sqlPart.create({ type: 'expression', params: ['value', '=', 'value'] }));\n      }\n    }\n\n    this.updatePersistedParts();\n    this.resetPlusButton(this.whereAdd);\n    this.panelCtrl.refresh();\n  }\n\n  getGroupOptions() {\n    return this.datasource\n      .metricFindQuery(this.metaBuilder.buildColumnQuery('group'))\n      .then(tags => {\n        const options = [];\n        if (!this.queryModel.hasTimeGroup()) {\n          options.push(this.uiSegmentSrv.newSegment({ type: 'time', value: 'time($__interval,none)' }));\n        }\n        for (const tag of tags) {\n          options.push(this.uiSegmentSrv.newSegment({ type: 'column', value: tag.text }));\n        }\n        return options;\n      })\n      .catch(this.handleQueryError.bind(this));\n  }\n\n  addGroupAction() {\n    switch (this.groupAdd.value) {\n      default: {\n        this.addGroup(this.groupAdd.type, this.groupAdd.value);\n      }\n    }\n\n    this.resetPlusButton(this.groupAdd);\n    this.panelCtrl.refresh();\n  }\n\n  handleQueryError(err) {\n    this.error = err.message || 'Failed to issue metric query';\n    return [];\n  }\n}\n","import { PostgresDatasource } from './datasource';\nimport { PostgresQueryCtrl } from './query_ctrl';\nimport { PostgresConfigCtrl } from './config_ctrl';\n\nconst defaultQuery = `SELECT\n  extract(epoch from time_column) AS time,\n  text_column as text,\n  tags_column as tags\nFROM\n  metric_table\nWHERE\n  $__timeFilter(time_column)\n`;\n\nclass PostgresAnnotationsQueryCtrl {\n  static templateUrl = 'partials/annotations.editor.html';\n\n  annotation: any;\n\n  /** @ngInject */\n  constructor() {\n    this.annotation.rawQuery = this.annotation.rawQuery || defaultQuery;\n  }\n}\n\nexport {\n  PostgresDatasource,\n  PostgresDatasource as Datasource,\n  PostgresQueryCtrl as QueryCtrl,\n  PostgresConfigCtrl as ConfigCtrl,\n  PostgresAnnotationsQueryCtrl as AnnotationsQueryCtrl,\n};\n","import _ from 'lodash';\n\nexport class PostgresConfigCtrl {\n  static templateUrl = 'partials/config.html';\n\n  current: any;\n  datasourceSrv: any;\n  showTimescaleDBHelp: boolean;\n\n  /** @ngInject */\n  constructor($scope, datasourceSrv) {\n    this.datasourceSrv = datasourceSrv;\n    this.current.jsonData.sslmode = this.current.jsonData.sslmode || 'verify-full';\n    this.current.jsonData.postgresVersion = this.current.jsonData.postgresVersion || 903;\n    this.showTimescaleDBHelp = false;\n    this.autoDetectFeatures();\n  }\n\n  autoDetectFeatures() {\n    if (!this.current.id) {\n      return;\n    }\n\n    this.datasourceSrv.loadDatasource(this.current.name).then(ds => {\n      return ds.getVersion().then(version => {\n        version = Number(version[0].text);\n\n        // timescaledb is only available for 9.6+\n        if (version >= 906) {\n          ds.getTimescaleDBVersion().then(version => {\n            if (version.length === 1) {\n              this.current.jsonData.timescaledb = true;\n            }\n          });\n        }\n\n        const major = Math.trunc(version / 100);\n        const minor = version % 100;\n        let name = String(major);\n        if (version < 1000) {\n          name = String(major) + '.' + String(minor);\n        }\n        if (!_.find(this.postgresVersions, (p: any) => p.value === version)) {\n          this.postgresVersions.push({ name: name, value: version });\n        }\n        this.current.jsonData.postgresVersion = version;\n      });\n    });\n  }\n\n  toggleTimescaleDBHelp() {\n    this.showTimescaleDBHelp = !this.showTimescaleDBHelp;\n  }\n\n  // the value portion is derived from postgres server_version_num/100\n  postgresVersions = [\n    { name: '9.3', value: 903 },\n    { name: '9.4', value: 904 },\n    { name: '9.5', value: 905 },\n    { name: '9.6', value: 906 },\n    { name: '10', value: 1000 },\n  ];\n}\n","import _ from 'lodash';\n\nexport default class PrometheusMetricFindQuery {\n  datasource: any;\n  query: any;\n  range: any;\n\n  constructor(datasource, query, timeSrv) {\n    this.datasource = datasource;\n    this.query = query;\n    this.range = timeSrv.timeRange();\n  }\n\n  process() {\n    const labelValuesRegex = /^label_values\\((?:(.+),\\s*)?([a-zA-Z_][a-zA-Z0-9_]+)\\)\\s*$/;\n    const metricNamesRegex = /^metrics\\((.+)\\)\\s*$/;\n    const queryResultRegex = /^query_result\\((.+)\\)\\s*$/;\n\n    const labelValuesQuery = this.query.match(labelValuesRegex);\n    if (labelValuesQuery) {\n      if (labelValuesQuery[1]) {\n        return this.labelValuesQuery(labelValuesQuery[2], labelValuesQuery[1]);\n      } else {\n        return this.labelValuesQuery(labelValuesQuery[2], null);\n      }\n    }\n\n    const metricNamesQuery = this.query.match(metricNamesRegex);\n    if (metricNamesQuery) {\n      return this.metricNameQuery(metricNamesQuery[1]);\n    }\n\n    const queryResultQuery = this.query.match(queryResultRegex);\n    if (queryResultQuery) {\n      return this.queryResultQuery(queryResultQuery[1]);\n    }\n\n    // if query contains full metric name, return metric name and label list\n    return this.metricNameAndLabelsQuery(this.query);\n  }\n\n  labelValuesQuery(label, metric) {\n    let url;\n\n    if (!metric) {\n      // return label values globally\n      url = '/api/v1/label/' + label + '/values';\n\n      return this.datasource.metadataRequest(url).then(result => {\n        return _.map(result.data.data, value => {\n          return { text: value };\n        });\n      });\n    } else {\n      const start = this.datasource.getPrometheusTime(this.range.from, false);\n      const end = this.datasource.getPrometheusTime(this.range.to, true);\n      url = '/api/v1/series?match[]=' + encodeURIComponent(metric) + '&start=' + start + '&end=' + end;\n\n      return this.datasource.metadataRequest(url).then(result => {\n        const _labels = _.map(result.data.data, metric => {\n          return metric[label] || '';\n        }).filter(label => {\n          return label !== '';\n        });\n\n        return _.uniq(_labels).map(metric => {\n          return {\n            text: metric,\n            expandable: true,\n          };\n        });\n      });\n    }\n  }\n\n  metricNameQuery(metricFilterPattern) {\n    const url = '/api/v1/label/__name__/values';\n\n    return this.datasource.metadataRequest(url).then(result => {\n      return _.chain(result.data.data)\n        .filter(metricName => {\n          const r = new RegExp(metricFilterPattern);\n          return r.test(metricName);\n        })\n        .map(matchedMetricName => {\n          return {\n            text: matchedMetricName,\n            expandable: true,\n          };\n        })\n        .value();\n    });\n  }\n\n  queryResultQuery(query) {\n    const end = this.datasource.getPrometheusTime(this.range.to, true);\n    return this.datasource.performInstantQuery({ expr: query }, end).then(result => {\n      return _.map(result.data.data.result, metricData => {\n        let text = metricData.metric.__name__ || '';\n        delete metricData.metric.__name__;\n        text +=\n          '{' +\n          _.map(metricData.metric, (v, k) => {\n            return k + '=\"' + v + '\"';\n          }).join(',') +\n          '}';\n        text += ' ' + metricData.value[1] + ' ' + metricData.value[0] * 1000;\n\n        return {\n          text: text,\n          expandable: true,\n        };\n      });\n    });\n  }\n\n  metricNameAndLabelsQuery(query) {\n    const start = this.datasource.getPrometheusTime(this.range.from, false);\n    const end = this.datasource.getPrometheusTime(this.range.to, true);\n    const url = '/api/v1/series?match[]=' + encodeURIComponent(query) + '&start=' + start + '&end=' + end;\n\n    const self = this;\n    return this.datasource.metadataRequest(url).then(result => {\n      return _.map(result.data.data, metric => {\n        return {\n          text: self.datasource.getOriginalMetricName(metric),\n          expandable: true,\n        };\n      });\n    });\n  }\n}\n","import _ from 'lodash';\nimport TableModel from 'app/core/table_model';\n\nexport class ResultTransformer {\n  constructor(private templateSrv) {}\n\n  transform(response: any, options: any): any[] {\n    const prometheusResult = response.data.data.result;\n\n    if (options.format === 'table') {\n      return [this.transformMetricDataToTable(prometheusResult, options.responseListLength, options.refId)];\n    } else if (options.format === 'heatmap') {\n      let seriesList = [];\n      prometheusResult.sort(sortSeriesByLabel);\n      for (const metricData of prometheusResult) {\n        seriesList.push(this.transformMetricData(metricData, options, options.start, options.end));\n      }\n      seriesList = this.transformToHistogramOverTime(seriesList);\n      return seriesList;\n    } else {\n      const seriesList = [];\n      for (const metricData of prometheusResult) {\n        if (response.data.data.resultType === 'matrix') {\n          seriesList.push(this.transformMetricData(metricData, options, options.start, options.end));\n        } else if (response.data.data.resultType === 'vector') {\n          seriesList.push(this.transformInstantMetricData(metricData, options));\n        }\n      }\n      return seriesList;\n    }\n    return [];\n  }\n\n  transformMetricData(metricData, options, start, end) {\n    const dps = [];\n    let metricLabel = null;\n\n    metricLabel = this.createMetricLabel(metricData.metric, options);\n\n    const stepMs = parseInt(options.step, 10) * 1000;\n    let baseTimestamp = start * 1000;\n\n    if (metricData.values === undefined) {\n      throw new Error('Prometheus heatmap error: data should be a time series');\n    }\n\n    for (const value of metricData.values) {\n      let dpValue = parseFloat(value[1]);\n      if (_.isNaN(dpValue)) {\n        dpValue = null;\n      }\n\n      const timestamp = parseFloat(value[0]) * 1000;\n      for (let t = baseTimestamp; t < timestamp; t += stepMs) {\n        dps.push([null, t]);\n      }\n      baseTimestamp = timestamp + stepMs;\n      dps.push([dpValue, timestamp]);\n    }\n\n    const endTimestamp = end * 1000;\n    for (let t = baseTimestamp; t <= endTimestamp; t += stepMs) {\n      dps.push([null, t]);\n    }\n\n    return {\n      datapoints: dps,\n      query: options.query,\n      responseIndex: options.responseIndex,\n      target: metricLabel,\n    };\n  }\n\n  transformMetricDataToTable(md, resultCount: number, refId: string) {\n    const table = new TableModel();\n    let i, j;\n    const metricLabels = {};\n\n    if (md.length === 0) {\n      return table;\n    }\n\n    // Collect all labels across all metrics\n    _.each(md, series => {\n      for (const label in series.metric) {\n        if (!metricLabels.hasOwnProperty(label)) {\n          metricLabels[label] = 1;\n        }\n      }\n    });\n\n    // Sort metric labels, create columns for them and record their index\n    const sortedLabels = _.keys(metricLabels).sort();\n    table.columns.push({ text: 'Time', type: 'time' });\n    _.each(sortedLabels, (label, labelIndex) => {\n      metricLabels[label] = labelIndex + 1;\n      table.columns.push({ text: label, filterable: !label.startsWith('__') });\n    });\n    const valueText = resultCount > 1 ? `Value #${refId}` : 'Value';\n    table.columns.push({ text: valueText });\n\n    // Populate rows, set value to empty string when label not present.\n    _.each(md, series => {\n      if (series.value) {\n        series.values = [series.value];\n      }\n      if (series.values) {\n        for (i = 0; i < series.values.length; i++) {\n          const values = series.values[i];\n          const reordered: any = [values[0] * 1000];\n          if (series.metric) {\n            for (j = 0; j < sortedLabels.length; j++) {\n              const label = sortedLabels[j];\n              if (series.metric.hasOwnProperty(label)) {\n                reordered.push(series.metric[label]);\n              } else {\n                reordered.push('');\n              }\n            }\n          }\n          reordered.push(parseFloat(values[1]));\n          table.rows.push(reordered);\n        }\n      }\n    });\n\n    return table;\n  }\n\n  transformInstantMetricData(md, options) {\n    const dps = [];\n    let metricLabel = null;\n    metricLabel = this.createMetricLabel(md.metric, options);\n    dps.push([parseFloat(md.value[1]), md.value[0] * 1000]);\n    return { target: metricLabel, datapoints: dps, labels: md.metric };\n  }\n\n  createMetricLabel(labelData, options) {\n    let label = '';\n    if (_.isUndefined(options) || _.isEmpty(options.legendFormat)) {\n      label = this.getOriginalMetricName(labelData);\n    } else {\n      label = this.renderTemplate(this.templateSrv.replace(options.legendFormat), labelData);\n    }\n    if (!label || label === '{}') {\n      label = options.query;\n    }\n    return label;\n  }\n\n  renderTemplate(aliasPattern, aliasData) {\n    const aliasRegex = /\\{\\{\\s*(.+?)\\s*\\}\\}/g;\n    return aliasPattern.replace(aliasRegex, (match, g1) => {\n      if (aliasData[g1]) {\n        return aliasData[g1];\n      }\n      return g1;\n    });\n  }\n\n  getOriginalMetricName(labelData) {\n    const metricName = labelData.__name__ || '';\n    delete labelData.__name__;\n    const labelPart = _.map(_.toPairs(labelData), label => {\n      return label[0] + '=\"' + label[1] + '\"';\n    }).join(',');\n    return metricName + '{' + labelPart + '}';\n  }\n\n  transformToHistogramOverTime(seriesList) {\n    /*      t1 = timestamp1, t2 = timestamp2 etc.\n            t1  t2  t3          t1  t2  t3\n    le10    10  10  0     =>    10  10  0\n    le20    20  10  30    =>    10  0   30\n    le30    30  10  35    =>    10  0   5\n    */\n    for (let i = seriesList.length - 1; i > 0; i--) {\n      const topSeries = seriesList[i].datapoints;\n      const bottomSeries = seriesList[i - 1].datapoints;\n      if (!topSeries || !bottomSeries) {\n        throw new Error('Prometheus heatmap transform error: data should be a time series');\n      }\n\n      for (let j = 0; j < topSeries.length; j++) {\n        const bottomPoint = bottomSeries[j] || [0];\n        topSeries[j][0] -= bottomPoint[0];\n      }\n    }\n\n    return seriesList;\n  }\n}\n\nfunction sortSeriesByLabel(s1, s2): number {\n  let le1, le2;\n\n  try {\n    // fail if not integer. might happen with bad queries\n    le1 = parseHistogramLabel(s1.metric.le);\n    le2 = parseHistogramLabel(s2.metric.le);\n  } catch (err) {\n    console.log(err);\n    return 0;\n  }\n\n  if (le1 > le2) {\n    return 1;\n  }\n\n  if (le1 < le2) {\n    return -1;\n  }\n\n  return 0;\n}\n\nfunction parseHistogramLabel(le: string): number {\n  if (le === '+Inf') {\n    return +Infinity;\n  }\n  return Number(le);\n}\n","import _ from 'lodash';\n\nimport $ from 'jquery';\nimport kbn from 'app/core/utils/kbn';\nimport * as dateMath from 'app/core/utils/datemath';\nimport PrometheusMetricFindQuery from './metric_find_query';\nimport { ResultTransformer } from './result_transformer';\nimport { BackendSrv } from 'app/core/services/backend_srv';\n\nexport function alignRange(start, end, step) {\n  const alignedEnd = Math.ceil(end / step) * step;\n  const alignedStart = Math.floor(start / step) * step;\n  return {\n    end: alignedEnd,\n    start: alignedStart,\n  };\n}\n\nconst keywords = 'by|without|on|ignoring|group_left|group_right';\n\n// Duplicate from mode-prometheus.js, which can't be used in tests due to global ace not being loaded.\nconst builtInWords = [\n  keywords,\n  'count|count_values|min|max|avg|sum|stddev|stdvar|bottomk|topk|quantile',\n  'true|false|null|__name__|job',\n  'abs|absent|ceil|changes|clamp_max|clamp_min|count_scalar|day_of_month|day_of_week|days_in_month|delta|deriv',\n  'drop_common_labels|exp|floor|histogram_quantile|holt_winters|hour|idelta|increase|irate|label_replace|ln|log2',\n  'log10|minute|month|predict_linear|rate|resets|round|scalar|sort|sort_desc|sqrt|time|vector|year|avg_over_time',\n  'min_over_time|max_over_time|sum_over_time|count_over_time|quantile_over_time|stddev_over_time|stdvar_over_time',\n]\n  .join('|')\n  .split('|');\n\n// addLabelToQuery('foo', 'bar', 'baz') => 'foo{bar=\"baz\"}'\nexport function addLabelToQuery(query: string, key: string, value: string): string {\n  if (!key || !value) {\n    throw new Error('Need label to add to query.');\n  }\n\n  // Add empty selector to bare metric name\n  let previousWord;\n  query = query.replace(/([A-Za-z]\\w*)\\b(?![\\(\\]{=\",])/g, (match, word, offset) => {\n    // Check if inside a selector\n    const nextSelectorStart = query.slice(offset).indexOf('{');\n    const nextSelectorEnd = query.slice(offset).indexOf('}');\n    const insideSelector = nextSelectorEnd > -1 && (nextSelectorStart === -1 || nextSelectorStart > nextSelectorEnd);\n    // Handle \"sum by (key) (metric)\"\n    const previousWordIsKeyWord = previousWord && keywords.split('|').indexOf(previousWord) > -1;\n    previousWord = word;\n    if (!insideSelector && !previousWordIsKeyWord && builtInWords.indexOf(word) === -1) {\n      return `${word}{}`;\n    }\n    return word;\n  });\n\n  // Adding label to existing selectors\n  const selectorRegexp = /{([^{]*)}/g;\n  let match = selectorRegexp.exec(query);\n  const parts = [];\n  let lastIndex = 0;\n  let suffix = '';\n\n  while (match) {\n    const prefix = query.slice(lastIndex, match.index);\n    const selectorParts = match[1].split(',');\n    const labels = selectorParts.reduce((acc, label) => {\n      const labelParts = label.split('=');\n      if (labelParts.length === 2) {\n        acc[labelParts[0]] = labelParts[1];\n      }\n      return acc;\n    }, {});\n    labels[key] = `\"${value}\"`;\n    const selector = Object.keys(labels)\n      .sort()\n      .map(key => `${key}=${labels[key]}`)\n      .join(',');\n    lastIndex = match.index + match[1].length + 2;\n    suffix = query.slice(match.index + match[0].length);\n    parts.push(prefix, '{', selector, '}');\n    match = selectorRegexp.exec(query);\n  }\n  parts.push(suffix);\n  return parts.join('');\n}\n\nexport function determineQueryHints(series: any[], datasource?: any): any[] {\n  const hints = series.map((s, i) => {\n    const query: string = s.query;\n    const index: number = s.responseIndex;\n    if (query === undefined || index === undefined) {\n      return null;\n    }\n\n    // ..._bucket metric needs a histogram_quantile()\n    const histogramMetric = query.trim().match(/^\\w+_bucket$/);\n    if (histogramMetric) {\n      const label = 'Time series has buckets, you probably wanted a histogram.';\n      return {\n        index,\n        label,\n        fix: {\n          label: 'Fix by adding histogram_quantile().',\n          action: {\n            type: 'ADD_HISTOGRAM_QUANTILE',\n            query,\n            index,\n          },\n        },\n      };\n    }\n\n    // Check for monotony\n    const datapoints: number[][] = s.datapoints;\n    if (datapoints.length > 1) {\n      let increasing = false;\n      const monotonic = datapoints.filter(dp => dp[0] !== null).every((dp, index) => {\n        if (index === 0) {\n          return true;\n        }\n        increasing = increasing || dp[0] > datapoints[index - 1][0];\n        // monotonic?\n        return dp[0] >= datapoints[index - 1][0];\n      });\n      if (increasing && monotonic) {\n        const simpleMetric = query.trim().match(/^\\w+$/);\n        let label = 'Time series is monotonously increasing.';\n        let fix;\n        if (simpleMetric) {\n          fix = {\n            label: 'Fix by adding rate().',\n            action: {\n              type: 'ADD_RATE',\n              query,\n              index,\n            },\n          };\n        } else {\n          label = `${label} Try applying a rate() function.`;\n        }\n        return {\n          label,\n          index,\n          fix,\n        };\n      }\n    }\n\n    // Check for recording rules expansion\n    if (datasource && datasource.ruleMappings) {\n      const mapping = datasource.ruleMappings;\n      const mappingForQuery = Object.keys(mapping).reduce((acc, ruleName) => {\n        if (query.search(ruleName) > -1) {\n          return {\n            ...acc,\n            [ruleName]: mapping[ruleName],\n          };\n        }\n        return acc;\n      }, {});\n      if (_.size(mappingForQuery) > 0) {\n        const label = 'Query contains recording rules.';\n        return {\n          label,\n          index,\n          fix: {\n            label: 'Expand rules',\n            action: {\n              type: 'EXPAND_RULES',\n              query,\n              index,\n              mapping: mappingForQuery,\n            },\n          },\n        };\n      }\n    }\n\n    // No hint found\n    return null;\n  });\n  return hints;\n}\n\nexport function extractRuleMappingFromGroups(groups: any[]) {\n  return groups.reduce(\n    (mapping, group) =>\n      group.rules.filter(rule => rule.type === 'recording').reduce(\n        (acc, rule) => ({\n          ...acc,\n          [rule.name]: rule.query,\n        }),\n        mapping\n      ),\n    {}\n  );\n}\n\nexport function prometheusRegularEscape(value) {\n  if (typeof value === 'string') {\n    return value.replace(/'/g, \"\\\\\\\\'\");\n  }\n  return value;\n}\n\nexport function prometheusSpecialRegexEscape(value) {\n  if (typeof value === 'string') {\n    return prometheusRegularEscape(value.replace(/\\\\/g, '\\\\\\\\\\\\\\\\').replace(/[$^*{}\\[\\]+?.()]/g, '\\\\\\\\$&'));\n  }\n  return value;\n}\n\nexport class PrometheusDatasource {\n  type: string;\n  editorSrc: string;\n  name: string;\n  ruleMappings: { [index: string]: string };\n  supportsExplore: boolean;\n  supportMetrics: boolean;\n  url: string;\n  directUrl: string;\n  basicAuth: any;\n  withCredentials: any;\n  metricsNameCache: any;\n  interval: string;\n  queryTimeout: string;\n  httpMethod: string;\n  resultTransformer: ResultTransformer;\n\n  /** @ngInject */\n  constructor(instanceSettings, private $q, private backendSrv: BackendSrv, private templateSrv, private timeSrv) {\n    this.type = 'prometheus';\n    this.editorSrc = 'app/features/prometheus/partials/query.editor.html';\n    this.name = instanceSettings.name;\n    this.supportsExplore = true;\n    this.supportMetrics = true;\n    this.url = instanceSettings.url;\n    this.directUrl = instanceSettings.directUrl;\n    this.basicAuth = instanceSettings.basicAuth;\n    this.withCredentials = instanceSettings.withCredentials;\n    this.interval = instanceSettings.jsonData.timeInterval || '15s';\n    this.queryTimeout = instanceSettings.jsonData.queryTimeout;\n    this.httpMethod = instanceSettings.jsonData.httpMethod || 'GET';\n    this.resultTransformer = new ResultTransformer(templateSrv);\n    this.ruleMappings = {};\n  }\n\n  init() {\n    this.loadRules();\n  }\n\n  _request(url, data?, options?: any) {\n    options = _.defaults(options || {}, {\n      url: this.url + url,\n      method: this.httpMethod,\n    });\n\n    if (options.method === 'GET') {\n      if (!_.isEmpty(data)) {\n        options.url =\n          options.url +\n          '?' +\n          _.map(data, (v, k) => {\n            return encodeURIComponent(k) + '=' + encodeURIComponent(v);\n          }).join('&');\n      }\n    } else {\n      options.headers = {\n        'Content-Type': 'application/x-www-form-urlencoded',\n      };\n      options.transformRequest = data => {\n        return $.param(data);\n      };\n      options.data = data;\n    }\n\n    if (this.basicAuth || this.withCredentials) {\n      options.withCredentials = true;\n    }\n\n    if (this.basicAuth) {\n      options.headers = {\n        Authorization: this.basicAuth,\n      };\n    }\n\n    return this.backendSrv.datasourceRequest(options);\n  }\n\n  // Use this for tab completion features, wont publish response to other components\n  metadataRequest(url) {\n    return this._request(url, null, { method: 'GET', silent: true });\n  }\n\n  interpolateQueryExpr(value, variable, defaultFormatFn) {\n    // if no multi or include all do not regexEscape\n    if (!variable.multi && !variable.includeAll) {\n      return prometheusRegularEscape(value);\n    }\n\n    if (typeof value === 'string') {\n      return prometheusSpecialRegexEscape(value);\n    }\n\n    const escapedValues = _.map(value, prometheusSpecialRegexEscape);\n    return escapedValues.join('|');\n  }\n\n  targetContainsTemplate(target) {\n    return this.templateSrv.variableExists(target.expr);\n  }\n\n  query(options) {\n    const start = this.getPrometheusTime(options.range.from, false);\n    const end = this.getPrometheusTime(options.range.to, true);\n\n    const queries = [];\n    const activeTargets = [];\n\n    options = _.clone(options);\n\n    for (const target of options.targets) {\n      if (!target.expr || target.hide) {\n        continue;\n      }\n\n      activeTargets.push(target);\n      queries.push(this.createQuery(target, options, start, end));\n    }\n\n    // No valid targets, return the empty result to save a round trip.\n    if (_.isEmpty(queries)) {\n      return this.$q.when({ data: [] });\n    }\n\n    const allQueryPromise = _.map(queries, query => {\n      if (!query.instant) {\n        return this.performTimeSeriesQuery(query, query.start, query.end);\n      } else {\n        return this.performInstantQuery(query, end);\n      }\n    });\n\n    return this.$q.all(allQueryPromise).then(responseList => {\n      let result = [];\n      let hints = [];\n\n      _.each(responseList, (response, index) => {\n        if (response.status === 'error') {\n          const error = {\n            index,\n            ...response.error,\n          };\n          throw error;\n        }\n\n        // Keeping original start/end for transformers\n        const transformerOptions = {\n          format: activeTargets[index].format,\n          step: queries[index].step,\n          legendFormat: activeTargets[index].legendFormat,\n          start: queries[index].start,\n          end: queries[index].end,\n          query: queries[index].expr,\n          responseListLength: responseList.length,\n          responseIndex: index,\n          refId: activeTargets[index].refId,\n        };\n        const series = this.resultTransformer.transform(response, transformerOptions);\n        result = [...result, ...series];\n\n        if (queries[index].hinting) {\n          const queryHints = determineQueryHints(series, this);\n          hints = [...hints, ...queryHints];\n        }\n      });\n\n      return { data: result, hints };\n    });\n  }\n\n  createQuery(target, options, start, end) {\n    const query: any = {\n      hinting: target.hinting,\n      instant: target.instant,\n    };\n    const range = Math.ceil(end - start);\n\n    let interval = kbn.interval_to_seconds(options.interval);\n    // Minimum interval (\"Min step\"), if specified for the query. or same as interval otherwise\n    const minInterval = kbn.interval_to_seconds(\n      this.templateSrv.replace(target.interval, options.scopedVars) || options.interval\n    );\n    const intervalFactor = target.intervalFactor || 1;\n    // Adjust the interval to take into account any specified minimum and interval factor plus Prometheus limits\n    const adjustedInterval = this.adjustInterval(interval, minInterval, range, intervalFactor);\n    let scopedVars = { ...options.scopedVars, ...this.getRangeScopedVars() };\n    // If the interval was adjusted, make a shallow copy of scopedVars with updated interval vars\n    if (interval !== adjustedInterval) {\n      interval = adjustedInterval;\n      scopedVars = Object.assign({}, options.scopedVars, {\n        __interval: { text: interval + 's', value: interval + 's' },\n        __interval_ms: { text: interval * 1000, value: interval * 1000 },\n        ...this.getRangeScopedVars(),\n      });\n    }\n    query.step = interval;\n\n    // Only replace vars in expression after having (possibly) updated interval vars\n    query.expr = this.templateSrv.replace(target.expr, scopedVars, this.interpolateQueryExpr);\n    query.requestId = options.panelId + target.refId;\n\n    // Align query interval with step\n    const adjusted = alignRange(start, end, query.step);\n    query.start = adjusted.start;\n    query.end = adjusted.end;\n\n    return query;\n  }\n\n  adjustInterval(interval, minInterval, range, intervalFactor) {\n    // Prometheus will drop queries that might return more than 11000 data points.\n    // Calibrate interval if it is too small.\n    if (interval !== 0 && range / intervalFactor / interval > 11000) {\n      interval = Math.ceil(range / intervalFactor / 11000);\n    }\n    return Math.max(interval * intervalFactor, minInterval, 1);\n  }\n\n  performTimeSeriesQuery(query, start, end) {\n    if (start > end) {\n      throw { message: 'Invalid time range' };\n    }\n\n    const url = '/api/v1/query_range';\n    const data = {\n      query: query.expr,\n      start: start,\n      end: end,\n      step: query.step,\n    };\n    if (this.queryTimeout) {\n      data['timeout'] = this.queryTimeout;\n    }\n    return this._request(url, data, { requestId: query.requestId });\n  }\n\n  performInstantQuery(query, time) {\n    const url = '/api/v1/query';\n    const data = {\n      query: query.expr,\n      time: time,\n    };\n    if (this.queryTimeout) {\n      data['timeout'] = this.queryTimeout;\n    }\n    return this._request(url, data, { requestId: query.requestId });\n  }\n\n  performSuggestQuery(query, cache = false) {\n    const url = '/api/v1/label/__name__/values';\n\n    if (cache && this.metricsNameCache && this.metricsNameCache.expire > Date.now()) {\n      return this.$q.when(\n        _.filter(this.metricsNameCache.data, metricName => {\n          return metricName.indexOf(query) !== 1;\n        })\n      );\n    }\n\n    return this.metadataRequest(url).then(result => {\n      this.metricsNameCache = {\n        data: result.data.data,\n        expire: Date.now() + 60 * 1000,\n      };\n      return _.filter(result.data.data, metricName => {\n        return metricName.indexOf(query) !== 1;\n      });\n    });\n  }\n\n  metricFindQuery(query) {\n    if (!query) {\n      return this.$q.when([]);\n    }\n\n    const scopedVars = {\n      __interval: { text: this.interval, value: this.interval },\n      __interval_ms: { text: kbn.interval_to_ms(this.interval), value: kbn.interval_to_ms(this.interval) },\n      ...this.getRangeScopedVars(),\n    };\n    const interpolated = this.templateSrv.replace(query, scopedVars, this.interpolateQueryExpr);\n    const metricFindQuery = new PrometheusMetricFindQuery(this, interpolated, this.timeSrv);\n    return metricFindQuery.process();\n  }\n\n  getRangeScopedVars() {\n    const range = this.timeSrv.timeRange();\n    const msRange = range.to.diff(range.from);\n    const sRange = Math.round(msRange / 1000);\n    const regularRange = kbn.secondsToHms(msRange / 1000);\n    return {\n      __range_ms: { text: msRange, value: msRange },\n      __range_s: { text: sRange, value: sRange },\n      __range: { text: regularRange, value: regularRange },\n    };\n  }\n\n  annotationQuery(options) {\n    const annotation = options.annotation;\n    const expr = annotation.expr || '';\n    let tagKeys = annotation.tagKeys || '';\n    const titleFormat = annotation.titleFormat || '';\n    const textFormat = annotation.textFormat || '';\n\n    if (!expr) {\n      return this.$q.when([]);\n    }\n\n    const step = annotation.step || '60s';\n    const start = this.getPrometheusTime(options.range.from, false);\n    const end = this.getPrometheusTime(options.range.to, true);\n    // Unsetting min interval\n    const queryOptions = {\n      ...options,\n      interval: '0s',\n    };\n    const query = this.createQuery({ expr, interval: step }, queryOptions, start, end);\n\n    const self = this;\n    return this.performTimeSeriesQuery(query, query.start, query.end).then(results => {\n      const eventList = [];\n      tagKeys = tagKeys.split(',');\n\n      _.each(results.data.data.result, series => {\n        const tags = _.chain(series.metric)\n          .filter((v, k) => {\n            return _.includes(tagKeys, k);\n          })\n          .value();\n\n        for (const value of series.values) {\n          if (value[1] === '1') {\n            const event = {\n              annotation: annotation,\n              time: Math.floor(parseFloat(value[0])) * 1000,\n              title: self.resultTransformer.renderTemplate(titleFormat, series.metric),\n              tags: tags,\n              text: self.resultTransformer.renderTemplate(textFormat, series.metric),\n            };\n\n            eventList.push(event);\n          }\n        }\n      });\n\n      return eventList;\n    });\n  }\n\n  testDatasource() {\n    const now = new Date().getTime();\n    return this.performInstantQuery({ expr: '1+1' }, now / 1000).then(response => {\n      if (response.data.status === 'success') {\n        return { status: 'success', message: 'Data source is working' };\n      } else {\n        return { status: 'error', message: response.error };\n      }\n    });\n  }\n\n  getExploreState(panel) {\n    let state = {};\n    if (panel.targets) {\n      const queries = panel.targets.map(t => ({\n        query: this.templateSrv.replace(t.expr, {}, this.interpolateQueryExpr),\n        format: t.format,\n      }));\n      state = {\n        ...state,\n        queries,\n        datasource: this.name,\n      };\n    }\n    return state;\n  }\n\n  loadRules() {\n    this.metadataRequest('/api/v1/rules')\n      .then(res => res.data || res.json())\n      .then(body => {\n        const groups = _.get(body, ['data', 'groups']);\n        if (groups) {\n          this.ruleMappings = extractRuleMappingFromGroups(groups);\n        }\n      })\n      .catch(e => {\n        console.log('Rules API is experimental. Ignore next error.');\n        console.error(e);\n      });\n  }\n\n  modifyQuery(query: string, action: any): string {\n    switch (action.type) {\n      case 'ADD_FILTER': {\n        return addLabelToQuery(query, action.key, action.value);\n      }\n      case 'ADD_HISTOGRAM_QUANTILE': {\n        return `histogram_quantile(0.95, sum(rate(${query}[5m])) by (le))`;\n      }\n      case 'ADD_RATE': {\n        return `rate(${query}[5m])`;\n      }\n      case 'EXPAND_RULES': {\n        const mapping = action.mapping;\n        if (mapping) {\n          const ruleNames = Object.keys(mapping);\n          const rulesRegex = new RegExp(`(\\\\s|^)(${ruleNames.join('|')})(\\\\s|$|\\\\()`, 'ig');\n          return query.replace(rulesRegex, (match, pre, name, post) => mapping[name]);\n        }\n      }\n      default:\n        return query;\n    }\n  }\n\n  getPrometheusTime(date, roundUp) {\n    if (_.isString(date)) {\n      date = dateMath.parse(date, roundUp);\n    }\n    return Math.ceil(date.valueOf() / 1000);\n  }\n\n  getOriginalMetricName(labelData) {\n    return this.resultTransformer.getOriginalMetricName(labelData);\n  }\n}\n","import { PrometheusDatasource } from './datasource';\nimport _ from 'lodash';\n\nexport class PromCompleter {\n  labelQueryCache: any;\n  labelNameCache: any;\n  labelValueCache: any;\n  templateVariableCompletions: any;\n\n  identifierRegexps = [/\\[/, /[a-zA-Z0-9_:]/];\n\n  constructor(private datasource: PrometheusDatasource, private templateSrv) {\n    this.labelQueryCache = {};\n    this.labelNameCache = {};\n    this.labelValueCache = {};\n    this.templateVariableCompletions = this.templateSrv.variables.map(variable => {\n      return {\n        caption: '$' + variable.name,\n        value: '$' + variable.name,\n        meta: 'variable',\n        score: Number.MAX_VALUE,\n      };\n    });\n  }\n\n  getCompletions(editor, session, pos, prefix, callback) {\n    const wrappedCallback = (err, completions) => {\n      completions = completions.concat(this.templateVariableCompletions);\n      return callback(err, completions);\n    };\n\n    const token = session.getTokenAt(pos.row, pos.column);\n\n    switch (token.type) {\n      case 'entity.name.tag.label-matcher':\n        this.getCompletionsForLabelMatcherName(session, pos).then(completions => {\n          wrappedCallback(null, completions);\n        });\n        return;\n      case 'string.quoted.label-matcher':\n        this.getCompletionsForLabelMatcherValue(session, pos).then(completions => {\n          wrappedCallback(null, completions);\n        });\n        return;\n      case 'entity.name.tag.label-list-matcher':\n        this.getCompletionsForBinaryOperator(session, pos).then(completions => {\n          wrappedCallback(null, completions);\n        });\n        return;\n    }\n\n    if (token.type === 'paren.lparen' && token.value === '[') {\n      const vectors = [];\n      for (const unit of ['s', 'm', 'h']) {\n        for (const value of [1, 5, 10, 30]) {\n          vectors.push({\n            caption: value + unit,\n            value: '[' + value + unit,\n            meta: 'range vector',\n          });\n        }\n      }\n\n      vectors.unshift({\n        caption: '$__interval_ms',\n        value: '[$__interval_ms',\n        meta: 'range vector',\n      });\n\n      vectors.unshift({\n        caption: '$__interval',\n        value: '[$__interval',\n        meta: 'range vector',\n      });\n\n      wrappedCallback(null, vectors);\n      return;\n    }\n\n    const query = prefix;\n\n    return this.datasource.performSuggestQuery(query, true).then(metricNames => {\n      wrappedCallback(\n        null,\n        metricNames.map(name => {\n          let value = name;\n          if (prefix === '(') {\n            value = '(' + name;\n          }\n\n          return {\n            caption: name,\n            value: value,\n            meta: 'metric',\n          };\n        })\n      );\n    });\n  }\n\n  getCompletionsForLabelMatcherName(session, pos) {\n    const metricName = this.findMetricName(session, pos.row, pos.column);\n    if (!metricName) {\n      return Promise.resolve(this.transformToCompletions(['__name__', 'instance', 'job'], 'label name'));\n    }\n\n    if (this.labelNameCache[metricName]) {\n      return Promise.resolve(this.labelNameCache[metricName]);\n    }\n\n    return this.getLabelNameAndValueForExpression(metricName, 'metricName').then(result => {\n      const labelNames = this.transformToCompletions(\n        _.uniq(\n          _.flatten(\n            result.map(r => {\n              return Object.keys(r.metric);\n            })\n          )\n        ),\n        'label name'\n      );\n      this.labelNameCache[metricName] = labelNames;\n      return Promise.resolve(labelNames);\n    });\n  }\n\n  getCompletionsForLabelMatcherValue(session, pos) {\n    const metricName = this.findMetricName(session, pos.row, pos.column);\n    if (!metricName) {\n      return Promise.resolve([]);\n    }\n\n    const labelNameToken = this.findToken(\n      session,\n      pos.row,\n      pos.column,\n      'entity.name.tag.label-matcher',\n      null,\n      'paren.lparen.label-matcher'\n    );\n    if (!labelNameToken) {\n      return Promise.resolve([]);\n    }\n    const labelName = labelNameToken.value;\n\n    if (this.labelValueCache[metricName] && this.labelValueCache[metricName][labelName]) {\n      return Promise.resolve(this.labelValueCache[metricName][labelName]);\n    }\n\n    return this.getLabelNameAndValueForExpression(metricName, 'metricName').then(result => {\n      const labelValues = this.transformToCompletions(\n        _.uniq(\n          result.map(r => {\n            return r.metric[labelName];\n          })\n        ),\n        'label value'\n      );\n      this.labelValueCache[metricName] = this.labelValueCache[metricName] || {};\n      this.labelValueCache[metricName][labelName] = labelValues;\n      return Promise.resolve(labelValues);\n    });\n  }\n\n  getCompletionsForBinaryOperator(session, pos) {\n    const keywordOperatorToken = this.findToken(session, pos.row, pos.column, 'keyword.control', null, 'identifier');\n    if (!keywordOperatorToken) {\n      return Promise.resolve([]);\n    }\n    let rparenToken, expr;\n    switch (keywordOperatorToken.value) {\n      case 'by':\n      case 'without':\n        rparenToken = this.findToken(\n          session,\n          keywordOperatorToken.row,\n          keywordOperatorToken.column,\n          'paren.rparen',\n          null,\n          'identifier'\n        );\n        if (!rparenToken) {\n          return Promise.resolve([]);\n        }\n        expr = this.findExpressionMatchedParen(session, rparenToken.row, rparenToken.column);\n        if (expr === '') {\n          return Promise.resolve([]);\n        }\n        return this.getLabelNameAndValueForExpression(expr, 'expression').then(result => {\n          const labelNames = this.transformToCompletions(\n            _.uniq(\n              _.flatten(\n                result.map(r => {\n                  return Object.keys(r.metric);\n                })\n              )\n            ),\n            'label name'\n          );\n          this.labelNameCache[expr] = labelNames;\n          return labelNames;\n        });\n      case 'on':\n      case 'ignoring':\n      case 'group_left':\n      case 'group_right':\n        const binaryOperatorToken = this.findToken(\n          session,\n          keywordOperatorToken.row,\n          keywordOperatorToken.column,\n          'keyword.operator.binary',\n          null,\n          'identifier'\n        );\n        if (!binaryOperatorToken) {\n          return Promise.resolve([]);\n        }\n        rparenToken = this.findToken(\n          session,\n          binaryOperatorToken.row,\n          binaryOperatorToken.column,\n          'paren.rparen',\n          null,\n          'identifier'\n        );\n        if (rparenToken) {\n          expr = this.findExpressionMatchedParen(session, rparenToken.row, rparenToken.column);\n          if (expr === '') {\n            return Promise.resolve([]);\n          }\n          return this.getLabelNameAndValueForExpression(expr, 'expression').then(result => {\n            const labelNames = this.transformToCompletions(\n              _.uniq(\n                _.flatten(\n                  result.map(r => {\n                    return Object.keys(r.metric);\n                  })\n                )\n              ),\n              'label name'\n            );\n            this.labelNameCache[expr] = labelNames;\n            return labelNames;\n          });\n        } else {\n          const metricName = this.findMetricName(session, binaryOperatorToken.row, binaryOperatorToken.column);\n          return this.getLabelNameAndValueForExpression(metricName, 'metricName').then(result => {\n            const labelNames = this.transformToCompletions(\n              _.uniq(\n                _.flatten(\n                  result.map(r => {\n                    return Object.keys(r.metric);\n                  })\n                )\n              ),\n              'label name'\n            );\n            this.labelNameCache[metricName] = labelNames;\n            return Promise.resolve(labelNames);\n          });\n        }\n    }\n\n    return Promise.resolve([]);\n  }\n\n  getLabelNameAndValueForExpression(expr, type) {\n    if (this.labelQueryCache[expr]) {\n      return Promise.resolve(this.labelQueryCache[expr]);\n    }\n    let query = expr;\n    if (type === 'metricName') {\n      let op = '=~';\n      if (/[a-zA-Z_:][a-zA-Z0-9_:]*/.test(expr)) {\n        op = '=';\n      }\n      query = '{__name__' + op + '\"' + expr + '\"}';\n    }\n    return this.datasource.performInstantQuery({ expr: query }, new Date().getTime() / 1000).then(response => {\n      this.labelQueryCache[expr] = response.data.data.result;\n      return response.data.data.result;\n    });\n  }\n\n  transformToCompletions(words, meta) {\n    return words.map(name => {\n      return {\n        caption: name,\n        value: name,\n        meta: meta,\n        score: Number.MAX_VALUE,\n      };\n    });\n  }\n\n  findMetricName(session, row, column) {\n    let metricName = '';\n\n    let tokens;\n    const nameLabelNameToken = this.findToken(\n      session,\n      row,\n      column,\n      'entity.name.tag.label-matcher',\n      '__name__',\n      'paren.lparen.label-matcher'\n    );\n    if (nameLabelNameToken) {\n      tokens = session.getTokens(nameLabelNameToken.row);\n      const nameLabelValueToken = tokens[nameLabelNameToken.index + 2];\n      if (nameLabelValueToken && nameLabelValueToken.type === 'string.quoted.label-matcher') {\n        metricName = nameLabelValueToken.value.slice(1, -1); // cut begin/end quotation\n      }\n    } else {\n      const metricNameToken = this.findToken(session, row, column, 'identifier', null, null);\n      if (metricNameToken) {\n        tokens = session.getTokens(metricNameToken.row);\n        metricName = metricNameToken.value;\n      }\n    }\n\n    return metricName;\n  }\n\n  findToken(session, row, column, target, value, guard) {\n    let tokens, idx;\n    // find index and get column of previous token\n    for (let r = row; r >= 0; r--) {\n      let c;\n      tokens = session.getTokens(r);\n      if (r === row) {\n        // current row\n        c = 0;\n        for (idx = 0; idx < tokens.length; idx++) {\n          const nc = c + tokens[idx].value.length;\n          if (nc >= column) {\n            break;\n          }\n          c = nc;\n        }\n      } else {\n        idx = tokens.length - 1;\n        c =\n          _.sum(\n            tokens.map(t => {\n              return t.value.length;\n            })\n          ) - tokens[tokens.length - 1].value.length;\n      }\n\n      for (; idx >= 0; idx--) {\n        if (tokens[idx].type === guard) {\n          return null;\n        }\n\n        if (tokens[idx].type === target && (!value || tokens[idx].value === value)) {\n          tokens[idx].row = r;\n          tokens[idx].column = c;\n          tokens[idx].index = idx;\n          return tokens[idx];\n        }\n        c -= tokens[idx].value.length;\n      }\n    }\n\n    return null;\n  }\n\n  findExpressionMatchedParen(session, row, column) {\n    let tokens, idx;\n    let deep = 1;\n    let expression = ')';\n    for (let r = row; r >= 0; r--) {\n      tokens = session.getTokens(r);\n      if (r === row) {\n        // current row\n        let c = 0;\n        for (idx = 0; idx < tokens.length; idx++) {\n          c += tokens[idx].value.length;\n          if (c >= column) {\n            break;\n          }\n        }\n      } else {\n        idx = tokens.length - 1;\n      }\n\n      for (; idx >= 0; idx--) {\n        expression = tokens[idx].value + expression;\n        if (tokens[idx].type === 'paren.rparen') {\n          deep++;\n        } else if (tokens[idx].type === 'paren.lparen') {\n          deep--;\n          if (deep === 0) {\n            return expression;\n          }\n        }\n      }\n    }\n\n    return expression;\n  }\n}\n","import angular from 'angular';\nimport _ from 'lodash';\nimport { QueryCtrl } from 'app/plugins/sdk';\nimport { PromCompleter } from './completer';\nimport './mode-prometheus';\nimport './snippets/prometheus';\n\nclass PrometheusQueryCtrl extends QueryCtrl {\n  static templateUrl = 'partials/query.editor.html';\n\n  metric: any;\n  resolutions: any;\n  formats: any;\n  instant: any;\n  oldTarget: any;\n  suggestMetrics: any;\n  getMetricsAutocomplete: any;\n  linkToPrometheus: any;\n\n  /** @ngInject */\n  constructor($scope, $injector, private templateSrv) {\n    super($scope, $injector);\n\n    const target = this.target;\n    target.expr = target.expr || '';\n    target.intervalFactor = target.intervalFactor || 1;\n    target.format = target.format || this.getDefaultFormat();\n\n    this.metric = '';\n    this.resolutions = _.map([1, 2, 3, 4, 5, 10], f => {\n      return { factor: f, label: '1/' + f };\n    });\n\n    this.formats = [\n      { text: 'Time series', value: 'time_series' },\n      { text: 'Table', value: 'table' },\n      { text: 'Heatmap', value: 'heatmap' },\n    ];\n\n    this.instant = false;\n\n    this.updateLink();\n  }\n\n  getCompleter(query) {\n    return new PromCompleter(this.datasource, this.templateSrv);\n  }\n\n  getDefaultFormat() {\n    if (this.panelCtrl.panel.type === 'table') {\n      return 'table';\n    } else if (this.panelCtrl.panel.type === 'heatmap') {\n      return 'heatmap';\n    }\n\n    return 'time_series';\n  }\n\n  refreshMetricData() {\n    if (!_.isEqual(this.oldTarget, this.target)) {\n      this.oldTarget = angular.copy(this.target);\n      this.panelCtrl.refresh();\n      this.updateLink();\n    }\n  }\n\n  updateLink() {\n    const range = this.panelCtrl.range;\n    if (!range) {\n      return;\n    }\n\n    const rangeDiff = Math.ceil((range.to.valueOf() - range.from.valueOf()) / 1000);\n    const endTime = range.to.utc().format('YYYY-MM-DD HH:mm');\n    const expr = {\n      'g0.expr': this.templateSrv.replace(\n        this.target.expr,\n        this.panelCtrl.panel.scopedVars,\n        this.datasource.interpolateQueryExpr\n      ),\n      'g0.range_input': rangeDiff + 's',\n      'g0.end_input': endTime,\n      'g0.step_input': this.target.step,\n      'g0.stacked': this.panelCtrl.panel.stack ? 1 : 0,\n      'g0.tab': 0,\n    };\n    const args = _.map(expr, (v, k) => {\n      return k + '=' + encodeURIComponent(v);\n    }).join('&');\n    this.linkToPrometheus = this.datasource.directUrl + '/graph?' + args;\n  }\n\n  getCollapsedText() {\n    return this.target.expr;\n  }\n}\n\nexport { PrometheusQueryCtrl };\n","export class PrometheusConfigCtrl {\n  static templateUrl = 'public/app/plugins/datasource/prometheus/partials/config.html';\n  current: any;\n\n  /** @ngInject */\n  constructor($scope) {\n    this.current.jsonData.httpMethod = this.current.jsonData.httpMethod || 'GET';\n  }\n}\n","import { PrometheusDatasource } from './datasource';\nimport { PrometheusQueryCtrl } from './query_ctrl';\nimport { PrometheusConfigCtrl } from './config_ctrl';\n\nclass PrometheusAnnotationsQueryCtrl {\n  static templateUrl = 'partials/annotations.editor.html';\n}\n\nexport {\n  PrometheusDatasource as Datasource,\n  PrometheusQueryCtrl as QueryCtrl,\n  PrometheusConfigCtrl as ConfigCtrl,\n  PrometheusAnnotationsQueryCtrl as AnnotationsQueryCtrl,\n};\n","import _ from 'lodash';\n\nexport default class ResponseParser {\n  constructor(private $q) {}\n\n  processQueryResult(res) {\n    const data = [];\n\n    if (!res.data.results) {\n      return { data: data };\n    }\n\n    for (const key in res.data.results) {\n      const queryRes = res.data.results[key];\n\n      if (queryRes.series) {\n        for (const series of queryRes.series) {\n          data.push({\n            target: series.name,\n            datapoints: series.points,\n            refId: queryRes.refId,\n            meta: queryRes.meta,\n          });\n        }\n      }\n\n      if (queryRes.tables) {\n        for (const table of queryRes.tables) {\n          table.type = 'table';\n          table.refId = queryRes.refId;\n          table.meta = queryRes.meta;\n          data.push(table);\n        }\n      }\n    }\n\n    return { data: data };\n  }\n\n  parseMetricFindQueryResult(refId, results) {\n    if (!results || results.data.length === 0 || results.data.results[refId].meta.rowCount === 0) {\n      return [];\n    }\n\n    const columns = results.data.results[refId].tables[0].columns;\n    const rows = results.data.results[refId].tables[0].rows;\n    const textColIndex = this.findColIndex(columns, '__text');\n    const valueColIndex = this.findColIndex(columns, '__value');\n\n    if (columns.length === 2 && textColIndex !== -1 && valueColIndex !== -1) {\n      return this.transformToKeyValueList(rows, textColIndex, valueColIndex);\n    }\n\n    return this.transformToSimpleList(rows);\n  }\n\n  transformToKeyValueList(rows, textColIndex, valueColIndex) {\n    const res = [];\n\n    for (let i = 0; i < rows.length; i++) {\n      if (!this.containsKey(res, rows[i][textColIndex])) {\n        res.push({ text: rows[i][textColIndex], value: rows[i][valueColIndex] });\n      }\n    }\n\n    return res;\n  }\n\n  transformToSimpleList(rows) {\n    const res = [];\n\n    for (let i = 0; i < rows.length; i++) {\n      for (let j = 0; j < rows[i].length; j++) {\n        const value = rows[i][j];\n        if (res.indexOf(value) === -1) {\n          res.push(value);\n        }\n      }\n    }\n\n    return _.map(res, value => {\n      return { text: value };\n    });\n  }\n\n  findColIndex(columns, colName) {\n    for (let i = 0; i < columns.length; i++) {\n      if (columns[i].text === colName) {\n        return i;\n      }\n    }\n\n    return -1;\n  }\n\n  containsKey(res, key) {\n    for (let i = 0; i < res.length; i++) {\n      if (res[i].text === key) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  transformAnnotationResponse(options, data) {\n    const table = data.data.results[options.annotation.name].tables[0];\n\n    let timeColumnIndex = -1;\n    let textColumnIndex = -1;\n    let tagsColumnIndex = -1;\n\n    for (let i = 0; i < table.columns.length; i++) {\n      if (table.columns[i].text === 'time') {\n        timeColumnIndex = i;\n      } else if (table.columns[i].text === 'text') {\n        textColumnIndex = i;\n      } else if (table.columns[i].text === 'tags') {\n        tagsColumnIndex = i;\n      }\n    }\n\n    if (timeColumnIndex === -1) {\n      return this.$q.reject({ message: 'Missing mandatory time column (with time column alias) in annotation query.' });\n    }\n\n    const list = [];\n    for (let i = 0; i < table.rows.length; i++) {\n      const row = table.rows[i];\n      list.push({\n        annotation: options.annotation,\n        time: Math.floor(row[timeColumnIndex]),\n        text: row[textColumnIndex],\n        tags: row[tagsColumnIndex] ? row[tagsColumnIndex].trim().split(/\\s*,\\s*/) : [],\n      });\n    }\n\n    return list;\n  }\n}\n","import _ from 'lodash';\nimport ResponseParser from './response_parser';\n\nexport class MssqlDatasource {\n  id: any;\n  name: any;\n  responseParser: ResponseParser;\n  interval: string;\n\n  /** @ngInject */\n  constructor(instanceSettings, private backendSrv, private $q, private templateSrv) {\n    this.name = instanceSettings.name;\n    this.id = instanceSettings.id;\n    this.responseParser = new ResponseParser(this.$q);\n    this.interval = (instanceSettings.jsonData || {}).timeInterval;\n  }\n\n  interpolateVariable(value, variable) {\n    if (typeof value === 'string') {\n      if (variable.multi || variable.includeAll) {\n        return \"'\" + value.replace(/'/g, `''`) + \"'\";\n      } else {\n        return value;\n      }\n    }\n\n    if (typeof value === 'number') {\n      return value;\n    }\n\n    const quotedValues = _.map(value, val => {\n      if (typeof value === 'number') {\n        return value;\n      }\n\n      return \"'\" + val.replace(/'/g, `''`) + \"'\";\n    });\n    return quotedValues.join(',');\n  }\n\n  query(options) {\n    const queries = _.filter(options.targets, item => {\n      return item.hide !== true;\n    }).map(item => {\n      return {\n        refId: item.refId,\n        intervalMs: options.intervalMs,\n        maxDataPoints: options.maxDataPoints,\n        datasourceId: this.id,\n        rawSql: this.templateSrv.replace(item.rawSql, options.scopedVars, this.interpolateVariable),\n        format: item.format,\n      };\n    });\n\n    if (queries.length === 0) {\n      return this.$q.when({ data: [] });\n    }\n\n    return this.backendSrv\n      .datasourceRequest({\n        url: '/api/tsdb/query',\n        method: 'POST',\n        data: {\n          from: options.range.from.valueOf().toString(),\n          to: options.range.to.valueOf().toString(),\n          queries: queries,\n        },\n      })\n      .then(this.responseParser.processQueryResult);\n  }\n\n  annotationQuery(options) {\n    if (!options.annotation.rawQuery) {\n      return this.$q.reject({ message: 'Query missing in annotation definition' });\n    }\n\n    const query = {\n      refId: options.annotation.name,\n      datasourceId: this.id,\n      rawSql: this.templateSrv.replace(options.annotation.rawQuery, options.scopedVars, this.interpolateVariable),\n      format: 'table',\n    };\n\n    return this.backendSrv\n      .datasourceRequest({\n        url: '/api/tsdb/query',\n        method: 'POST',\n        data: {\n          from: options.range.from.valueOf().toString(),\n          to: options.range.to.valueOf().toString(),\n          queries: [query],\n        },\n      })\n      .then(data => this.responseParser.transformAnnotationResponse(options, data));\n  }\n\n  metricFindQuery(query, optionalOptions) {\n    let refId = 'tempvar';\n    if (optionalOptions && optionalOptions.variable && optionalOptions.variable.name) {\n      refId = optionalOptions.variable.name;\n    }\n\n    const interpolatedQuery = {\n      refId: refId,\n      datasourceId: this.id,\n      rawSql: this.templateSrv.replace(query, {}, this.interpolateVariable),\n      format: 'table',\n    };\n\n    return this.backendSrv\n      .datasourceRequest({\n        url: '/api/tsdb/query',\n        method: 'POST',\n        data: {\n          queries: [interpolatedQuery],\n        },\n      })\n      .then(data => this.responseParser.parseMetricFindQueryResult(refId, data));\n  }\n\n  testDatasource() {\n    return this.backendSrv\n      .datasourceRequest({\n        url: '/api/tsdb/query',\n        method: 'POST',\n        data: {\n          from: '5m',\n          to: 'now',\n          queries: [\n            {\n              refId: 'A',\n              intervalMs: 1,\n              maxDataPoints: 1,\n              datasourceId: this.id,\n              rawSql: 'SELECT 1',\n              format: 'table',\n            },\n          ],\n        },\n      })\n      .then(res => {\n        return { status: 'success', message: 'Database Connection OK' };\n      })\n      .catch(err => {\n        console.log(err);\n        if (err.data && err.data.message) {\n          return { status: 'error', message: err.data.message };\n        } else {\n          return { status: 'error', message: err.status };\n        }\n      });\n  }\n}\n","import _ from 'lodash';\nimport { QueryCtrl } from 'app/plugins/sdk';\n\nexport interface MssqlQuery {\n  refId: string;\n  format: string;\n  alias: string;\n  rawSql: string;\n}\n\nexport interface QueryMeta {\n  sql: string;\n}\n\nconst defaultQuery = `SELECT\n  $__timeEpoch(<time_column>),\n  <value column> as value,\n  <series name column> as metric\nFROM\n  <table name>\nWHERE\n  $__timeFilter(time_column)\nORDER BY\n  <time_column> ASC`;\n\nexport class MssqlQueryCtrl extends QueryCtrl {\n  static templateUrl = 'partials/query.editor.html';\n\n  showLastQuerySQL: boolean;\n  formats: any[];\n  target: MssqlQuery;\n  lastQueryMeta: QueryMeta;\n  lastQueryError: string;\n  showHelp: boolean;\n\n  /** @ngInject */\n  constructor($scope, $injector) {\n    super($scope, $injector);\n\n    this.target.format = this.target.format || 'time_series';\n    this.target.alias = '';\n    this.formats = [{ text: 'Time series', value: 'time_series' }, { text: 'Table', value: 'table' }];\n\n    if (!this.target.rawSql) {\n      // special handling when in table panel\n      if (this.panelCtrl.panel.type === 'table') {\n        this.target.format = 'table';\n        this.target.rawSql = 'SELECT 1';\n      } else {\n        this.target.rawSql = defaultQuery;\n      }\n    }\n\n    this.panelCtrl.events.on('data-received', this.onDataReceived.bind(this), $scope);\n    this.panelCtrl.events.on('data-error', this.onDataError.bind(this), $scope);\n  }\n\n  onDataReceived(dataList) {\n    this.lastQueryMeta = null;\n    this.lastQueryError = null;\n\n    const anySeriesFromQuery = _.find(dataList, { refId: this.target.refId });\n    if (anySeriesFromQuery) {\n      this.lastQueryMeta = anySeriesFromQuery.meta;\n    }\n  }\n\n  onDataError(err) {\n    if (err.data && err.data.results) {\n      const queryRes = err.data.results[this.target.refId];\n      if (queryRes) {\n        this.lastQueryMeta = queryRes.meta;\n        this.lastQueryError = queryRes.error;\n      }\n    }\n  }\n}\n","import { MssqlDatasource } from './datasource';\nimport { MssqlQueryCtrl } from './query_ctrl';\n\nclass MssqlConfigCtrl {\n  static templateUrl = 'partials/config.html';\n}\n\nconst defaultQuery = `SELECT\n    <time_column> as time,\n    <text_column> as text,\n    <tags_column> as tags\n  FROM\n    <table name>\n  WHERE\n    $__timeFilter(time_column)\n  ORDER BY\n    <time_column> ASC`;\n\nclass MssqlAnnotationsQueryCtrl {\n  static templateUrl = 'partials/annotations.editor.html';\n\n  annotation: any;\n\n  /** @ngInject */\n  constructor() {\n    this.annotation.rawQuery = this.annotation.rawQuery || defaultQuery;\n  }\n}\n\nexport {\n  MssqlDatasource,\n  MssqlDatasource as Datasource,\n  MssqlQueryCtrl as QueryCtrl,\n  MssqlConfigCtrl as ConfigCtrl,\n  MssqlAnnotationsQueryCtrl as AnnotationsQueryCtrl,\n};\n","import _ from 'lodash';\n\nclass TestDataDatasource {\n  id: any;\n\n  /** @ngInject */\n  constructor(instanceSettings, private backendSrv, private $q) {\n    this.id = instanceSettings.id;\n  }\n\n  query(options) {\n    const queries = _.filter(options.targets, item => {\n      return item.hide !== true;\n    }).map(item => {\n      return {\n        refId: item.refId,\n        scenarioId: item.scenarioId,\n        intervalMs: options.intervalMs,\n        maxDataPoints: options.maxDataPoints,\n        stringInput: item.stringInput,\n        points: item.points,\n        alias: item.alias,\n        datasourceId: this.id,\n      };\n    });\n\n    if (queries.length === 0) {\n      return this.$q.when({ data: [] });\n    }\n\n    return this.backendSrv\n      .post('/api/tsdb/query', {\n        from: options.range.from.valueOf().toString(),\n        to: options.range.to.valueOf().toString(),\n        queries: queries,\n      })\n      .then(res => {\n        const data = [];\n\n        if (res.results) {\n          _.forEach(res.results, queryRes => {\n            for (const series of queryRes.series) {\n              data.push({\n                target: series.name,\n                datapoints: series.points,\n              });\n            }\n          });\n        }\n\n        return { data: data };\n      });\n  }\n\n  annotationQuery(options) {\n    return this.backendSrv.get('/api/annotations', {\n      from: options.range.from.valueOf(),\n      to: options.range.to.valueOf(),\n      limit: options.limit,\n      type: options.type,\n    });\n  }\n}\n\nexport { TestDataDatasource };\n","import _ from 'lodash';\n\nimport { QueryCtrl } from 'app/plugins/sdk';\nimport moment from 'moment';\n\nexport class TestDataQueryCtrl extends QueryCtrl {\n  static templateUrl = 'partials/query.editor.html';\n\n  scenarioList: any;\n  scenario: any;\n  newPointValue: number;\n  newPointTime: any;\n  selectedPoint: any;\n\n  /** @ngInject */\n  constructor($scope, $injector, private backendSrv) {\n    super($scope, $injector);\n\n    this.target.scenarioId = this.target.scenarioId || 'random_walk';\n    this.scenarioList = [];\n    this.newPointTime = moment();\n    this.selectedPoint = { text: 'Select point', value: null };\n  }\n\n  getPoints() {\n    return _.map(this.target.points, (point, index) => {\n      return {\n        text: moment(point[1]).format('MMMM Do YYYY, H:mm:ss') + ' : ' + point[0],\n        value: index,\n      };\n    });\n  }\n\n  pointSelected(option) {\n    this.selectedPoint = option;\n  }\n\n  deletePoint() {\n    this.target.points.splice(this.selectedPoint.value, 1);\n    this.selectedPoint = { text: 'Select point', value: null };\n    this.refresh();\n  }\n\n  addPoint() {\n    this.target.points = this.target.points || [];\n    this.target.points.push([this.newPointValue, this.newPointTime.valueOf()]);\n    this.target.points = _.sortBy(this.target.points, p => p[1]);\n    this.refresh();\n  }\n\n  $onInit() {\n    return this.backendSrv.get('/api/tsdb/testdata/scenarios').then(res => {\n      this.scenarioList = res;\n      this.scenario = _.find(this.scenarioList, { id: this.target.scenarioId });\n    });\n  }\n\n  scenarioChanged() {\n    this.scenario = _.find(this.scenarioList, { id: this.target.scenarioId });\n    this.target.stringInput = this.scenario.stringInput;\n\n    if (this.target.scenarioId === 'manual_entry') {\n      this.target.points = this.target.points || [];\n    } else {\n      delete this.target.points;\n    }\n\n    this.refresh();\n  }\n}\n","import { TestDataDatasource } from './datasource';\nimport { TestDataQueryCtrl } from './query_ctrl';\n\nclass TestDataAnnotationsQueryCtrl {\n  annotation: any;\n\n  constructor() {}\n\n  static template = '<h2>test data</h2>';\n}\n\nexport {\n  TestDataDatasource,\n  TestDataDatasource as Datasource,\n  TestDataQueryCtrl as QueryCtrl,\n  TestDataAnnotationsQueryCtrl as AnnotationsQueryCtrl,\n};\n","import _ from 'lodash';\nimport { PanelCtrl } from 'app/plugins/sdk';\nimport Remarkable from 'remarkable';\n\nexport class TextPanelCtrl extends PanelCtrl {\n  static templateUrl = `public/app/plugins/panel/text/module.html`;\n  static scrollable = true;\n\n  remarkable: any;\n  content: string;\n  // Set and populate defaults\n  panelDefaults = {\n    mode: 'markdown', // 'html', 'markdown', 'text'\n    content: '# title',\n  };\n\n  /** @ngInject */\n  constructor($scope, $injector, private templateSrv, private $sce) {\n    super($scope, $injector);\n\n    _.defaults(this.panel, this.panelDefaults);\n\n    this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n    this.events.on('refresh', this.onRefresh.bind(this));\n    this.events.on('render', this.onRender.bind(this));\n\n    $scope.$watch(\n      'ctrl.panel.content',\n      _.throttle(() => {\n        this.render();\n      }, 1000)\n    );\n  }\n\n  onInitEditMode() {\n    this.addEditorTab('选项', 'public/app/plugins/panel/text/editor.html');\n    this.editorTabIndex = 1;\n\n    if (this.panel.mode === 'text') {\n      this.panel.mode = 'markdown';\n    }\n  }\n\n  onRefresh() {\n    this.render();\n  }\n\n  onRender() {\n    if (this.panel.mode === 'markdown') {\n      this.renderMarkdown(this.panel.content);\n    } else if (this.panel.mode === 'html') {\n      this.updateContent(this.panel.content);\n    }\n    this.renderingCompleted();\n  }\n\n  renderText(content) {\n    content = content\n      .replace(/&/g, '&amp;')\n      .replace(/>/g, '&gt;')\n      .replace(/</g, '&lt;')\n      .replace(/\\n/g, '<br/>');\n    this.updateContent(content);\n  }\n\n  renderMarkdown(content) {\n    if (!this.remarkable) {\n      this.remarkable = new Remarkable();\n    }\n\n    this.$scope.$applyAsync(() => {\n      this.updateContent(this.remarkable.render(content));\n    });\n  }\n\n  updateContent(html) {\n    try {\n      this.content = this.$sce.trustAsHtml(this.templateSrv.replace(html, this.panel.scopedVars));\n    } catch (e) {\n      console.log('Text panel error: ', e);\n      this.content = this.$sce.trustAsHtml(html);\n    }\n  }\n}\n\nexport { TextPanelCtrl as PanelCtrl };\n","import angular from 'angular';\nimport $ from 'jquery';\nimport _ from 'lodash';\nimport Drop from 'tether-drop';\n\n/** @ngInject */\nexport function createAnnotationToolip(element, event, plot) {\n  const injector = angular.element(document).injector();\n  const content = document.createElement('div');\n  content.innerHTML = '<annotation-tooltip event=\"event\" on-edit=\"onEdit()\"></annotation-tooltip>';\n\n  injector.invoke([\n    '$compile',\n    '$rootScope',\n    ($compile, $rootScope) => {\n      const eventManager = plot.getOptions().events.manager;\n      const tmpScope = $rootScope.$new(true);\n      tmpScope.event = event;\n      tmpScope.onEdit = () => {\n        eventManager.editEvent(event);\n      };\n\n      $compile(content)(tmpScope);\n      tmpScope.$digest();\n      tmpScope.$destroy();\n\n      const drop = new Drop({\n        target: element[0],\n        content: content,\n        position: 'bottom center',\n        classes: 'drop-popover drop-popover--annotation',\n        openOn: 'hover',\n        hoverCloseDelay: 200,\n        tetherOptions: {\n          constraints: [{ to: 'window', pin: true, attachment: 'both' }],\n        },\n      });\n\n      drop.open();\n\n      drop.on('close', () => {\n        setTimeout(() => {\n          drop.destroy();\n        });\n      });\n    },\n  ]);\n}\n\nlet markerElementToAttachTo = null;\n\n/** @ngInject */\nexport function createEditPopover(element, event, plot) {\n  const eventManager = plot.getOptions().events.manager;\n  if (eventManager.editorOpen) {\n    // update marker element to attach to (needed in case of legend on the right\n    // when there is a double render pass and the inital marker element is removed)\n    markerElementToAttachTo = element;\n    return;\n  }\n\n  // mark as openend\n  eventManager.editorOpened();\n  // set marker elment to attache to\n  markerElementToAttachTo = element;\n\n  // wait for element to be attached and positioned\n  setTimeout(() => {\n    const injector = angular.element(document).injector();\n    const content = document.createElement('div');\n    content.innerHTML = '<event-editor panel-ctrl=\"panelCtrl\" event=\"event\" close=\"close()\"></event-editor>';\n\n    injector.invoke([\n      '$compile',\n      '$rootScope',\n      ($compile, $rootScope) => {\n        const scope = $rootScope.$new(true);\n        let drop;\n\n        scope.event = event;\n        scope.panelCtrl = eventManager.panelCtrl;\n        scope.close = () => {\n          drop.close();\n        };\n\n        $compile(content)(scope);\n        scope.$digest();\n\n        drop = new Drop({\n          target: markerElementToAttachTo[0],\n          content: content,\n          position: 'bottom center',\n          classes: 'drop-popover drop-popover--form',\n          openOn: 'click',\n          tetherOptions: {\n            constraints: [{ to: 'window', pin: true, attachment: 'both' }],\n          },\n        });\n\n        drop.open();\n        eventManager.editorOpened();\n\n        drop.on('close', () => {\n          // need timeout here in order call drop.destroy\n          setTimeout(() => {\n            eventManager.editorClosed();\n            scope.$destroy();\n            drop.destroy();\n          });\n        });\n      },\n    ]);\n  }, 100);\n}\n\n/*\n * jquery.flot.events\n *\n * description: Flot plugin for adding events/markers to the plot\n * version: 0.2.5\n * authors:\n *    Alexander Wunschik <alex@wunschik.net>\n *    Joel Oughton <joeloughton@gmail.com>\n *    Nicolas Joseph <www.nicolasjoseph.com>\n *\n * website: https://github.com/mojoaxel/flot-events\n *\n * released under MIT License and GPLv2+\n */\n\n/**\n * A class that allows for the drawing an remove of some object\n */\nexport class DrawableEvent {\n  _object: any;\n  _drawFunc: any;\n  _clearFunc: any;\n  _moveFunc: any;\n  _position: any;\n  _width: any;\n  _height: any;\n\n  /** @ngInject */\n  constructor(object, drawFunc, clearFunc, moveFunc, left, top, width, height) {\n    this._object = object;\n    this._drawFunc = drawFunc;\n    this._clearFunc = clearFunc;\n    this._moveFunc = moveFunc;\n    this._position = { left: left, top: top };\n    this._width = width;\n    this._height = height;\n  }\n\n  width() {\n    return this._width;\n  }\n  height() {\n    return this._height;\n  }\n  position() {\n    return this._position;\n  }\n  draw() {\n    this._drawFunc(this._object);\n  }\n  clear() {\n    this._clearFunc(this._object);\n  }\n  getObject() {\n    return this._object;\n  }\n  moveTo(position) {\n    this._position = position;\n    this._moveFunc(this._object, this._position);\n  }\n}\n\n/**\n * Event class that stores options (eventType, min, max, title, description) and the object to draw.\n */\nexport class VisualEvent {\n  _parent: any;\n  _options: any;\n  _drawableEvent: any;\n  _hidden: any;\n\n  /** @ngInject */\n  constructor(options, drawableEvent) {\n    this._options = options;\n    this._drawableEvent = drawableEvent;\n    this._hidden = false;\n  }\n\n  visual() {\n    return this._drawableEvent;\n  }\n  getOptions() {\n    return this._options;\n  }\n  getParent() {\n    return this._parent;\n  }\n  isHidden() {\n    return this._hidden;\n  }\n  hide() {\n    this._hidden = true;\n  }\n  unhide() {\n    this._hidden = false;\n  }\n}\n\n/**\n * A Class that handles the event-markers inside the given plot\n */\nexport class EventMarkers {\n  _events: any;\n  _types: any;\n  _plot: any;\n  eventsEnabled: any;\n\n  /** @ngInject */\n  constructor(plot) {\n    this._events = [];\n    this._types = [];\n    this._plot = plot;\n    this.eventsEnabled = false;\n  }\n\n  getEvents() {\n    return this._events;\n  }\n\n  setTypes(types) {\n    return (this._types = types);\n  }\n\n  /**\n   * create internal objects for the given events\n   */\n  setupEvents(events) {\n    const parts = _.partition(events, 'isRegion');\n    const regions = parts[0];\n    events = parts[1];\n\n    $.each(events, (index, event) => {\n      const ve = new VisualEvent(event, this._buildDiv(event));\n      this._events.push(ve);\n    });\n\n    $.each(regions, (index, event) => {\n      const vre = new VisualEvent(event, this._buildRegDiv(event));\n      this._events.push(vre);\n    });\n\n    this._events.sort((a, b) => {\n      const ao = a.getOptions(),\n        bo = b.getOptions();\n      if (ao.min > bo.min) {\n        return 1;\n      }\n      if (ao.min < bo.min) {\n        return -1;\n      }\n      return 0;\n    });\n  }\n\n  /**\n   * draw the events to the plot\n   */\n  drawEvents() {\n    // var o = this._plot.getPlotOffset();\n\n    $.each(this._events, (index, event) => {\n      // check event is inside the graph range\n      if (this._insidePlot(event.getOptions().min) && !event.isHidden()) {\n        event.visual().draw();\n      } else {\n        event\n          .visual()\n          .getObject()\n          .hide();\n      }\n    });\n  }\n\n  /**\n   * update the position of the event-markers (e.g. after scrolling or zooming)\n   */\n  updateEvents() {\n    const o = this._plot.getPlotOffset();\n    let left;\n    let top;\n    const xaxis = this._plot.getXAxes()[this._plot.getOptions().events.xaxis - 1];\n\n    $.each(this._events, (index, event) => {\n      top = o.top + this._plot.height() - event.visual().height();\n      left = xaxis.p2c(event.getOptions().min) + o.left - event.visual().width() / 2;\n      event.visual().moveTo({ top: top, left: left });\n    });\n  }\n\n  /**\n   * remove all events from the plot\n   */\n  _clearEvents() {\n    $.each(this._events, (index, val) => {\n      val.visual().clear();\n    });\n    this._events = [];\n  }\n\n  /**\n   * create a DOM element for the given event\n   */\n  _buildDiv(event) {\n    const that = this;\n\n    const container = this._plot.getPlaceholder();\n    const o = this._plot.getPlotOffset();\n    const xaxis = this._plot.getXAxes()[this._plot.getOptions().events.xaxis - 1];\n    let top, left, color, markerSize, markerShow, lineStyle, lineWidth;\n    let markerTooltip;\n\n    // map the eventType to a types object\n    const eventTypeId = event.eventType;\n\n    if (this._types === null || !this._types[eventTypeId] || !this._types[eventTypeId].color) {\n      color = '#666';\n    } else {\n      color = this._types[eventTypeId].color;\n    }\n\n    if (this._types === null || !this._types[eventTypeId] || !this._types[eventTypeId].markerSize) {\n      markerSize = 8; //default marker size\n    } else {\n      markerSize = this._types[eventTypeId].markerSize;\n    }\n\n    if (this._types === null || !this._types[eventTypeId] || this._types[eventTypeId].markerShow === undefined) {\n      markerShow = true;\n    } else {\n      markerShow = this._types[eventTypeId].markerShow;\n    }\n\n    if (this._types === null || !this._types[eventTypeId] || this._types[eventTypeId].markerTooltip === undefined) {\n      markerTooltip = true;\n    } else {\n      markerTooltip = this._types[eventTypeId].markerTooltip;\n    }\n\n    if (this._types == null || !this._types[eventTypeId] || !this._types[eventTypeId].lineStyle) {\n      lineStyle = 'dashed'; //default line style\n    } else {\n      lineStyle = this._types[eventTypeId].lineStyle.toLowerCase();\n    }\n\n    if (this._types == null || !this._types[eventTypeId] || this._types[eventTypeId].lineWidth === undefined) {\n      lineWidth = 1; //default line width\n    } else {\n      lineWidth = this._types[eventTypeId].lineWidth;\n    }\n\n    let topOffset = xaxis.options.eventSectionHeight || 0;\n    topOffset = topOffset / 3;\n\n    top = o.top + this._plot.height() + topOffset;\n    left = xaxis.p2c(event.min) + o.left;\n\n    const line = $('<div class=\"events_line flot-temp-elem\"></div>')\n      .css({\n        position: 'absolute',\n        opacity: 0.8,\n        left: left + 'px',\n        top: 8,\n        width: lineWidth + 'px',\n        height: this._plot.height() + topOffset * 0.8,\n        'border-left-width': lineWidth + 'px',\n        'border-left-style': lineStyle,\n        'border-left-color': color,\n        color: color,\n      })\n      .appendTo(container);\n\n    if (markerShow) {\n      const marker = $('<div class=\"events_marker\"></div>').css({\n        position: 'absolute',\n        left: -markerSize - Math.round(lineWidth / 2) + 'px',\n        'font-size': 0,\n        'line-height': 0,\n        width: 0,\n        height: 0,\n        'border-left': markerSize + 'px solid transparent',\n        'border-right': markerSize + 'px solid transparent',\n      });\n\n      marker.appendTo(line);\n\n      if (\n        this._types[eventTypeId] &&\n        this._types[eventTypeId].position &&\n        this._types[eventTypeId].position.toUpperCase() === 'BOTTOM'\n      ) {\n        marker.css({\n          top: top - markerSize - 8 + 'px',\n          'border-top': 'none',\n          'border-bottom': markerSize + 'px solid ' + color,\n        });\n      } else {\n        marker.css({\n          top: '0px',\n          'border-top': markerSize + 'px solid ' + color,\n          'border-bottom': 'none',\n        });\n      }\n\n      marker.data({\n        event: event,\n      });\n\n      const mouseenter = function(this: any) {\n        createAnnotationToolip(marker, $(this).data('event'), that._plot);\n      };\n\n      if (event.editModel) {\n        createEditPopover(marker, event.editModel, that._plot);\n      }\n\n      const mouseleave = () => {\n        that._plot.clearSelection();\n      };\n\n      if (markerTooltip) {\n        marker.css({ cursor: 'help' });\n        marker.hover(mouseenter, mouseleave);\n      }\n    }\n\n    const drawableEvent = new DrawableEvent(\n      line,\n      function drawFunc(obj) {\n        obj.show();\n      },\n      obj => {\n        obj.remove();\n      },\n      (obj, position) => {\n        obj.css({\n          top: position.top,\n          left: position.left,\n        });\n      },\n      left,\n      top,\n      line.width(),\n      line.height()\n    );\n\n    return drawableEvent;\n  }\n\n  /**\n   * create a DOM element for the given region\n   */\n  _buildRegDiv(event) {\n    const that = this;\n\n    const container = this._plot.getPlaceholder();\n    const o = this._plot.getPlotOffset();\n    const xaxis = this._plot.getXAxes()[this._plot.getOptions().events.xaxis - 1];\n    let top, left, lineWidth, regionWidth, lineStyle, color, markerTooltip;\n\n    // map the eventType to a types object\n    const eventTypeId = event.eventType;\n\n    if (this._types === null || !this._types[eventTypeId] || !this._types[eventTypeId].color) {\n      color = '#666';\n    } else {\n      color = this._types[eventTypeId].color;\n    }\n\n    if (this._types === null || !this._types[eventTypeId] || this._types[eventTypeId].markerTooltip === undefined) {\n      markerTooltip = true;\n    } else {\n      markerTooltip = this._types[eventTypeId].markerTooltip;\n    }\n\n    if (this._types == null || !this._types[eventTypeId] || this._types[eventTypeId].lineWidth === undefined) {\n      lineWidth = 1; //default line width\n    } else {\n      lineWidth = this._types[eventTypeId].lineWidth;\n    }\n\n    if (this._types == null || !this._types[eventTypeId] || !this._types[eventTypeId].lineStyle) {\n      lineStyle = 'dashed'; //default line style\n    } else {\n      lineStyle = this._types[eventTypeId].lineStyle.toLowerCase();\n    }\n\n    const topOffset = 2;\n    top = o.top + this._plot.height() + topOffset;\n\n    const timeFrom = Math.min(event.min, event.timeEnd);\n    const timeTo = Math.max(event.min, event.timeEnd);\n    left = xaxis.p2c(timeFrom) + o.left;\n    const right = xaxis.p2c(timeTo) + o.left;\n    regionWidth = right - left;\n\n    _.each([left, right], position => {\n      const line = $('<div class=\"events_line flot-temp-elem\"></div>').css({\n        position: 'absolute',\n        opacity: 0.8,\n        left: position + 'px',\n        top: 8,\n        width: lineWidth + 'px',\n        height: this._plot.height() + topOffset,\n        'border-left-width': lineWidth + 'px',\n        'border-left-style': lineStyle,\n        'border-left-color': color,\n        color: color,\n      });\n      line.appendTo(container);\n    });\n\n    const region = $('<div class=\"events_marker region_marker flot-temp-elem\"></div>').css({\n      position: 'absolute',\n      opacity: 0.5,\n      left: left + 'px',\n      top: top,\n      width: Math.round(regionWidth + lineWidth) + 'px',\n      height: '0.5rem',\n      'border-left-color': color,\n      color: color,\n      'background-color': color,\n    });\n    region.appendTo(container);\n\n    region.data({\n      event: event,\n    });\n\n    const mouseenter = function(this: any) {\n      createAnnotationToolip(region, $(this).data('event'), that._plot);\n    };\n\n    if (event.editModel) {\n      createEditPopover(region, event.editModel, that._plot);\n    }\n\n    const mouseleave = () => {\n      that._plot.clearSelection();\n    };\n\n    if (markerTooltip) {\n      region.css({ cursor: 'help' });\n      region.hover(mouseenter, mouseleave);\n    }\n\n    const drawableEvent = new DrawableEvent(\n      region,\n      function drawFunc(obj) {\n        obj.show();\n      },\n      obj => {\n        obj.remove();\n      },\n      (obj, position) => {\n        obj.css({\n          top: position.top,\n          left: position.left,\n        });\n      },\n      left,\n      top,\n      region.width(),\n      region.height()\n    );\n\n    return drawableEvent;\n  }\n\n  /**\n   * check if the event is inside visible range\n   */\n  _insidePlot(x) {\n    const xaxis = this._plot.getXAxes()[this._plot.getOptions().events.xaxis - 1];\n    const xc = xaxis.p2c(x);\n    return xc > 0 && xc < xaxis.p2c(xaxis.max);\n  }\n}\n\n/**\n * initialize the plugin for the given plot\n */\n\n/** @ngInject */\nexport function init(this: any, plot) {\n  /*jshint validthis:true */\n  const that = this;\n  const eventMarkers = new EventMarkers(plot);\n\n  plot.getEvents = () => {\n    return eventMarkers._events;\n  };\n\n  plot.hideEvents = () => {\n    $.each(eventMarkers._events, (index, event) => {\n      event\n        .visual()\n        .getObject()\n        .hide();\n    });\n  };\n\n  plot.showEvents = () => {\n    plot.hideEvents();\n    $.each(eventMarkers._events, (index, event) => {\n      event.hide();\n    });\n\n    that.eventMarkers.drawEvents();\n  };\n\n  // change events on an existing plot\n  plot.setEvents = events => {\n    if (eventMarkers.eventsEnabled) {\n      eventMarkers.setupEvents(events);\n    }\n  };\n\n  plot.hooks.processOptions.push((plot, options) => {\n    // enable the plugin\n    if (options.events.data != null) {\n      eventMarkers.eventsEnabled = true;\n    }\n  });\n\n  plot.hooks.draw.push(plot => {\n    const options = plot.getOptions();\n\n    if (eventMarkers.eventsEnabled) {\n      // check for first run\n      if (eventMarkers.getEvents().length < 1) {\n        eventMarkers.setTypes(options.events.types);\n        eventMarkers.setupEvents(options.events.data);\n      } else {\n        eventMarkers.updateEvents();\n      }\n    }\n\n    eventMarkers.drawEvents();\n  });\n}\n\nconst defaultOptions = {\n  events: {\n    data: null,\n    types: null,\n    xaxis: 1,\n    position: 'BOTTOM',\n  },\n};\n\n$.plot.plugins.push({\n  init: init,\n  options: defaultOptions,\n  name: 'events',\n  version: '0.2.5',\n});\n","import $ from 'jquery';\nimport { appEvents } from 'app/core/core';\n\nexport default function GraphTooltip(this: any, elem, dashboard, scope, getSeriesFn) {\n  const self = this;\n  const ctrl = scope.ctrl;\n  const panel = ctrl.panel;\n\n  const $tooltip = $('<div class=\"graph-tooltip\">');\n\n  this.destroy = () => {\n    $tooltip.remove();\n  };\n\n  this.findHoverIndexFromDataPoints = (posX, series, last) => {\n    const ps = series.datapoints.pointsize;\n    const initial = last * ps;\n    const len = series.datapoints.points.length;\n    let j;\n    for (j = initial; j < len; j += ps) {\n      // Special case of a non stepped line, highlight the very last point just before a null point\n      if (\n        (!series.lines.steps && series.datapoints.points[initial] != null && series.datapoints.points[j] == null) ||\n        //normal case\n        series.datapoints.points[j] > posX\n      ) {\n        return Math.max(j - ps, 0) / ps;\n      }\n    }\n    return j / ps - 1;\n  };\n\n  this.findHoverIndexFromData = (posX, series) => {\n    let lower = 0;\n    let upper = series.data.length - 1;\n    let middle;\n    while (true) {\n      if (lower > upper) {\n        return Math.max(upper, 0);\n      }\n      middle = Math.floor((lower + upper) / 2);\n      if (series.data[middle][0] === posX) {\n        return middle;\n      } else if (series.data[middle][0] < posX) {\n        lower = middle + 1;\n      } else {\n        upper = middle - 1;\n      }\n    }\n  };\n\n  this.renderAndShow = (absoluteTime, innerHtml, pos, xMode) => {\n    if (xMode === 'time') {\n      innerHtml = '<div class=\"graph-tooltip-time\">' + absoluteTime + '</div>' + innerHtml;\n    }\n    $tooltip.html(innerHtml).place_tt(pos.pageX + 20, pos.pageY);\n  };\n\n  this.getMultiSeriesPlotHoverInfo = function(seriesList, pos) {\n    let value, i, series, hoverIndex, hoverDistance, pointTime, yaxis;\n    // 3 sub-arrays, 1st for hidden series, 2nd for left yaxis, 3rd for right yaxis.\n    let results: any = [[], [], []];\n\n    //now we know the current X (j) position for X and Y values\n    let lastValue = 0; //needed for stacked values\n\n    let minDistance, minTime;\n\n    for (i = 0; i < seriesList.length; i++) {\n      series = seriesList[i];\n\n      if (!series.data.length || (panel.legend.hideEmpty && series.allIsNull)) {\n        // Init value so that it does not brake series sorting\n        results[0].push({ hidden: true, value: 0 });\n        continue;\n      }\n\n      if (!series.data.length || (panel.legend.hideZero && series.allIsZero)) {\n        // Init value so that it does not brake series sorting\n        results[0].push({ hidden: true, value: 0 });\n        continue;\n      }\n\n      if (series.hideTooltip) {\n        results[0].push({ hidden: true, value: 0 });\n        continue;\n      }\n\n      hoverIndex = this.findHoverIndexFromData(pos.x, series);\n      hoverDistance = pos.x - series.data[hoverIndex][0];\n      pointTime = series.data[hoverIndex][0];\n\n      // Take the closest point before the cursor, or if it does not exist, the closest after\n      if (\n        !minDistance ||\n        (hoverDistance >= 0 && (hoverDistance < minDistance || minDistance < 0)) ||\n        (hoverDistance < 0 && hoverDistance > minDistance)\n      ) {\n        minDistance = hoverDistance;\n        minTime = pointTime;\n      }\n\n      if (series.stack) {\n        if (panel.tooltip.value_type === 'individual') {\n          value = series.data[hoverIndex][1];\n        } else if (!series.stack) {\n          value = series.data[hoverIndex][1];\n        } else {\n          lastValue += series.data[hoverIndex][1];\n          value = lastValue;\n        }\n      } else {\n        value = series.data[hoverIndex][1];\n      }\n\n      // Highlighting multiple Points depending on the plot type\n      if (series.lines.steps || series.stack) {\n        // stacked and steppedLine plots can have series with different length.\n        // Stacked series can increase its length on each new stacked serie if null points found,\n        // to speed the index search we begin always on the last found hoverIndex.\n        hoverIndex = this.findHoverIndexFromDataPoints(pos.x, series, hoverIndex);\n      }\n\n      // Be sure we have a yaxis so that it does not brake series sorting\n      yaxis = 0;\n      if (series.yaxis) {\n        yaxis = series.yaxis.n;\n      }\n\n      results[yaxis].push({\n        value: value,\n        hoverIndex: hoverIndex,\n        color: series.color,\n        label: series.aliasEscaped,\n        time: pointTime,\n        distance: hoverDistance,\n        index: i,\n      });\n    }\n\n    // Contat the 3 sub-arrays\n    results = results[0].concat(results[1], results[2]);\n\n    // Time of the point closer to pointer\n    results.time = minTime;\n\n    return results;\n  };\n\n  elem.mouseleave(() => {\n    if (panel.tooltip.shared) {\n      const plot = elem.data().plot;\n      if (plot) {\n        $tooltip.detach();\n        plot.unhighlight();\n      }\n    }\n    appEvents.emit('graph-hover-clear');\n  });\n\n  elem.bind('plothover', (event, pos, item) => {\n    self.show(pos, item);\n\n    // broadcast to other graph panels that we are hovering!\n    pos.panelRelY = (pos.pageY - elem.offset().top) / elem.height();\n    appEvents.emit('graph-hover', { pos: pos, panel: panel });\n  });\n\n  elem.bind('plotclick', (event, pos, item) => {\n    appEvents.emit('graph-click', { pos: pos, panel: panel, item: item });\n  });\n\n  this.clear = plot => {\n    $tooltip.detach();\n    plot.clearCrosshair();\n    plot.unhighlight();\n  };\n\n  this.show = (pos, item) => {\n    const plot = elem.data().plot;\n    const plotData = plot.getData();\n    const xAxes = plot.getXAxes();\n    const xMode = xAxes[0].options.mode;\n    const seriesList = getSeriesFn();\n    let allSeriesMode = panel.tooltip.shared;\n    let group, value, absoluteTime, hoverInfo, i, series, seriesHtml, tooltipFormat;\n\n    // if panelRelY is defined another panel wants us to show a tooltip\n    // get pageX from position on x axis and pageY from relative position in original panel\n    if (pos.panelRelY) {\n      const pointOffset = plot.pointOffset({ x: pos.x });\n      if (Number.isNaN(pointOffset.left) || pointOffset.left < 0 || pointOffset.left > elem.width()) {\n        self.clear(plot);\n        return;\n      }\n      pos.pageX = elem.offset().left + pointOffset.left;\n      pos.pageY = elem.offset().top + elem.height() * pos.panelRelY;\n      const isVisible =\n        pos.pageY >= $(window).scrollTop() && pos.pageY <= $(window).innerHeight() + $(window).scrollTop();\n      if (!isVisible) {\n        self.clear(plot);\n        return;\n      }\n      plot.setCrosshair(pos);\n      allSeriesMode = true;\n\n      if (dashboard.sharedCrosshairModeOnly()) {\n        // if only crosshair mode we are done\n        return;\n      }\n    }\n\n    if (seriesList.length === 0) {\n      return;\n    }\n\n    if (seriesList[0].hasMsResolution) {\n      tooltipFormat = 'YYYY-MM-DD HH:mm:ss.SSS';\n    } else {\n      tooltipFormat = 'YYYY-MM-DD HH:mm:ss';\n    }\n\n    if (allSeriesMode) {\n      plot.unhighlight();\n\n      const seriesHoverInfo = self.getMultiSeriesPlotHoverInfo(plotData, pos);\n\n      seriesHtml = '';\n\n      absoluteTime = dashboard.formatDate(seriesHoverInfo.time, tooltipFormat);\n\n      // Dynamically reorder the hovercard for the current time point if the\n      // option is enabled.\n      if (panel.tooltip.sort === 2) {\n        seriesHoverInfo.sort((a, b) => {\n          return b.value - a.value;\n        });\n      } else if (panel.tooltip.sort === 1) {\n        seriesHoverInfo.sort((a, b) => {\n          return a.value - b.value;\n        });\n      }\n\n      for (i = 0; i < seriesHoverInfo.length; i++) {\n        hoverInfo = seriesHoverInfo[i];\n\n        if (hoverInfo.hidden) {\n          continue;\n        }\n\n        let highlightClass = '';\n        if (item && hoverInfo.index === item.seriesIndex) {\n          highlightClass = 'graph-tooltip-list-item--highlight';\n        }\n\n        series = seriesList[hoverInfo.index];\n\n        value = series.formatValue(hoverInfo.value);\n\n        seriesHtml +=\n          '<div class=\"graph-tooltip-list-item ' + highlightClass + '\"><div class=\"graph-tooltip-series-name\">';\n        seriesHtml +=\n          '<i class=\"fa fa-minus\" style=\"color:' + hoverInfo.color + ';\"></i> ' + hoverInfo.label + ':</div>';\n        seriesHtml += '<div class=\"graph-tooltip-value\">' + value + '</div></div>';\n        plot.highlight(hoverInfo.index, hoverInfo.hoverIndex);\n      }\n\n      self.renderAndShow(absoluteTime, seriesHtml, pos, xMode);\n    } else if (item) {\n      // single series tooltip\n      series = seriesList[item.seriesIndex];\n      group = '<div class=\"graph-tooltip-list-item\"><div class=\"graph-tooltip-series-name\">';\n      group +=\n        '<i class=\"fa fa-minus\" style=\"color:' + item.series.color + ';\"></i> ' + series.aliasEscaped + ':</div>';\n\n      if (panel.stack && panel.tooltip.value_type === 'individual') {\n        value = item.datapoint[1] - item.datapoint[2];\n      } else {\n        value = item.datapoint[1];\n      }\n\n      value = series.formatValue(value);\n\n      absoluteTime = dashboard.formatDate(item.datapoint[0], tooltipFormat);\n\n      group += '<div class=\"graph-tooltip-value\">' + value + '</div>';\n\n      self.renderAndShow(absoluteTime, group, pos, xMode);\n    } else {\n      // no hit\n      $tooltip.detach();\n    }\n  };\n}\n","import 'vendor/flot/jquery.flot';\nimport $ from 'jquery';\nimport _ from 'lodash';\n\nexport class ThresholdManager {\n  plot: any;\n  placeholder: any;\n  height: any;\n  thresholds: any;\n  needsCleanup: boolean;\n  hasSecondYAxis: any;\n\n  constructor(private panelCtrl) {}\n\n  getHandleHtml(handleIndex, model, valueStr) {\n    let stateClass = model.colorMode;\n    if (model.colorMode === 'custom') {\n      stateClass = 'critical';\n    }\n\n    return `\n    <div class=\"alert-handle-wrapper alert-handle-wrapper--T${handleIndex}\">\n      <div class=\"alert-handle-line alert-handle-line--${stateClass}\">\n      </div>\n      <div class=\"alert-handle\" data-handle-index=\"${handleIndex}\">\n        <i class=\"icon-gf icon-gf-${stateClass} alert-state-${stateClass}\"></i>\n        <span class=\"alert-handle-value\">${valueStr}<i class=\"alert-handle-grip\"></i></span>\n      </div>\n    </div>`;\n  }\n\n  initDragging(evt) {\n    const handleElem = $(evt.currentTarget).parents('.alert-handle-wrapper');\n    const handleIndex = $(evt.currentTarget).data('handleIndex');\n\n    let lastY = null;\n    let posTop;\n    const plot = this.plot;\n    const panelCtrl = this.panelCtrl;\n    const model = this.thresholds[handleIndex];\n\n    function dragging(evt) {\n      if (lastY === null) {\n        lastY = evt.clientY;\n      } else {\n        const diff = evt.clientY - lastY;\n        posTop = posTop + diff;\n        lastY = evt.clientY;\n        handleElem.css({ top: posTop + diff });\n      }\n    }\n\n    function stopped() {\n      // calculate graph level\n      let graphValue = plot.c2p({ left: 0, top: posTop }).y;\n      graphValue = parseInt(graphValue.toFixed(0), 10);\n      model.value = graphValue;\n\n      handleElem.off('mousemove', dragging);\n      handleElem.off('mouseup', dragging);\n      handleElem.off('mouseleave', dragging);\n\n      // trigger digest and render\n      panelCtrl.$scope.$apply(() => {\n        panelCtrl.render();\n        panelCtrl.events.emit('threshold-changed', {\n          threshold: model,\n          handleIndex: handleIndex,\n        });\n      });\n    }\n\n    lastY = null;\n    posTop = handleElem.position().top;\n\n    handleElem.on('mousemove', dragging);\n    handleElem.on('mouseup', stopped);\n    handleElem.on('mouseleave', stopped);\n  }\n\n  cleanUp() {\n    this.placeholder.find('.alert-handle-wrapper').remove();\n    this.needsCleanup = false;\n  }\n\n  renderHandle(handleIndex, defaultHandleTopPos) {\n    const model = this.thresholds[handleIndex];\n    const value = model.value;\n    let valueStr = value;\n    let handleTopPos = 0;\n\n    // handle no value\n    if (!_.isNumber(value)) {\n      valueStr = '';\n      handleTopPos = defaultHandleTopPos;\n    } else {\n      const valueCanvasPos = this.plot.p2c({ x: 0, y: value });\n      handleTopPos = Math.round(Math.min(Math.max(valueCanvasPos.top, 0), this.height) - 6);\n    }\n\n    const handleElem = $(this.getHandleHtml(handleIndex, model, valueStr));\n    this.placeholder.append(handleElem);\n\n    handleElem.toggleClass('alert-handle-wrapper--no-value', valueStr === '');\n    handleElem.css({ top: handleTopPos });\n  }\n\n  shouldDrawHandles() {\n    return !this.hasSecondYAxis && this.panelCtrl.editingThresholds && this.panelCtrl.panel.thresholds.length > 0;\n  }\n\n  prepare(elem, data) {\n    this.hasSecondYAxis = false;\n    for (let i = 0; i < data.length; i++) {\n      if (data[i].yaxis > 1) {\n        this.hasSecondYAxis = true;\n        break;\n      }\n    }\n\n    if (this.shouldDrawHandles()) {\n      const thresholdMargin = this.panelCtrl.panel.thresholds.length > 1 ? '220px' : '110px';\n      elem.css('margin-right', thresholdMargin);\n    } else if (this.needsCleanup) {\n      elem.css('margin-right', '0');\n    }\n  }\n\n  draw(plot) {\n    this.thresholds = this.panelCtrl.panel.thresholds;\n    this.plot = plot;\n    this.placeholder = plot.getPlaceholder();\n\n    if (this.needsCleanup) {\n      this.cleanUp();\n    }\n\n    if (!this.shouldDrawHandles()) {\n      return;\n    }\n\n    this.height = plot.height();\n\n    if (this.thresholds.length > 0) {\n      this.renderHandle(0, 10);\n    }\n    if (this.thresholds.length > 1) {\n      this.renderHandle(1, this.height - 30);\n    }\n\n    this.placeholder.off('mousedown', '.alert-handle');\n    this.placeholder.on('mousedown', '.alert-handle', this.initDragging.bind(this));\n    this.needsCleanup = true;\n  }\n\n  addFlotOptions(options, panel) {\n    if (!panel.thresholds || panel.thresholds.length === 0) {\n      return;\n    }\n\n    let gtLimit = Infinity;\n    let ltLimit = -Infinity;\n    let i, threshold, other;\n\n    for (i = 0; i < panel.thresholds.length; i++) {\n      threshold = panel.thresholds[i];\n      if (!_.isNumber(threshold.value)) {\n        continue;\n      }\n\n      let limit;\n      switch (threshold.op) {\n        case 'gt': {\n          limit = gtLimit;\n          // if next threshold is less then op and greater value, then use that as limit\n          if (panel.thresholds.length > i + 1) {\n            other = panel.thresholds[i + 1];\n            if (other.value > threshold.value) {\n              limit = other.value;\n              ltLimit = limit;\n            }\n          }\n          break;\n        }\n        case 'lt': {\n          limit = ltLimit;\n          // if next threshold is less then op and greater value, then use that as limit\n          if (panel.thresholds.length > i + 1) {\n            other = panel.thresholds[i + 1];\n            if (other.value < threshold.value) {\n              limit = other.value;\n              gtLimit = limit;\n            }\n          }\n          break;\n        }\n      }\n\n      let fillColor, lineColor;\n      switch (threshold.colorMode) {\n        case 'critical': {\n          fillColor = 'rgba(234, 112, 112, 0.12)';\n          lineColor = 'rgba(237, 46, 24, 0.60)';\n          break;\n        }\n        case 'warning': {\n          fillColor = 'rgba(235, 138, 14, 0.12)';\n          lineColor = 'rgba(247, 149, 32, 0.60)';\n          break;\n        }\n        case 'ok': {\n          fillColor = 'rgba(11, 237, 50, 0.090)';\n          lineColor = 'rgba(6,163,69, 0.60)';\n          break;\n        }\n        case 'custom': {\n          fillColor = threshold.fillColor;\n          lineColor = threshold.lineColor;\n          break;\n        }\n      }\n\n      // fill\n      if (threshold.fill) {\n        if (threshold.yaxis === 'right' && this.hasSecondYAxis) {\n          options.grid.markings.push({\n            y2axis: { from: threshold.value, to: limit },\n            color: fillColor,\n          });\n        } else {\n          options.grid.markings.push({\n            yaxis: { from: threshold.value, to: limit },\n            color: fillColor,\n          });\n        }\n      }\n      if (threshold.line) {\n        if (threshold.yaxis === 'right' && this.hasSecondYAxis) {\n          options.grid.markings.push({\n            y2axis: { from: threshold.value, to: threshold.value },\n            color: lineColor,\n          });\n        } else {\n          options.grid.markings.push({\n            yaxis: { from: threshold.value, to: threshold.value },\n            color: lineColor,\n          });\n        }\n      }\n    }\n  }\n}\n","import _ from 'lodash';\nimport TimeSeries from 'app/core/time_series2';\n\n/**\n * Convert series into array of series values.\n * @param data Array of series\n */\nexport function getSeriesValues(dataList: TimeSeries[]): number[] {\n  const VALUE_INDEX = 0;\n  const values = [];\n\n  // Count histogam stats\n  for (let i = 0; i < dataList.length; i++) {\n    const series = dataList[i];\n    const datapoints = series.datapoints;\n    for (let j = 0; j < datapoints.length; j++) {\n      if (datapoints[j][VALUE_INDEX] !== null) {\n        values.push(datapoints[j][VALUE_INDEX]);\n      }\n    }\n  }\n\n  return values;\n}\n\n/**\n * Convert array of values into timeseries-like histogram:\n * [[val_1, count_1], [val_2, count_2], ..., [val_n, count_n]]\n * @param values\n * @param bucketSize\n */\nexport function convertValuesToHistogram(values: number[], bucketSize: number, min: number, max: number): any[] {\n  const histogram = {};\n\n  const minBound = getBucketBound(min, bucketSize);\n  const maxBound = getBucketBound(max, bucketSize);\n  let bound = minBound;\n  let n = 0;\n  while (bound <= maxBound) {\n    histogram[bound] = 0;\n    bound = minBound + bucketSize * n;\n    n++;\n  }\n\n  for (let i = 0; i < values.length; i++) {\n    const bound = getBucketBound(values[i], bucketSize);\n    histogram[bound] = histogram[bound] + 1;\n  }\n\n  const histogamSeries = _.map(histogram, (count, bound) => {\n    return [Number(bound), count];\n  });\n\n  // Sort by Y axis values\n  return _.sortBy(histogamSeries, point => point[0]);\n}\n\n/**\n * Convert series into array of histogram data.\n * @param data Array of series\n * @param bucketSize\n */\nexport function convertToHistogramData(\n  data: any,\n  bucketSize: number,\n  hiddenSeries: any,\n  min: number,\n  max: number\n): any[] {\n  return data.map(series => {\n    const values = getSeriesValues([series]);\n    series.histogram = true;\n    if (!hiddenSeries[series.alias]) {\n      const histogram = convertValuesToHistogram(values, bucketSize, min, max);\n      series.data = histogram;\n    } else {\n      series.data = [];\n    }\n    return series;\n  });\n}\n\nfunction getBucketBound(value: number, bucketSize: number): number {\n  return Math.floor(value / bucketSize) * bucketSize;\n}\n","import _ from 'lodash';\n\n/**\n * To align two Y axes by Y level\n * @param yAxes data [{min: min_y1, min: max_y1}, {min: min_y2, max: max_y2}]\n * @param level Y level\n */\nexport function alignYLevel(yAxes, level) {\n  if (isNaN(level) || !checkCorrectAxis(yAxes)) {\n    return;\n  }\n\n  const [yLeft, yRight] = yAxes;\n  moveLevelToZero(yLeft, yRight, level);\n\n  expandStuckValues(yLeft, yRight);\n\n  // one of graphs on zero\n  const zero = yLeft.min === 0 || yRight.min === 0 || yLeft.max === 0 || yRight.max === 0;\n\n  const oneSide = checkOneSide(yLeft, yRight);\n\n  if (zero && oneSide) {\n    yLeft.min = yLeft.max > 0 ? 0 : yLeft.min;\n    yLeft.max = yLeft.max > 0 ? yLeft.max : 0;\n    yRight.min = yRight.max > 0 ? 0 : yRight.min;\n    yRight.max = yRight.max > 0 ? yRight.max : 0;\n  } else {\n    if (checkOppositeSides(yLeft, yRight)) {\n      if (yLeft.min >= 0) {\n        yLeft.min = -yLeft.max;\n        yRight.max = -yRight.min;\n      } else {\n        yLeft.max = -yLeft.min;\n        yRight.min = -yRight.max;\n      }\n    } else {\n      const rate = getRate(yLeft, yRight);\n\n      if (oneSide) {\n        // all graphs above the Y level\n        if (yLeft.min > 0) {\n          yLeft.min = yLeft.max / rate;\n          yRight.min = yRight.max / rate;\n        } else {\n          yLeft.max = yLeft.min / rate;\n          yRight.max = yRight.min / rate;\n        }\n      } else {\n        if (checkTwoCross(yLeft, yRight)) {\n          yLeft.min = yRight.min ? yRight.min * rate : yLeft.min;\n          yRight.min = yLeft.min ? yLeft.min / rate : yRight.min;\n          yLeft.max = yRight.max ? yRight.max * rate : yLeft.max;\n          yRight.max = yLeft.max ? yLeft.max / rate : yRight.max;\n        } else {\n          yLeft.min = yLeft.min > 0 ? yRight.min * rate : yLeft.min;\n          yRight.min = yRight.min > 0 ? yLeft.min / rate : yRight.min;\n          yLeft.max = yLeft.max < 0 ? yRight.max * rate : yLeft.max;\n          yRight.max = yRight.max < 0 ? yLeft.max / rate : yRight.max;\n        }\n      }\n    }\n  }\n\n  restoreLevelFromZero(yLeft, yRight, level);\n}\n\nfunction expandStuckValues(yLeft, yRight) {\n  // wide Y min and max using increased wideFactor\n  const wideFactor = 0.25;\n  if (yLeft.max === yLeft.min) {\n    yLeft.min -= wideFactor;\n    yLeft.max += wideFactor;\n  }\n  if (yRight.max === yRight.min) {\n    yRight.min -= wideFactor;\n    yRight.max += wideFactor;\n  }\n}\n\nfunction moveLevelToZero(yLeft, yRight, level) {\n  if (level !== 0) {\n    yLeft.min -= level;\n    yLeft.max -= level;\n    yRight.min -= level;\n    yRight.max -= level;\n  }\n}\n\nfunction restoreLevelFromZero(yLeft, yRight, level) {\n  if (level !== 0) {\n    yLeft.min += level;\n    yLeft.max += level;\n    yRight.min += level;\n    yRight.max += level;\n  }\n}\n\nfunction checkCorrectAxis(axis) {\n  return axis.length === 2 && checkCorrectAxes(axis[0]) && checkCorrectAxes(axis[1]);\n}\n\nfunction checkCorrectAxes(axes) {\n  return 'min' in axes && 'max' in axes;\n}\n\nfunction checkOneSide(yLeft, yRight) {\n  // on the one hand with respect to zero\n  return (yLeft.min >= 0 && yRight.min >= 0) || (yLeft.max <= 0 && yRight.max <= 0);\n}\n\nfunction checkTwoCross(yLeft, yRight) {\n  // both across zero\n  return yLeft.min <= 0 && yLeft.max >= 0 && yRight.min <= 0 && yRight.max >= 0;\n}\n\nfunction checkOppositeSides(yLeft, yRight) {\n  // on the opposite sides with respect to zero\n  return (yLeft.min >= 0 && yRight.max <= 0) || (yLeft.max <= 0 && yRight.min >= 0);\n}\n\nfunction getRate(yLeft, yRight) {\n  let rateLeft, rateRight, rate;\n  if (checkTwoCross(yLeft, yRight)) {\n    rateLeft = yRight.min ? yLeft.min / yRight.min : 0;\n    rateRight = yRight.max ? yLeft.max / yRight.max : 0;\n  } else {\n    if (checkOneSide(yLeft, yRight)) {\n      const absLeftMin = Math.abs(yLeft.min);\n      const absLeftMax = Math.abs(yLeft.max);\n      const absRightMin = Math.abs(yRight.min);\n      const absRightMax = Math.abs(yRight.max);\n      const upLeft = _.max([absLeftMin, absLeftMax]);\n      const downLeft = _.min([absLeftMin, absLeftMax]);\n      const upRight = _.max([absRightMin, absRightMax]);\n      const downRight = _.min([absRightMin, absRightMax]);\n\n      rateLeft = downLeft ? upLeft / downLeft : upLeft;\n      rateRight = downRight ? upRight / downRight : upRight;\n    } else {\n      if (yLeft.min > 0 || yRight.min > 0) {\n        rateLeft = yLeft.max / yRight.max;\n        rateRight = 0;\n      } else {\n        rateLeft = 0;\n        rateRight = yLeft.min / yRight.min;\n      }\n    }\n  }\n\n  rate = rateLeft > rateRight ? rateLeft : rateRight;\n\n  return rate;\n}\n","import 'vendor/flot/jquery.flot';\nimport 'vendor/flot/jquery.flot.selection';\nimport 'vendor/flot/jquery.flot.time';\nimport 'vendor/flot/jquery.flot.stack';\nimport 'vendor/flot/jquery.flot.stackpercent';\nimport 'vendor/flot/jquery.flot.fillbelow';\nimport 'vendor/flot/jquery.flot.crosshair';\nimport 'vendor/flot/jquery.flot.dashes';\nimport './jquery.flot.events';\n\nimport $ from 'jquery';\nimport _ from 'lodash';\nimport moment from 'moment';\nimport kbn from 'app/core/utils/kbn';\nimport { tickStep } from 'app/core/utils/ticks';\nimport { appEvents, coreModule, updateLegendValues } from 'app/core/core';\nimport GraphTooltip from './graph_tooltip';\nimport { ThresholdManager } from './threshold_manager';\nimport { EventManager } from 'app/features/annotations/all';\nimport { convertToHistogramData } from './histogram';\nimport { alignYLevel } from './align_yaxes';\nimport config from 'app/core/config';\n\nimport { GraphCtrl } from './module';\n\nclass GraphElement {\n  ctrl: GraphCtrl;\n  tooltip: any;\n  dashboard: any;\n  annotations: object[];\n  panel: any;\n  plot: any;\n  sortedSeries: any[];\n  data: any[];\n  panelWidth: number;\n  eventManager: EventManager;\n  thresholdManager: ThresholdManager;\n\n  constructor(private scope, private elem, private timeSrv) {\n    this.ctrl = scope.ctrl;\n    this.dashboard = this.ctrl.dashboard;\n    this.panel = this.ctrl.panel;\n    this.annotations = [];\n\n    this.panelWidth = 0;\n    this.eventManager = new EventManager(this.ctrl);\n    this.thresholdManager = new ThresholdManager(this.ctrl);\n    this.tooltip = new GraphTooltip(this.elem, this.ctrl.dashboard, this.scope, () => {\n      return this.sortedSeries;\n    });\n\n    // panel events\n    this.ctrl.events.on('panel-teardown', this.onPanelteardown.bind(this));\n\n    /**\n     * Split graph rendering into two parts.\n     * First, calculate series stats in buildFlotPairs() function. Then legend rendering started\n     * (see ctrl.events.on('render') in legend.ts).\n     * When legend is rendered it emits 'legend-rendering-complete' and graph rendered.\n     */\n    this.ctrl.events.on('render', this.onRender.bind(this));\n    this.ctrl.events.on('legend-rendering-complete', this.onLegendRenderingComplete.bind(this));\n\n    // global events\n    appEvents.on('graph-hover', this.onGraphHover.bind(this), scope);\n\n    appEvents.on('graph-hover-clear', this.onGraphHoverClear.bind(this), scope);\n\n    this.elem.bind('plotselected', this.onPlotSelected.bind(this));\n\n    this.elem.bind('plotclick', this.onPlotClick.bind(this));\n    scope.$on('$destroy', this.onScopeDestroy.bind(this));\n  }\n\n  onRender(renderData) {\n    this.data = renderData || this.data;\n    if (!this.data) {\n      return;\n    }\n    this.annotations = this.ctrl.annotations || [];\n    this.buildFlotPairs(this.data);\n    const graphHeight = this.elem.height();\n    updateLegendValues(this.data, this.panel, graphHeight);\n\n    this.ctrl.events.emit('render-legend');\n  }\n\n  onGraphHover(evt) {\n    // ignore other graph hover events if shared tooltip is disabled\n    if (!this.dashboard.sharedTooltipModeEnabled()) {\n      return;\n    }\n\n    // ignore if we are the emitter\n    if (!this.plot || evt.panel.id === this.panel.id || this.ctrl.otherPanelInFullscreenMode()) {\n      return;\n    }\n\n    this.tooltip.show(evt.pos);\n  }\n\n  onPanelteardown() {\n    this.thresholdManager = null;\n\n    if (this.plot) {\n      this.plot.destroy();\n      this.plot = null;\n    }\n  }\n\n  onLegendRenderingComplete() {\n    this.render_panel();\n  }\n\n  onGraphHoverClear(event, info) {\n    if (this.plot) {\n      this.tooltip.clear(this.plot);\n    }\n  }\n\n  onPlotSelected(event, ranges) {\n    if (this.panel.xaxis.mode !== 'time') {\n      // Skip if panel in histogram or series mode\n      this.plot.clearSelection();\n      return;\n    }\n\n    if ((ranges.ctrlKey || ranges.metaKey) && (this.dashboard.meta.canEdit || this.dashboard.meta.canMakeEditable)) {\n      // Add annotation\n      setTimeout(() => {\n        this.eventManager.updateTime(ranges.xaxis);\n      }, 100);\n    } else {\n      this.scope.$apply(() => {\n        this.timeSrv.setTime({\n          from: moment.utc(ranges.xaxis.from),\n          to: moment.utc(ranges.xaxis.to),\n        });\n      });\n    }\n  }\n\n  onPlotClick(event, pos, item) {\n    if (this.panel.xaxis.mode !== 'time') {\n      // Skip if panel in histogram or series mode\n      return;\n    }\n\n    if ((pos.ctrlKey || pos.metaKey) && (this.dashboard.meta.canEdit || this.dashboard.meta.canMakeEditable)) {\n      // Skip if range selected (added in \"plotselected\" event handler)\n      const isRangeSelection = pos.x !== pos.x1;\n      if (!isRangeSelection) {\n        setTimeout(() => {\n          this.eventManager.updateTime({ from: pos.x, to: null });\n        }, 100);\n      }\n    }\n  }\n\n  onScopeDestroy() {\n    this.tooltip.destroy();\n    this.elem.off();\n    this.elem.remove();\n  }\n\n  shouldAbortRender() {\n    if (!this.data) {\n      return true;\n    }\n\n    if (this.panelWidth === 0) {\n      return true;\n    }\n\n    return false;\n  }\n\n  drawHook(plot) {\n    // add left axis labels\n    if (this.panel.yaxes[0].label && this.panel.yaxes[0].show) {\n      $(\"<div class='axisLabel left-yaxis-label flot-temp-elem'></div>\")\n        .text(this.panel.yaxes[0].label)\n        .appendTo(this.elem);\n    }\n\n    // add right axis labels\n    if (this.panel.yaxes[1].label && this.panel.yaxes[1].show) {\n      $(\"<div class='axisLabel right-yaxis-label flot-temp-elem'></div>\")\n        .text(this.panel.yaxes[1].label)\n        .appendTo(this.elem);\n    }\n\n    if (this.ctrl.dataWarning) {\n      $(`<div class=\"datapoints-warning flot-temp-elem\">${this.ctrl.dataWarning.title}</div>`).appendTo(this.elem);\n    }\n\n    this.thresholdManager.draw(plot);\n  }\n\n  processOffsetHook(plot, gridMargin) {\n    const left = this.panel.yaxes[0];\n    const right = this.panel.yaxes[1];\n    if (left.show && left.label) {\n      gridMargin.left = 20;\n    }\n    if (right.show && right.label) {\n      gridMargin.right = 20;\n    }\n\n    // apply y-axis min/max options\n    const yaxis = plot.getYAxes();\n    for (let i = 0; i < yaxis.length; i++) {\n      const axis = yaxis[i];\n      const panelOptions = this.panel.yaxes[i];\n      axis.options.max = axis.options.max !== null ? axis.options.max : panelOptions.max;\n      axis.options.min = axis.options.min !== null ? axis.options.min : panelOptions.min;\n    }\n  }\n\n  processRangeHook(plot) {\n    const yAxes = plot.getYAxes();\n    const align = this.panel.yaxis.align || false;\n\n    if (yAxes.length > 1 && align === true) {\n      const level = this.panel.yaxis.alignLevel || 0;\n      alignYLevel(yAxes, parseFloat(level));\n    }\n  }\n\n  // Series could have different timeSteps,\n  // let's find the smallest one so that bars are correctly rendered.\n  // In addition, only take series which are rendered as bars for this.\n  getMinTimeStepOfSeries(data) {\n    let min = Number.MAX_VALUE;\n\n    for (let i = 0; i < data.length; i++) {\n      if (!data[i].stats.timeStep) {\n        continue;\n      }\n      if (this.panel.bars) {\n        if (data[i].bars && data[i].bars.show === false) {\n          continue;\n        }\n      } else {\n        if (typeof data[i].bars === 'undefined' || typeof data[i].bars.show === 'undefined' || !data[i].bars.show) {\n          continue;\n        }\n      }\n\n      if (data[i].stats.timeStep < min) {\n        min = data[i].stats.timeStep;\n      }\n    }\n\n    return min;\n  }\n\n  // Function for rendering panel\n  render_panel() {\n    this.panelWidth = this.elem.width();\n    if (this.shouldAbortRender()) {\n      return;\n    }\n\n    // give space to alert editing\n    this.thresholdManager.prepare(this.elem, this.data);\n\n    // un-check dashes if lines are unchecked\n    this.panel.dashes = this.panel.lines ? this.panel.dashes : false;\n\n    // Populate element\n    const options: any = this.buildFlotOptions(this.panel);\n    this.prepareXAxis(options, this.panel);\n    this.configureYAxisOptions(this.data, options);\n    this.thresholdManager.addFlotOptions(options, this.panel);\n    this.eventManager.addFlotEvents(this.annotations, options);\n\n    this.sortedSeries = this.sortSeries(this.data, this.panel);\n    this.callPlot(options, true);\n  }\n\n  buildFlotPairs(data) {\n    for (let i = 0; i < data.length; i++) {\n      const series = data[i];\n      series.data = series.getFlotPairs(series.nullPointMode || this.panel.nullPointMode);\n\n      // if hidden remove points and disable stack\n      if (this.ctrl.hiddenSeries[series.alias]) {\n        series.data = [];\n        series.stack = false;\n      }\n    }\n  }\n\n  prepareXAxis(options, panel) {\n    switch (panel.xaxis.mode) {\n      case 'series': {\n        options.series.bars.barWidth = 0.7;\n        options.series.bars.align = 'center';\n\n        for (let i = 0; i < this.data.length; i++) {\n          const series = this.data[i];\n          series.data = [[i + 1, series.stats[panel.xaxis.values[0]]]];\n        }\n\n        this.addXSeriesAxis(options);\n        break;\n      }\n      case 'histogram': {\n        let bucketSize: number;\n\n        if (this.data.length) {\n          const histMin = _.min(_.map(this.data, s => s.stats.min));\n          const histMax = _.max(_.map(this.data, s => s.stats.max));\n          const ticks = panel.xaxis.buckets || this.panelWidth / 50;\n          bucketSize = tickStep(histMin, histMax, ticks);\n          options.series.bars.barWidth = bucketSize * 0.8;\n          this.data = convertToHistogramData(this.data, bucketSize, this.ctrl.hiddenSeries, histMin, histMax);\n        } else {\n          bucketSize = 0;\n        }\n\n        this.addXHistogramAxis(options, bucketSize);\n        break;\n      }\n      case 'table': {\n        options.series.bars.barWidth = 0.7;\n        options.series.bars.align = 'center';\n        this.addXTableAxis(options);\n        break;\n      }\n      default: {\n        options.series.bars.barWidth = this.getMinTimeStepOfSeries(this.data) / 1.5;\n        this.addTimeAxis(options);\n        break;\n      }\n    }\n  }\n\n  callPlot(options, incrementRenderCounter) {\n    try {\n      this.plot = $.plot(this.elem, this.sortedSeries, options);\n      if (this.ctrl.renderError) {\n        delete this.ctrl.error;\n        delete this.ctrl.inspector;\n      }\n    } catch (e) {\n      console.log('flotcharts error', e);\n      this.ctrl.error = e.message || 'Render Error';\n      this.ctrl.renderError = true;\n      this.ctrl.inspector = { error: e };\n    }\n\n    if (incrementRenderCounter) {\n      this.ctrl.renderingCompleted();\n    }\n  }\n\n  buildFlotOptions(panel) {\n    let gridColor = '#c8c8c8';\n    if (config.bootData.user.lightTheme === true) {\n      gridColor = '#a1a1a1';\n    }\n    const stack = panel.stack ? true : null;\n    const options = {\n      hooks: {\n        draw: [this.drawHook.bind(this)],\n        processOffset: [this.processOffsetHook.bind(this)],\n        processRange: [this.processRangeHook.bind(this)],\n      },\n      legend: { show: false },\n      series: {\n        stackpercent: panel.stack ? panel.percentage : false,\n        stack: panel.percentage ? null : stack,\n        lines: {\n          show: panel.lines,\n          zero: false,\n          fill: this.translateFillOption(panel.fill),\n          lineWidth: panel.dashes ? 0 : panel.linewidth,\n          steps: panel.steppedLine,\n        },\n        dashes: {\n          show: panel.dashes,\n          lineWidth: panel.linewidth,\n          dashLength: [panel.dashLength, panel.spaceLength],\n        },\n        bars: {\n          show: panel.bars,\n          fill: 1,\n          barWidth: 1,\n          zero: false,\n          lineWidth: 0,\n        },\n        points: {\n          show: panel.points,\n          fill: 1,\n          fillColor: false,\n          radius: panel.points ? panel.pointradius : 2,\n        },\n        shadowSize: 0,\n      },\n      yaxes: [],\n      xaxis: {},\n      grid: {\n        minBorderMargin: 0,\n        markings: [],\n        backgroundColor: null,\n        borderWidth: 0,\n        hoverable: true,\n        clickable: true,\n        color: gridColor,\n        margin: { left: 0, right: 0 },\n        labelMarginX: 0,\n      },\n      selection: {\n        mode: 'x',\n        color: '#666',\n      },\n      crosshair: {\n        mode: 'x',\n      },\n    };\n    return options;\n  }\n\n  sortSeries(series, panel) {\n    const sortBy = panel.legend.sort;\n    const sortOrder = panel.legend.sortDesc;\n    const haveSortBy = sortBy !== null && sortBy !== undefined;\n    const haveSortOrder = sortOrder !== null && sortOrder !== undefined;\n    const shouldSortBy = panel.stack && haveSortBy && haveSortOrder;\n    const sortDesc = panel.legend.sortDesc === true ? -1 : 1;\n\n    if (shouldSortBy) {\n      return _.sortBy(series, s => s.stats[sortBy] * sortDesc);\n    } else {\n      return _.sortBy(series, s => s.zindex);\n    }\n  }\n\n  translateFillOption(fill) {\n    if (this.panel.percentage && this.panel.stack) {\n      return fill === 0 ? 0.001 : fill / 10;\n    } else {\n      return fill / 10;\n    }\n  }\n\n  addTimeAxis(options) {\n    const ticks = this.panelWidth / 100;\n    const min = _.isUndefined(this.ctrl.range.from) ? null : this.ctrl.range.from.valueOf();\n    const max = _.isUndefined(this.ctrl.range.to) ? null : this.ctrl.range.to.valueOf();\n\n    options.xaxis = {\n      timezone: this.dashboard.getTimezone(),\n      show: this.panel.xaxis.show,\n      mode: 'time',\n      min: min,\n      max: max,\n      label: 'Datetime',\n      ticks: ticks,\n      timeformat: this.time_format(ticks, min, max),\n    };\n  }\n\n  addXSeriesAxis(options) {\n    const ticks = _.map(this.data, (series, index) => {\n      return [index + 1, series.alias];\n    });\n\n    options.xaxis = {\n      timezone: this.dashboard.getTimezone(),\n      show: this.panel.xaxis.show,\n      mode: null,\n      min: 0,\n      max: ticks.length + 1,\n      label: 'Datetime',\n      ticks: ticks,\n    };\n  }\n\n  addXHistogramAxis(options, bucketSize) {\n    let ticks, min, max;\n    const defaultTicks = this.panelWidth / 50;\n\n    if (this.data.length && bucketSize) {\n      const tickValues = [];\n      for (const d of this.data) {\n        for (const point of d.data) {\n          tickValues[point[0]] = true;\n        }\n      }\n      ticks = Object.keys(tickValues).map(v => Number(v));\n      min = _.min(ticks);\n      max = _.max(ticks);\n\n      // Adjust tick step\n      let tickStep = bucketSize;\n      let ticksNum = Math.floor((max - min) / tickStep);\n      while (ticksNum > defaultTicks) {\n        tickStep = tickStep * 2;\n        ticksNum = Math.ceil((max - min) / tickStep);\n      }\n\n      // Expand ticks for pretty view\n      min = Math.floor(min / tickStep) * tickStep;\n      // 1.01 is 101% - ensure we have enough space for last bar\n      max = Math.ceil(max * 1.01 / tickStep) * tickStep;\n\n      ticks = [];\n      for (let i = min; i <= max; i += tickStep) {\n        ticks.push(i);\n      }\n    } else {\n      // Set defaults if no data\n      ticks = defaultTicks / 2;\n      min = 0;\n      max = 1;\n    }\n\n    options.xaxis = {\n      timezone: this.dashboard.getTimezone(),\n      show: this.panel.xaxis.show,\n      mode: null,\n      min: min,\n      max: max,\n      label: 'Histogram',\n      ticks: ticks,\n    };\n\n    // Use 'short' format for histogram values\n    this.configureAxisMode(options.xaxis, 'short');\n  }\n\n  addXTableAxis(options) {\n    let ticks = _.map(this.data, (series, seriesIndex) => {\n      return _.map(series.datapoints, (point, pointIndex) => {\n        const tickIndex = seriesIndex * series.datapoints.length + pointIndex;\n        return [tickIndex + 1, point[1]];\n      });\n    });\n    ticks = _.flatten(ticks, true);\n\n    options.xaxis = {\n      timezone: this.dashboard.getTimezone(),\n      show: this.panel.xaxis.show,\n      mode: null,\n      min: 0,\n      max: ticks.length + 1,\n      label: 'Datetime',\n      ticks: ticks,\n    };\n  }\n\n  configureYAxisOptions(data, options) {\n    const defaults = {\n      position: 'left',\n      show: this.panel.yaxes[0].show,\n      index: 1,\n      logBase: this.panel.yaxes[0].logBase || 1,\n      min: this.parseNumber(this.panel.yaxes[0].min),\n      max: this.parseNumber(this.panel.yaxes[0].max),\n      tickDecimals: this.panel.yaxes[0].decimals,\n    };\n\n    options.yaxes.push(defaults);\n\n    if (_.find(data, { yaxis: 2 })) {\n      const secondY = _.clone(defaults);\n      secondY.index = 2;\n      secondY.show = this.panel.yaxes[1].show;\n      secondY.logBase = this.panel.yaxes[1].logBase || 1;\n      secondY.position = 'right';\n      secondY.min = this.parseNumber(this.panel.yaxes[1].min);\n      secondY.max = this.parseNumber(this.panel.yaxes[1].max);\n      secondY.tickDecimals = this.panel.yaxes[1].decimals;\n      options.yaxes.push(secondY);\n\n      this.applyLogScale(options.yaxes[1], data);\n      this.configureAxisMode(\n        options.yaxes[1],\n        this.panel.percentage && this.panel.stack ? 'percent' : this.panel.yaxes[1].format\n      );\n    }\n    this.applyLogScale(options.yaxes[0], data);\n    this.configureAxisMode(\n      options.yaxes[0],\n      this.panel.percentage && this.panel.stack ? 'percent' : this.panel.yaxes[0].format\n    );\n  }\n\n  parseNumber(value: any) {\n    if (value === null || typeof value === 'undefined') {\n      return null;\n    }\n\n    return _.toNumber(value);\n  }\n\n  applyLogScale(axis, data) {\n    if (axis.logBase === 1) {\n      return;\n    }\n\n    const minSetToZero = axis.min === 0;\n\n    if (axis.min < Number.MIN_VALUE) {\n      axis.min = null;\n    }\n    if (axis.max < Number.MIN_VALUE) {\n      axis.max = null;\n    }\n\n    let series, i;\n    let max = axis.max,\n      min = axis.min;\n\n    for (i = 0; i < data.length; i++) {\n      series = data[i];\n      if (series.yaxis === axis.index) {\n        if (!max || max < series.stats.max) {\n          max = series.stats.max;\n        }\n        if (!min || min > series.stats.logmin) {\n          min = series.stats.logmin;\n        }\n      }\n    }\n\n    axis.transform = v => {\n      return v < Number.MIN_VALUE ? null : Math.log(v) / Math.log(axis.logBase);\n    };\n    axis.inverseTransform = v => {\n      return Math.pow(axis.logBase, v);\n    };\n\n    if (!max && !min) {\n      max = axis.inverseTransform(+2);\n      min = axis.inverseTransform(-2);\n    } else if (!max) {\n      max = min * axis.inverseTransform(+4);\n    } else if (!min) {\n      min = max * axis.inverseTransform(-4);\n    }\n\n    if (axis.min) {\n      min = axis.inverseTransform(Math.ceil(axis.transform(axis.min)));\n    } else {\n      min = axis.min = axis.inverseTransform(Math.floor(axis.transform(min)));\n    }\n    if (axis.max) {\n      max = axis.inverseTransform(Math.floor(axis.transform(axis.max)));\n    } else {\n      max = axis.max = axis.inverseTransform(Math.ceil(axis.transform(max)));\n    }\n\n    if (!min || min < Number.MIN_VALUE || !max || max < Number.MIN_VALUE) {\n      return;\n    }\n\n    if (Number.isFinite(min) && Number.isFinite(max)) {\n      if (minSetToZero) {\n        axis.min = 0.1;\n        min = 1;\n      }\n\n      axis.ticks = this.generateTicksForLogScaleYAxis(min, max, axis.logBase);\n      if (minSetToZero) {\n        axis.ticks.unshift(0.1);\n      }\n      if (axis.ticks[axis.ticks.length - 1] > axis.max) {\n        axis.max = axis.ticks[axis.ticks.length - 1];\n      }\n    } else {\n      axis.ticks = [1, 2];\n      delete axis.min;\n      delete axis.max;\n    }\n  }\n\n  generateTicksForLogScaleYAxis(min, max, logBase) {\n    let ticks = [];\n\n    let nextTick;\n    for (nextTick = min; nextTick <= max; nextTick *= logBase) {\n      ticks.push(nextTick);\n    }\n\n    const maxNumTicks = Math.ceil(this.ctrl.height / 25);\n    const numTicks = ticks.length;\n    if (numTicks > maxNumTicks) {\n      const factor = Math.ceil(numTicks / maxNumTicks) * logBase;\n      ticks = [];\n\n      for (nextTick = min; nextTick <= max * factor; nextTick *= factor) {\n        ticks.push(nextTick);\n      }\n    }\n\n    return ticks;\n  }\n\n  configureAxisMode(axis, format) {\n    axis.tickFormatter = (val, axis) => {\n      if (!kbn.valueFormats[format]) {\n        throw new Error(`Unit '${format}' is not supported`);\n      }\n      return kbn.valueFormats[format](val, axis.tickDecimals, axis.scaledDecimals);\n    };\n  }\n\n  time_format(ticks, min, max) {\n    if (min && max && ticks) {\n      const range = max - min;\n      const secPerTick = range / ticks / 1000;\n      const oneDay = 86400000;\n      const oneYear = 31536000000;\n\n      if (secPerTick <= 45) {\n        return '%H:%M:%S';\n      }\n      if (secPerTick <= 7200 || range <= oneDay) {\n        return '%H:%M';\n      }\n      if (secPerTick <= 80000) {\n        return '%m/%d %H:%M';\n      }\n      if (secPerTick <= 2419200 || range <= oneYear) {\n        return '%m/%d';\n      }\n      return '%Y-%m';\n    }\n\n    return '%H:%M';\n  }\n}\n\n/** @ngInject */\nfunction graphDirective(timeSrv, popoverSrv, contextSrv) {\n  return {\n    restrict: 'A',\n    template: '',\n    link: (scope, elem) => {\n      return new GraphElement(scope, elem, timeSrv);\n    },\n  };\n}\n\ncoreModule.directive('grafanaGraph', graphDirective);\nexport { GraphElement, graphDirective };\n","import angular from 'angular';\nimport _ from 'lodash';\nimport $ from 'jquery';\nimport baron from 'baron';\n\nconst module = angular.module('grafana.directives');\n\nmodule.directive('graphLegend', (popoverSrv, $timeout) => {\n  return {\n    link: (scope, elem) => {\n      let firstRender = true;\n      const ctrl = scope.ctrl;\n      const panel = ctrl.panel;\n      let data;\n      let seriesList;\n      let i;\n      let legendScrollbar;\n      const legendRightDefaultWidth = 10;\n      const legendElem = elem.parent();\n\n      scope.$on('$destroy', () => {\n        destroyScrollbar();\n      });\n\n      ctrl.events.on('render-legend', () => {\n        data = ctrl.seriesList;\n        if (data) {\n          render();\n        }\n        ctrl.events.emit('legend-rendering-complete');\n      });\n\n      function getSeriesIndexForElement(el) {\n        return el.parents('[data-series-index]').data('series-index');\n      }\n\n      function openColorSelector(e) {\n        // if we clicked inside poup container ignore click\n        if ($(e.target).parents('.popover').length) {\n          return;\n        }\n\n        const el = $(e.currentTarget).find('.fa-minus');\n        const index = getSeriesIndexForElement(el);\n        const series = seriesList[index];\n\n        $timeout(() => {\n          popoverSrv.show({\n            element: el[0],\n            position: 'bottom left',\n            targetAttachment: 'top left',\n            template:\n              '<series-color-picker series=\"series\" onToggleAxis=\"toggleAxis\" onColorChange=\"colorSelected\">' +\n              '</series-color-picker>',\n            openOn: 'hover',\n            model: {\n              series: series,\n              toggleAxis: () => {\n                ctrl.toggleAxis(series);\n              },\n              colorSelected: color => {\n                ctrl.changeSeriesColor(series, color);\n              },\n            },\n          });\n        });\n      }\n\n      function toggleSeries(e) {\n        const el = $(e.currentTarget);\n        const index = getSeriesIndexForElement(el);\n        const seriesInfo = seriesList[index];\n        const scrollPosition = legendScrollbar.scroller.scrollTop;\n        ctrl.toggleSeries(seriesInfo, e);\n        legendScrollbar.scroller.scrollTop = scrollPosition;\n      }\n\n      function sortLegend(e) {\n        const el = $(e.currentTarget);\n        const stat = el.data('stat');\n\n        if (stat !== panel.legend.sort) {\n          panel.legend.sortDesc = null;\n        }\n\n        // if already sort ascending, disable sorting\n        if (panel.legend.sortDesc === false) {\n          panel.legend.sort = null;\n          panel.legend.sortDesc = null;\n          ctrl.render();\n          return;\n        }\n\n        panel.legend.sortDesc = !panel.legend.sortDesc;\n        panel.legend.sort = stat;\n        ctrl.render();\n      }\n\n      function getTableHeaderHtml(statName) {\n        if (!panel.legend[statName]) {\n          return '';\n        }\n        let html = '<th class=\"pointer\" data-stat=\"' + statName + '\">' + statName;\n\n        if (panel.legend.sort === statName) {\n          const cssClass = panel.legend.sortDesc ? 'fa fa-caret-down' : 'fa fa-caret-up';\n          html += ' <span class=\"' + cssClass + '\"></span>';\n        }\n\n        return html + '</th>';\n      }\n\n      function render() {\n        const legendWidth = legendElem.width();\n        if (!ctrl.panel.legend.show) {\n          elem.empty();\n          firstRender = true;\n          return;\n        }\n\n        if (firstRender) {\n          elem.on('click', '.graph-legend-icon', openColorSelector);\n          elem.on('click', '.graph-legend-alias', toggleSeries);\n          elem.on('click', 'th', sortLegend);\n          firstRender = false;\n        }\n\n        seriesList = data;\n\n        elem.empty();\n\n        // Set min-width if side style and there is a value, otherwise remove the CSS property\n        // Set width so it works with IE11\n        const width: any = panel.legend.rightSide && panel.legend.sideWidth ? panel.legend.sideWidth + 'px' : '';\n        const ieWidth: any = panel.legend.rightSide && panel.legend.sideWidth ? panel.legend.sideWidth - 1 + 'px' : '';\n        legendElem.css('min-width', width);\n        legendElem.css('width', ieWidth);\n\n        elem.toggleClass('graph-legend-table', panel.legend.alignAsTable === true);\n\n        let tableHeaderElem;\n        if (panel.legend.alignAsTable) {\n          let header = '<tr>';\n          header += '<th colspan=\"2\" style=\"text-align:left\"></th>';\n          if (panel.legend.values) {\n            header += getTableHeaderHtml('min');\n            header += getTableHeaderHtml('max');\n            header += getTableHeaderHtml('avg');\n            header += getTableHeaderHtml('current');\n            header += getTableHeaderHtml('total');\n          }\n          header += '</tr>';\n          tableHeaderElem = $(header);\n        }\n\n        if (panel.legend.sort) {\n          seriesList = _.sortBy(seriesList, series => {\n            let sort = series.stats[panel.legend.sort];\n            if (sort === null) {\n              sort = -Infinity;\n            }\n            return sort;\n          });\n          if (panel.legend.sortDesc) {\n            seriesList = seriesList.reverse();\n          }\n        }\n\n        // render first time for getting proper legend height\n        if (!panel.legend.rightSide || (panel.legend.rightSide && legendWidth !== legendRightDefaultWidth)) {\n          renderLegendElement(tableHeaderElem);\n          elem.empty();\n        }\n\n        renderLegendElement(tableHeaderElem);\n      }\n\n      function renderSeriesLegendElements() {\n        const seriesElements = [];\n        for (i = 0; i < seriesList.length; i++) {\n          const series = seriesList[i];\n\n          if (series.hideFromLegend(panel.legend)) {\n            continue;\n          }\n\n          let html = '<div class=\"graph-legend-series';\n\n          if (series.yaxis === 2) {\n            html += ' graph-legend-series--right-y';\n          }\n          if (ctrl.hiddenSeries[series.alias]) {\n            html += ' graph-legend-series-hidden';\n          }\n          html += '\" data-series-index=\"' + i + '\">';\n          html += '<div class=\"graph-legend-icon\">';\n          html += '<i class=\"fa fa-minus pointer\" style=\"color:' + series.color + '\"></i>';\n          html += '</div>';\n\n          html +=\n            '<a class=\"graph-legend-alias pointer\" title=\"' + series.aliasEscaped + '\">' + series.aliasEscaped + '</a>';\n\n          if (panel.legend.values) {\n            const avg = series.formatValue(series.stats.avg);\n            const current = series.formatValue(series.stats.current);\n            const min = series.formatValue(series.stats.min);\n            const max = series.formatValue(series.stats.max);\n            const total = series.formatValue(series.stats.total);\n\n            if (panel.legend.min) {\n              html += '<div class=\"graph-legend-value min\">' + min + '</div>';\n            }\n            if (panel.legend.max) {\n              html += '<div class=\"graph-legend-value max\">' + max + '</div>';\n            }\n            if (panel.legend.avg) {\n              html += '<div class=\"graph-legend-value avg\">' + avg + '</div>';\n            }\n            if (panel.legend.current) {\n              html += '<div class=\"graph-legend-value current\">' + current + '</div>';\n            }\n            if (panel.legend.total) {\n              html += '<div class=\"graph-legend-value total\">' + total + '</div>';\n            }\n          }\n\n          html += '</div>';\n          seriesElements.push($(html));\n        }\n        return seriesElements;\n      }\n\n      function renderLegendElement(tableHeaderElem) {\n        const legendWidth = elem.width();\n\n        const seriesElements = renderSeriesLegendElements();\n\n        if (panel.legend.alignAsTable) {\n          const tbodyElem = $('<tbody></tbody>');\n          tbodyElem.append(tableHeaderElem);\n          tbodyElem.append(seriesElements);\n          elem.append(tbodyElem);\n          tbodyElem.wrap('<div class=\"graph-legend-scroll\"></div>');\n        } else {\n          elem.append('<div class=\"graph-legend-scroll\"></div>');\n          elem.find('.graph-legend-scroll').append(seriesElements);\n        }\n\n        if (!panel.legend.rightSide || (panel.legend.rightSide && legendWidth !== legendRightDefaultWidth)) {\n          addScrollbar();\n        } else {\n          destroyScrollbar();\n        }\n      }\n\n      function addScrollbar() {\n        const scrollRootClass = 'baron baron__root';\n        const scrollerClass = 'baron__scroller';\n        const scrollBarHTML = `\n          <div class=\"baron__track\">\n            <div class=\"baron__bar\"></div>\n          </div>\n        `;\n\n        const scrollRoot = elem;\n        const scroller = elem.find('.graph-legend-scroll');\n\n        // clear existing scroll bar track to prevent duplication\n        scrollRoot.find('.baron__track').remove();\n\n        scrollRoot.addClass(scrollRootClass);\n        $(scrollBarHTML).appendTo(scrollRoot);\n        scroller.addClass(scrollerClass);\n\n        const scrollbarParams = {\n          root: scrollRoot[0],\n          scroller: scroller[0],\n          bar: '.baron__bar',\n          track: '.baron__track',\n          barOnCls: '_scrollbar',\n          scrollingCls: '_scrolling',\n        };\n\n        if (!legendScrollbar) {\n          legendScrollbar = baron(scrollbarParams);\n        } else {\n          destroyScrollbar();\n          legendScrollbar = baron(scrollbarParams);\n        }\n\n        // #11830 - compensates for Firefox scrollbar calculation error in the baron framework\n        scroller[0].style.marginRight = '-' + (scroller[0].offsetWidth - scroller[0].clientWidth) + 'px';\n\n        legendScrollbar.scroll();\n      }\n\n      function destroyScrollbar() {\n        if (legendScrollbar) {\n          legendScrollbar.dispose();\n          legendScrollbar = undefined;\n        }\n      }\n    },\n  };\n});\n","import _ from 'lodash';\nimport angular from 'angular';\n\n/** @ngInject */\nexport function SeriesOverridesCtrl($scope, $element, popoverSrv) {\n  $scope.overrideMenu = [];\n  $scope.currentOverrides = [];\n  $scope.override = $scope.override || {};\n\n  $scope.addOverrideOption = (name, propertyName, values) => {\n    const option = {\n      text: name,\n      propertyName: propertyName,\n      index: $scope.overrideMenu.lenght,\n      values: values,\n      submenu: _.map(values, value => {\n        return { text: String(value), value: value };\n      }),\n    };\n\n    $scope.overrideMenu.push(option);\n  };\n\n  $scope.setOverride = (item, subItem) => {\n    // handle color overrides\n    if (item.propertyName === 'color') {\n      $scope.openColorSelector($scope.override['color']);\n      return;\n    }\n\n    $scope.override[item.propertyName] = subItem.value;\n\n    // automatically disable lines for this series and the fill below to series\n    // can be removed by the user if they still want lines\n    if (item.propertyName === 'fillBelowTo') {\n      $scope.override['lines'] = false;\n      $scope.ctrl.addSeriesOverride({ alias: subItem.value, lines: false });\n    }\n\n    $scope.updateCurrentOverrides();\n    $scope.ctrl.render();\n  };\n\n  $scope.colorSelected = color => {\n    $scope.override['color'] = color;\n    $scope.updateCurrentOverrides();\n    $scope.ctrl.render();\n  };\n\n  $scope.openColorSelector = color => {\n    const fakeSeries = { color: color };\n    popoverSrv.show({\n      element: $element.find('.dropdown')[0],\n      position: 'top center',\n      openOn: 'click',\n      template: '<series-color-picker series=\"series\" onColorChange=\"colorSelected\" />',\n      model: {\n        autoClose: true,\n        colorSelected: $scope.colorSelected,\n        series: fakeSeries,\n      },\n      onClose: () => {\n        $scope.ctrl.render();\n      },\n    });\n  };\n\n  $scope.removeOverride = option => {\n    delete $scope.override[option.propertyName];\n    $scope.updateCurrentOverrides();\n    $scope.ctrl.refresh();\n  };\n\n  $scope.getSeriesNames = () => {\n    return _.map($scope.ctrl.seriesList, series => {\n      return series.alias;\n    });\n  };\n\n  $scope.updateCurrentOverrides = () => {\n    $scope.currentOverrides = [];\n    _.each($scope.overrideMenu, option => {\n      const value = $scope.override[option.propertyName];\n      if (_.isUndefined(value)) {\n        return;\n      }\n      $scope.currentOverrides.push({\n        name: option.text,\n        propertyName: option.propertyName,\n        value: String(value),\n      });\n    });\n  };\n\n  $scope.addOverrideOption('条状', 'bars', [true, false]);\n  $scope.addOverrideOption('线条', 'lines', [true, false]);\n  $scope.addOverrideOption('填充线条', 'fill', [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\n  $scope.addOverrideOption('线条宽度', 'linewidth', [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\n  $scope.addOverrideOption('空点模式', 'nullPointMode', ['connected', 'null', 'null as zero']);\n  $scope.addOverrideOption('填满以下', 'fillBelowTo', $scope.getSeriesNames());\n  $scope.addOverrideOption('楼梯线', 'steppedLine', [true, false]);\n  $scope.addOverrideOption('虚线', 'dashes', [true, false]);\n  $scope.addOverrideOption('虚线长度', 'dashLength', [\n    1,\n    2,\n    3,\n    4,\n    5,\n    6,\n    7,\n    8,\n    9,\n    10,\n    11,\n    12,\n    13,\n    14,\n    15,\n    16,\n    17,\n    18,\n    19,\n    20,\n  ]);\n  $scope.addOverrideOption('虚线空间', 'spaceLength', [\n    1,\n    2,\n    3,\n    4,\n    5,\n    6,\n    7,\n    8,\n    9,\n    10,\n    11,\n    12,\n    13,\n    14,\n    15,\n    16,\n    17,\n    18,\n    19,\n    20,\n  ]);\n  $scope.addOverrideOption('点状', 'points', [true, false]);\n  $scope.addOverrideOption('点半径', 'pointradius', [1, 2, 3, 4, 5]);\n  $scope.addOverrideOption('栈式', 'stack', [true, false, 'A', 'B', 'C', 'D']);\n  $scope.addOverrideOption('颜色', 'color', ['change']);\n  $scope.addOverrideOption('Y-轴', 'yaxis', [1, 2]);\n  $scope.addOverrideOption('Z-索引', 'zindex', [-3, -2, -1, 0, 1, 2, 3]);\n  $scope.addOverrideOption('转换', 'transform', ['negative-Y']);\n  $scope.addOverrideOption('图例', 'legend', [true, false]);\n  $scope.addOverrideOption('提示文本框中隐藏', 'hideTooltip', [true, false]);\n  $scope.updateCurrentOverrides();\n}\n\nangular.module('grafana.controllers').controller('SeriesOverridesCtrl', SeriesOverridesCtrl);\n","import coreModule from 'app/core/core_module';\n\nexport class ThresholdFormCtrl {\n  panelCtrl: any;\n  panel: any;\n  disabled: boolean;\n\n  /** @ngInject */\n  constructor($scope) {\n    this.panel = this.panelCtrl.panel;\n\n    if (this.panel.alert) {\n      this.disabled = true;\n    }\n\n    const unbindDestroy = $scope.$on('$destroy', () => {\n      this.panelCtrl.editingThresholds = false;\n      this.panelCtrl.render();\n      unbindDestroy();\n    });\n\n    this.panelCtrl.editingThresholds = true;\n  }\n\n  addThreshold() {\n    this.panel.thresholds.push({\n      value: undefined,\n      colorMode: 'critical',\n      op: 'gt',\n      fill: true,\n      line: true,\n      yaxis: 'left',\n    });\n    this.panelCtrl.render();\n  }\n\n  removeThreshold(index) {\n    this.panel.thresholds.splice(index, 1);\n    this.panelCtrl.render();\n  }\n\n  render() {\n    this.panelCtrl.render();\n  }\n\n  onFillColorChange(index) {\n    return newColor => {\n      this.panel.thresholds[index].fillColor = newColor;\n      this.render();\n    };\n  }\n\n  onLineColorChange(index) {\n    return newColor => {\n      this.panel.thresholds[index].lineColor = newColor;\n      this.render();\n    };\n  }\n}\n\nconst template = `\n<div class=\"gf-form-group\">\n  <h5>阈值</h5>\n  <p class=\"muted\" ng-show=\"ctrl.disabled\">\n    <strong>已禁用</strong>查看阈值选项\n    查看告警选项卡更新阈值。 <br>\n    要重新启用阈值，必须从该面板中删除告警规则。\n  </p>\n  <div ng-class=\"{'thresholds-form-disabled': ctrl.disabled}\">\n    <div class=\"gf-form-inline\" ng-repeat=\"threshold in ctrl.panel.thresholds\">\n      <div class=\"gf-form\">\n        <label class=\"gf-form-label\">T{{$index+1}}</label>\n      </div>\n\n      <div class=\"gf-form\">\n        <div class=\"gf-form-select-wrapper\">\n          <select class=\"gf-form-input\" ng-model=\"threshold.op\"\n                  ng-options=\"f for f in ['gt', 'lt']\" ng-change=\"ctrl.render()\" ng-disabled=\"ctrl.disabled\"></select>\n        </div>\n        <input type=\"number\" ng-model=\"threshold.value\" class=\"gf-form-input width-8\"\n               ng-change=\"ctrl.render()\" placeholder=\"值\" ng-disabled=\"ctrl.disabled\">\n      </div>\n\n      <div class=\"gf-form\">\n        <label class=\"gf-form-label\">颜色</label>\n        <div class=\"gf-form-select-wrapper\">\n          <select class=\"gf-form-input\" ng-model=\"threshold.colorMode\"\n                  ng-options=\"f for f in ['custom', 'critical', 'warning', 'ok']\" ng-change=\"ctrl.render()\" ng-disabled=\"ctrl.disabled\">\n          </select>\n        </div>\n      </div>\n\n      <gf-form-switch class=\"gf-form\" label=\"Fill\" checked=\"threshold.fill\"\n                      on-change=\"ctrl.render()\" ng-disabled=\"ctrl.disabled\"></gf-form-switch>\n\n      <div class=\"gf-form\" ng-if=\"threshold.fill && threshold.colorMode === 'custom'\">\n        <label class=\"gf-form-label\">填充颜色</label>\n        <span class=\"gf-form-label\">\n          <color-picker color=\"threshold.fillColor\" onChange=\"ctrl.onFillColorChange($index)\"></color-picker>\n        </span>\n      </div>\n\n      <gf-form-switch class=\"gf-form\" label=\"线段\" checked=\"threshold.line\"\n                      on-change=\"ctrl.render()\" ng-disabled=\"ctrl.disabled\"></gf-form-switch>\n\n      <div class=\"gf-form\" ng-if=\"threshold.line && threshold.colorMode === 'custom'\">\n        <label class=\"gf-form-label\">线段颜色</label>\n        <span class=\"gf-form-label\">\n          <color-picker color=\"threshold.lineColor\" onChange=\"ctrl.onLineColorChange($index)\"></color-picker>\n        </span>\n      </div>\n\n      <div class=\"gf-form\">\n        <label class=\"gf-form-label\">Y-轴</label>\n        <div class=\"gf-form-select-wrapper\">\n          <select class=\"gf-form-input\" ng-model=\"threshold.yaxis\"\n                  ng-init=\"threshold.yaxis = threshold.yaxis === 'left' || threshold.yaxis === 'right' ? threshold.yaxis : 'left'\"\n                  ng-options=\"f for f in ['left', 'right']\" ng-change=\"ctrl.render()\" ng-disabled=\"ctrl.disabled\">\n          </select>\n        </div>\n      </div>\n\n      <div class=\"gf-form\">\n        <label class=\"gf-form-label\">\n          <a class=\"pointer\" ng-click=\"ctrl.removeThreshold($index)\" ng-disabled=\"ctrl.disabled\">\n            <i class=\"fa fa-trash\"></i>\n          </a>\n        </label>\n      </div>\n    </div>\n\n    <div class=\"gf-form-button-row\">\n      <button class=\"btn btn-inverse\" ng-click=\"ctrl.addThreshold()\" ng-disabled=\"ctrl.disabled\">\n        <i class=\"fa fa-plus\"></i>&nbsp;Add Threshold\n      </button>\n    </div>\n  </div>\n</div>\n`;\n\ncoreModule.directive('graphThresholdForm', () => {\n  return {\n    restrict: 'E',\n    template: template,\n    controller: ThresholdFormCtrl,\n    bindToController: true,\n    controllerAs: 'ctrl',\n    scope: {\n      panelCtrl: '=',\n    },\n  };\n});\n","const template = `\n<div class=\"graph-panel\" ng-class=\"{'graph-panel--legend-right': ctrl.panel.legend.rightSide}\">\n  <div class=\"graph-panel__chart\" grafana-graph ng-dblclick=\"ctrl.zoomOut()\">\n  </div>\n\n  <div class=\"graph-legend\">\n    <div class=\"graph-legend-content\" graph-legend></div>\n  </div>\n</div>\n`;\n\nexport default template;\n","import _ from 'lodash';\nimport TimeSeries from 'app/core/time_series2';\nimport colors from 'app/core/utils/colors';\n\nexport class DataProcessor {\n  constructor(private panel) {}\n\n  getSeriesList(options) {\n    if (!options.dataList || options.dataList.length === 0) {\n      return [];\n    }\n\n    // auto detect xaxis mode\n    let firstItem;\n    if (options.dataList && options.dataList.length > 0) {\n      firstItem = options.dataList[0];\n      const autoDetectMode = this.getAutoDetectXAxisMode(firstItem);\n      if (this.panel.xaxis.mode !== autoDetectMode) {\n        this.panel.xaxis.mode = autoDetectMode;\n        this.setPanelDefaultsForNewXAxisMode();\n      }\n    }\n\n    switch (this.panel.xaxis.mode) {\n      case 'series':\n      case 'time': {\n        return options.dataList.map((item, index) => {\n          return this.timeSeriesHandler(item, index, options);\n        });\n      }\n      case 'histogram': {\n        let histogramDataList;\n        if (this.panel.stack) {\n          histogramDataList = options.dataList;\n        } else {\n          histogramDataList = [\n            {\n              target: 'count',\n              datapoints: _.concat([], _.flatten(_.map(options.dataList, 'datapoints'))),\n            },\n          ];\n        }\n        return histogramDataList.map((item, index) => {\n          return this.timeSeriesHandler(item, index, options);\n        });\n      }\n      case 'field': {\n        return this.customHandler(firstItem);\n      }\n    }\n  }\n\n  getAutoDetectXAxisMode(firstItem) {\n    switch (firstItem.type) {\n      case 'docs':\n        return 'field';\n      case 'table':\n        return 'field';\n      default: {\n        if (this.panel.xaxis.mode === 'series') {\n          return 'series';\n        }\n        if (this.panel.xaxis.mode === 'histogram') {\n          return 'histogram';\n        }\n        return 'time';\n      }\n    }\n  }\n\n  setPanelDefaultsForNewXAxisMode() {\n    switch (this.panel.xaxis.mode) {\n      case 'time': {\n        this.panel.bars = false;\n        this.panel.lines = true;\n        this.panel.points = false;\n        this.panel.legend.show = true;\n        this.panel.tooltip.shared = true;\n        this.panel.xaxis.values = [];\n        break;\n      }\n      case 'series': {\n        this.panel.bars = true;\n        this.panel.lines = false;\n        this.panel.points = false;\n        this.panel.stack = false;\n        this.panel.legend.show = false;\n        this.panel.tooltip.shared = false;\n        this.panel.xaxis.values = ['total'];\n        break;\n      }\n      case 'histogram': {\n        this.panel.bars = true;\n        this.panel.lines = false;\n        this.panel.points = false;\n        this.panel.stack = false;\n        this.panel.legend.show = false;\n        this.panel.tooltip.shared = false;\n        break;\n      }\n    }\n  }\n\n  timeSeriesHandler(seriesData, index, options) {\n    const datapoints = seriesData.datapoints || [];\n    const alias = seriesData.target;\n\n    const colorIndex = index % colors.length;\n    const color = this.panel.aliasColors[alias] || colors[colorIndex];\n\n    const series = new TimeSeries({\n      datapoints: datapoints,\n      alias: alias,\n      color: color,\n      unit: seriesData.unit,\n    });\n\n    if (datapoints && datapoints.length > 0) {\n      const last = datapoints[datapoints.length - 1][1];\n      const from = options.range.from;\n      if (last - from < -10000) {\n        series.isOutsideRange = true;\n      }\n    }\n\n    return series;\n  }\n\n  customHandler(dataItem) {\n    const nameField = this.panel.xaxis.name;\n    if (!nameField) {\n      throw {\n        message: 'No field name specified to use for x-axis, check your axes settings',\n      };\n    }\n    return [];\n  }\n\n  validateXAxisSeriesValue() {\n    switch (this.panel.xaxis.mode) {\n      case 'series': {\n        if (this.panel.xaxis.values.length === 0) {\n          this.panel.xaxis.values = ['total'];\n          return;\n        }\n\n        const validOptions = this.getXAxisValueOptions({});\n        const found = _.find(validOptions, { value: this.panel.xaxis.values[0] });\n        if (!found) {\n          this.panel.xaxis.values = ['total'];\n        }\n        return;\n      }\n    }\n  }\n\n  getDataFieldNames(dataList, onlyNumbers) {\n    if (dataList.length === 0) {\n      return [];\n    }\n\n    const fields = [];\n    const firstItem = dataList[0];\n    const fieldParts = [];\n\n    function getPropertiesRecursive(obj) {\n      _.forEach(obj, (value, key) => {\n        if (_.isObject(value)) {\n          fieldParts.push(key);\n          getPropertiesRecursive(value);\n        } else {\n          if (!onlyNumbers || _.isNumber(value)) {\n            const field = fieldParts.concat(key).join('.');\n            fields.push(field);\n          }\n        }\n      });\n      fieldParts.pop();\n    }\n\n    if (firstItem.type === 'docs') {\n      if (firstItem.datapoints.length === 0) {\n        return [];\n      }\n      getPropertiesRecursive(firstItem.datapoints[0]);\n    }\n\n    return fields;\n  }\n\n  getXAxisValueOptions(options) {\n    switch (this.panel.xaxis.mode) {\n      case 'series': {\n        return [\n          { text: 'Avg', value: 'avg' },\n          { text: 'Min', value: 'min' },\n          { text: 'Max', value: 'max' },\n          { text: 'Total', value: 'total' },\n          { text: 'Count', value: 'count' },\n        ];\n      }\n    }\n\n    return [];\n  }\n\n  pluckDeep(obj: any, property: string) {\n    const propertyParts = property.split('.');\n    let value = obj;\n    for (let i = 0; i < propertyParts.length; ++i) {\n      if (value[propertyParts[i]]) {\n        value = value[propertyParts[i]];\n      } else {\n        return undefined;\n      }\n    }\n    return value;\n  }\n}\n","import './graph';\nimport './legend';\nimport './series_overrides_ctrl';\nimport './thresholds_form';\n\nimport template from './template';\nimport _ from 'lodash';\nimport config from 'app/core/config';\nimport { MetricsPanelCtrl, alertTab } from 'app/plugins/sdk';\nimport { DataProcessor } from './data_processor';\nimport { axesEditorComponent } from './axes_editor';\n\nclass GraphCtrl extends MetricsPanelCtrl {\n  static template = template;\n\n  renderError: boolean;\n  hiddenSeries: any = {};\n  seriesList: any = [];\n  dataList: any = [];\n  annotations: any = [];\n  alertState: any;\n\n  annotationsPromise: any;\n  dataWarning: any;\n  colors: any = [];\n  subTabIndex: number;\n  processor: DataProcessor;\n\n  panelDefaults = {\n    // datasource name, null = default datasource\n    datasource: null,\n    // sets client side (flot) or native graphite png renderer (png)\n    renderer: 'flot',\n    yaxes: [\n      {\n        label: null,\n        show: true,\n        logBase: 1,\n        min: null,\n        max: null,\n        format: 'short',\n      },\n      {\n        label: null,\n        show: true,\n        logBase: 1,\n        min: null,\n        max: null,\n        format: 'short',\n      },\n    ],\n    xaxis: {\n      show: true,\n      mode: 'time',\n      name: null,\n      values: [],\n      buckets: null,\n    },\n    yaxis: {\n      align: false,\n      alignLevel: null,\n    },\n    // show/hide lines\n    lines: true,\n    // fill factor\n    fill: 1,\n    // line width in pixels\n    linewidth: 1,\n    // show/hide dashed line\n    dashes: false,\n    // length of a dash\n    dashLength: 10,\n    // length of space between two dashes\n    spaceLength: 10,\n    // show hide points\n    points: false,\n    // point radius in pixels\n    pointradius: 5,\n    // show hide bars\n    bars: false,\n    // enable/disable stacking\n    stack: false,\n    // stack percentage mode\n    percentage: false,\n    // legend options\n    legend: {\n      show: true, // disable/enable legend\n      values: false, // disable/enable legend values\n      min: false,\n      max: false,\n      current: false,\n      total: false,\n      avg: false,\n    },\n    // how null points should be handled\n    nullPointMode: 'null',\n    // staircase line mode\n    steppedLine: false,\n    // tooltip options\n    tooltip: {\n      value_type: 'individual',\n      shared: true,\n      sort: 0,\n    },\n    // time overrides\n    timeFrom: null,\n    timeShift: null,\n    // metric queries\n    targets: [{}],\n    // series color overrides\n    aliasColors: {},\n    // other style overrides\n    seriesOverrides: [],\n    thresholds: [],\n  };\n\n  /** @ngInject */\n  constructor($scope, $injector, private annotationsSrv) {\n    super($scope, $injector);\n\n    _.defaults(this.panel, this.panelDefaults);\n    _.defaults(this.panel.tooltip, this.panelDefaults.tooltip);\n    _.defaults(this.panel.legend, this.panelDefaults.legend);\n    _.defaults(this.panel.xaxis, this.panelDefaults.xaxis);\n\n    this.processor = new DataProcessor(this.panel);\n\n    this.events.on('render', this.onRender.bind(this));\n    this.events.on('data-received', this.onDataReceived.bind(this));\n    this.events.on('data-error', this.onDataError.bind(this));\n    this.events.on('data-snapshot-load', this.onDataSnapshotLoad.bind(this));\n    this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n    this.events.on('init-panel-actions', this.onInitPanelActions.bind(this));\n  }\n\n  onInitEditMode() {\n    this.addEditorTab('坐标轴', axesEditorComponent, 2);\n    this.addEditorTab('图例', 'public/app/plugins/panel/graph/tab_legend.html', 3);\n    this.addEditorTab('展示', 'public/app/plugins/panel/graph/tab_display.html', 4);\n\n    if (config.alertingEnabled) {\n      this.addEditorTab('告警', alertTab, 5);\n    }\n\n    this.subTabIndex = 0;\n  }\n\n  onInitPanelActions(actions) {\n    actions.push({ text: '导出 CSV', click: 'ctrl.exportCsv()' });\n    actions.push({ text: '启用图例', click: 'ctrl.toggleLegend()' });\n  }\n\n  issueQueries(datasource) {\n    this.annotationsPromise = this.annotationsSrv.getAnnotations({\n      dashboard: this.dashboard,\n      panel: this.panel,\n      range: this.range,\n    });\n    return super.issueQueries(datasource);\n  }\n\n  zoomOut(evt) {\n    this.publishAppEvent('zoom-out', 2);\n  }\n\n  onDataSnapshotLoad(snapshotData) {\n    this.annotationsPromise = this.annotationsSrv.getAnnotations({\n      dashboard: this.dashboard,\n      panel: this.panel,\n      range: this.range,\n    });\n    this.onDataReceived(snapshotData);\n  }\n\n  onDataError(err) {\n    this.seriesList = [];\n    this.annotations = [];\n    this.render([]);\n  }\n\n  onDataReceived(dataList) {\n    this.dataList = dataList;\n    this.seriesList = this.processor.getSeriesList({\n      dataList: dataList,\n      range: this.range,\n    });\n\n    this.dataWarning = null;\n    const datapointsCount = this.seriesList.reduce((prev, series) => {\n      return prev + series.datapoints.length;\n    }, 0);\n\n    if (datapointsCount === 0) {\n      this.dataWarning = {\n        title: '暂无数据点',\n        tip: '数据查询中无数据点返回',\n      };\n    } else {\n      for (const series of this.seriesList) {\n        if (series.isOutsideRange) {\n          this.dataWarning = {\n            title: '数据点不在时间范围内',\n            tip: '由时区失配或时间过滤设置不当引起',\n          };\n          break;\n        }\n      }\n    }\n\n    this.annotationsPromise.then(\n      result => {\n        this.loading = false;\n        this.alertState = result.alertState;\n        this.annotations = result.annotations;\n        this.render(this.seriesList);\n      },\n      () => {\n        this.loading = false;\n        this.render(this.seriesList);\n      }\n    );\n  }\n\n  onRender() {\n    if (!this.seriesList) {\n      return;\n    }\n\n    for (const series of this.seriesList) {\n      series.applySeriesOverrides(this.panel.seriesOverrides);\n\n      if (series.unit) {\n        this.panel.yaxes[series.yaxis - 1].format = series.unit;\n      }\n    }\n  }\n\n  changeSeriesColor(series, color) {\n    series.setColor(color);\n    this.panel.aliasColors[series.alias] = series.color;\n    this.render();\n  }\n\n  toggleSeries(serie, event) {\n    if (event.ctrlKey || event.metaKey || event.shiftKey) {\n      if (this.hiddenSeries[serie.alias]) {\n        delete this.hiddenSeries[serie.alias];\n      } else {\n        this.hiddenSeries[serie.alias] = true;\n      }\n    } else {\n      this.toggleSeriesExclusiveMode(serie);\n    }\n    this.render();\n  }\n\n  toggleSeriesExclusiveMode(serie) {\n    const hidden = this.hiddenSeries;\n\n    if (hidden[serie.alias]) {\n      delete hidden[serie.alias];\n    }\n\n    // check if every other series is hidden\n    const alreadyExclusive = _.every(this.seriesList, value => {\n      if (value.alias === serie.alias) {\n        return true;\n      }\n\n      return hidden[value.alias];\n    });\n\n    if (alreadyExclusive) {\n      // remove all hidden series\n      _.each(this.seriesList, value => {\n        delete this.hiddenSeries[value.alias];\n      });\n    } else {\n      // hide all but this serie\n      _.each(this.seriesList, value => {\n        if (value.alias === serie.alias) {\n          return;\n        }\n\n        this.hiddenSeries[value.alias] = true;\n      });\n    }\n  }\n\n  toggleAxis(info) {\n    let override = _.find(this.panel.seriesOverrides, { alias: info.alias });\n    if (!override) {\n      override = { alias: info.alias };\n      this.panel.seriesOverrides.push(override);\n    }\n    info.yaxis = override.yaxis = info.yaxis === 2 ? 1 : 2;\n    this.render();\n  }\n\n  addSeriesOverride(override) {\n    this.panel.seriesOverrides.push(override || {});\n  }\n\n  removeSeriesOverride(override) {\n    this.panel.seriesOverrides = _.without(this.panel.seriesOverrides, override);\n    this.render();\n  }\n\n  toggleLegend() {\n    this.panel.legend.show = !this.panel.legend.show;\n    this.refresh();\n  }\n\n  legendValuesOptionChanged() {\n    const legend = this.panel.legend;\n    legend.values = legend.min || legend.max || legend.avg || legend.current || legend.total;\n    this.render();\n  }\n\n  exportCsv() {\n    const scope = this.$scope.$new(true);\n    scope.seriesList = this.seriesList;\n    this.publishAppEvent('show-modal', {\n      templateHtml: '<export-data-modal data=\"seriesList\"></export-data-modal>',\n      scope,\n      modalClass: 'modal--narrow',\n    });\n  }\n}\n\nexport { GraphCtrl, GraphCtrl as PanelCtrl };\n","import kbn from 'app/core/utils/kbn';\n\nexport class AxesEditorCtrl {\n  panel: any;\n  panelCtrl: any;\n  unitFormats: any;\n  logScales: any;\n  xAxisModes: any;\n  xAxisStatOptions: any;\n  xNameSegment: any;\n\n  /** @ngInject */\n  constructor(private $scope, private $q) {\n    this.panelCtrl = $scope.ctrl;\n    this.panel = this.panelCtrl.panel;\n    this.$scope.ctrl = this;\n\n    this.unitFormats = kbn.getUnitFormats();\n\n    this.logScales = {\n      linear: 1,\n      'log (base 2)': 2,\n      'log (base 10)': 10,\n      'log (base 32)': 32,\n      'log (base 1024)': 1024,\n    };\n\n    this.xAxisModes = {\n      Time: 'time',\n      Series: 'series',\n      Histogram: 'histogram',\n      // 'Data field': 'field',\n    };\n\n    this.xAxisStatOptions = [\n      { text: 'Avg', value: 'avg' },\n      { text: 'Min', value: 'min' },\n      { text: 'Max', value: 'max' },\n      { text: 'Total', value: 'total' },\n      { text: 'Count', value: 'count' },\n      { text: 'Current', value: 'current' },\n    ];\n\n    if (this.panel.xaxis.mode === 'custom') {\n      if (!this.panel.xaxis.name) {\n        this.panel.xaxis.name = 'specify field';\n      }\n    }\n  }\n\n  setUnitFormat(axis, subItem) {\n    axis.format = subItem.value;\n    this.panelCtrl.render();\n  }\n\n  render() {\n    this.panelCtrl.render();\n  }\n\n  xAxisModeChanged() {\n    this.panelCtrl.processor.setPanelDefaultsForNewXAxisMode();\n    this.panelCtrl.onDataReceived(this.panelCtrl.dataList);\n  }\n\n  xAxisValueChanged() {\n    this.panelCtrl.onDataReceived(this.panelCtrl.dataList);\n  }\n\n  getDataFieldNames(onlyNumbers) {\n    const props = this.panelCtrl.processor.getDataFieldNames(this.panelCtrl.dataList, onlyNumbers);\n    const items = props.map(prop => {\n      return { text: prop, value: prop };\n    });\n\n    return this.$q.when(items);\n  }\n}\n\n/** @ngInject */\nexport function axesEditorComponent() {\n  'use strict';\n  return {\n    restrict: 'E',\n    scope: true,\n    templateUrl: 'public/app/plugins/panel/graph/axes_editor.html',\n    controller: AxesEditorCtrl,\n  };\n}\n","import _ from 'lodash';\nimport { PanelCtrl } from 'app/plugins/sdk';\nimport impressionSrv from 'app/core/services/impression_srv';\n\nclass DashListCtrl extends PanelCtrl {\n  static templateUrl = 'module.html';\n  static scrollable = true;\n\n  groups: any[];\n  modes: any[];\n\n  panelDefaults = {\n    query: '',\n    limit: 10,\n    tags: [],\n    recent: false,\n    search: false,\n    starred: true,\n    headings: true,\n    folderId: null,\n  };\n\n  /** @ngInject */\n  constructor($scope, $injector, private backendSrv, private dashboardSrv) {\n    super($scope, $injector);\n    _.defaults(this.panel, this.panelDefaults);\n\n    if (this.panel.tag) {\n      this.panel.tags = [this.panel.tag];\n      delete this.panel.tag;\n    }\n\n    this.events.on('refresh', this.onRefresh.bind(this));\n    this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n\n    this.groups = [\n      { list: [], show: false, header: '收藏的仪表盘' },\n      { list: [], show: false, header: '最近查看的仪表盘' },\n      { list: [], show: false, header: '搜索' },\n    ];\n\n    // update capability\n    if (this.panel.mode) {\n      if (this.panel.mode === 'starred') {\n        this.panel.starred = true;\n        this.panel.headings = false;\n      }\n      if (this.panel.mode === 'recently viewed') {\n        this.panel.recent = true;\n        this.panel.starred = false;\n        this.panel.headings = false;\n      }\n      if (this.panel.mode === 'search') {\n        this.panel.search = true;\n        this.panel.starred = false;\n        this.panel.headings = false;\n      }\n      delete this.panel.mode;\n    }\n  }\n\n  onInitEditMode() {\n    this.editorTabIndex = 1;\n    this.modes = ['starred', 'search', 'recently viewed'];\n    this.addEditorTab('选项', 'public/app/plugins/panel/dashlist/editor.html');\n  }\n\n  onRefresh() {\n    const promises = [];\n\n    promises.push(this.getRecentDashboards());\n    promises.push(this.getStarred());\n    promises.push(this.getSearch());\n\n    return Promise.all(promises).then(this.renderingCompleted.bind(this));\n  }\n\n  getSearch() {\n    this.groups[2].show = this.panel.search;\n    if (!this.panel.search) {\n      return Promise.resolve();\n    }\n\n    const params = {\n      limit: this.panel.limit,\n      query: this.panel.query,\n      tag: this.panel.tags,\n      folderIds: this.panel.folderId,\n      type: 'dash-db',\n    };\n\n    return this.backendSrv.search(params).then(result => {\n      this.groups[2].list = result;\n    });\n  }\n\n  getStarred() {\n    this.groups[0].show = this.panel.starred;\n    if (!this.panel.starred) {\n      return Promise.resolve();\n    }\n\n    const params = { limit: this.panel.limit, starred: 'true' };\n    return this.backendSrv.search(params).then(result => {\n      this.groups[0].list = result;\n    });\n  }\n\n  starDashboard(dash, evt) {\n    this.dashboardSrv.starDashboard(dash.id, dash.isStarred).then(newState => {\n      dash.isStarred = newState;\n    });\n\n    if (evt) {\n      evt.stopPropagation();\n      evt.preventDefault();\n    }\n  }\n\n  getRecentDashboards() {\n    this.groups[1].show = this.panel.recent;\n    if (!this.panel.recent) {\n      return Promise.resolve();\n    }\n\n    const dashIds = _.take(impressionSrv.getDashboardOpened(), this.panel.limit);\n    return this.backendSrv.search({ dashboardIds: dashIds, limit: this.panel.limit }).then(result => {\n      this.groups[1].list = dashIds\n        .map(orderId => {\n          return _.find(result, dashboard => {\n            return dashboard.id === orderId;\n          });\n        })\n        .filter(el => {\n          return el !== undefined;\n        });\n    });\n  }\n\n  onFolderChange(folder: any) {\n    this.panel.folderId = folder.id;\n    this.refresh();\n  }\n}\n\nexport { DashListCtrl, DashListCtrl as PanelCtrl };\n","import _ from 'lodash';\nimport { PanelCtrl } from '../../../features/panel/panel_ctrl';\n\nclass PluginListCtrl extends PanelCtrl {\n  static templateUrl = 'module.html';\n  static scrollable = true;\n\n  pluginList: any[];\n  viewModel: any;\n\n  // Set and populate defaults\n  panelDefaults = {};\n\n  /** @ngInject */\n  constructor($scope, $injector, private backendSrv) {\n    super($scope, $injector);\n\n    _.defaults(this.panel, this.panelDefaults);\n\n    this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n    this.pluginList = [];\n    this.viewModel = [\n      { header: '已安装应用', list: [], type: 'app' },\n      { header: '已安装插件', list: [], type: 'panel' },\n      { header: '已安装数据源', list: [], type: 'datasource' },\n    ];\n\n    this.update();\n  }\n\n  onInitEditMode() {\n    this.editorTabIndex = 1;\n    this.addEditorTab('Options', 'public/app/plugins/panel/pluginlist/editor.html');\n  }\n\n  gotoPlugin(plugin, evt) {\n    if (evt) {\n      evt.stopPropagation();\n    }\n    this.$location.url(`plugins/${plugin.id}/edit`);\n  }\n\n  updateAvailable(plugin, $event) {\n    $event.stopPropagation();\n    $event.preventDefault();\n\n    const modalScope = this.$scope.$new(true);\n    modalScope.plugin = plugin;\n\n    this.publishAppEvent('show-modal', {\n      src: 'public/app/features/plugins/partials/update_instructions.html',\n      scope: modalScope,\n    });\n  }\n\n  update() {\n    this.backendSrv.get('api/plugins', { embedded: 0, core: 0 }).then(plugins => {\n      this.pluginList = plugins;\n      this.viewModel[0].list = _.filter(plugins, { type: 'app' });\n      this.viewModel[1].list = _.filter(plugins, { type: 'panel' });\n      this.viewModel[2].list = _.filter(plugins, { type: 'datasource' });\n\n      for (const plugin of this.pluginList) {\n        if (plugin.hasUpdate) {\n          plugin.state = 'has-update';\n        } else if (!plugin.enabled) {\n          plugin.state = 'not-enabled';\n        }\n      }\n    });\n  }\n}\n\nexport { PluginListCtrl, PluginListCtrl as PanelCtrl };\n","import _ from 'lodash';\nimport moment from 'moment';\nimport alertDef from '../../../features/alerting/state/alertDef';\nimport { PanelCtrl } from 'app/plugins/sdk';\n\nimport * as dateMath from 'app/core/utils/datemath';\n\nclass AlertListPanel extends PanelCtrl {\n  static templateUrl = 'module.html';\n  static scrollable = true;\n\n  showOptions = [{ text: '当前状态', value: 'current' }, { text: '近期状态改变', value: 'changes' }];\n\n  sortOrderOptions = [\n    { text: '字母序 (升序)', value: 1 },\n    { text: '字母序 (降序)', value: 2 },\n    { text: '重要因子', value: 3 },\n  ];\n\n  stateFilter: any = {};\n  currentAlerts: any = [];\n  alertHistory: any = [];\n  noAlertsMessage: string;\n\n  // Set and populate defaults\n  panelDefaults = {\n    show: 'current',\n    limit: 10,\n    stateFilter: [],\n    onlyAlertsOnDashboard: false,\n    sortOrder: 1,\n    dashboardFilter: '',\n    nameFilter: '',\n    folderId: null,\n  };\n\n  /** @ngInject */\n  constructor($scope, $injector, private backendSrv) {\n    super($scope, $injector);\n    _.defaults(this.panel, this.panelDefaults);\n\n    this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n    this.events.on('refresh', this.onRefresh.bind(this));\n\n    for (const key in this.panel.stateFilter) {\n      this.stateFilter[this.panel.stateFilter[key]] = true;\n    }\n  }\n\n  sortResult(alerts) {\n    if (this.panel.sortOrder === 3) {\n      return _.sortBy(alerts, a => {\n        return alertDef.alertStateSortScore[a.state];\n      });\n    }\n\n    const result = _.sortBy(alerts, a => {\n      return a.name.toLowerCase();\n    });\n    if (this.panel.sortOrder === 2) {\n      result.reverse();\n    }\n\n    return result;\n  }\n\n  updateStateFilter() {\n    const result = [];\n\n    for (const key in this.stateFilter) {\n      if (this.stateFilter[key]) {\n        result.push(key);\n      }\n    }\n\n    this.panel.stateFilter = result;\n    this.onRefresh();\n  }\n\n  onRefresh() {\n    let getAlertsPromise;\n\n    if (this.panel.show === 'current') {\n      getAlertsPromise = this.getCurrentAlertState();\n    }\n\n    if (this.panel.show === 'changes') {\n      getAlertsPromise = this.getStateChanges();\n    }\n\n    getAlertsPromise.then(() => {\n      this.renderingCompleted();\n    });\n  }\n\n  onFolderChange(folder: any) {\n    this.panel.folderId = folder.id;\n    this.refresh();\n  }\n\n  getStateChanges() {\n    const params: any = {\n      limit: this.panel.limit,\n      type: 'alert',\n      newState: this.panel.stateFilter,\n    };\n\n    if (this.panel.onlyAlertsOnDashboard) {\n      params.dashboardId = this.dashboard.id;\n    }\n\n    params.from = dateMath.parse(this.dashboard.time.from).unix() * 1000;\n    params.to = dateMath.parse(this.dashboard.time.to).unix() * 1000;\n\n    return this.backendSrv.get(`/api/annotations`, params).then(res => {\n      this.alertHistory = _.map(res, al => {\n        al.time = this.dashboard.formatDate(al.time, 'MMM D, YYYY HH:mm:ss');\n        al.stateModel = alertDef.getStateDisplayModel(al.newState);\n        al.info = alertDef.getAlertAnnotationInfo(al);\n        return al;\n      });\n\n      this.noAlertsMessage = this.alertHistory.length === 0 ? '近期暂无告警状态变更' : '';\n\n      return this.alertHistory;\n    });\n  }\n\n  getCurrentAlertState() {\n    const params: any = {\n      state: this.panel.stateFilter,\n    };\n\n    if (this.panel.nameFilter) {\n      params.query = this.panel.nameFilter;\n    }\n\n    if (this.panel.folderId >= 0) {\n      params.folderId = this.panel.folderId;\n    }\n\n    if (this.panel.dashboardFilter) {\n      params.dashboardQuery = this.panel.dashboardFilter;\n    }\n\n    if (this.panel.onlyAlertsOnDashboard) {\n      params.dashboardId = this.dashboard.id;\n    }\n\n    if (this.panel.dashboardTags) {\n      params.dashboardTag = this.panel.dashboardTags;\n    }\n\n    return this.backendSrv.get(`/api/alerts`, params).then(res => {\n      this.currentAlerts = this.sortResult(\n        _.map(res, al => {\n          al.stateModel = alertDef.getStateDisplayModel(al.state);\n          al.newStateDateAgo = moment(al.newStateDate)\n            .locale('en')\n            .fromNow(true);\n          return al;\n        })\n      );\n      if (this.currentAlerts.length > this.panel.limit) {\n        this.currentAlerts = this.currentAlerts.slice(0, this.panel.limit);\n      }\n      this.noAlertsMessage = this.currentAlerts.length === 0 ? '没有告警' : '';\n\n      return this.currentAlerts;\n    });\n  }\n\n  onInitEditMode() {\n    this.addEditorTab('选项', 'public/app/plugins/panel/alertlist/editor.html');\n  }\n}\n\nexport { AlertListPanel, AlertListPanel as PanelCtrl };\n","import angular from 'angular';\nimport _ from 'lodash';\nimport $ from 'jquery';\nimport * as d3 from 'd3';\nimport { contextSrv } from 'app/core/core';\nimport { tickStep } from 'app/core/utils/ticks';\nimport { getColorScale, getOpacityScale } from './color_scale';\n\nconst module = angular.module('grafana.directives');\n\nconst LEGEND_HEIGHT_PX = 6;\nconst LEGEND_WIDTH_PX = 100;\nconst LEGEND_TICK_SIZE = 0;\nconst LEGEND_VALUE_MARGIN = 0;\n\n/**\n * Color legend for heatmap editor.\n */\nmodule.directive('colorLegend', () => {\n  return {\n    restrict: 'E',\n    template: '<div class=\"heatmap-color-legend\"><svg width=\"16.5rem\" height=\"24px\"></svg></div>',\n    link: (scope, elem, attrs) => {\n      const ctrl = scope.ctrl;\n      const panel = scope.ctrl.panel;\n\n      render();\n\n      ctrl.events.on('render', () => {\n        render();\n      });\n\n      function render() {\n        const legendElem = $(elem).find('svg');\n        const legendWidth = Math.floor(legendElem.outerWidth());\n\n        if (panel.color.mode === 'spectrum') {\n          const colorScheme = _.find(ctrl.colorSchemes, {\n            value: panel.color.colorScheme,\n          });\n          const colorScale = getColorScale(colorScheme, contextSrv.user.lightTheme, legendWidth);\n          drawSimpleColorLegend(elem, colorScale);\n        } else if (panel.color.mode === 'opacity') {\n          const colorOptions = panel.color;\n          drawSimpleOpacityLegend(elem, colorOptions);\n        }\n      }\n    },\n  };\n});\n\n/**\n * Heatmap legend with scale values.\n */\nmodule.directive('heatmapLegend', () => {\n  return {\n    restrict: 'E',\n    template: `<div class=\"heatmap-color-legend\"><svg width=\"${LEGEND_WIDTH_PX}px\" height=\"${LEGEND_HEIGHT_PX}px\"></svg></div>`,\n    link: (scope, elem, attrs) => {\n      const ctrl = scope.ctrl;\n      const panel = scope.ctrl.panel;\n\n      render();\n      ctrl.events.on('render', () => {\n        render();\n      });\n\n      function render() {\n        clearLegend(elem);\n        if (!_.isEmpty(ctrl.data) && !_.isEmpty(ctrl.data.cards)) {\n          const rangeFrom = 0;\n          const rangeTo = ctrl.data.cardStats.max;\n          const maxValue = panel.color.max || rangeTo;\n          const minValue = panel.color.min || 0;\n\n          if (panel.color.mode === 'spectrum') {\n            const colorScheme = _.find(ctrl.colorSchemes, {\n              value: panel.color.colorScheme,\n            });\n            drawColorLegend(elem, colorScheme, rangeFrom, rangeTo, maxValue, minValue);\n          } else if (panel.color.mode === 'opacity') {\n            const colorOptions = panel.color;\n            drawOpacityLegend(elem, colorOptions, rangeFrom, rangeTo, maxValue, minValue);\n          }\n        }\n      }\n    },\n  };\n});\n\nfunction drawColorLegend(elem, colorScheme, rangeFrom, rangeTo, maxValue, minValue) {\n  const legendElem = $(elem).find('svg');\n  const legend = d3.select(legendElem.get(0));\n  clearLegend(elem);\n\n  const legendWidth = Math.floor(legendElem.outerWidth()) - 30;\n  const legendHeight = legendElem.attr('height');\n\n  let rangeStep = 1;\n  if (rangeTo - rangeFrom > legendWidth) {\n    rangeStep = Math.floor((rangeTo - rangeFrom) / legendWidth);\n  }\n  const widthFactor = legendWidth / (rangeTo - rangeFrom);\n  const valuesRange = d3.range(rangeFrom, rangeTo, rangeStep);\n\n  const colorScale = getColorScale(colorScheme, contextSrv.user.lightTheme, maxValue, minValue);\n  legend\n    .selectAll('.heatmap-color-legend-rect')\n    .data(valuesRange)\n    .enter()\n    .append('rect')\n    .attr('x', d => d * widthFactor)\n    .attr('y', 0)\n    .attr('width', rangeStep * widthFactor + 1) // Overlap rectangles to prevent gaps\n    .attr('height', legendHeight)\n    .attr('stroke-width', 0)\n    .attr('fill', d => colorScale(d));\n\n  drawLegendValues(elem, colorScale, rangeFrom, rangeTo, maxValue, minValue, legendWidth);\n}\n\nfunction drawOpacityLegend(elem, options, rangeFrom, rangeTo, maxValue, minValue) {\n  const legendElem = $(elem).find('svg');\n  const legend = d3.select(legendElem.get(0));\n  clearLegend(elem);\n\n  const legendWidth = Math.floor(legendElem.outerWidth()) - 30;\n  const legendHeight = legendElem.attr('height');\n\n  let rangeStep = 1;\n  if (rangeTo - rangeFrom > legendWidth) {\n    rangeStep = Math.floor((rangeTo - rangeFrom) / legendWidth);\n  }\n  const widthFactor = legendWidth / (rangeTo - rangeFrom);\n  const valuesRange = d3.range(rangeFrom, rangeTo, rangeStep);\n\n  const opacityScale = getOpacityScale(options, maxValue, minValue);\n  legend\n    .selectAll('.heatmap-opacity-legend-rect')\n    .data(valuesRange)\n    .enter()\n    .append('rect')\n    .attr('x', d => d * widthFactor)\n    .attr('y', 0)\n    .attr('width', rangeStep * widthFactor)\n    .attr('height', legendHeight)\n    .attr('stroke-width', 0)\n    .attr('fill', options.cardColor)\n    .style('opacity', d => opacityScale(d));\n\n  drawLegendValues(elem, opacityScale, rangeFrom, rangeTo, maxValue, minValue, legendWidth);\n}\n\nfunction drawLegendValues(elem, colorScale, rangeFrom, rangeTo, maxValue, minValue, legendWidth) {\n  const legendElem = $(elem).find('svg');\n  const legend = d3.select(legendElem.get(0));\n\n  if (legendWidth <= 0 || legendElem.get(0).childNodes.length === 0) {\n    return;\n  }\n\n  const legendValueScale = d3\n    .scaleLinear()\n    .domain([0, rangeTo])\n    .range([0, legendWidth]);\n\n  const ticks = buildLegendTicks(0, rangeTo, maxValue, minValue);\n  const xAxis = d3\n    .axisBottom(legendValueScale)\n    .tickValues(ticks)\n    .tickSize(LEGEND_TICK_SIZE);\n\n  const colorRect = legendElem.find(':first-child');\n  const posY = getSvgElemHeight(legendElem) + LEGEND_VALUE_MARGIN;\n  const posX = getSvgElemX(colorRect);\n\n  d3\n    .select(legendElem.get(0))\n    .append('g')\n    .attr('class', 'axis')\n    .attr('transform', 'translate(' + posX + ',' + posY + ')')\n    .call(xAxis);\n\n  legend\n    .select('.axis')\n    .select('.domain')\n    .remove();\n}\n\nfunction drawSimpleColorLegend(elem, colorScale) {\n  const legendElem = $(elem).find('svg');\n  clearLegend(elem);\n\n  const legendWidth = Math.floor(legendElem.outerWidth());\n  const legendHeight = legendElem.attr('height');\n\n  if (legendWidth) {\n    const valuesNumber = Math.floor(legendWidth / 2);\n    const rangeStep = Math.floor(legendWidth / valuesNumber);\n    const valuesRange = d3.range(0, legendWidth, rangeStep);\n\n    const legend = d3.select(legendElem.get(0));\n    const legendRects = legend.selectAll('.heatmap-color-legend-rect').data(valuesRange);\n\n    legendRects\n      .enter()\n      .append('rect')\n      .attr('x', d => d)\n      .attr('y', 0)\n      .attr('width', rangeStep + 1) // Overlap rectangles to prevent gaps\n      .attr('height', legendHeight)\n      .attr('stroke-width', 0)\n      .attr('fill', d => colorScale(d));\n  }\n}\n\nfunction drawSimpleOpacityLegend(elem, options) {\n  const legendElem = $(elem).find('svg');\n  clearLegend(elem);\n\n  const legend = d3.select(legendElem.get(0));\n  const legendWidth = Math.floor(legendElem.outerWidth());\n  const legendHeight = legendElem.attr('height');\n\n  if (legendWidth) {\n    let legendOpacityScale;\n    if (options.colorScale === 'linear') {\n      legendOpacityScale = d3\n        .scaleLinear()\n        .domain([0, legendWidth])\n        .range([0, 1]);\n    } else if (options.colorScale === 'sqrt') {\n      legendOpacityScale = d3\n        .scalePow()\n        .exponent(options.exponent)\n        .domain([0, legendWidth])\n        .range([0, 1]);\n    }\n\n    const rangeStep = 10;\n    const valuesRange = d3.range(0, legendWidth, rangeStep);\n    const legendRects = legend.selectAll('.heatmap-opacity-legend-rect').data(valuesRange);\n\n    legendRects\n      .enter()\n      .append('rect')\n      .attr('x', d => d)\n      .attr('y', 0)\n      .attr('width', rangeStep)\n      .attr('height', legendHeight)\n      .attr('stroke-width', 0)\n      .attr('fill', options.cardColor)\n      .style('opacity', d => legendOpacityScale(d));\n  }\n}\n\nfunction clearLegend(elem) {\n  const legendElem = $(elem).find('svg');\n  legendElem.empty();\n}\n\nfunction getSvgElemX(elem) {\n  const svgElem = elem.get(0);\n  if (svgElem && svgElem.x && svgElem.x.baseVal) {\n    return svgElem.x.baseVal.value;\n  } else {\n    return 0;\n  }\n}\n\nfunction getSvgElemHeight(elem) {\n  const svgElem = elem.get(0);\n  if (svgElem && svgElem.height && svgElem.height.baseVal) {\n    return svgElem.height.baseVal.value;\n  } else {\n    return 0;\n  }\n}\n\nfunction buildLegendTicks(rangeFrom, rangeTo, maxValue, minValue) {\n  const range = rangeTo - rangeFrom;\n  const tickStepSize = tickStep(rangeFrom, rangeTo, 3);\n  const ticksNum = Math.round(range / tickStepSize);\n  let ticks = [];\n\n  for (let i = 0; i < ticksNum; i++) {\n    const current = tickStepSize * i;\n    // Add user-defined min and max if it had been set\n    if (isValueCloseTo(minValue, current, tickStepSize)) {\n      ticks.push(minValue);\n      continue;\n    } else if (minValue < current) {\n      ticks.push(minValue);\n    }\n    if (isValueCloseTo(maxValue, current, tickStepSize)) {\n      ticks.push(maxValue);\n      continue;\n    } else if (maxValue < current) {\n      ticks.push(maxValue);\n    }\n    ticks.push(tickStepSize * i);\n  }\n  if (!isValueCloseTo(maxValue, rangeTo, tickStepSize)) {\n    ticks.push(maxValue);\n  }\n  ticks.push(rangeTo);\n  ticks = _.sortBy(_.uniq(ticks));\n  return ticks;\n}\n\nfunction isValueCloseTo(val, valueTo, step) {\n  const diff = Math.abs(val - valueTo);\n  return diff < step * 0.3;\n}\n","import * as d3 from 'd3';\nimport * as d3ScaleChromatic from 'd3-scale-chromatic';\n\nexport function getColorScale(colorScheme: any, lightTheme: boolean, maxValue: number, minValue = 0): (d: any) => any {\n  const colorInterpolator = d3ScaleChromatic[colorScheme.value];\n  const colorScaleInverted = colorScheme.invert === 'always' || colorScheme.invert === (lightTheme ? 'light' : 'dark');\n\n  const start = colorScaleInverted ? maxValue : minValue;\n  const end = colorScaleInverted ? minValue : maxValue;\n\n  return d3.scaleSequential(colorInterpolator).domain([start, end]);\n}\n\nexport function getOpacityScale(options, maxValue, minValue = 0) {\n  let legendOpacityScale;\n  if (options.colorScale === 'linear') {\n    legendOpacityScale = d3\n      .scaleLinear()\n      .domain([minValue, maxValue])\n      .range([0, 1]);\n  } else if (options.colorScale === 'sqrt') {\n    legendOpacityScale = d3\n      .scalePow()\n      .exponent(options.exponent)\n      .domain([minValue, maxValue])\n      .range([0, 1]);\n  }\n  return legendOpacityScale;\n}\n","export class HeatmapDisplayEditorCtrl {\n  panel: any;\n  panelCtrl: any;\n\n  /** @ngInject */\n  constructor($scope) {\n    $scope.editor = this;\n    this.panelCtrl = $scope.ctrl;\n    this.panel = this.panelCtrl.panel;\n\n    this.panelCtrl.render();\n  }\n}\n\n/** @ngInject */\nexport function heatmapDisplayEditor() {\n  'use strict';\n  return {\n    restrict: 'E',\n    scope: true,\n    templateUrl: 'public/app/plugins/panel/heatmap/partials/display_editor.html',\n    controller: HeatmapDisplayEditorCtrl,\n  };\n}\n","import _ from 'lodash';\n\nconst VALUE_INDEX = 0;\nconst TIME_INDEX = 1;\n\ninterface XBucket {\n  x: number;\n  buckets: any;\n}\n\ninterface YBucket {\n  y: number;\n  values: number[];\n}\n\n/**\n * Convert histogram represented by the list of series to heatmap object.\n * @param seriesList List of time series\n */\nfunction histogramToHeatmap(seriesList) {\n  const heatmap = {};\n\n  for (let i = 0; i < seriesList.length; i++) {\n    const series = seriesList[i];\n    const bound = i;\n    if (isNaN(bound)) {\n      return heatmap;\n    }\n\n    for (const point of series.datapoints) {\n      const count = point[VALUE_INDEX];\n      const time = point[TIME_INDEX];\n\n      if (!_.isNumber(count)) {\n        continue;\n      }\n\n      let bucket = heatmap[time];\n      if (!bucket) {\n        bucket = heatmap[time] = { x: time, buckets: {} };\n      }\n\n      bucket.buckets[bound] = {\n        y: bound,\n        count: count,\n        bounds: {\n          top: null,\n          bottom: bound,\n        },\n        values: [],\n        points: [],\n      };\n    }\n  }\n\n  return heatmap;\n}\n\n/**\n * Sort series representing histogram by label value.\n */\nfunction sortSeriesByLabel(s1, s2) {\n  let label1, label2;\n\n  try {\n    // fail if not integer. might happen with bad queries\n    label1 = parseHistogramLabel(s1.label);\n    label2 = parseHistogramLabel(s2.label);\n  } catch (err) {\n    console.log(err.message || err);\n    return 0;\n  }\n\n  if (label1 > label2) {\n    return 1;\n  }\n\n  if (label1 < label2) {\n    return -1;\n  }\n\n  return 0;\n}\n\nfunction parseHistogramLabel(label: string): number {\n  if (label === '+Inf' || label === 'inf') {\n    return +Infinity;\n  }\n  const value = Number(label);\n  if (isNaN(value)) {\n    throw new Error(`Error parsing histogram label: ${label} is not a number`);\n  }\n  return value;\n}\n\n/**\n * Convert buckets into linear array of \"cards\" - objects, represented heatmap elements.\n * @param  {Object} buckets\n * @return {Array}          Array of \"card\" objects\n */\nfunction convertToCards(buckets) {\n  let min = 0,\n    max = 0;\n  const cards = [];\n  _.forEach(buckets, xBucket => {\n    _.forEach(xBucket.buckets, yBucket => {\n      const card = {\n        x: xBucket.x,\n        y: yBucket.y,\n        yBounds: yBucket.bounds,\n        values: yBucket.values,\n        count: yBucket.count,\n      };\n      cards.push(card);\n\n      if (cards.length === 1) {\n        min = yBucket.count;\n        max = yBucket.count;\n      }\n\n      min = yBucket.count < min ? yBucket.count : min;\n      max = yBucket.count > max ? yBucket.count : max;\n    });\n  });\n\n  const cardStats = { min, max };\n  return { cards, cardStats };\n}\n\n/**\n * Special method for log scales. When series converted into buckets with log scale,\n * for simplification, 0 values are converted into 0, not into -Infinity. On the other hand, we mean\n * that all values less than series minimum, is 0 values, and we create special \"minimum\" bucket for\n * that values (actually, there're no values less than minimum, so this bucket is empty).\n *  8-16|    | ** |    |  * |  **|\n *   4-8|  * |*  *|*   |** *| *  |\n *   2-4| * *|    | ***|    |*   |\n *   1-2|*   |    |    |    |    | This bucket contains minimum series value\n * 0.5-1|____|____|____|____|____| This bucket should be displayed as 0 on graph\n *     0|____|____|____|____|____| This bucket is for 0 values (should actually be -Infinity)\n * So we should merge two bottom buckets into one (0-value bucket).\n *\n * @param  {Object} buckets  Heatmap buckets\n * @param  {Number} minValue Minimum series value\n * @return {Object}          Transformed buckets\n */\nfunction mergeZeroBuckets(buckets, minValue) {\n  _.forEach(buckets, xBucket => {\n    const yBuckets = xBucket.buckets;\n\n    const emptyBucket = {\n      bounds: { bottom: 0, top: 0 },\n      values: [],\n      points: [],\n      count: 0,\n    };\n\n    const nullBucket = yBuckets[0] || emptyBucket;\n    const minBucket = yBuckets[minValue] || emptyBucket;\n\n    const newBucket = {\n      y: 0,\n      bounds: { bottom: minValue, top: minBucket.bounds.top || minValue },\n      values: [],\n      points: [],\n      count: 0,\n    };\n\n    newBucket.points = nullBucket.points.concat(minBucket.points);\n    newBucket.values = nullBucket.values.concat(minBucket.values);\n    newBucket.count = newBucket.values.length;\n\n    if (newBucket.count === 0) {\n      return;\n    }\n\n    delete yBuckets[minValue];\n    yBuckets[0] = newBucket;\n  });\n\n  return buckets;\n}\n\n/**\n * Convert set of time series into heatmap buckets\n * @return {Object}    Heatmap object:\n * {\n *   xBucketBound_1: {\n *     x: xBucketBound_1,\n *     buckets: {\n *       yBucketBound_1: {\n *         y: yBucketBound_1,\n *         bounds: {bottom, top}\n *         values: [val_1, val_2, ..., val_K],\n *         points: [[val_Y, val_X, series_name], ..., [...]],\n *         seriesStat: {seriesName_1: val_1, seriesName_2: val_2}\n *       },\n *       ...\n *       yBucketBound_M: {}\n *     },\n *     values: [val_1, val_2, ..., val_K],\n *     points: [\n *       [val_Y, val_X, series_name], (point_1)\n *       ...\n *       [...] (point_K)\n *     ]\n *   },\n *   xBucketBound_2: {},\n *   ...\n *   xBucketBound_N: {}\n * }\n */\nfunction convertToHeatMap(seriesList, yBucketSize, xBucketSize, logBase = 1) {\n  const heatmap = {};\n\n  for (const series of seriesList) {\n    const datapoints = series.datapoints;\n    const seriesName = series.label;\n\n    // Slice series into X axis buckets\n    // |    | ** |    |  * |  **|\n    // |  * |*  *|*   |** *| *  |\n    // |** *|    | ***|    |*   |\n    // |____|____|____|____|____|_\n    //\n    _.forEach(datapoints, point => {\n      const bucketBound = getBucketBound(point[TIME_INDEX], xBucketSize);\n      pushToXBuckets(heatmap, point, bucketBound, seriesName);\n    });\n  }\n\n  // Slice X axis buckets into Y (value) buckets\n  // |  **|     |2|,\n  // | *  | --\\ |1|,\n  // |*   | --/ |1|,\n  // |____|     |0|\n  //\n  _.forEach(heatmap, xBucket => {\n    if (logBase !== 1) {\n      xBucket.buckets = convertToLogScaleValueBuckets(xBucket, yBucketSize, logBase);\n    } else {\n      xBucket.buckets = convertToValueBuckets(xBucket, yBucketSize);\n    }\n  });\n\n  return heatmap;\n}\n\nfunction pushToXBuckets(buckets, point, bucketNum, seriesName) {\n  const value = point[VALUE_INDEX];\n  if (value === null || value === undefined || isNaN(value)) {\n    return;\n  }\n\n  // Add series name to point for future identification\n  const pointExt = _.concat(point, seriesName);\n\n  if (buckets[bucketNum] && buckets[bucketNum].values) {\n    buckets[bucketNum].values.push(value);\n    buckets[bucketNum].points.push(pointExt);\n  } else {\n    buckets[bucketNum] = {\n      x: bucketNum,\n      values: [value],\n      points: [pointExt],\n    };\n  }\n}\n\nfunction pushToYBuckets(buckets, bucketNum, value, point, bounds) {\n  let count = 1;\n  // Use the 3rd argument as scale/count\n  if (point.length > 3) {\n    count = parseInt(point[2], 10);\n  }\n  if (buckets[bucketNum]) {\n    buckets[bucketNum].values.push(value);\n    buckets[bucketNum].points.push(point);\n    buckets[bucketNum].count += count;\n  } else {\n    buckets[bucketNum] = {\n      y: bucketNum,\n      bounds: bounds,\n      values: [value],\n      points: [point],\n      count: count,\n    };\n  }\n}\n\nfunction getValueBucketBound(value, yBucketSize, logBase) {\n  if (logBase === 1) {\n    return getBucketBound(value, yBucketSize);\n  } else {\n    return getLogScaleBucketBound(value, yBucketSize, logBase);\n  }\n}\n\n/**\n * Find bucket for given value (for linear scale)\n */\nfunction getBucketBounds(value, bucketSize) {\n  let bottom, top;\n  bottom = Math.floor(value / bucketSize) * bucketSize;\n  top = (Math.floor(value / bucketSize) + 1) * bucketSize;\n\n  return { bottom, top };\n}\n\nfunction getBucketBound(value, bucketSize) {\n  const bounds = getBucketBounds(value, bucketSize);\n  return bounds.bottom;\n}\n\nfunction convertToValueBuckets(xBucket, bucketSize) {\n  const values = xBucket.values;\n  const points = xBucket.points;\n  const buckets = {};\n\n  _.forEach(values, (val, index) => {\n    const bounds = getBucketBounds(val, bucketSize);\n    const bucketNum = bounds.bottom;\n    pushToYBuckets(buckets, bucketNum, val, points[index], bounds);\n  });\n\n  return buckets;\n}\n\n/**\n * Find bucket for given value (for log scales)\n */\nfunction getLogScaleBucketBounds(value, yBucketSplitFactor, logBase) {\n  let top, bottom;\n  if (value === 0) {\n    return { bottom: 0, top: 0 };\n  }\n\n  const valueLog = logp(value, logBase);\n  let pow, powTop;\n  if (yBucketSplitFactor === 1 || !yBucketSplitFactor) {\n    pow = Math.floor(valueLog);\n    powTop = pow + 1;\n  } else {\n    const additionalBucketSize = 1 / yBucketSplitFactor;\n    let additionalLog = valueLog - Math.floor(valueLog);\n    additionalLog = Math.floor(additionalLog / additionalBucketSize) * additionalBucketSize;\n    pow = Math.floor(valueLog) + additionalLog;\n    powTop = pow + additionalBucketSize;\n  }\n  bottom = Math.pow(logBase, pow);\n  top = Math.pow(logBase, powTop);\n\n  return { bottom, top };\n}\n\nfunction getLogScaleBucketBound(value, yBucketSplitFactor, logBase) {\n  const bounds = getLogScaleBucketBounds(value, yBucketSplitFactor, logBase);\n  return bounds.bottom;\n}\n\nfunction convertToLogScaleValueBuckets(xBucket, yBucketSplitFactor, logBase) {\n  const values = xBucket.values;\n  const points = xBucket.points;\n\n  const buckets = {};\n  _.forEach(values, (val, index) => {\n    const bounds = getLogScaleBucketBounds(val, yBucketSplitFactor, logBase);\n    const bucketNum = bounds.bottom;\n    pushToYBuckets(buckets, bucketNum, val, points[index], bounds);\n  });\n\n  return buckets;\n}\n\n/**\n * Logarithm for custom base\n * @param value\n * @param base logarithm base\n */\nfunction logp(value, base) {\n  return Math.log(value) / Math.log(base);\n}\n\n/**\n * Calculate size of Y bucket from given buckets bounds.\n * @param bounds Array of Y buckets bounds\n * @param logBase Logarithm base\n */\nfunction calculateBucketSize(bounds: number[], logBase = 1): number {\n  let bucketSize = Infinity;\n\n  if (bounds.length === 0) {\n    return 0;\n  } else if (bounds.length === 1) {\n    return bounds[0];\n  } else {\n    bounds = _.sortBy(bounds);\n    for (let i = 1; i < bounds.length; i++) {\n      const distance = getDistance(bounds[i], bounds[i - 1], logBase);\n      bucketSize = distance < bucketSize ? distance : bucketSize;\n    }\n  }\n\n  return bucketSize;\n}\n\n/**\n * Calculate distance between two numbers in given scale (linear or logarithmic).\n * @param a\n * @param b\n * @param logBase\n */\nfunction getDistance(a: number, b: number, logBase = 1): number {\n  if (logBase === 1) {\n    // Linear distance\n    return Math.abs(b - a);\n  } else {\n    // logarithmic distance\n    const ratio = Math.max(a, b) / Math.min(a, b);\n    return logp(ratio, logBase);\n  }\n}\n\n/**\n * Compare two heatmap data objects\n * @param objA\n * @param objB\n */\nfunction isHeatmapDataEqual(objA: any, objB: any): boolean {\n  let isEql = !emptyXOR(objA, objB);\n\n  _.forEach(objA, (xBucket: XBucket, x) => {\n    if (objB[x]) {\n      if (emptyXOR(xBucket.buckets, objB[x].buckets)) {\n        isEql = false;\n        return false;\n      }\n\n      _.forEach(xBucket.buckets, (yBucket: YBucket, y) => {\n        if (objB[x].buckets && objB[x].buckets[y]) {\n          if (objB[x].buckets[y].values) {\n            isEql = _.isEqual(_.sortBy(yBucket.values), _.sortBy(objB[x].buckets[y].values));\n            if (!isEql) {\n              return false;\n            } else {\n              return true;\n            }\n          } else {\n            isEql = false;\n            return false;\n          }\n        } else {\n          isEql = false;\n          return false;\n        }\n      });\n\n      if (!isEql) {\n        return false;\n      } else {\n        return true;\n      }\n    } else {\n      isEql = false;\n      return false;\n    }\n  });\n\n  return isEql;\n}\n\nfunction emptyXOR(foo: any, bar: any): boolean {\n  return (_.isEmpty(foo) || _.isEmpty(bar)) && !(_.isEmpty(foo) && _.isEmpty(bar));\n}\n\nexport {\n  convertToHeatMap,\n  histogramToHeatmap,\n  convertToCards,\n  mergeZeroBuckets,\n  getValueBucketBound,\n  isHeatmapDataEqual,\n  calculateBucketSize,\n  sortSeriesByLabel,\n};\n","import kbn from 'app/core/utils/kbn';\n\nexport class AxesEditorCtrl {\n  panel: any;\n  panelCtrl: any;\n  unitFormats: any;\n  logScales: any;\n  dataFormats: any;\n  yBucketBoundModes: any;\n\n  /** @ngInject */\n  constructor($scope, uiSegmentSrv) {\n    $scope.editor = this;\n    this.panelCtrl = $scope.ctrl;\n    this.panel = this.panelCtrl.panel;\n    this.unitFormats = kbn.getUnitFormats();\n\n    this.logScales = {\n      linear: 1,\n      'log (base 2)': 2,\n      'log (base 10)': 10,\n      'log (base 32)': 32,\n      'log (base 1024)': 1024,\n    };\n\n    this.dataFormats = {\n      'Time series': 'timeseries',\n      'Time series buckets': 'tsbuckets',\n    };\n\n    this.yBucketBoundModes = {\n      Auto: 'auto',\n      Upper: 'upper',\n      Lower: 'lower',\n    };\n  }\n\n  setUnitFormat(subItem) {\n    this.panel.yAxis.format = subItem.value;\n    this.panelCtrl.render();\n  }\n}\n\n/** @ngInject */\nexport function axesEditor() {\n  'use strict';\n  return {\n    restrict: 'E',\n    scope: true,\n    templateUrl: 'public/app/plugins/panel/heatmap/partials/axes_editor.html',\n    controller: AxesEditorCtrl,\n  };\n}\n","import * as d3 from 'd3';\nimport $ from 'jquery';\nimport _ from 'lodash';\nimport kbn from 'app/core/utils/kbn';\nimport { getValueBucketBound } from './heatmap_data_converter';\n\nconst TOOLTIP_PADDING_X = 30;\nconst TOOLTIP_PADDING_Y = 5;\nconst HISTOGRAM_WIDTH = 160;\nconst HISTOGRAM_HEIGHT = 40;\n\nexport class HeatmapTooltip {\n  tooltip: any;\n  scope: any;\n  dashboard: any;\n  panelCtrl: any;\n  panel: any;\n  heatmapPanel: any;\n  mouseOverBucket: boolean;\n  originalFillColor: any;\n\n  constructor(elem, scope) {\n    this.scope = scope;\n    this.dashboard = scope.ctrl.dashboard;\n    this.panelCtrl = scope.ctrl;\n    this.panel = scope.ctrl.panel;\n    this.heatmapPanel = elem;\n    this.mouseOverBucket = false;\n    this.originalFillColor = null;\n\n    elem.on('mouseleave', this.onMouseLeave.bind(this));\n  }\n\n  onMouseLeave() {\n    this.destroy();\n  }\n\n  onMouseMove(e) {\n    if (!this.panel.tooltip.show) {\n      return;\n    }\n\n    this.move(e);\n  }\n\n  add() {\n    this.tooltip = d3\n      .select('body')\n      .append('div')\n      .attr('class', 'heatmap-tooltip graph-tooltip grafana-tooltip');\n  }\n\n  destroy() {\n    if (this.tooltip) {\n      this.tooltip.remove();\n    }\n\n    this.tooltip = null;\n  }\n\n  show(pos, data) {\n    if (!this.panel.tooltip.show || !data) {\n      return;\n    }\n    // shared tooltip mode\n    if (pos.panelRelY) {\n      return;\n    }\n\n    const { xBucketIndex, yBucketIndex } = this.getBucketIndexes(pos, data);\n\n    if (!data.buckets[xBucketIndex]) {\n      this.destroy();\n      return;\n    }\n\n    if (!this.tooltip) {\n      this.add();\n    }\n\n    let boundBottom, boundTop, valuesNumber;\n    const xData = data.buckets[xBucketIndex];\n    // Search in special 'zero' bucket also\n    const yData = _.find(xData.buckets, (bucket, bucketIndex) => {\n      return bucket.bounds.bottom === yBucketIndex || bucketIndex === yBucketIndex.toString();\n    });\n\n    const tooltipTimeFormat = 'YYYY-MM-DD HH:mm:ss';\n    const time = this.dashboard.formatDate(xData.x, tooltipTimeFormat);\n\n    // Decimals override. Code from panel/graph/graph.ts\n    let countValueFormatter, bucketBoundFormatter;\n    if (_.isNumber(this.panel.tooltipDecimals)) {\n      countValueFormatter = this.countValueFormatter(this.panel.tooltipDecimals, null);\n      bucketBoundFormatter = this.panelCtrl.tickValueFormatter(this.panelCtrl.decimals, null);\n    } else {\n      // auto decimals\n      // legend and tooltip gets one more decimal precision\n      // than graph legend ticks\n      const decimals = (this.panelCtrl.decimals || -1) + 1;\n      countValueFormatter = this.countValueFormatter(decimals, this.panelCtrl.scaledDecimals + 2);\n      bucketBoundFormatter = this.panelCtrl.tickValueFormatter(decimals, this.panelCtrl.scaledDecimals + 2);\n    }\n\n    let tooltipHtml = `<div class=\"graph-tooltip-time\">${time}</div>\n      <div class=\"heatmap-histogram\"></div>`;\n\n    if (yData) {\n      if (yData.bounds) {\n        if (data.tsBuckets) {\n          // Use Y-axis labels\n          const tickFormatter = valIndex => {\n            return data.tsBucketsFormatted ? data.tsBucketsFormatted[valIndex] : data.tsBuckets[valIndex];\n          };\n\n          boundBottom = tickFormatter(yBucketIndex);\n          boundTop = yBucketIndex < data.tsBuckets.length - 1 ? tickFormatter(yBucketIndex + 1) : '';\n        } else {\n          // Display 0 if bucket is a special 'zero' bucket\n          const bottom = yData.y ? yData.bounds.bottom : 0;\n          boundBottom = bucketBoundFormatter(bottom);\n          boundTop = bucketBoundFormatter(yData.bounds.top);\n        }\n        valuesNumber = countValueFormatter(yData.count);\n        tooltipHtml += `<div>\n          bucket: <b>${boundBottom} - ${boundTop}</b> <br>\n          count: <b>${valuesNumber}</b> <br>\n        </div>`;\n      } else {\n        // currently no bounds for pre bucketed data\n        tooltipHtml += `<div>count: <b>${yData.count}</b><br></div>`;\n      }\n    } else {\n      if (!this.panel.tooltip.showHistogram) {\n        this.destroy();\n        return;\n      }\n      boundBottom = yBucketIndex;\n      boundTop = '';\n      valuesNumber = 0;\n    }\n\n    this.tooltip.html(tooltipHtml);\n\n    if (this.panel.tooltip.showHistogram) {\n      this.addHistogram(xData);\n    }\n\n    this.move(pos);\n  }\n\n  getBucketIndexes(pos, data) {\n    const xBucketIndex = this.getXBucketIndex(pos.x, data);\n    const yBucketIndex = this.getYBucketIndex(pos.y, data);\n    return { xBucketIndex, yBucketIndex };\n  }\n\n  getXBucketIndex(x, data) {\n    // First try to find X bucket by checking x pos is in the\n    // [bucket.x, bucket.x + xBucketSize] interval\n    const xBucket = _.find(data.buckets, bucket => {\n      return x > bucket.x && x - bucket.x <= data.xBucketSize;\n    });\n    return xBucket ? xBucket.x : getValueBucketBound(x, data.xBucketSize, 1);\n  }\n\n  getYBucketIndex(y, data) {\n    if (data.tsBuckets) {\n      return Math.floor(y);\n    }\n    const yBucketIndex = getValueBucketBound(y, data.yBucketSize, this.panel.yAxis.logBase);\n    return yBucketIndex;\n  }\n\n  getSharedTooltipPos(pos) {\n    // get pageX from position on x axis and pageY from relative position in original panel\n    pos.pageX = this.heatmapPanel.offset().left + this.scope.xScale(pos.x);\n    pos.pageY = this.heatmapPanel.offset().top + this.scope.chartHeight * pos.panelRelY;\n    return pos;\n  }\n\n  addHistogram(data) {\n    const xBucket = this.scope.ctrl.data.buckets[data.x];\n    const yBucketSize = this.scope.ctrl.data.yBucketSize;\n    let min, max, ticks;\n    if (this.scope.ctrl.data.tsBuckets) {\n      min = 0;\n      max = this.scope.ctrl.data.tsBuckets.length - 1;\n      ticks = this.scope.ctrl.data.tsBuckets.length;\n    } else {\n      min = this.scope.ctrl.data.yAxis.min;\n      max = this.scope.ctrl.data.yAxis.max;\n      ticks = this.scope.ctrl.data.yAxis.ticks;\n    }\n    let histogramData = _.map(xBucket.buckets, bucket => {\n      const count = bucket.count !== undefined ? bucket.count : bucket.values.length;\n      return [bucket.bounds.bottom, count];\n    });\n    histogramData = _.filter(histogramData, d => {\n      return d[0] >= min && d[0] <= max;\n    });\n\n    const scale = this.scope.yScale.copy();\n    const histXScale = scale.domain([min, max]).range([0, HISTOGRAM_WIDTH]);\n\n    let barWidth;\n    if (this.panel.yAxis.logBase === 1) {\n      barWidth = Math.floor(HISTOGRAM_WIDTH / (max - min) * yBucketSize * 0.9);\n    } else {\n      const barNumberFactor = yBucketSize ? yBucketSize : 1;\n      barWidth = Math.floor(HISTOGRAM_WIDTH / ticks / barNumberFactor * 0.9);\n    }\n    barWidth = Math.max(barWidth, 1);\n\n    // Normalize histogram Y axis\n    const histogramDomain = _.reduce(_.map(histogramData, d => d[1]), (sum, val) => sum + val, 0);\n    const histYScale = d3\n      .scaleLinear()\n      .domain([0, histogramDomain])\n      .range([0, HISTOGRAM_HEIGHT]);\n\n    const histogram = this.tooltip\n      .select('.heatmap-histogram')\n      .append('svg')\n      .attr('width', HISTOGRAM_WIDTH)\n      .attr('height', HISTOGRAM_HEIGHT);\n\n    histogram\n      .selectAll('.bar')\n      .data(histogramData)\n      .enter()\n      .append('rect')\n      .attr('x', d => {\n        return histXScale(d[0]);\n      })\n      .attr('width', barWidth)\n      .attr('y', d => {\n        return HISTOGRAM_HEIGHT - histYScale(d[1]);\n      })\n      .attr('height', d => {\n        return histYScale(d[1]);\n      });\n  }\n\n  move(pos) {\n    if (!this.tooltip) {\n      return;\n    }\n\n    const elem = $(this.tooltip.node())[0];\n    const tooltipWidth = elem.clientWidth;\n    const tooltipHeight = elem.clientHeight;\n\n    let left = pos.pageX + TOOLTIP_PADDING_X;\n    let top = pos.pageY + TOOLTIP_PADDING_Y;\n\n    if (pos.pageX + tooltipWidth + 40 > window.innerWidth) {\n      left = pos.pageX - tooltipWidth - TOOLTIP_PADDING_X;\n    }\n\n    if (pos.pageY - window.pageYOffset + tooltipHeight + 20 > window.innerHeight) {\n      top = pos.pageY - tooltipHeight - TOOLTIP_PADDING_Y;\n    }\n\n    return this.tooltip.style('left', left + 'px').style('top', top + 'px');\n  }\n\n  countValueFormatter(decimals, scaledDecimals = null) {\n    const format = 'short';\n    return value => {\n      return kbn.valueFormats[format](value, decimals, scaledDecimals);\n    };\n  }\n}\n","import _ from 'lodash';\nimport $ from 'jquery';\nimport moment from 'moment';\nimport * as d3 from 'd3';\nimport kbn from 'app/core/utils/kbn';\nimport { appEvents, contextSrv } from 'app/core/core';\nimport * as ticksUtils from 'app/core/utils/ticks';\nimport { HeatmapTooltip } from './heatmap_tooltip';\nimport { mergeZeroBuckets } from './heatmap_data_converter';\nimport { getColorScale, getOpacityScale } from './color_scale';\n\nconst MIN_CARD_SIZE = 1,\n  CARD_PADDING = 1,\n  CARD_ROUND = 0,\n  DATA_RANGE_WIDING_FACTOR = 1.2,\n  DEFAULT_X_TICK_SIZE_PX = 100,\n  DEFAULT_Y_TICK_SIZE_PX = 50,\n  X_AXIS_TICK_PADDING = 10,\n  Y_AXIS_TICK_PADDING = 5,\n  MIN_SELECTION_WIDTH = 2;\n\nexport default function rendering(scope, elem, attrs, ctrl) {\n  return new HeatmapRenderer(scope, elem, attrs, ctrl);\n}\nexport class HeatmapRenderer {\n  width: number;\n  height: number;\n  yScale: any;\n  xScale: any;\n  chartWidth: number;\n  chartHeight: number;\n  chartTop: number;\n  chartBottom: number;\n  yAxisWidth: number;\n  xAxisHeight: number;\n  cardPadding: number;\n  cardRound: number;\n  cardWidth: number;\n  cardHeight: number;\n  colorScale: any;\n  opacityScale: any;\n  mouseUpHandler: any;\n  data: any;\n  panel: any;\n  $heatmap: any;\n  tooltip: HeatmapTooltip;\n  heatmap: any;\n  timeRange: any;\n\n  selection: any;\n  padding: any;\n  margin: any;\n  dataRangeWidingFactor: number;\n  constructor(private scope, private elem, attrs, private ctrl) {\n    // $heatmap is JQuery object, but heatmap is D3\n    this.$heatmap = this.elem.find('.heatmap-panel');\n    this.tooltip = new HeatmapTooltip(this.$heatmap, this.scope);\n\n    this.selection = {\n      active: false,\n      x1: -1,\n      x2: -1,\n    };\n\n    this.padding = { left: 0, right: 0, top: 0, bottom: 0 };\n    this.margin = { left: 25, right: 15, top: 10, bottom: 20 };\n    this.dataRangeWidingFactor = DATA_RANGE_WIDING_FACTOR;\n\n    this.ctrl.events.on('render', this.onRender.bind(this));\n\n    this.ctrl.tickValueFormatter = this.tickValueFormatter.bind(this);\n\n    /////////////////////////////\n    // Selection and crosshair //\n    /////////////////////////////\n\n    // Shared crosshair and tooltip\n    appEvents.on('graph-hover', this.onGraphHover.bind(this), this.scope);\n\n    appEvents.on('graph-hover-clear', this.onGraphHoverClear.bind(this), this.scope);\n\n    // Register selection listeners\n    this.$heatmap.on('mousedown', this.onMouseDown.bind(this));\n    this.$heatmap.on('mousemove', this.onMouseMove.bind(this));\n    this.$heatmap.on('mouseleave', this.onMouseLeave.bind(this));\n  }\n\n  onGraphHoverClear() {\n    this.clearCrosshair();\n  }\n\n  onGraphHover(event) {\n    this.drawSharedCrosshair(event.pos);\n  }\n\n  onRender() {\n    this.render();\n    this.ctrl.renderingCompleted();\n  }\n\n  setElementHeight() {\n    try {\n      let height = this.ctrl.height || this.panel.height || this.ctrl.row.height;\n      if (_.isString(height)) {\n        height = parseInt(height.replace('px', ''), 10);\n      }\n\n      height -= this.panel.legend.show ? 28 : 11; // bottom padding and space for legend\n\n      this.$heatmap.css('height', height + 'px');\n\n      return true;\n    } catch (e) {\n      // IE throws errors sometimes\n      return false;\n    }\n  }\n\n  getYAxisWidth(elem) {\n    const axisText = elem.selectAll('.axis-y text').nodes();\n    const maxTextWidth = _.max(\n      _.map(axisText, text => {\n        // Use SVG getBBox method\n        return text.getBBox().width;\n      })\n    );\n\n    return maxTextWidth;\n  }\n\n  getXAxisHeight(elem) {\n    const axisLine = elem.select('.axis-x line');\n    if (!axisLine.empty()) {\n      const axisLinePosition = parseFloat(elem.select('.axis-x line').attr('y2'));\n      const canvasWidth = parseFloat(elem.attr('height'));\n      return canvasWidth - axisLinePosition;\n    } else {\n      // Default height\n      return 30;\n    }\n  }\n\n  addXAxis() {\n    this.scope.xScale = this.xScale = d3\n      .scaleTime()\n      .domain([this.timeRange.from, this.timeRange.to])\n      .range([0, this.chartWidth]);\n\n    const ticks = this.chartWidth / DEFAULT_X_TICK_SIZE_PX;\n    const grafanaTimeFormatter = ticksUtils.grafanaTimeFormat(ticks, this.timeRange.from, this.timeRange.to);\n    let timeFormat;\n    const dashboardTimeZone = this.ctrl.dashboard.getTimezone();\n    if (dashboardTimeZone === 'utc') {\n      timeFormat = d3.utcFormat(grafanaTimeFormatter);\n    } else {\n      timeFormat = d3.timeFormat(grafanaTimeFormatter);\n    }\n\n    const xAxis = d3\n      .axisBottom(this.xScale)\n      .ticks(ticks)\n      .tickFormat(timeFormat)\n      .tickPadding(X_AXIS_TICK_PADDING)\n      .tickSize(this.chartHeight);\n\n    const posY = this.margin.top;\n    const posX = this.yAxisWidth;\n    this.heatmap\n      .append('g')\n      .attr('class', 'axis axis-x')\n      .attr('transform', 'translate(' + posX + ',' + posY + ')')\n      .call(xAxis);\n\n    // Remove horizontal line in the top of axis labels (called domain in d3)\n    this.heatmap\n      .select('.axis-x')\n      .select('.domain')\n      .remove();\n  }\n\n  addYAxis() {\n    let ticks = Math.ceil(this.chartHeight / DEFAULT_Y_TICK_SIZE_PX);\n    let tickInterval = ticksUtils.tickStep(this.data.heatmapStats.min, this.data.heatmapStats.max, ticks);\n    let { yMin, yMax } = this.wideYAxisRange(this.data.heatmapStats.min, this.data.heatmapStats.max, tickInterval);\n\n    // Rewrite min and max if it have been set explicitly\n    yMin = this.panel.yAxis.min !== null ? this.panel.yAxis.min : yMin;\n    yMax = this.panel.yAxis.max !== null ? this.panel.yAxis.max : yMax;\n\n    // Adjust ticks after Y range widening\n    tickInterval = ticksUtils.tickStep(yMin, yMax, ticks);\n    ticks = Math.ceil((yMax - yMin) / tickInterval);\n\n    const decimalsAuto = ticksUtils.getPrecision(tickInterval);\n    let decimals = this.panel.yAxis.decimals === null ? decimalsAuto : this.panel.yAxis.decimals;\n    // Calculate scaledDecimals for log scales using tick size (as in jquery.flot.js)\n    const flotTickSize = ticksUtils.getFlotTickSize(yMin, yMax, ticks, decimalsAuto);\n    const scaledDecimals = ticksUtils.getScaledDecimals(decimals, flotTickSize);\n    this.ctrl.decimals = decimals;\n    this.ctrl.scaledDecimals = scaledDecimals;\n\n    // Set default Y min and max if no data\n    if (_.isEmpty(this.data.buckets)) {\n      yMax = 1;\n      yMin = -1;\n      ticks = 3;\n      decimals = 1;\n    }\n\n    this.data.yAxis = {\n      min: yMin,\n      max: yMax,\n      ticks: ticks,\n    };\n\n    this.scope.yScale = this.yScale = d3\n      .scaleLinear()\n      .domain([yMin, yMax])\n      .range([this.chartHeight, 0]);\n\n    const yAxis = d3\n      .axisLeft(this.yScale)\n      .ticks(ticks)\n      .tickFormat(this.tickValueFormatter(decimals, scaledDecimals))\n      .tickSizeInner(0 - this.width)\n      .tickSizeOuter(0)\n      .tickPadding(Y_AXIS_TICK_PADDING);\n\n    this.heatmap\n      .append('g')\n      .attr('class', 'axis axis-y')\n      .call(yAxis);\n\n    // Calculate Y axis width first, then move axis into visible area\n    const posY = this.margin.top;\n    const posX = this.getYAxisWidth(this.heatmap) + Y_AXIS_TICK_PADDING;\n    this.heatmap.select('.axis-y').attr('transform', 'translate(' + posX + ',' + posY + ')');\n\n    // Remove vertical line in the right of axis labels (called domain in d3)\n    this.heatmap\n      .select('.axis-y')\n      .select('.domain')\n      .remove();\n  }\n\n  // Wide Y values range and anjust to bucket size\n  wideYAxisRange(min, max, tickInterval) {\n    const yWiding = (max * (this.dataRangeWidingFactor - 1) - min * (this.dataRangeWidingFactor - 1)) / 2;\n    let yMin, yMax;\n\n    if (tickInterval === 0) {\n      yMax = max * this.dataRangeWidingFactor;\n      yMin = min - min * (this.dataRangeWidingFactor - 1);\n      tickInterval = (yMax - yMin) / 2;\n    } else {\n      yMax = Math.ceil((max + yWiding) / tickInterval) * tickInterval;\n      yMin = Math.floor((min - yWiding) / tickInterval) * tickInterval;\n    }\n\n    // Don't wide axis below 0 if all values are positive\n    if (min >= 0 && yMin < 0) {\n      yMin = 0;\n    }\n\n    return { yMin, yMax };\n  }\n\n  addLogYAxis() {\n    const logBase = this.panel.yAxis.logBase;\n    let { yMin, yMax } = this.adjustLogRange(this.data.heatmapStats.minLog, this.data.heatmapStats.max, logBase);\n\n    yMin =\n      this.panel.yAxis.min && this.panel.yAxis.min !== '0' ? this.adjustLogMin(this.panel.yAxis.min, logBase) : yMin;\n    yMax = this.panel.yAxis.max !== null ? this.adjustLogMax(this.panel.yAxis.max, logBase) : yMax;\n\n    // Set default Y min and max if no data\n    if (_.isEmpty(this.data.buckets)) {\n      yMax = Math.pow(logBase, 2);\n      yMin = 1;\n    }\n\n    this.scope.yScale = this.yScale = d3\n      .scaleLog()\n      .base(this.panel.yAxis.logBase)\n      .domain([yMin, yMax])\n      .range([this.chartHeight, 0]);\n\n    const domain = this.yScale.domain();\n    const tickValues = this.logScaleTickValues(domain, logBase);\n\n    const decimalsAuto = ticksUtils.getPrecision(yMin);\n    const decimals = this.panel.yAxis.decimals || decimalsAuto;\n\n    // Calculate scaledDecimals for log scales using tick size (as in jquery.flot.js)\n    const flotTickSize = ticksUtils.getFlotTickSize(yMin, yMax, tickValues.length, decimalsAuto);\n    const scaledDecimals = ticksUtils.getScaledDecimals(decimals, flotTickSize);\n    this.ctrl.decimals = decimals;\n    this.ctrl.scaledDecimals = scaledDecimals;\n\n    this.data.yAxis = {\n      min: yMin,\n      max: yMax,\n      ticks: tickValues.length,\n    };\n\n    const yAxis = d3\n      .axisLeft(this.yScale)\n      .tickValues(tickValues)\n      .tickFormat(this.tickValueFormatter(decimals, scaledDecimals))\n      .tickSizeInner(0 - this.width)\n      .tickSizeOuter(0)\n      .tickPadding(Y_AXIS_TICK_PADDING);\n\n    this.heatmap\n      .append('g')\n      .attr('class', 'axis axis-y')\n      .call(yAxis);\n\n    // Calculate Y axis width first, then move axis into visible area\n    const posY = this.margin.top;\n    const posX = this.getYAxisWidth(this.heatmap) + Y_AXIS_TICK_PADDING;\n    this.heatmap.select('.axis-y').attr('transform', 'translate(' + posX + ',' + posY + ')');\n\n    // Set first tick as pseudo 0\n    if (yMin < 1) {\n      this.heatmap\n        .select('.axis-y')\n        .select('.tick text')\n        .text('0');\n    }\n\n    // Remove vertical line in the right of axis labels (called domain in d3)\n    this.heatmap\n      .select('.axis-y')\n      .select('.domain')\n      .remove();\n  }\n\n  addYAxisFromBuckets() {\n    const tsBuckets = this.data.tsBuckets;\n\n    this.scope.yScale = this.yScale = d3\n      .scaleLinear()\n      .domain([0, tsBuckets.length - 1])\n      .range([this.chartHeight, 0]);\n\n    const tickValues = _.map(tsBuckets, (b, i) => i);\n    const decimalsAuto = _.max(_.map(tsBuckets, ticksUtils.getStringPrecision));\n    const decimals = this.panel.yAxis.decimals === null ? decimalsAuto : this.panel.yAxis.decimals;\n    this.ctrl.decimals = decimals;\n\n    const tickValueFormatter = this.tickValueFormatter.bind(this);\n    function tickFormatter(valIndex) {\n      let valueFormatted = tsBuckets[valIndex];\n      if (!_.isNaN(_.toNumber(valueFormatted)) && valueFormatted !== '') {\n        // Try to format numeric tick labels\n        valueFormatted = tickValueFormatter(decimals)(_.toNumber(valueFormatted));\n      }\n      return valueFormatted;\n    }\n\n    const tsBucketsFormatted = _.map(tsBuckets, (v, i) => tickFormatter(i));\n    this.data.tsBucketsFormatted = tsBucketsFormatted;\n\n    const yAxis = d3\n      .axisLeft(this.yScale)\n      .tickValues(tickValues)\n      .tickFormat(tickFormatter)\n      .tickSizeInner(0 - this.width)\n      .tickSizeOuter(0)\n      .tickPadding(Y_AXIS_TICK_PADDING);\n\n    this.heatmap\n      .append('g')\n      .attr('class', 'axis axis-y')\n      .call(yAxis);\n\n    // Calculate Y axis width first, then move axis into visible area\n    const posY = this.margin.top;\n    const posX = this.getYAxisWidth(this.heatmap) + Y_AXIS_TICK_PADDING;\n    this.heatmap.select('.axis-y').attr('transform', 'translate(' + posX + ',' + posY + ')');\n\n    // Remove vertical line in the right of axis labels (called domain in d3)\n    this.heatmap\n      .select('.axis-y')\n      .select('.domain')\n      .remove();\n  }\n\n  // Adjust data range to log base\n  adjustLogRange(min, max, logBase) {\n    let yMin, yMax;\n\n    yMin = this.data.heatmapStats.minLog;\n    if (this.data.heatmapStats.minLog > 1 || !this.data.heatmapStats.minLog) {\n      yMin = 1;\n    } else {\n      yMin = this.adjustLogMin(this.data.heatmapStats.minLog, logBase);\n    }\n\n    // Adjust max Y value to log base\n    yMax = this.adjustLogMax(this.data.heatmapStats.max, logBase);\n\n    return { yMin, yMax };\n  }\n\n  adjustLogMax(max, base) {\n    return Math.pow(base, Math.ceil(ticksUtils.logp(max, base)));\n  }\n\n  adjustLogMin(min, base) {\n    return Math.pow(base, Math.floor(ticksUtils.logp(min, base)));\n  }\n\n  logScaleTickValues(domain, base) {\n    const domainMin = domain[0];\n    const domainMax = domain[1];\n    const tickValues = [];\n\n    if (domainMin < 1) {\n      const underOneTicks = Math.floor(ticksUtils.logp(domainMin, base));\n      for (let i = underOneTicks; i < 0; i++) {\n        const tickValue = Math.pow(base, i);\n        tickValues.push(tickValue);\n      }\n    }\n\n    const ticks = Math.ceil(ticksUtils.logp(domainMax, base));\n    for (let i = 0; i <= ticks; i++) {\n      const tickValue = Math.pow(base, i);\n      tickValues.push(tickValue);\n    }\n\n    return tickValues;\n  }\n\n  tickValueFormatter(decimals, scaledDecimals = null) {\n    const format = this.panel.yAxis.format;\n    return value => {\n      try {\n        return format !== 'none' ? kbn.valueFormats[format](value, decimals, scaledDecimals) : value;\n      } catch (err) {\n        console.error(err.message || err);\n        return value;\n      }\n    };\n  }\n\n  fixYAxisTickSize() {\n    this.heatmap\n      .select('.axis-y')\n      .selectAll('.tick line')\n      .attr('x2', this.chartWidth);\n  }\n\n  addAxes() {\n    this.chartHeight = this.height - this.margin.top - this.margin.bottom;\n    this.chartTop = this.margin.top;\n    this.chartBottom = this.chartTop + this.chartHeight;\n    if (this.panel.dataFormat === 'tsbuckets') {\n      this.addYAxisFromBuckets();\n    } else {\n      if (this.panel.yAxis.logBase === 1) {\n        this.addYAxis();\n      } else {\n        this.addLogYAxis();\n      }\n    }\n\n    this.yAxisWidth = this.getYAxisWidth(this.heatmap) + Y_AXIS_TICK_PADDING;\n    this.chartWidth = this.width - this.yAxisWidth - this.margin.right;\n    this.fixYAxisTickSize();\n\n    this.addXAxis();\n    this.xAxisHeight = this.getXAxisHeight(this.heatmap);\n\n    if (!this.panel.yAxis.show) {\n      this.heatmap\n        .select('.axis-y')\n        .selectAll('line')\n        .style('opacity', 0);\n    }\n\n    if (!this.panel.xAxis.show) {\n      this.heatmap\n        .select('.axis-x')\n        .selectAll('line')\n        .style('opacity', 0);\n    }\n  }\n\n  addHeatmapCanvas() {\n    const heatmapElem = this.$heatmap[0];\n\n    this.width = Math.floor(this.$heatmap.width()) - this.padding.right;\n    this.height = Math.floor(this.$heatmap.height()) - this.padding.bottom;\n\n    this.cardPadding = this.panel.cards.cardPadding !== null ? this.panel.cards.cardPadding : CARD_PADDING;\n    this.cardRound = this.panel.cards.cardRound !== null ? this.panel.cards.cardRound : CARD_ROUND;\n\n    if (this.heatmap) {\n      this.heatmap.remove();\n    }\n\n    this.heatmap = d3\n      .select(heatmapElem)\n      .append('svg')\n      .attr('width', this.width)\n      .attr('height', this.height);\n  }\n\n  addHeatmap() {\n    this.addHeatmapCanvas();\n    this.addAxes();\n\n    if (this.panel.yAxis.logBase !== 1 && this.panel.dataFormat !== 'tsbuckets') {\n      const logBase = this.panel.yAxis.logBase;\n      const domain = this.yScale.domain();\n      const tickValues = this.logScaleTickValues(domain, logBase);\n      this.data.buckets = mergeZeroBuckets(this.data.buckets, _.min(tickValues));\n    }\n\n    const cardsData = this.data.cards;\n    const maxValueAuto = this.data.cardStats.max;\n    const maxValue = this.panel.color.max || maxValueAuto;\n    const minValue = this.panel.color.min || 0;\n\n    const colorScheme = _.find(this.ctrl.colorSchemes, {\n      value: this.panel.color.colorScheme,\n    });\n    this.colorScale = getColorScale(colorScheme, contextSrv.user.lightTheme, maxValue, minValue);\n    this.opacityScale = getOpacityScale(this.panel.color, maxValue);\n    this.setCardSize();\n\n    let cards = this.heatmap.selectAll('.heatmap-card').data(cardsData);\n    cards.append('title');\n    cards = cards\n      .enter()\n      .append('rect')\n      .attr('x', this.getCardX.bind(this))\n      .attr('width', this.getCardWidth.bind(this))\n      .attr('y', this.getCardY.bind(this))\n      .attr('height', this.getCardHeight.bind(this))\n      .attr('rx', this.cardRound)\n      .attr('ry', this.cardRound)\n      .attr('class', 'bordered heatmap-card')\n      .style('fill', this.getCardColor.bind(this))\n      .style('stroke', this.getCardColor.bind(this))\n      .style('stroke-width', 0)\n      .style('opacity', this.getCardOpacity.bind(this));\n\n    const $cards = this.$heatmap.find('.heatmap-card');\n    $cards\n      .on('mouseenter', event => {\n        this.tooltip.mouseOverBucket = true;\n        this.highlightCard(event);\n      })\n      .on('mouseleave', event => {\n        this.tooltip.mouseOverBucket = false;\n        this.resetCardHighLight(event);\n      });\n  }\n\n  highlightCard(event) {\n    const color = d3.select(event.target).style('fill');\n    const highlightColor = d3.color(color).darker(2);\n    const strokeColor = d3.color(color).brighter(4);\n    const currentCard = d3.select(event.target);\n    this.tooltip.originalFillColor = color;\n    currentCard\n      .style('fill', highlightColor.toString())\n      .style('stroke', strokeColor.toString())\n      .style('stroke-width', 1);\n  }\n\n  resetCardHighLight(event) {\n    d3\n      .select(event.target)\n      .style('fill', this.tooltip.originalFillColor)\n      .style('stroke', this.tooltip.originalFillColor)\n      .style('stroke-width', 0);\n  }\n\n  setCardSize() {\n    const xGridSize = Math.floor(this.xScale(this.data.xBucketSize) - this.xScale(0));\n    let yGridSize = Math.floor(this.yScale(this.yScale.invert(0) - this.data.yBucketSize));\n\n    if (this.panel.yAxis.logBase !== 1) {\n      const base = this.panel.yAxis.logBase;\n      const splitFactor = this.data.yBucketSize || 1;\n      yGridSize = Math.floor((this.yScale(1) - this.yScale(base)) / splitFactor);\n    }\n\n    this.cardWidth = xGridSize - this.cardPadding * 2;\n    this.cardHeight = yGridSize ? yGridSize - this.cardPadding * 2 : 0;\n  }\n\n  getCardX(d) {\n    let x;\n    if (this.xScale(d.x) < 0) {\n      // Cut card left to prevent overlay\n      x = this.yAxisWidth + this.cardPadding;\n    } else {\n      x = this.xScale(d.x) + this.yAxisWidth + this.cardPadding;\n    }\n\n    return x;\n  }\n\n  getCardWidth(d) {\n    let w;\n    if (this.xScale(d.x) < 0) {\n      // Cut card left to prevent overlay\n      const cuttedWidth = this.xScale(d.x) + this.cardWidth;\n      w = cuttedWidth > 0 ? cuttedWidth : 0;\n    } else if (this.xScale(d.x) + this.cardWidth > this.chartWidth) {\n      // Cut card right to prevent overlay\n      w = this.chartWidth - this.xScale(d.x) - this.cardPadding;\n    } else {\n      w = this.cardWidth;\n    }\n\n    // Card width should be MIN_CARD_SIZE at least\n    w = Math.max(w, MIN_CARD_SIZE);\n    return w;\n  }\n\n  getCardY(d) {\n    let y = this.yScale(d.y) + this.chartTop - this.cardHeight - this.cardPadding;\n    if (this.panel.yAxis.logBase !== 1 && d.y === 0) {\n      y = this.chartBottom - this.cardHeight - this.cardPadding;\n    } else {\n      if (y < this.chartTop) {\n        y = this.chartTop;\n      }\n    }\n\n    return y;\n  }\n\n  getCardHeight(d) {\n    const y = this.yScale(d.y) + this.chartTop - this.cardHeight - this.cardPadding;\n    let h = this.cardHeight;\n\n    if (this.panel.yAxis.logBase !== 1 && d.y === 0) {\n      return this.cardHeight;\n    }\n\n    // Cut card height to prevent overlay\n    if (y < this.chartTop) {\n      h = this.yScale(d.y) - this.cardPadding;\n    } else if (this.yScale(d.y) > this.chartBottom) {\n      h = this.chartBottom - y;\n    } else if (y + this.cardHeight > this.chartBottom) {\n      h = this.chartBottom - y;\n    }\n\n    // Height can't be more than chart height\n    h = Math.min(h, this.chartHeight);\n    // Card height should be MIN_CARD_SIZE at least\n    h = Math.max(h, MIN_CARD_SIZE);\n\n    return h;\n  }\n\n  getCardColor(d) {\n    if (this.panel.color.mode === 'opacity') {\n      return this.panel.color.cardColor;\n    } else {\n      return this.colorScale(d.count);\n    }\n  }\n\n  getCardOpacity(d) {\n    if (this.panel.color.mode === 'opacity') {\n      return this.opacityScale(d.count);\n    } else {\n      return 1;\n    }\n  }\n\n  getEventOffset(event) {\n    const elemOffset = this.$heatmap.offset();\n    const x = Math.floor(event.clientX - elemOffset.left);\n    const y = Math.floor(event.clientY - elemOffset.top);\n    return { x, y };\n  }\n\n  onMouseDown(event) {\n    const offset = this.getEventOffset(event);\n    this.selection.active = true;\n    this.selection.x1 = offset.x;\n\n    this.mouseUpHandler = () => {\n      this.onMouseUp();\n    };\n\n    $(document).one('mouseup', this.mouseUpHandler.bind(this));\n  }\n\n  onMouseUp() {\n    $(document).unbind('mouseup', this.mouseUpHandler.bind(this));\n    this.mouseUpHandler = null;\n    this.selection.active = false;\n\n    const selectionRange = Math.abs(this.selection.x2 - this.selection.x1);\n    if (this.selection.x2 >= 0 && selectionRange > MIN_SELECTION_WIDTH) {\n      const timeFrom = this.xScale.invert(Math.min(this.selection.x1, this.selection.x2) - this.yAxisWidth);\n      const timeTo = this.xScale.invert(Math.max(this.selection.x1, this.selection.x2) - this.yAxisWidth);\n\n      this.ctrl.timeSrv.setTime({\n        from: moment.utc(timeFrom),\n        to: moment.utc(timeTo),\n      });\n    }\n\n    this.clearSelection();\n  }\n\n  onMouseLeave() {\n    appEvents.emit('graph-hover-clear');\n    this.clearCrosshair();\n  }\n\n  onMouseMove(event) {\n    if (!this.heatmap) {\n      return;\n    }\n\n    const offset = this.getEventOffset(event);\n    if (this.selection.active) {\n      // Clear crosshair and tooltip\n      this.clearCrosshair();\n      this.tooltip.destroy();\n\n      this.selection.x2 = this.limitSelection(offset.x);\n      this.drawSelection(this.selection.x1, this.selection.x2);\n    } else {\n      const pos = this.getEventPos(event, offset);\n      this.drawCrosshair(offset.x);\n      this.tooltip.show(pos, this.data);\n      this.emitGraphHoverEvent(pos);\n    }\n  }\n\n  getEventPos(event, offset) {\n    const x = this.xScale.invert(offset.x - this.yAxisWidth).valueOf();\n    const y = this.yScale.invert(offset.y - this.chartTop);\n    const pos = {\n      pageX: event.pageX,\n      pageY: event.pageY,\n      x: x,\n      x1: x,\n      y: y,\n      y1: y,\n      panelRelY: null,\n      offset,\n    };\n\n    return pos;\n  }\n\n  emitGraphHoverEvent(pos) {\n    // Set minimum offset to prevent showing legend from another panel\n    pos.panelRelY = Math.max(pos.offset.y / this.height, 0.001);\n    // broadcast to other graph panels that we are hovering\n    appEvents.emit('graph-hover', { pos: pos, panel: this.panel });\n  }\n\n  limitSelection(x2) {\n    x2 = Math.max(x2, this.yAxisWidth);\n    x2 = Math.min(x2, this.chartWidth + this.yAxisWidth);\n    return x2;\n  }\n\n  drawSelection(posX1, posX2) {\n    if (this.heatmap) {\n      this.heatmap.selectAll('.heatmap-selection').remove();\n      const selectionX = Math.min(posX1, posX2);\n      const selectionWidth = Math.abs(posX1 - posX2);\n\n      if (selectionWidth > MIN_SELECTION_WIDTH) {\n        this.heatmap\n          .append('rect')\n          .attr('class', 'heatmap-selection')\n          .attr('x', selectionX)\n          .attr('width', selectionWidth)\n          .attr('y', this.chartTop)\n          .attr('height', this.chartHeight);\n      }\n    }\n  }\n\n  clearSelection() {\n    this.selection.x1 = -1;\n    this.selection.x2 = -1;\n\n    if (this.heatmap) {\n      this.heatmap.selectAll('.heatmap-selection').remove();\n    }\n  }\n\n  drawCrosshair(position) {\n    if (this.heatmap) {\n      this.heatmap.selectAll('.heatmap-crosshair').remove();\n\n      let posX = position;\n      posX = Math.max(posX, this.yAxisWidth);\n      posX = Math.min(posX, this.chartWidth + this.yAxisWidth);\n\n      this.heatmap\n        .append('g')\n        .attr('class', 'heatmap-crosshair')\n        .attr('transform', 'translate(' + posX + ',0)')\n        .append('line')\n        .attr('x1', 1)\n        .attr('y1', this.chartTop)\n        .attr('x2', 1)\n        .attr('y2', this.chartBottom)\n        .attr('stroke-width', 1);\n    }\n  }\n\n  drawSharedCrosshair(pos) {\n    if (this.heatmap && this.ctrl.dashboard.graphTooltip !== 0) {\n      const posX = this.xScale(pos.x) + this.yAxisWidth;\n      this.drawCrosshair(posX);\n    }\n  }\n\n  clearCrosshair() {\n    if (this.heatmap) {\n      this.heatmap.selectAll('.heatmap-crosshair').remove();\n    }\n  }\n\n  render() {\n    this.data = this.ctrl.data;\n    this.panel = this.ctrl.panel;\n    this.timeRange = this.ctrl.range;\n\n    if (!this.setElementHeight() || !this.data) {\n      return;\n    }\n\n    // Draw default axes and return if no data\n    if (_.isEmpty(this.data.buckets)) {\n      this.addHeatmapCanvas();\n      this.addAxes();\n      return;\n    }\n\n    this.addHeatmap();\n    this.scope.yAxisWidth = this.yAxisWidth;\n    this.scope.xAxisHeight = this.xAxisHeight;\n    this.scope.chartHeight = this.chartHeight;\n    this.scope.chartWidth = this.chartWidth;\n    this.scope.chartTop = this.chartTop;\n  }\n}\n","import { MetricsPanelCtrl } from 'app/plugins/sdk';\nimport _ from 'lodash';\nimport kbn from 'app/core/utils/kbn';\nimport TimeSeries from 'app/core/time_series2';\nimport { axesEditor } from './axes_editor';\nimport { heatmapDisplayEditor } from './display_editor';\nimport rendering from './rendering';\nimport {\n  convertToHeatMap,\n  convertToCards,\n  histogramToHeatmap,\n  calculateBucketSize,\n  sortSeriesByLabel,\n} from './heatmap_data_converter';\n\nconst X_BUCKET_NUMBER_DEFAULT = 30;\nconst Y_BUCKET_NUMBER_DEFAULT = 10;\n\nconst panelDefaults = {\n  heatmap: {},\n  cards: {\n    cardPadding: null,\n    cardRound: null,\n  },\n  color: {\n    mode: 'spectrum',\n    cardColor: '#b4ff00',\n    colorScale: 'sqrt',\n    exponent: 0.5,\n    colorScheme: 'interpolateOranges',\n  },\n  legend: {\n    show: false,\n  },\n  dataFormat: 'timeseries',\n  yBucketBound: 'auto',\n  xAxis: {\n    show: true,\n  },\n  yAxis: {\n    show: true,\n    format: 'short',\n    decimals: null,\n    logBase: 1,\n    splitFactor: null,\n    min: null,\n    max: null,\n  },\n  xBucketSize: null,\n  xBucketNumber: null,\n  yBucketSize: null,\n  yBucketNumber: null,\n  tooltip: {\n    show: true,\n    showHistogram: false,\n  },\n  highlightCards: true,\n};\n\nconst colorModes = ['opacity', 'spectrum'];\nconst opacityScales = ['linear', 'sqrt'];\n\n// Schemes from d3-scale-chromatic\n// https://github.com/d3/d3-scale-chromatic\nconst colorSchemes = [\n  // Diverging\n  { name: 'Spectral', value: 'interpolateSpectral', invert: 'always' },\n  { name: 'RdYlGn', value: 'interpolateRdYlGn', invert: 'always' },\n\n  // Sequential (Single Hue)\n  { name: 'Blues', value: 'interpolateBlues', invert: 'dark' },\n  { name: 'Greens', value: 'interpolateGreens', invert: 'dark' },\n  { name: 'Greys', value: 'interpolateGreys', invert: 'dark' },\n  { name: 'Oranges', value: 'interpolateOranges', invert: 'dark' },\n  { name: 'Purples', value: 'interpolatePurples', invert: 'dark' },\n  { name: 'Reds', value: 'interpolateReds', invert: 'dark' },\n\n  // Sequential (Multi-Hue)\n  { name: 'Viridis', value: 'interpolateViridis', invert: 'light' },\n  { name: 'Magma', value: 'interpolateMagma', invert: 'light' },\n  { name: 'Inferno', value: 'interpolateInferno', invert: 'light' },\n  { name: 'Plasma', value: 'interpolatePlasma', invert: 'light' },\n  { name: 'Warm', value: 'interpolateWarm', invert: 'light' },\n  { name: 'Cool', value: 'interpolateCool', invert: 'light' },\n  { name: 'Cubehelix', value: 'interpolateCubehelixDefault', invert: 'light' },\n  { name: 'BuGn', value: 'interpolateBuGn', invert: 'dark' },\n  { name: 'BuPu', value: 'interpolateBuPu', invert: 'dark' },\n  { name: 'GnBu', value: 'interpolateGnBu', invert: 'dark' },\n  { name: 'OrRd', value: 'interpolateOrRd', invert: 'dark' },\n  { name: 'PuBuGn', value: 'interpolatePuBuGn', invert: 'dark' },\n  { name: 'PuBu', value: 'interpolatePuBu', invert: 'dark' },\n  { name: 'PuRd', value: 'interpolatePuRd', invert: 'dark' },\n  { name: 'RdPu', value: 'interpolateRdPu', invert: 'dark' },\n  { name: 'YlGnBu', value: 'interpolateYlGnBu', invert: 'dark' },\n  { name: 'YlGn', value: 'interpolateYlGn', invert: 'dark' },\n  { name: 'YlOrBr', value: 'interpolateYlOrBr', invert: 'dark' },\n  { name: 'YlOrRd', value: 'interpolateYlOrRd', invert: 'dark' },\n];\n\nconst dsSupportHistogramSort = ['prometheus', 'elasticsearch'];\n\nexport class HeatmapCtrl extends MetricsPanelCtrl {\n  static templateUrl = 'module.html';\n\n  opacityScales: any = [];\n  colorModes: any = [];\n  colorSchemes: any = [];\n  selectionActivated: boolean;\n  unitFormats: any;\n  data: any;\n  series: any;\n  timeSrv: any;\n  dataWarning: any;\n  decimals: number;\n  scaledDecimals: number;\n\n  /** @ngInject */\n  constructor($scope, $injector, timeSrv) {\n    super($scope, $injector);\n    this.timeSrv = timeSrv;\n    this.selectionActivated = false;\n\n    _.defaultsDeep(this.panel, panelDefaults);\n    this.opacityScales = opacityScales;\n    this.colorModes = colorModes;\n    this.colorSchemes = colorSchemes;\n\n    // Bind grafana panel events\n    this.events.on('render', this.onRender.bind(this));\n    this.events.on('data-received', this.onDataReceived.bind(this));\n    this.events.on('data-error', this.onDataError.bind(this));\n    this.events.on('data-snapshot-load', this.onDataReceived.bind(this));\n    this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n\n    this.onCardColorChange = this.onCardColorChange.bind(this);\n  }\n\n  onInitEditMode() {\n    this.addEditorTab('Axes', axesEditor, 2);\n    this.addEditorTab('Display', heatmapDisplayEditor, 3);\n    this.unitFormats = kbn.getUnitFormats();\n  }\n\n  zoomOut(evt) {\n    this.publishAppEvent('zoom-out', 2);\n  }\n\n  onRender() {\n    if (!this.range) {\n      return;\n    }\n\n    if (this.panel.dataFormat === 'tsbuckets') {\n      this.convertHistogramToHeatmapData();\n    } else {\n      this.convertTimeSeriesToHeatmapData();\n    }\n  }\n\n  convertTimeSeriesToHeatmapData() {\n    let xBucketSize, yBucketSize, bucketsData, heatmapStats;\n    const logBase = this.panel.yAxis.logBase;\n\n    const xBucketNumber = this.panel.xBucketNumber || X_BUCKET_NUMBER_DEFAULT;\n    const xBucketSizeByNumber = Math.floor((this.range.to - this.range.from) / xBucketNumber);\n\n    // Parse X bucket size (number or interval)\n    const isIntervalString = kbn.interval_regex.test(this.panel.xBucketSize);\n    if (isIntervalString) {\n      xBucketSize = kbn.interval_to_ms(this.panel.xBucketSize);\n    } else if (\n      isNaN(Number(this.panel.xBucketSize)) ||\n      this.panel.xBucketSize === '' ||\n      this.panel.xBucketSize === null\n    ) {\n      xBucketSize = xBucketSizeByNumber;\n    } else {\n      xBucketSize = Number(this.panel.xBucketSize);\n    }\n\n    // Calculate Y bucket size\n    heatmapStats = this.parseSeries(this.series);\n    const yBucketNumber = this.panel.yBucketNumber || Y_BUCKET_NUMBER_DEFAULT;\n    if (logBase !== 1) {\n      yBucketSize = this.panel.yAxis.splitFactor;\n    } else {\n      if (heatmapStats.max === heatmapStats.min) {\n        if (heatmapStats.max) {\n          yBucketSize = heatmapStats.max / Y_BUCKET_NUMBER_DEFAULT;\n        } else {\n          yBucketSize = 1;\n        }\n      } else {\n        yBucketSize = (heatmapStats.max - heatmapStats.min) / yBucketNumber;\n      }\n      yBucketSize = this.panel.yBucketSize || yBucketSize;\n    }\n\n    bucketsData = convertToHeatMap(this.series, yBucketSize, xBucketSize, logBase);\n\n    // Set default Y range if no data\n    if (!heatmapStats.min && !heatmapStats.max) {\n      heatmapStats = { min: -1, max: 1, minLog: 1 };\n      yBucketSize = 1;\n    }\n\n    const { cards, cardStats } = convertToCards(bucketsData);\n\n    this.data = {\n      buckets: bucketsData,\n      heatmapStats: heatmapStats,\n      xBucketSize: xBucketSize,\n      yBucketSize: yBucketSize,\n      cards: cards,\n      cardStats: cardStats,\n    };\n  }\n\n  convertHistogramToHeatmapData() {\n    const panelDatasource = this.getPanelDataSourceType();\n    let xBucketSize, yBucketSize, bucketsData, tsBuckets;\n\n    // Try to sort series by bucket bound, if datasource doesn't do it.\n    if (!_.includes(dsSupportHistogramSort, panelDatasource)) {\n      this.series.sort(sortSeriesByLabel);\n    }\n\n    // Convert histogram to heatmap. Each histogram bucket represented by the series which name is\n    // a top (or bottom, depends of datasource) bucket bound. Further, these values will be used as X axis labels.\n    bucketsData = histogramToHeatmap(this.series);\n\n    tsBuckets = _.map(this.series, 'label');\n    const yBucketBound = this.panel.yBucketBound;\n    if ((panelDatasource === 'prometheus' && yBucketBound !== 'lower') || yBucketBound === 'upper') {\n      // Prometheus labels are upper inclusive bounds, so add empty bottom bucket label.\n      tsBuckets = [''].concat(tsBuckets);\n    } else {\n      // Elasticsearch uses labels as lower bucket bounds, so add empty top bucket label.\n      // Use this as a default mode as well.\n      tsBuckets.push('');\n    }\n\n    // Calculate bucket size based on heatmap data\n    const xBucketBoundSet = _.map(_.keys(bucketsData), key => Number(key));\n    xBucketSize = calculateBucketSize(xBucketBoundSet);\n    // Always let yBucketSize=1 in 'tsbuckets' mode\n    yBucketSize = 1;\n\n    const { cards, cardStats } = convertToCards(bucketsData);\n\n    this.data = {\n      buckets: bucketsData,\n      xBucketSize: xBucketSize,\n      yBucketSize: yBucketSize,\n      tsBuckets: tsBuckets,\n      cards: cards,\n      cardStats: cardStats,\n    };\n  }\n\n  getPanelDataSourceType() {\n    if (this.datasource.meta && this.datasource.meta.id) {\n      return this.datasource.meta.id;\n    } else {\n      return 'unknown';\n    }\n  }\n\n  onDataReceived(dataList) {\n    this.series = dataList.map(this.seriesHandler.bind(this));\n\n    this.dataWarning = null;\n    const datapointsCount = _.reduce(\n      this.series,\n      (sum, series) => {\n        return sum + series.datapoints.length;\n      },\n      0\n    );\n\n    if (datapointsCount === 0) {\n      this.dataWarning = {\n        title: 'No data points',\n        tip: 'No datapoints returned from data query',\n      };\n    } else {\n      for (const series of this.series) {\n        if (series.isOutsideRange) {\n          this.dataWarning = {\n            title: 'Data points outside time range',\n            tip: 'Can be caused by timezone mismatch or missing time filter in query',\n          };\n          break;\n        }\n      }\n    }\n\n    this.render();\n  }\n\n  onDataError() {\n    this.series = [];\n    this.render();\n  }\n\n  onCardColorChange(newColor) {\n    this.panel.color.cardColor = newColor;\n    this.render();\n  }\n\n  seriesHandler(seriesData) {\n    if (seriesData.datapoints === undefined) {\n      throw new Error('Heatmap error: data should be a time series');\n    }\n\n    const series = new TimeSeries({\n      datapoints: seriesData.datapoints,\n      alias: seriesData.target,\n    });\n\n    series.flotpairs = series.getFlotPairs(this.panel.nullPointMode);\n\n    const datapoints = seriesData.datapoints || [];\n    if (datapoints && datapoints.length > 0) {\n      const last = datapoints[datapoints.length - 1][1];\n      const from = this.range.from;\n      if (last - from < -10000) {\n        series.isOutsideRange = true;\n      }\n    }\n\n    return series;\n  }\n\n  parseSeries(series) {\n    const min = _.min(_.map(series, s => s.stats.min));\n    const minLog = _.min(_.map(series, s => s.stats.logmin));\n    const max = _.max(_.map(series, s => s.stats.max));\n\n    return {\n      max: max,\n      min: min,\n      minLog: minLog,\n    };\n  }\n\n  parseHistogramSeries(series) {\n    const bounds = _.map(series, s => Number(s.alias));\n    const min = _.min(bounds);\n    const minLog = _.min(bounds);\n    const max = _.max(bounds);\n\n    return {\n      max: max,\n      min: min,\n      minLog: minLog,\n    };\n  }\n\n  link(scope, elem, attrs, ctrl) {\n    rendering(scope, elem, attrs, ctrl);\n  }\n}\n","import './color_legend';\nimport { HeatmapCtrl } from './heatmap_ctrl';\n\nexport { HeatmapCtrl as PanelCtrl };\n","import _ from 'lodash';\nimport flatten from '../../../core/utils/flatten';\nimport TimeSeries from '../../../core/time_series2';\nimport TableModel from '../../../core/table_model';\n\nconst transformers = {};\n\ntransformers['timeseries_to_rows'] = {\n  description: 'Time series to rows',\n  getColumns: () => {\n    return [];\n  },\n  transform: (data, panel, model) => {\n    model.columns = [{ text: 'Time', type: 'date' }, { text: 'Metric' }, { text: 'Value' }];\n\n    for (let i = 0; i < data.length; i++) {\n      const series = data[i];\n      for (let y = 0; y < series.datapoints.length; y++) {\n        const dp = series.datapoints[y];\n        model.rows.push([dp[1], series.target, dp[0]]);\n      }\n    }\n  },\n};\n\ntransformers['timeseries_to_columns'] = {\n  description: 'Time series to columns',\n  getColumns: () => {\n    return [];\n  },\n  transform: (data, panel, model) => {\n    model.columns.push({ text: 'Time', type: 'date' });\n\n    // group by time\n    const points = {};\n\n    for (let i = 0; i < data.length; i++) {\n      const series = data[i];\n      model.columns.push({ text: series.target });\n\n      for (let y = 0; y < series.datapoints.length; y++) {\n        const dp = series.datapoints[y];\n        const timeKey = dp[1].toString();\n\n        if (!points[timeKey]) {\n          points[timeKey] = { time: dp[1] };\n          points[timeKey][i] = dp[0];\n        } else {\n          points[timeKey][i] = dp[0];\n        }\n      }\n    }\n\n    for (const time in points) {\n      const point = points[time];\n      const values = [point.time];\n\n      for (let i = 0; i < data.length; i++) {\n        const value = point[i];\n        values.push(value);\n      }\n\n      model.rows.push(values);\n    }\n  },\n};\n\ntransformers['timeseries_aggregations'] = {\n  description: 'Time series aggregations',\n  getColumns: () => {\n    return [\n      { text: 'Avg', value: 'avg' },\n      { text: 'Min', value: 'min' },\n      { text: 'Max', value: 'max' },\n      { text: 'Total', value: 'total' },\n      { text: 'Current', value: 'current' },\n      { text: 'Count', value: 'count' },\n    ];\n  },\n  transform: (data, panel, model) => {\n    let i, y;\n    model.columns.push({ text: 'Metric' });\n\n    for (i = 0; i < panel.columns.length; i++) {\n      model.columns.push({ text: panel.columns[i].text });\n    }\n\n    for (i = 0; i < data.length; i++) {\n      const series = new TimeSeries({\n        datapoints: data[i].datapoints,\n        alias: data[i].target,\n      });\n\n      series.getFlotPairs('connected');\n      const cells = [series.alias];\n\n      for (y = 0; y < panel.columns.length; y++) {\n        cells.push(series.stats[panel.columns[y].value]);\n      }\n\n      model.rows.push(cells);\n    }\n  },\n};\n\ntransformers['annotations'] = {\n  description: 'Annotations',\n  getColumns: () => {\n    return [];\n  },\n  transform: (data, panel, model) => {\n    model.columns.push({ text: 'Time', type: 'date' });\n    model.columns.push({ text: 'Title' });\n    model.columns.push({ text: 'Text' });\n    model.columns.push({ text: 'Tags' });\n\n    if (!data || !data.annotations || data.annotations.length === 0) {\n      return;\n    }\n\n    for (let i = 0; i < data.annotations.length; i++) {\n      const evt = data.annotations[i];\n      model.rows.push([evt.time, evt.title, evt.text, evt.tags]);\n    }\n  },\n};\n\ntransformers['table'] = {\n  description: 'Table',\n  getColumns: data => {\n    if (!data || data.length === 0) {\n      return [];\n    }\n\n    // Single query returns data columns as is\n    if (data.length === 1) {\n      return [...data[0].columns];\n    }\n\n    // Track column indexes: name -> index\n    const columnNames = {};\n\n    // Union of all columns\n    const columns = data.reduce((acc, series) => {\n      series.columns.forEach(col => {\n        const { text } = col;\n        if (columnNames[text] === undefined) {\n          columnNames[text] = acc.length;\n          acc.push(col);\n        }\n      });\n      return acc;\n    }, []);\n\n    return columns;\n  },\n  transform: (data, panel, model) => {\n    if (!data || data.length === 0) {\n      return;\n    }\n\n    const noTableIndex = _.findIndex(data, d => d.type !== 'table');\n    if (noTableIndex > -1) {\n      throw {\n        message: `查询为 #${String.fromCharCode(\n          65 + noTableIndex\n        )} 的结果不是表格格式，尝试使用其他的转换格式。`,\n      };\n    }\n\n    // Single query returns data columns and rows as is\n    if (data.length === 1) {\n      model.columns = [...data[0].columns];\n      model.rows = [...data[0].rows];\n      return;\n    }\n\n    // Track column indexes of union: name -> index\n    const columnNames = {};\n\n    // Union of all non-value columns\n    const columnsUnion = data.reduce((acc, series) => {\n      series.columns.forEach(col => {\n        const { text } = col;\n        if (columnNames[text] === undefined) {\n          columnNames[text] = acc.length;\n          acc.push(col);\n        }\n      });\n      return acc;\n    }, []);\n\n    // Map old column index to union index per series, e.g.,\n    // given columnNames {A: 0, B: 1} and\n    // data [{columns: [{ text: 'A' }]}, {columns: [{ text: 'B' }]}] => [[0], [1]]\n    const columnIndexMapper = data.map(series => series.columns.map(col => columnNames[col.text]));\n\n    // Flatten rows of all series and adjust new column indexes\n    const flattenedRows = data.reduce((acc, series, seriesIndex) => {\n      const mapper = columnIndexMapper[seriesIndex];\n      series.rows.forEach(row => {\n        const alteredRow = [];\n        // Shifting entries according to index mapper\n        mapper.forEach((to, from) => {\n          alteredRow[to] = row[from];\n        });\n        acc.push(alteredRow);\n      });\n      return acc;\n    }, []);\n\n    // Returns true if both rows have matching non-empty fields as well as matching\n    // indexes where one field is empty and the other is not\n    function areRowsMatching(columns, row, otherRow) {\n      let foundFieldToMatch = false;\n      for (let columnIndex = 0; columnIndex < columns.length; columnIndex++) {\n        if (row[columnIndex] !== undefined && otherRow[columnIndex] !== undefined) {\n          if (row[columnIndex] !== otherRow[columnIndex]) {\n            return false;\n          }\n        } else if (row[columnIndex] === undefined || otherRow[columnIndex] === undefined) {\n          foundFieldToMatch = true;\n        }\n      }\n      return foundFieldToMatch;\n    }\n\n    // Merge rows that have same values for columns\n    const mergedRows = {};\n    const compactedRows = flattenedRows.reduce((acc, row, rowIndex) => {\n      if (!mergedRows[rowIndex]) {\n        // Look from current row onwards\n        let offset = rowIndex + 1;\n        // More than one row can be merged into current row\n        while (offset < flattenedRows.length) {\n          // Find next row that could be merged\n          const match = _.findIndex(flattenedRows, otherRow => areRowsMatching(columnsUnion, row, otherRow), offset);\n          if (match > -1) {\n            const matchedRow = flattenedRows[match];\n            // Merge values from match into current row if there is a gap in the current row\n            for (let columnIndex = 0; columnIndex < columnsUnion.length; columnIndex++) {\n              if (row[columnIndex] === undefined && matchedRow[columnIndex] !== undefined) {\n                row[columnIndex] = matchedRow[columnIndex];\n              }\n            }\n            // Don't visit this row again\n            mergedRows[match] = matchedRow;\n            // Keep looking for more rows to merge\n            offset = match + 1;\n          } else {\n            // No match found, stop looking\n            break;\n          }\n        }\n        acc.push(row);\n      }\n      return acc;\n    }, []);\n\n    model.columns = columnsUnion;\n    model.rows = compactedRows;\n  },\n};\n\ntransformers['json'] = {\n  description: 'JSON Data',\n  getColumns: data => {\n    if (!data || data.length === 0) {\n      return [];\n    }\n\n    const names: any = {};\n    for (let i = 0; i < data.length; i++) {\n      const series = data[i];\n      if (series.type !== 'docs') {\n        continue;\n      }\n\n      // only look at 100 docs\n      const maxDocs = Math.min(series.datapoints.length, 100);\n      for (let y = 0; y < maxDocs; y++) {\n        const doc = series.datapoints[y];\n        const flattened = flatten(doc, null);\n        for (const propName in flattened) {\n          names[propName] = true;\n        }\n      }\n    }\n\n    return _.map(names, (value, key) => {\n      return { text: key, value: key };\n    });\n  },\n  transform: (data, panel, model) => {\n    let i, y, z;\n\n    for (const column of panel.columns) {\n      const tableCol: any = { text: column.text };\n\n      // if filterable data then set columns to filterable\n      if (data.length > 0 && data[0].filterable) {\n        tableCol.filterable = true;\n      }\n\n      model.columns.push(tableCol);\n    }\n\n    if (model.columns.length === 0) {\n      model.columns.push({ text: 'JSON' });\n    }\n\n    for (i = 0; i < data.length; i++) {\n      const series = data[i];\n\n      for (y = 0; y < series.datapoints.length; y++) {\n        const dp = series.datapoints[y];\n        const values = [];\n\n        if (_.isObject(dp) && panel.columns.length > 0) {\n          const flattened = flatten(dp, null);\n          for (z = 0; z < panel.columns.length; z++) {\n            values.push(flattened[panel.columns[z].value]);\n          }\n        } else {\n          values.push(JSON.stringify(dp));\n        }\n\n        model.rows.push(values);\n      }\n    }\n  },\n};\n\nfunction transformDataToTable(data, panel) {\n  const model = new TableModel();\n\n  if (!data || data.length === 0) {\n    return model;\n  }\n\n  const transformer = transformers[panel.transform];\n  if (!transformer) {\n    throw { message: 'Transformer ' + panel.transform + ' not found' };\n  }\n\n  transformer.transform(data, panel, model);\n  return model;\n}\n\nexport { transformers, transformDataToTable };\n","import _ from 'lodash';\nimport { transformers } from './transformers';\n\nexport class TablePanelEditorCtrl {\n  panel: any;\n  panelCtrl: any;\n  transformers: any;\n  fontSizes: any;\n  addColumnSegment: any;\n  getColumnNames: any;\n  canSetColumns: boolean;\n  columnsHelpMessage: string;\n\n  /** @ngInject */\n  constructor($scope, private $q, private uiSegmentSrv) {\n    $scope.editor = this;\n    this.panelCtrl = $scope.ctrl;\n    this.panel = this.panelCtrl.panel;\n    this.transformers = transformers;\n    this.fontSizes = ['80%', '90%', '100%', '110%', '120%', '130%', '150%', '160%', '180%', '200%', '220%', '250%'];\n    this.addColumnSegment = uiSegmentSrv.newPlusButton();\n    this.updateTransformHints();\n  }\n\n  updateTransformHints() {\n    this.canSetColumns = false;\n    this.columnsHelpMessage = '';\n\n    switch (this.panel.transform) {\n      case 'timeseries_aggregations': {\n        this.canSetColumns = true;\n        break;\n      }\n      case 'json': {\n        this.canSetColumns = true;\n        break;\n      }\n      case 'table': {\n        this.columnsHelpMessage = '列的内容及顺序由数据查询决定';\n      }\n    }\n  }\n\n  getColumnOptions() {\n    if (!this.panelCtrl.dataRaw) {\n      return this.$q.when([]);\n    }\n    const columns = this.transformers[this.panel.transform].getColumns(this.panelCtrl.dataRaw);\n    const segments = _.map(columns, (c: any) => this.uiSegmentSrv.newSegment({ value: c.text }));\n    return this.$q.when(segments);\n  }\n\n  addColumn() {\n    const columns = transformers[this.panel.transform].getColumns(this.panelCtrl.dataRaw);\n    const column = _.find(columns, { text: this.addColumnSegment.value });\n\n    if (column) {\n      this.panel.columns.push(column);\n      this.render();\n    }\n\n    const plusButton = this.uiSegmentSrv.newPlusButton();\n    this.addColumnSegment.html = plusButton.html;\n    this.addColumnSegment.value = plusButton.value;\n  }\n\n  transformChanged() {\n    this.panel.columns = [];\n    if (this.panel.transform === 'timeseries_aggregations') {\n      this.panel.columns.push({ text: 'Avg', value: 'avg' });\n    }\n\n    this.updateTransformHints();\n    this.render();\n  }\n\n  render() {\n    this.panelCtrl.render();\n  }\n\n  removeColumn(column) {\n    this.panel.columns = _.without(this.panel.columns, column);\n    this.panelCtrl.render();\n  }\n}\n\n/** @ngInject */\nexport function tablePanelEditor($q, uiSegmentSrv) {\n  'use strict';\n  return {\n    restrict: 'E',\n    scope: true,\n    templateUrl: 'public/app/plugins/panel/table/editor.html',\n    controller: TablePanelEditorCtrl,\n  };\n}\n","import _ from 'lodash';\nimport kbn from 'app/core/utils/kbn';\n\nexport class ColumnOptionsCtrl {\n  panel: any;\n  panelCtrl: any;\n  colorModes: any;\n  columnStyles: any;\n  columnTypes: any;\n  fontSizes: any;\n  dateFormats: any;\n  addColumnSegment: any;\n  unitFormats: any;\n  getColumnNames: any;\n  activeStyleIndex: number;\n  mappingTypes: any;\n\n  /** @ngInject */\n  constructor($scope) {\n    $scope.editor = this;\n\n    this.activeStyleIndex = 0;\n    this.panelCtrl = $scope.ctrl;\n    this.panel = this.panelCtrl.panel;\n    this.unitFormats = kbn.getUnitFormats();\n    this.colorModes = [\n      { text: '关闭', value: null },\n      { text: '单元格', value: 'cell' },\n      { text: '值', value: 'value' },\n      { text: '行', value: 'row' },\n    ];\n    this.columnTypes = [\n      { text: '数值', value: 'number' },\n      { text: '字符串', value: 'string' },\n      { text: '日期', value: 'date' },\n      { text: '隐藏', value: 'hidden' },\n    ];\n    this.fontSizes = ['80%', '90%', '100%', '110%', '120%', '130%', '150%', '160%', '180%', '200%', '220%', '250%'];\n    this.dateFormats = [\n      { text: 'YYYY-MM-DD HH:mm:ss', value: 'YYYY-MM-DD HH:mm:ss' },\n      { text: 'YYYY-MM-DD HH:mm:ss.SSS', value: 'YYYY-MM-DD HH:mm:ss.SSS' },\n      { text: 'MM/DD/YY h:mm:ss a', value: 'MM/DD/YY h:mm:ss a' },\n      { text: 'MMMM D, YYYY LT', value: 'MMMM D, YYYY LT' },\n    ];\n    this.mappingTypes = [{ text: '数据值转文本', value: 1 }, { text: '数值范围转文本', value: 2 }];\n\n    this.getColumnNames = () => {\n      if (!this.panelCtrl.table) {\n        return [];\n      }\n      return _.map(this.panelCtrl.table.columns, (col: any) => {\n        return col.text;\n      });\n    };\n\n    this.onColorChange = this.onColorChange.bind(this);\n  }\n\n  render() {\n    this.panelCtrl.render();\n  }\n\n  setUnitFormat(column, subItem) {\n    column.unit = subItem.value;\n    this.panelCtrl.render();\n  }\n\n  addColumnStyle() {\n    const newStyleRule = {\n      unit: 'short',\n      type: 'number',\n      alias: '',\n      decimals: 2,\n      colors: ['rgba(245, 54, 54, 0.9)', 'rgba(237, 129, 40, 0.89)', 'rgba(50, 172, 45, 0.97)'],\n      colorMode: null,\n      pattern: '',\n      dateFormat: 'YYYY-MM-DD HH:mm:ss',\n      thresholds: [],\n      mappingType: 1,\n    };\n\n    const styles = this.panel.styles;\n    const stylesCount = styles.length;\n    let indexToInsert = stylesCount;\n\n    // check if last is a catch all rule, then add it before that one\n    if (stylesCount > 0) {\n      const last = styles[stylesCount - 1];\n      if (last.pattern === '/.*/') {\n        indexToInsert = stylesCount - 1;\n      }\n    }\n\n    styles.splice(indexToInsert, 0, newStyleRule);\n    this.activeStyleIndex = indexToInsert;\n  }\n\n  removeColumnStyle(style) {\n    this.panel.styles = _.without(this.panel.styles, style);\n  }\n\n  invertColorOrder(index) {\n    const ref = this.panel.styles[index].colors;\n    const copy = ref[0];\n    ref[0] = ref[2];\n    ref[2] = copy;\n    this.panelCtrl.render();\n  }\n\n  onColorChange(styleIndex, colorIndex) {\n    return newColor => {\n      this.panel.styles[styleIndex].colors[colorIndex] = newColor;\n      this.render();\n    };\n  }\n\n  addValueMap(style) {\n    if (!style.valueMaps) {\n      style.valueMaps = [];\n    }\n    style.valueMaps.push({ value: '', text: '' });\n    this.panelCtrl.render();\n  }\n\n  removeValueMap(style, index) {\n    style.valueMaps.splice(index, 1);\n    this.panelCtrl.render();\n  }\n\n  addRangeMap(style) {\n    if (!style.rangeMaps) {\n      style.rangeMaps = [];\n    }\n    style.rangeMaps.push({ from: '', to: '', text: '' });\n    this.panelCtrl.render();\n  }\n\n  removeRangeMap(style, index) {\n    style.rangeMaps.splice(index, 1);\n    this.panelCtrl.render();\n  }\n}\n\n/** @ngInject */\nexport function columnOptionsTab($q, uiSegmentSrv) {\n  'use strict';\n  return {\n    restrict: 'E',\n    scope: true,\n    templateUrl: 'public/app/plugins/panel/table/column_options.html',\n    controller: ColumnOptionsCtrl,\n  };\n}\n","import _ from 'lodash';\nimport moment from 'moment';\nimport kbn from 'app/core/utils/kbn';\n\nexport class TableRenderer {\n  formatters: any[];\n  colorState: any;\n\n  constructor(private panel, private table, private isUtc, private sanitize, private templateSrv) {\n    this.initColumns();\n  }\n\n  setTable(table) {\n    this.table = table;\n\n    this.initColumns();\n  }\n\n  initColumns() {\n    this.formatters = [];\n    this.colorState = {};\n\n    for (let colIndex = 0; colIndex < this.table.columns.length; colIndex++) {\n      const column = this.table.columns[colIndex];\n      column.title = column.text;\n\n      for (let i = 0; i < this.panel.styles.length; i++) {\n        const style = this.panel.styles[i];\n\n        const regex = kbn.stringToJsRegex(style.pattern);\n        if (column.text.match(regex)) {\n          column.style = style;\n\n          if (style.alias) {\n            column.title = column.text.replace(regex, style.alias);\n          }\n\n          break;\n        }\n      }\n\n      this.formatters[colIndex] = this.createColumnFormatter(column);\n    }\n  }\n\n  getColorForValue(value, style) {\n    if (!style.thresholds) {\n      return null;\n    }\n    for (let i = style.thresholds.length; i > 0; i--) {\n      if (value >= style.thresholds[i - 1]) {\n        return style.colors[i];\n      }\n    }\n    return _.first(style.colors);\n  }\n\n  defaultCellFormatter(v, style) {\n    if (v === null || v === void 0 || v === undefined) {\n      return '';\n    }\n\n    if (_.isArray(v)) {\n      v = v.join(', ');\n    }\n\n    if (style && style.sanitize) {\n      return this.sanitize(v);\n    } else {\n      return _.escape(v);\n    }\n  }\n\n  createColumnFormatter(column) {\n    if (!column.style) {\n      return this.defaultCellFormatter;\n    }\n\n    if (column.style.type === 'hidden') {\n      return v => {\n        return undefined;\n      };\n    }\n\n    if (column.style.type === 'date') {\n      return v => {\n        if (v === undefined || v === null) {\n          return '-';\n        }\n\n        if (_.isArray(v)) {\n          v = v[0];\n        }\n        let date = moment(v);\n        if (this.isUtc) {\n          date = date.utc();\n        }\n        return date.format(column.style.dateFormat);\n      };\n    }\n\n    if (column.style.type === 'string') {\n      return v => {\n        if (_.isArray(v)) {\n          v = v.join(', ');\n        }\n\n        const mappingType = column.style.mappingType || 0;\n\n        if (mappingType === 1 && column.style.valueMaps) {\n          for (let i = 0; i < column.style.valueMaps.length; i++) {\n            const map = column.style.valueMaps[i];\n\n            if (v === null) {\n              if (map.value === 'null') {\n                return map.text;\n              }\n              continue;\n            }\n\n            // Allow both numeric and string values to be mapped\n            if ((!_.isString(v) && Number(map.value) === Number(v)) || map.value === v) {\n              this.setColorState(v, column.style);\n              return this.defaultCellFormatter(map.text, column.style);\n            }\n          }\n        }\n\n        if (mappingType === 2 && column.style.rangeMaps) {\n          for (let i = 0; i < column.style.rangeMaps.length; i++) {\n            const map = column.style.rangeMaps[i];\n\n            if (v === null) {\n              if (map.from === 'null' && map.to === 'null') {\n                return map.text;\n              }\n              continue;\n            }\n\n            if (Number(map.from) <= Number(v) && Number(map.to) >= Number(v)) {\n              this.setColorState(v, column.style);\n              return this.defaultCellFormatter(map.text, column.style);\n            }\n          }\n        }\n\n        if (v === null || v === void 0) {\n          return '-';\n        }\n\n        this.setColorState(v, column.style);\n        return this.defaultCellFormatter(v, column.style);\n      };\n    }\n\n    if (column.style.type === 'number') {\n      const valueFormatter = kbn.valueFormats[column.unit || column.style.unit];\n\n      return v => {\n        if (v === null || v === void 0) {\n          return '-';\n        }\n\n        if (_.isString(v) || _.isArray(v)) {\n          return this.defaultCellFormatter(v, column.style);\n        }\n\n        this.setColorState(v, column.style);\n        return valueFormatter(v, column.style.decimals, null);\n      };\n    }\n\n    return value => {\n      return this.defaultCellFormatter(value, column.style);\n    };\n  }\n\n  setColorState(value, style) {\n    if (!style.colorMode) {\n      return;\n    }\n\n    if (value === null || value === void 0 || _.isArray(value)) {\n      return;\n    }\n\n    const numericValue = Number(value);\n    if (isNaN(numericValue)) {\n      return;\n    }\n\n    this.colorState[style.colorMode] = this.getColorForValue(numericValue, style);\n  }\n\n  renderRowVariables(rowIndex) {\n    const scopedVars = {};\n    let cellVariable;\n    const row = this.table.rows[rowIndex];\n    for (let i = 0; i < row.length; i++) {\n      cellVariable = `__cell_${i}`;\n      scopedVars[cellVariable] = { value: row[i] };\n    }\n    return scopedVars;\n  }\n\n  formatColumnValue(colIndex, value) {\n    return this.formatters[colIndex] ? this.formatters[colIndex](value) : value;\n  }\n\n  renderCell(columnIndex, rowIndex, value, addWidthHack = false) {\n    value = this.formatColumnValue(columnIndex, value);\n\n    const column = this.table.columns[columnIndex];\n    let style = '';\n    const cellClasses = [];\n    let cellClass = '';\n\n    if (this.colorState.cell) {\n      style = ' style=\"background-color:' + this.colorState.cell + '\"';\n      cellClasses.push('table-panel-color-cell');\n      this.colorState.cell = null;\n    } else if (this.colorState.value) {\n      style = ' style=\"color:' + this.colorState.value + '\"';\n      this.colorState.value = null;\n    }\n    // because of the fixed table headers css only solution\n    // there is an issue if header cell is wider the cell\n    // this hack adds header content to cell (not visible)\n    let columnHtml = '';\n    if (addWidthHack) {\n      columnHtml = '<div class=\"table-panel-width-hack\">' + this.table.columns[columnIndex].title + '</div>';\n    }\n\n    if (value === undefined) {\n      style = ' style=\"display:none;\"';\n      column.hidden = true;\n    } else {\n      column.hidden = false;\n    }\n\n    if (column.hidden === true) {\n      return '';\n    }\n\n    if (column.style && column.style.preserveFormat) {\n      cellClasses.push('table-panel-cell-pre');\n    }\n\n    if (column.style && column.style.link) {\n      // Render cell as link\n      const scopedVars = this.renderRowVariables(rowIndex);\n      scopedVars['__cell'] = { value: value };\n\n      const cellLink = this.templateSrv.replace(column.style.linkUrl, scopedVars, encodeURIComponent);\n      const cellLinkTooltip = this.templateSrv.replace(column.style.linkTooltip, scopedVars);\n      const cellTarget = column.style.linkTargetBlank ? '_blank' : '';\n\n      cellClasses.push('table-panel-cell-link');\n\n      columnHtml += `\n        <a href=\"${cellLink}\" target=\"${cellTarget}\" data-link-tooltip data-original-title=\"${cellLinkTooltip}\" data-placement=\"right\"${style}>\n          ${value}\n        </a>\n      `;\n    } else {\n      columnHtml += value;\n    }\n\n    if (column.filterable) {\n      cellClasses.push('table-panel-cell-filterable');\n      columnHtml += `\n        <a class=\"table-panel-filter-link\" data-link-tooltip data-original-title=\"Filter out value\" data-placement=\"bottom\"\n           data-row=\"${rowIndex}\" data-column=\"${columnIndex}\" data-operator=\"!=\">\n          <i class=\"fa fa-search-minus\"></i>\n        </a>\n        <a class=\"table-panel-filter-link\" data-link-tooltip data-original-title=\"Filter for value\" data-placement=\"bottom\"\n           data-row=\"${rowIndex}\" data-column=\"${columnIndex}\" data-operator=\"=\">\n          <i class=\"fa fa-search-plus\"></i>\n        </a>`;\n    }\n\n    if (cellClasses.length) {\n      cellClass = ' class=\"' + cellClasses.join(' ') + '\"';\n    }\n\n    columnHtml = '<td' + cellClass + style + '>' + columnHtml + '</td>';\n    return columnHtml;\n  }\n\n  render(page) {\n    const pageSize = this.panel.pageSize || 100;\n    const startPos = page * pageSize;\n    const endPos = Math.min(startPos + pageSize, this.table.rows.length);\n    let html = '';\n    const rowClasses = [];\n    let rowClass = '';\n\n    for (let y = startPos; y < endPos; y++) {\n      const row = this.table.rows[y];\n      let cellHtml = '';\n      let rowStyle = '';\n      for (let i = 0; i < this.table.columns.length; i++) {\n        cellHtml += this.renderCell(i, y, row[i], y === startPos);\n      }\n\n      if (this.colorState.row) {\n        rowStyle = ' style=\"background-color:' + this.colorState.row + '\"';\n        rowClasses.push('table-panel-color-row');\n        this.colorState.row = null;\n      }\n\n      if (rowClasses.length) {\n        rowClass = ' class=\"' + rowClasses.join(' ') + '\"';\n      }\n\n      html += '<tr ' + rowClass + rowStyle + '>' + cellHtml + '</tr>';\n    }\n\n    return html;\n  }\n\n  render_values() {\n    const rows = [];\n\n    for (let y = 0; y < this.table.rows.length; y++) {\n      const row = this.table.rows[y];\n      const newRow = [];\n      for (let i = 0; i < this.table.columns.length; i++) {\n        newRow.push(this.formatColumnValue(i, row[i]));\n      }\n      rows.push(newRow);\n    }\n    return {\n      columns: this.table.columns,\n      rows: rows,\n    };\n  }\n}\n","import _ from 'lodash';\nimport $ from 'jquery';\nimport { MetricsPanelCtrl } from 'app/plugins/sdk';\nimport { transformDataToTable } from './transformers';\nimport { tablePanelEditor } from './editor';\nimport { columnOptionsTab } from './column_options';\nimport { TableRenderer } from './renderer';\n\nclass TablePanelCtrl extends MetricsPanelCtrl {\n  static templateUrl = 'module.html';\n\n  pageIndex: number;\n  dataRaw: any;\n  table: any;\n  renderer: any;\n\n  panelDefaults = {\n    targets: [{}],\n    transform: 'timeseries_to_columns',\n    pageSize: null,\n    showHeader: true,\n    styles: [\n      {\n        type: 'date',\n        pattern: 'Time',\n        alias: '日期',\n        dateFormat: 'YYYY-MM-DD HH:mm:ss',\n      },\n      {\n        unit: 'short',\n        type: 'number',\n        alias: '',\n        decimals: 2,\n        colors: ['rgba(245, 54, 54, 0.9)', 'rgba(237, 129, 40, 0.89)', 'rgba(50, 172, 45, 0.97)'],\n        colorMode: null,\n        pattern: '/.*/',\n        thresholds: [],\n      },\n    ],\n    columns: [],\n    scroll: true,\n    fontSize: '100%',\n    sort: { col: 0, desc: true },\n  };\n\n  /** @ngInject */\n  constructor($scope, $injector, templateSrv, private annotationsSrv, private $sanitize, private variableSrv) {\n    super($scope, $injector);\n\n    this.pageIndex = 0;\n\n    if (this.panel.styles === void 0) {\n      this.panel.styles = this.panel.columns;\n      this.panel.columns = this.panel.fields;\n      delete this.panel.columns;\n      delete this.panel.fields;\n    }\n\n    _.defaults(this.panel, this.panelDefaults);\n\n    this.events.on('data-received', this.onDataReceived.bind(this));\n    this.events.on('data-error', this.onDataError.bind(this));\n    this.events.on('data-snapshot-load', this.onDataReceived.bind(this));\n    this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n    this.events.on('init-panel-actions', this.onInitPanelActions.bind(this));\n  }\n\n  onInitEditMode() {\n    this.addEditorTab('选项', tablePanelEditor, 2);\n    this.addEditorTab('列风格', columnOptionsTab, 3);\n  }\n\n  onInitPanelActions(actions) {\n    actions.push({ text: '导出 CSV', click: 'ctrl.exportCsv()' });\n  }\n\n  issueQueries(datasource) {\n    this.pageIndex = 0;\n\n    if (this.panel.transform === 'annotations') {\n      this.setTimeQueryStart();\n      return this.annotationsSrv\n        .getAnnotations({\n          dashboard: this.dashboard,\n          panel: this.panel,\n          range: this.range,\n        })\n        .then(annotations => {\n          return { data: annotations };\n        });\n    }\n\n    return super.issueQueries(datasource);\n  }\n\n  onDataError(err) {\n    this.dataRaw = [];\n    this.render();\n  }\n\n  onDataReceived(dataList) {\n    this.dataRaw = dataList;\n    this.pageIndex = 0;\n\n    // automatically correct transform mode based on data\n    if (this.dataRaw && this.dataRaw.length) {\n      if (this.dataRaw[0].type === 'table') {\n        this.panel.transform = 'table';\n      } else {\n        if (this.dataRaw[0].type === 'docs') {\n          this.panel.transform = 'json';\n        } else {\n          if (this.panel.transform === 'table' || this.panel.transform === 'json') {\n            this.panel.transform = 'timeseries_to_rows';\n          }\n        }\n      }\n    }\n\n    this.render();\n  }\n\n  render() {\n    this.table = transformDataToTable(this.dataRaw, this.panel);\n    this.table.sort(this.panel.sort);\n\n    this.renderer = new TableRenderer(\n      this.panel,\n      this.table,\n      this.dashboard.isTimezoneUtc(),\n      this.$sanitize,\n      this.templateSrv\n    );\n\n    return super.render(this.table);\n  }\n\n  toggleColumnSort(col, colIndex) {\n    // remove sort flag from current column\n    if (this.table.columns[this.panel.sort.col]) {\n      this.table.columns[this.panel.sort.col].sort = false;\n    }\n\n    if (this.panel.sort.col === colIndex) {\n      if (this.panel.sort.desc) {\n        this.panel.sort.desc = false;\n      } else {\n        this.panel.sort.col = null;\n      }\n    } else {\n      this.panel.sort.col = colIndex;\n      this.panel.sort.desc = true;\n    }\n    this.render();\n  }\n\n  moveQuery(target, direction) {\n    super.moveQuery(target, direction);\n    super.refresh();\n  }\n\n  exportCsv() {\n    const scope = this.$scope.$new(true);\n    scope.tableData = this.renderer.render_values();\n    scope.panel = 'table';\n    this.publishAppEvent('show-modal', {\n      templateHtml: '<export-data-modal panel=\"panel\" data=\"tableData\"></export-data-modal>',\n      scope,\n      modalClass: 'modal--narrow',\n    });\n  }\n\n  link(scope, elem, attrs, ctrl: TablePanelCtrl) {\n    let data;\n    const panel = ctrl.panel;\n    let pageCount = 0;\n\n    function getTableHeight() {\n      let panelHeight = ctrl.height;\n\n      if (pageCount > 1) {\n        panelHeight -= 26;\n      }\n\n      return panelHeight - 31 + 'px';\n    }\n\n    function appendTableRows(tbodyElem) {\n      ctrl.renderer.setTable(data);\n      tbodyElem.empty();\n      tbodyElem.html(ctrl.renderer.render(ctrl.pageIndex));\n    }\n\n    function switchPage(e) {\n      const el = $(e.currentTarget);\n      ctrl.pageIndex = parseInt(el.text(), 10) - 1;\n      renderPanel();\n    }\n\n    function appendPaginationControls(footerElem) {\n      footerElem.empty();\n\n      const pageSize = panel.pageSize || 100;\n      pageCount = Math.ceil(data.rows.length / pageSize);\n      if (pageCount === 1) {\n        return;\n      }\n\n      const startPage = Math.max(ctrl.pageIndex - 3, 0);\n      const endPage = Math.min(pageCount, startPage + 9);\n\n      const paginationList = $('<ul></ul>');\n\n      for (let i = startPage; i < endPage; i++) {\n        const activeClass = i === ctrl.pageIndex ? 'active' : '';\n        const pageLinkElem = $(\n          '<li><a class=\"table-panel-page-link pointer ' + activeClass + '\">' + (i + 1) + '</a></li>'\n        );\n        paginationList.append(pageLinkElem);\n      }\n\n      footerElem.append(paginationList);\n    }\n\n    function renderPanel() {\n      const panelElem = elem.parents('.panel-content');\n      const rootElem = elem.find('.table-panel-scroll');\n      const tbodyElem = elem.find('tbody');\n      const footerElem = elem.find('.table-panel-footer');\n\n      elem.css({ 'font-size': panel.fontSize });\n      panelElem.addClass('table-panel-content');\n\n      appendTableRows(tbodyElem);\n      appendPaginationControls(footerElem);\n\n      rootElem.css({ 'max-height': panel.scroll ? getTableHeight() : '' });\n    }\n\n    // hook up link tooltips\n    elem.tooltip({\n      selector: '[data-link-tooltip]',\n    });\n\n    function addFilterClicked(e) {\n      const filterData = $(e.currentTarget).data();\n      const options = {\n        datasource: panel.datasource,\n        key: data.columns[filterData.column].text,\n        value: data.rows[filterData.row][filterData.column],\n        operator: filterData.operator,\n      };\n\n      ctrl.variableSrv.setAdhocFilter(options);\n    }\n\n    elem.on('click', '.table-panel-page-link', switchPage);\n    elem.on('click', '.table-panel-filter-link', addFilterClicked);\n\n    const unbindDestroy = scope.$on('$destroy', () => {\n      elem.off('click', '.table-panel-page-link');\n      elem.off('click', '.table-panel-filter-link');\n      unbindDestroy();\n    });\n\n    ctrl.events.on('render', renderData => {\n      data = renderData || data;\n      if (data) {\n        renderPanel();\n      }\n      ctrl.renderingCompleted();\n    });\n  }\n}\n\nexport { TablePanelCtrl, TablePanelCtrl as PanelCtrl };\n","import angular from 'angular';\nimport _ from 'lodash';\nimport kbn from 'app/core/utils/kbn';\n\nexport class LinkSrv {\n  /** @ngInject */\n  constructor(private templateSrv, private timeSrv) {}\n\n  getLinkUrl(link) {\n    const url = this.templateSrv.replace(link.url || '');\n    const params = {};\n\n    if (link.keepTime) {\n      const range = this.timeSrv.timeRangeForUrl();\n      params['from'] = range.from;\n      params['to'] = range.to;\n    }\n\n    if (link.includeVars) {\n      this.templateSrv.fillVariableValuesForUrl(params);\n    }\n\n    return this.addParamsToUrl(url, params);\n  }\n\n  addParamsToUrl(url, params) {\n    const paramsArray = [];\n\n    _.each(params, (value, key) => {\n      if (value === null) {\n        return;\n      }\n      if (value === true) {\n        paramsArray.push(key);\n      } else if (_.isArray(value)) {\n        _.each(value, instance => {\n          paramsArray.push(key + '=' + encodeURIComponent(instance));\n        });\n      } else {\n        paramsArray.push(key + '=' + encodeURIComponent(value));\n      }\n    });\n\n    if (paramsArray.length === 0) {\n      return url;\n    }\n\n    return this.appendToQueryString(url, paramsArray.join('&'));\n  }\n\n  appendToQueryString(url, stringToAppend) {\n    if (!_.isUndefined(stringToAppend) && stringToAppend !== null && stringToAppend !== '') {\n      const pos = url.indexOf('?');\n      if (pos !== -1) {\n        if (url.length - pos > 1) {\n          url += '&';\n        }\n      } else {\n        url += '?';\n      }\n      url += stringToAppend;\n    }\n\n    return url;\n  }\n\n  getAnchorInfo(link) {\n    const info: any = {};\n    info.href = this.getLinkUrl(link);\n    info.title = this.templateSrv.replace(link.title || '');\n    return info;\n  }\n\n  getPanelLinkAnchorInfo(link, scopedVars) {\n    const info: any = {};\n    if (link.type === 'absolute') {\n      info.target = link.targetBlank ? '_blank' : '_self';\n      info.href = this.templateSrv.replace(link.url || '', scopedVars);\n      info.title = this.templateSrv.replace(link.title || '', scopedVars);\n    } else if (link.url) {\n      info.href = link.url;\n      info.title = this.templateSrv.replace(link.title || '', scopedVars);\n      info.target = link.targetBlank ? '_blank' : '';\n    } else if (link.dashUri) {\n      info.href = 'dashboard/' + link.dashUri + '?';\n      info.title = this.templateSrv.replace(link.title || '', scopedVars);\n      info.target = link.targetBlank ? '_blank' : '';\n    } else {\n      info.title = this.templateSrv.replace(link.title || '', scopedVars);\n      const slug = kbn.slugifyForUrl(link.dashboard || '');\n      info.href = 'dashboard/db/' + slug + '?';\n    }\n\n    const params = {};\n\n    if (link.keepTime) {\n      const range = this.timeSrv.timeRangeForUrl();\n      params['from'] = range.from;\n      params['to'] = range.to;\n    }\n\n    if (link.includeVars) {\n      this.templateSrv.fillVariableValuesForUrl(params, scopedVars);\n    }\n\n    info.href = this.addParamsToUrl(info.href, params);\n\n    if (link.params) {\n      info.href = this.appendToQueryString(info.href, this.templateSrv.replace(link.params, scopedVars));\n    }\n\n    return info;\n  }\n}\n\nangular.module('grafana.services').service('linkSrv', LinkSrv);\n","import _ from 'lodash';\nimport $ from 'jquery';\nimport 'vendor/flot/jquery.flot';\nimport 'vendor/flot/jquery.flot.gauge';\nimport 'app/features/dashboard/panellinks/link_srv';\n\nimport kbn from 'app/core/utils/kbn';\nimport config from 'app/core/config';\nimport TimeSeries from 'app/core/time_series2';\nimport { MetricsPanelCtrl } from 'app/plugins/sdk';\n\nclass SingleStatCtrl extends MetricsPanelCtrl {\n  static templateUrl = 'module.html';\n\n  dataType = 'timeseries';\n  series: any[];\n  data: any;\n  fontSizes: any[];\n  unitFormats: any[];\n  invalidGaugeRange: boolean;\n  panel: any;\n  events: any;\n  valueNameOptions: any[] = [\n    { value: 'min', text: '最小' },\n    { value: 'max', text: '最大' },\n    { value: 'avg', text: '平均' },\n    { value: 'current', text: '当前' },\n    { value: 'total', text: '总和' },\n    { value: 'name', text: '名称' },\n    { value: 'first', text: '首个' },\n    { value: 'delta', text: 'Delta' },\n    { value: 'diff', text: '差值' },\n    { value: 'range', text: '范围' },\n    { value: 'last_time', text: '上个数据点的时间' },\n  ];\n  tableColumnOptions: any;\n\n  // Set and populate defaults\n  panelDefaults = {\n    links: [],\n    datasource: null,\n    maxDataPoints: 100,\n    interval: null,\n    targets: [{}],\n    cacheTimeout: null,\n    format: 'none',\n    prefix: '',\n    postfix: '',\n    nullText: null,\n    valueMaps: [{ value: 'null', op: '=', text: 'N/A' }],\n    mappingTypes: [{ name: 'value to text', value: 1 }, { name: 'range to text', value: 2 }],\n    rangeMaps: [{ from: 'null', to: 'null', text: 'N/A' }],\n    mappingType: 1,\n    nullPointMode: 'connected',\n    valueName: 'avg',\n    prefixFontSize: '50%',\n    valueFontSize: '80%',\n    postfixFontSize: '50%',\n    thresholds: '',\n    colorBackground: false,\n    colorValue: false,\n    colors: ['#299c46', 'rgba(237, 129, 40, 0.89)', '#d44a3a'],\n    sparkline: {\n      show: false,\n      full: false,\n      lineColor: 'rgb(31, 120, 193)',\n      fillColor: 'rgba(31, 118, 189, 0.18)',\n    },\n    gauge: {\n      show: false,\n      minValue: 0,\n      maxValue: 100,\n      thresholdMarkers: true,\n      thresholdLabels: false,\n    },\n    tableColumn: '',\n  };\n\n  /** @ngInject */\n  constructor($scope, $injector, private linkSrv) {\n    super($scope, $injector);\n    _.defaults(this.panel, this.panelDefaults);\n\n    this.events.on('data-received', this.onDataReceived.bind(this));\n    this.events.on('data-error', this.onDataError.bind(this));\n    this.events.on('data-snapshot-load', this.onDataReceived.bind(this));\n    this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n\n    this.onSparklineColorChange = this.onSparklineColorChange.bind(this);\n    this.onSparklineFillChange = this.onSparklineFillChange.bind(this);\n  }\n\n  onInitEditMode() {\n    this.fontSizes = ['20%', '30%', '50%', '70%', '80%', '100%', '110%', '120%', '150%', '170%', '200%'];\n    this.addEditorTab('选项', 'public/app/plugins/panel/singlestat/editor.html', 2);\n    this.addEditorTab('值映射', 'public/app/plugins/panel/singlestat/mappings.html', 3);\n    this.unitFormats = kbn.getUnitFormats();\n  }\n\n  setUnitFormat(subItem) {\n    this.panel.format = subItem.value;\n    this.refresh();\n  }\n\n  onDataError(err) {\n    this.onDataReceived([]);\n  }\n\n  onDataReceived(dataList) {\n    const data: any = {};\n    if (dataList.length > 0 && dataList[0].type === 'table') {\n      this.dataType = 'table';\n      const tableData = dataList.map(this.tableHandler.bind(this));\n      this.setTableValues(tableData, data);\n    } else {\n      this.dataType = 'timeseries';\n      this.series = dataList.map(this.seriesHandler.bind(this));\n      this.setValues(data);\n    }\n    this.data = data;\n    this.render();\n  }\n\n  seriesHandler(seriesData) {\n    const series = new TimeSeries({\n      datapoints: seriesData.datapoints || [],\n      alias: seriesData.target,\n    });\n\n    series.flotpairs = series.getFlotPairs(this.panel.nullPointMode);\n    return series;\n  }\n\n  tableHandler(tableData) {\n    const datapoints = [];\n    const columnNames = {};\n\n    tableData.columns.forEach((column, columnIndex) => {\n      columnNames[columnIndex] = column.text;\n    });\n\n    this.tableColumnOptions = columnNames;\n    if (!_.find(tableData.columns, ['text', this.panel.tableColumn])) {\n      this.setTableColumnToSensibleDefault(tableData);\n    }\n\n    tableData.rows.forEach(row => {\n      const datapoint = {};\n\n      row.forEach((value, columnIndex) => {\n        const key = columnNames[columnIndex];\n        datapoint[key] = value;\n      });\n\n      datapoints.push(datapoint);\n    });\n\n    return datapoints;\n  }\n\n  setTableColumnToSensibleDefault(tableData) {\n    if (tableData.columns.length === 1) {\n      this.panel.tableColumn = tableData.columns[0].text;\n    } else {\n      this.panel.tableColumn = _.find(tableData.columns, col => {\n        return col.type !== 'time';\n      }).text;\n    }\n  }\n\n  setTableValues(tableData, data) {\n    if (!tableData || tableData.length === 0) {\n      return;\n    }\n\n    if (tableData[0].length === 0 || tableData[0][0][this.panel.tableColumn] === undefined) {\n      return;\n    }\n\n    const datapoint = tableData[0][0];\n    data.value = datapoint[this.panel.tableColumn];\n\n    if (_.isString(data.value)) {\n      data.valueFormatted = _.escape(data.value);\n      data.value = 0;\n      data.valueRounded = 0;\n    } else {\n      const decimalInfo = this.getDecimalsForValue(data.value);\n      const formatFunc = kbn.valueFormats[this.panel.format];\n      data.valueFormatted = formatFunc(\n        datapoint[this.panel.tableColumn],\n        decimalInfo.decimals,\n        decimalInfo.scaledDecimals\n      );\n      data.valueRounded = kbn.roundValue(data.value, this.panel.decimals || 0);\n    }\n\n    this.setValueMapping(data);\n  }\n\n  canModifyText() {\n    return !this.panel.gauge.show;\n  }\n\n  setColoring(options) {\n    if (options.background) {\n      this.panel.colorValue = false;\n      this.panel.colors = ['rgba(71, 212, 59, 0.4)', 'rgba(245, 150, 40, 0.73)', 'rgba(225, 40, 40, 0.59)'];\n    } else {\n      this.panel.colorBackground = false;\n      this.panel.colors = ['rgba(50, 172, 45, 0.97)', 'rgba(237, 129, 40, 0.89)', 'rgba(245, 54, 54, 0.9)'];\n    }\n    this.render();\n  }\n\n  invertColorOrder() {\n    const tmp = this.panel.colors[0];\n    this.panel.colors[0] = this.panel.colors[2];\n    this.panel.colors[2] = tmp;\n    this.render();\n  }\n\n  onColorChange(panelColorIndex) {\n    return color => {\n      this.panel.colors[panelColorIndex] = color;\n      this.render();\n    };\n  }\n\n  onSparklineColorChange(newColor) {\n    this.panel.sparkline.lineColor = newColor;\n    this.render();\n  }\n\n  onSparklineFillChange(newColor) {\n    this.panel.sparkline.fillColor = newColor;\n    this.render();\n  }\n\n  getDecimalsForValue(value) {\n    if (_.isNumber(this.panel.decimals)) {\n      return { decimals: this.panel.decimals, scaledDecimals: null };\n    }\n\n    const delta = value / 2;\n    let dec = -Math.floor(Math.log(delta) / Math.LN10);\n\n    const magn = Math.pow(10, -dec);\n    const norm = delta / magn; // norm is between 1.0 and 10.0\n    let size;\n\n    if (norm < 1.5) {\n      size = 1;\n    } else if (norm < 3) {\n      size = 2;\n      // special case for 2.5, requires an extra decimal\n      if (norm > 2.25) {\n        size = 2.5;\n        ++dec;\n      }\n    } else if (norm < 7.5) {\n      size = 5;\n    } else {\n      size = 10;\n    }\n\n    size *= magn;\n\n    // reduce starting decimals if not needed\n    if (Math.floor(value) === value) {\n      dec = 0;\n    }\n\n    const result: any = {};\n    result.decimals = Math.max(0, dec);\n    result.scaledDecimals = result.decimals - Math.floor(Math.log(size) / Math.LN10) + 2;\n\n    return result;\n  }\n\n  setValues(data) {\n    data.flotpairs = [];\n\n    if (this.series.length > 1) {\n      const error: any = new Error();\n      error.message = 'Multiple Series Error';\n      error.data =\n        'Metric query returns ' +\n        this.series.length +\n        ' series. Single Stat Panel expects a single series.\\n\\nResponse:\\n' +\n        JSON.stringify(this.series);\n      throw error;\n    }\n\n    if (this.series && this.series.length > 0) {\n      const lastPoint = _.last(this.series[0].datapoints);\n      const lastValue = _.isArray(lastPoint) ? lastPoint[0] : null;\n\n      if (this.panel.valueName === 'name') {\n        data.value = 0;\n        data.valueRounded = 0;\n        data.valueFormatted = this.series[0].alias;\n      } else if (_.isString(lastValue)) {\n        data.value = 0;\n        data.valueFormatted = _.escape(lastValue);\n        data.valueRounded = 0;\n      } else if (this.panel.valueName === 'last_time') {\n        const formatFunc = kbn.valueFormats[this.panel.format];\n        data.value = lastPoint[1];\n        data.valueRounded = data.value;\n        data.valueFormatted = formatFunc(data.value, this.dashboard.isTimezoneUtc());\n      } else {\n        data.value = this.series[0].stats[this.panel.valueName];\n        data.flotpairs = this.series[0].flotpairs;\n\n        const decimalInfo = this.getDecimalsForValue(data.value);\n        const formatFunc = kbn.valueFormats[this.panel.format];\n        data.valueFormatted = formatFunc(data.value, decimalInfo.decimals, decimalInfo.scaledDecimals);\n        data.valueRounded = kbn.roundValue(data.value, decimalInfo.decimals);\n      }\n\n      // Add $__name variable for using in prefix or postfix\n      data.scopedVars = _.extend({}, this.panel.scopedVars);\n      data.scopedVars['__name'] = { value: this.series[0].label };\n    }\n    this.setValueMapping(data);\n  }\n\n  setValueMapping(data) {\n    // check value to text mappings if its enabled\n    if (this.panel.mappingType === 1) {\n      for (let i = 0; i < this.panel.valueMaps.length; i++) {\n        const map = this.panel.valueMaps[i];\n        // special null case\n        if (map.value === 'null') {\n          if (data.value === null || data.value === void 0) {\n            data.valueFormatted = map.text;\n            return;\n          }\n          continue;\n        }\n\n        // value/number to text mapping\n        const value = parseFloat(map.value);\n        if (value === data.valueRounded) {\n          data.valueFormatted = map.text;\n          return;\n        }\n      }\n    } else if (this.panel.mappingType === 2) {\n      for (let i = 0; i < this.panel.rangeMaps.length; i++) {\n        const map = this.panel.rangeMaps[i];\n        // special null case\n        if (map.from === 'null' && map.to === 'null') {\n          if (data.value === null || data.value === void 0) {\n            data.valueFormatted = map.text;\n            return;\n          }\n          continue;\n        }\n\n        // value/number to range mapping\n        const from = parseFloat(map.from);\n        const to = parseFloat(map.to);\n        if (to >= data.valueRounded && from <= data.valueRounded) {\n          data.valueFormatted = map.text;\n          return;\n        }\n      }\n    }\n\n    if (data.value === null || data.value === void 0) {\n      data.valueFormatted = 'no value';\n    }\n  }\n\n  removeValueMap(map) {\n    const index = _.indexOf(this.panel.valueMaps, map);\n    this.panel.valueMaps.splice(index, 1);\n    this.render();\n  }\n\n  addValueMap() {\n    this.panel.valueMaps.push({ value: '', op: '=', text: '' });\n  }\n\n  removeRangeMap(rangeMap) {\n    const index = _.indexOf(this.panel.rangeMaps, rangeMap);\n    this.panel.rangeMaps.splice(index, 1);\n    this.render();\n  }\n\n  addRangeMap() {\n    this.panel.rangeMaps.push({ from: '', to: '', text: '' });\n  }\n\n  link(scope, elem, attrs, ctrl) {\n    const $location = this.$location;\n    const linkSrv = this.linkSrv;\n    const $timeout = this.$timeout;\n    const panel = ctrl.panel;\n    const templateSrv = this.templateSrv;\n    let data, linkInfo;\n    const $panelContainer = elem.find('.panel-container');\n    elem = elem.find('.singlestat-panel');\n\n    function applyColoringThresholds(value, valueString) {\n      const color = getColorForValue(data, value);\n      if (color) {\n        return '<span style=\"color:' + color + '\">' + valueString + '</span>';\n      }\n\n      return valueString;\n    }\n\n    function getSpan(className, fontSize, value) {\n      value = templateSrv.replace(value, data.scopedVars);\n      return '<span class=\"' + className + '\" style=\"font-size:' + fontSize + '\">' + value + '</span>';\n    }\n\n    function getBigValueHtml() {\n      let body = '<div class=\"singlestat-panel-value-container\">';\n\n      if (panel.prefix) {\n        let prefix = panel.prefix;\n        if (panel.colorPrefix) {\n          prefix = applyColoringThresholds(data.value, panel.prefix);\n        }\n        body += getSpan('singlestat-panel-prefix', panel.prefixFontSize, prefix);\n      }\n\n      let value = data.valueFormatted;\n      if (panel.colorValue) {\n        value = applyColoringThresholds(data.value, value);\n      }\n      body += getSpan('singlestat-panel-value', panel.valueFontSize, value);\n\n      if (panel.postfix) {\n        let postfix = panel.postfix;\n        if (panel.colorPostfix) {\n          postfix = applyColoringThresholds(data.value, panel.postfix);\n        }\n        body += getSpan('singlestat-panel-postfix', panel.postfixFontSize, postfix);\n      }\n\n      body += '</div>';\n\n      return body;\n    }\n\n    function getValueText() {\n      let result = panel.prefix ? templateSrv.replace(panel.prefix, data.scopedVars) : '';\n      result += data.valueFormatted;\n      result += panel.postfix ? templateSrv.replace(panel.postfix, data.scopedVars) : '';\n\n      return result;\n    }\n\n    function addGauge() {\n      const width = elem.width();\n      const height = elem.height();\n      // Allow to use a bit more space for wide gauges\n      const dimension = Math.min(width, height * 1.3);\n\n      ctrl.invalidGaugeRange = false;\n      if (panel.gauge.minValue > panel.gauge.maxValue) {\n        ctrl.invalidGaugeRange = true;\n        return;\n      }\n\n      const plotCanvas = $('<div></div>');\n      const plotCss = {\n        top: '10px',\n        margin: 'auto',\n        position: 'relative',\n        height: height * 0.9 + 'px',\n        width: dimension + 'px',\n      };\n\n      plotCanvas.css(plotCss);\n\n      const thresholds = [];\n      for (let i = 0; i < data.thresholds.length; i++) {\n        thresholds.push({\n          value: data.thresholds[i],\n          color: data.colorMap[i],\n        });\n      }\n      thresholds.push({\n        value: panel.gauge.maxValue,\n        color: data.colorMap[data.colorMap.length - 1],\n      });\n\n      const bgColor = config.bootData.user.lightTheme ? 'rgb(230,230,230)' : 'rgb(38,38,38)';\n\n      const fontScale = parseInt(panel.valueFontSize, 10) / 100;\n      const fontSize = Math.min(dimension / 5, 100) * fontScale;\n      // Reduce gauge width if threshold labels enabled\n      const gaugeWidthReduceRatio = panel.gauge.thresholdLabels ? 1.5 : 1;\n      const gaugeWidth = Math.min(dimension / 6, 60) / gaugeWidthReduceRatio;\n      const thresholdMarkersWidth = gaugeWidth / 5;\n      const thresholdLabelFontSize = fontSize / 2.5;\n\n      const options = {\n        series: {\n          gauges: {\n            gauge: {\n              min: panel.gauge.minValue,\n              max: panel.gauge.maxValue,\n              background: { color: bgColor },\n              border: { color: null },\n              shadow: { show: false },\n              width: gaugeWidth,\n            },\n            frame: { show: false },\n            label: { show: false },\n            layout: { margin: 0, thresholdWidth: 0 },\n            cell: { border: { width: 0 } },\n            threshold: {\n              values: thresholds,\n              label: {\n                show: panel.gauge.thresholdLabels,\n                margin: thresholdMarkersWidth + 1,\n                font: { size: thresholdLabelFontSize },\n              },\n              show: panel.gauge.thresholdMarkers,\n              width: thresholdMarkersWidth,\n            },\n            value: {\n              color: panel.colorValue ? getColorForValue(data, data.valueRounded) : null,\n              formatter: () => {\n                return getValueText();\n              },\n              font: {\n                size: fontSize,\n                family: '\"Helvetica Neue\", Helvetica, Arial, sans-serif',\n              },\n            },\n            show: true,\n          },\n        },\n      };\n\n      elem.append(plotCanvas);\n\n      const plotSeries = {\n        data: [[0, data.valueRounded]],\n      };\n\n      $.plot(plotCanvas, [plotSeries], options);\n    }\n\n    function addSparkline() {\n      const width = elem.width() + 20;\n      if (width < 30) {\n        // element has not gotten it's width yet\n        // delay sparkline render\n        setTimeout(addSparkline, 30);\n        return;\n      }\n\n      const height = ctrl.height;\n      const plotCanvas = $('<div></div>');\n      const plotCss: any = {};\n      plotCss.position = 'absolute';\n\n      if (panel.sparkline.full) {\n        plotCss.bottom = '5px';\n        plotCss.left = '-5px';\n        plotCss.width = width - 10 + 'px';\n        const dynamicHeightMargin = height <= 100 ? 5 : Math.round(height / 100) * 15 + 5;\n        plotCss.height = height - dynamicHeightMargin + 'px';\n      } else {\n        plotCss.bottom = '0px';\n        plotCss.left = '-5px';\n        plotCss.width = width - 10 + 'px';\n        plotCss.height = Math.floor(height * 0.25) + 'px';\n      }\n\n      plotCanvas.css(plotCss);\n\n      const options = {\n        legend: { show: false },\n        series: {\n          lines: {\n            show: true,\n            fill: 1,\n            zero: false,\n            lineWidth: 1,\n            fillColor: panel.sparkline.fillColor,\n          },\n        },\n        yaxes: { show: false },\n        xaxis: {\n          show: false,\n          mode: 'time',\n          min: ctrl.range.from.valueOf(),\n          max: ctrl.range.to.valueOf(),\n        },\n        grid: { hoverable: false, show: false },\n      };\n\n      elem.append(plotCanvas);\n\n      const plotSeries = {\n        data: data.flotpairs,\n        color: panel.sparkline.lineColor,\n      };\n\n      $.plot(plotCanvas, [plotSeries], options);\n    }\n\n    function render() {\n      if (!ctrl.data) {\n        return;\n      }\n      data = ctrl.data;\n\n      // get thresholds\n      data.thresholds = panel.thresholds.split(',').map(strVale => {\n        return Number(strVale.trim());\n      });\n      data.colorMap = panel.colors;\n\n      const body = panel.gauge.show ? '' : getBigValueHtml();\n\n      if (panel.colorBackground) {\n        const color = getColorForValue(data, data.value);\n        if (color) {\n          $panelContainer.css('background-color', color);\n          if (scope.fullscreen) {\n            elem.css('background-color', color);\n          } else {\n            elem.css('background-color', '');\n          }\n        }\n      } else {\n        $panelContainer.css('background-color', '');\n        elem.css('background-color', '');\n      }\n\n      elem.html(body);\n\n      if (panel.sparkline.show) {\n        addSparkline();\n      }\n\n      if (panel.gauge.show) {\n        addGauge();\n      }\n\n      elem.toggleClass('pointer', panel.links.length > 0);\n\n      if (panel.links.length > 0) {\n        linkInfo = linkSrv.getPanelLinkAnchorInfo(panel.links[0], data.scopedVars);\n      } else {\n        linkInfo = null;\n      }\n    }\n\n    function hookupDrilldownLinkTooltip() {\n      // drilldown link tooltip\n      const drilldownTooltip = $('<div id=\"tooltip\" class=\"\">hello</div>\"');\n\n      elem.mouseleave(() => {\n        if (panel.links.length === 0) {\n          return;\n        }\n        $timeout(() => {\n          drilldownTooltip.detach();\n        });\n      });\n\n      elem.click(evt => {\n        if (!linkInfo) {\n          return;\n        }\n        // ignore title clicks in title\n        if ($(evt).parents('.panel-header').length > 0) {\n          return;\n        }\n\n        if (linkInfo.target === '_blank') {\n          window.open(linkInfo.href, '_blank');\n          return;\n        }\n\n        if (linkInfo.href.indexOf('http') === 0) {\n          window.location.href = linkInfo.href;\n        } else {\n          $timeout(() => {\n            $location.url(linkInfo.href);\n          });\n        }\n\n        drilldownTooltip.detach();\n      });\n\n      elem.mousemove(e => {\n        if (!linkInfo) {\n          return;\n        }\n\n        drilldownTooltip.text('click to go to: ' + linkInfo.title);\n        drilldownTooltip.place_tt(e.pageX, e.pageY - 50);\n      });\n    }\n\n    hookupDrilldownLinkTooltip();\n\n    this.events.on('render', () => {\n      render();\n      ctrl.renderingCompleted();\n    });\n  }\n}\n\nfunction getColorForValue(data, value) {\n  if (!_.isFinite(value)) {\n    return null;\n  }\n\n  for (let i = data.thresholds.length; i > 0; i--) {\n    if (value >= data.thresholds[i - 1]) {\n      return data.colorMap[i];\n    }\n  }\n\n  return _.first(data.colorMap);\n}\n\nexport { SingleStatCtrl, SingleStatCtrl as PanelCtrl, getColorForValue };\n","import { PanelCtrl } from 'app/plugins/sdk';\n\nimport { contextSrv } from 'app/core/core';\n\nclass GettingStartedPanelCtrl extends PanelCtrl {\n  static templateUrl = 'public/app/plugins/panel/gettingstarted/module.html';\n  checksDone: boolean;\n  stepIndex: number;\n  steps: any;\n\n  /** @ngInject */\n  constructor($scope, $injector, private backendSrv, datasourceSrv, private $q) {\n    super($scope, $injector);\n\n    this.stepIndex = 0;\n    this.steps = [];\n\n    this.steps.push({\n      title: '安装 Grafana',\n      icon: 'icon-gf icon-gf-check',\n      href: 'http://docs.grafana.org/',\n      target: '_blank',\n      note: '查看安装过程文档',\n      check: () => $q.when(true),\n    });\n\n    this.steps.push({\n      title: '添加你的第一个数据源',\n      cta: '添加数据源',\n      icon: 'icon-gf icon-gf-datasources',\n      href: 'datasources/new?gettingstarted',\n      check: () => {\n        return $q.when(\n          datasourceSrv.getMetricSources().filter(item => {\n            return item.meta.builtIn !== true;\n          }).length > 0\n        );\n      },\n    });\n\n    this.steps.push({\n      title: '添加你的第一个仪表盘',\n      cta: '创建仪表盘',\n      icon: 'icon-gf icon-gf-dashboard',\n      href: 'dashboard/new?gettingstarted',\n      check: () => {\n        return this.backendSrv.search({ limit: 1 }).then(result => {\n          return result.length > 0;\n        });\n      },\n    });\n\n    this.steps.push({\n      title: '邀请你的团队',\n      cta: '添加成员',\n      icon: 'icon-gf icon-gf-users',\n      href: 'org/users?gettingstarted',\n      check: () => {\n        return this.backendSrv.get('/api/org/users').then(res => {\n          return res.length > 1;\n        });\n      },\n    });\n\n    this.steps.push({\n      title: '安装应用与插件',\n      cta: '探索插件仓库',\n      icon: 'icon-gf icon-gf-apps',\n      href: 'https://grafana.com/plugins?utm_source=grafana_getting_started',\n      check: () => {\n        return this.backendSrv.get('/api/plugins', { embedded: 0, core: 0 }).then(plugins => {\n          return plugins.length > 0;\n        });\n      },\n    });\n  }\n\n  $onInit() {\n    this.stepIndex = -1;\n    return this.nextStep().then(res => {\n      this.checksDone = true;\n    });\n  }\n\n  nextStep() {\n    if (this.stepIndex === this.steps.length - 1) {\n      return this.$q.when();\n    }\n\n    this.stepIndex += 1;\n    const currentStep = this.steps[this.stepIndex];\n    return currentStep.check().then(passed => {\n      if (passed) {\n        currentStep.cssClass = 'completed';\n        return this.nextStep();\n      }\n\n      currentStep.cssClass = 'active';\n      return this.$q.when();\n    });\n  }\n\n  dismiss() {\n    this.dashboard.removePanel(this.panel, false);\n\n    this.backendSrv\n      .request({\n        method: 'PUT',\n        url: '/api/user/helpflags/1',\n        showSuccessAlert: false,\n      })\n      .then(res => {\n        contextSrv.user.helpFlags1 = res.helpFlags1;\n      });\n  }\n}\n\nexport { GettingStartedPanelCtrl, GettingStartedPanelCtrl as PanelCtrl };\n","import * as graphitePlugin from 'app/plugins/datasource/graphite/module';\nimport * as cloudwatchPlugin from 'app/plugins/datasource/cloudwatch/module';\nimport * as elasticsearchPlugin from 'app/plugins/datasource/elasticsearch/module';\nimport * as opentsdbPlugin from 'app/plugins/datasource/opentsdb/module';\nimport * as grafanaPlugin from 'app/plugins/datasource/grafana/module';\nimport * as influxdbPlugin from 'app/plugins/datasource/influxdb/module';\nimport * as loggingPlugin from 'app/plugins/datasource/logging/module';\nimport * as mixedPlugin from 'app/plugins/datasource/mixed/module';\nimport * as mysqlPlugin from 'app/plugins/datasource/mysql/module';\nimport * as postgresPlugin from 'app/plugins/datasource/postgres/module';\nimport * as prometheusPlugin from 'app/plugins/datasource/prometheus/module';\nimport * as mssqlPlugin from 'app/plugins/datasource/mssql/module';\nimport * as testDataDSPlugin from 'app/plugins/datasource/testdata/module';\n\nimport * as textPanel from 'app/plugins/panel/text/module';\nimport * as graphPanel from 'app/plugins/panel/graph/module';\nimport * as dashListPanel from 'app/plugins/panel/dashlist/module';\nimport * as pluginsListPanel from 'app/plugins/panel/pluginlist/module';\nimport * as alertListPanel from 'app/plugins/panel/alertlist/module';\nimport * as heatmapPanel from 'app/plugins/panel/heatmap/module';\nimport * as tablePanel from 'app/plugins/panel/table/module';\nimport * as singlestatPanel from 'app/plugins/panel/singlestat/module';\nimport * as gettingStartedPanel from 'app/plugins/panel/gettingstarted/module';\n\nconst builtInPlugins = {\n  'app/plugins/datasource/graphite/module': graphitePlugin,\n  'app/plugins/datasource/cloudwatch/module': cloudwatchPlugin,\n  'app/plugins/datasource/elasticsearch/module': elasticsearchPlugin,\n  'app/plugins/datasource/opentsdb/module': opentsdbPlugin,\n  'app/plugins/datasource/grafana/module': grafanaPlugin,\n  'app/plugins/datasource/influxdb/module': influxdbPlugin,\n  'app/plugins/datasource/logging/module': loggingPlugin,\n  'app/plugins/datasource/mixed/module': mixedPlugin,\n  'app/plugins/datasource/mysql/module': mysqlPlugin,\n  'app/plugins/datasource/postgres/module': postgresPlugin,\n  'app/plugins/datasource/mssql/module': mssqlPlugin,\n  'app/plugins/datasource/prometheus/module': prometheusPlugin,\n  'app/plugins/datasource/testdata/module': testDataDSPlugin,\n\n  'app/plugins/panel/text/module': textPanel,\n  'app/plugins/panel/graph/module': graphPanel,\n  'app/plugins/panel/dashlist/module': dashListPanel,\n  'app/plugins/panel/pluginlist/module': pluginsListPanel,\n  'app/plugins/panel/alertlist/module': alertListPanel,\n  'app/plugins/panel/heatmap/module': heatmapPanel,\n  'app/plugins/panel/table/module': tablePanel,\n  'app/plugins/panel/singlestat/module': singlestatPanel,\n  'app/plugins/panel/gettingstarted/module': gettingStartedPanel,\n};\n\nexport default builtInPlugins;\n","import System from 'systemjs/dist/system.js';\nimport _ from 'lodash';\nimport * as sdk from 'app/plugins/sdk';\nimport kbn from 'app/core/utils/kbn';\nimport moment from 'moment';\nimport angular from 'angular';\nimport jquery from 'jquery';\n\n// Experimental module exports\nimport prismjs from 'prismjs';\nimport slate from 'slate';\nimport slateReact from 'slate-react';\nimport slatePlain from 'slate-plain-serializer';\nimport react from 'react';\nimport reactDom from 'react-dom';\n\nimport config from 'app/core/config';\nimport TimeSeries from 'app/core/time_series2';\nimport TableModel from 'app/core/table_model';\nimport { coreModule, appEvents, contextSrv } from 'app/core/core';\nimport * as datemath from 'app/core/utils/datemath';\nimport * as fileExport from 'app/core/utils/file_export';\nimport * as flatten from 'app/core/utils/flatten';\nimport * as ticks from 'app/core/utils/ticks';\nimport impressionSrv from 'app/core/services/impression_srv';\nimport builtInPlugins from './built_in_plugins';\nimport * as d3 from 'd3';\n\n// rxjs\nimport { Observable } from 'rxjs/Observable';\nimport { Subject } from 'rxjs/Subject';\n\n// these imports add functions to Observable\nimport 'rxjs/add/observable/empty';\nimport 'rxjs/add/observable/from';\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/operator/combineAll';\n\n// add cache busting\nconst bust = `?_cache=${Date.now()}`;\nfunction locate(load) {\n  return load.address + bust;\n}\nSystem.registry.set('plugin-loader', System.newModule({ locate: locate }));\n\nSystem.config({\n  baseURL: 'public',\n  defaultExtension: 'js',\n  packages: {\n    plugins: {\n      defaultExtension: 'js',\n    },\n  },\n  map: {\n    text: 'vendor/plugin-text/text.js',\n    css: 'vendor/plugin-css/css.js',\n  },\n  meta: {\n    '/*': {\n      esModule: true,\n      authorization: true,\n      loader: 'plugin-loader',\n    },\n  },\n});\n\nfunction exposeToPlugin(name: string, component: any) {\n  System.registerDynamic(name, [], true, (require, exports, module) => {\n    module.exports = component;\n  });\n}\n\nexposeToPlugin('lodash', _);\nexposeToPlugin('moment', moment);\nexposeToPlugin('jquery', jquery);\nexposeToPlugin('angular', angular);\nexposeToPlugin('d3', d3);\nexposeToPlugin('rxjs/Subject', Subject);\nexposeToPlugin('rxjs/Observable', Observable);\n\n// Experimental modules\nexposeToPlugin('prismjs', prismjs);\nexposeToPlugin('slate', slate);\nexposeToPlugin('slate-react', slateReact);\nexposeToPlugin('slate-plain-serializer', slatePlain);\nexposeToPlugin('react', react);\nexposeToPlugin('react-dom', reactDom);\n\n// backward compatible path\nexposeToPlugin('vendor/npm/rxjs/Rx', {\n  Subject: Subject,\n  Observable: Observable,\n});\n\nexposeToPlugin('app/features/dashboard/impression_store', {\n  impressions: impressionSrv,\n  __esModule: true,\n});\n\nexposeToPlugin('app/plugins/sdk', sdk);\nexposeToPlugin('app/core/utils/datemath', datemath);\nexposeToPlugin('app/core/utils/file_export', fileExport);\nexposeToPlugin('app/core/utils/flatten', flatten);\nexposeToPlugin('app/core/utils/kbn', kbn);\nexposeToPlugin('app/core/utils/ticks', ticks);\n\nexposeToPlugin('app/core/config', config);\nexposeToPlugin('app/core/time_series', TimeSeries);\nexposeToPlugin('app/core/time_series2', TimeSeries);\nexposeToPlugin('app/core/table_model', TableModel);\nexposeToPlugin('app/core/app_events', appEvents);\nexposeToPlugin('app/core/core_module', coreModule);\nexposeToPlugin('app/core/core', {\n  coreModule: coreModule,\n  appEvents: appEvents,\n  contextSrv: contextSrv,\n  __esModule: true,\n});\n\nimport 'vendor/flot/jquery.flot';\nimport 'vendor/flot/jquery.flot.selection';\nimport 'vendor/flot/jquery.flot.time';\nimport 'vendor/flot/jquery.flot.stack';\nimport 'vendor/flot/jquery.flot.pie';\nimport 'vendor/flot/jquery.flot.stackpercent';\nimport 'vendor/flot/jquery.flot.fillbelow';\nimport 'vendor/flot/jquery.flot.crosshair';\nimport 'vendor/flot/jquery.flot.dashes';\nimport 'vendor/flot/jquery.flot.gauge';\n\nconst flotDeps = [\n  'jquery.flot',\n  'jquery.flot.pie',\n  'jquery.flot.time',\n  'jquery.flot.fillbelow',\n  'jquery.flot.crosshair',\n  'jquery.flot.stack',\n  'jquery.flot.selection',\n  'jquery.flot.stackpercent',\n  'jquery.flot.events',\n  'jquery.flot.gauge',\n];\nfor (const flotDep of flotDeps) {\n  exposeToPlugin(flotDep, { fakeDep: 1 });\n}\n\nexport function importPluginModule(path: string): Promise<any> {\n  const builtIn = builtInPlugins[path];\n  if (builtIn) {\n    return Promise.resolve(builtIn);\n  }\n  return System.import(path);\n}\n\nexport function loadPluginCss(options) {\n  if (config.bootData.user.lightTheme) {\n    System.import(options.light + '!css');\n  } else {\n    System.import(options.dark + '!css');\n  }\n}\n","import _ from 'lodash';\nimport coreModule from 'app/core/core_module';\nimport config from 'app/core/config';\nimport { importPluginModule } from './plugin_loader';\n\nexport class DatasourceSrv {\n  datasources: any;\n\n  /** @ngInject */\n  constructor(private $q, private $injector, private $rootScope, private templateSrv) {\n    this.init();\n  }\n\n  init() {\n    this.datasources = {};\n  }\n\n  get(name?) {\n    if (!name) {\n      return this.get(config.defaultDatasource);\n    }\n\n    name = this.templateSrv.replace(name);\n\n    if (name === 'default') {\n      return this.get(config.defaultDatasource);\n    }\n\n    if (this.datasources[name]) {\n      return this.$q.when(this.datasources[name]);\n    }\n\n    return this.loadDatasource(name);\n  }\n\n  loadDatasource(name) {\n    const dsConfig = config.datasources[name];\n    if (!dsConfig) {\n      return this.$q.reject({ message: '找不到名为： ' + name + ' 的数据源' });\n    }\n\n    const deferred = this.$q.defer();\n    const pluginDef = dsConfig.meta;\n\n    importPluginModule(pluginDef.module)\n      .then(plugin => {\n        // check if its in cache now\n        if (this.datasources[name]) {\n          deferred.resolve(this.datasources[name]);\n          return;\n        }\n\n        // plugin module needs to export a constructor function named Datasource\n        if (!plugin.Datasource) {\n          throw new Error('Plugin module is missing Datasource constructor');\n        }\n\n        const instance = this.$injector.instantiate(plugin.Datasource, { instanceSettings: dsConfig });\n        instance.meta = pluginDef;\n        instance.name = name;\n        this.datasources[name] = instance;\n        deferred.resolve(instance);\n      })\n      .catch(err => {\n        this.$rootScope.appEvent('alert-error', [dsConfig.name + ' plugin failed', err.toString()]);\n      });\n\n    return deferred.promise;\n  }\n\n  getAll() {\n    return config.datasources;\n  }\n\n  getAnnotationSources() {\n    const sources = [];\n\n    this.addDataSourceVariables(sources);\n\n    _.each(config.datasources, value => {\n      if (value.meta && value.meta.annotations) {\n        sources.push(value);\n      }\n    });\n\n    return sources;\n  }\n\n  getExploreSources() {\n    const { datasources } = config;\n    const es = Object.keys(datasources)\n      .map(name => datasources[name])\n      .filter(ds => ds.meta && ds.meta.explore);\n    return _.sortBy(es, ['name']);\n  }\n\n  getMetricSources(options) {\n    const metricSources = [];\n\n    _.each(config.datasources, (value, key) => {\n      if (value.meta && value.meta.metrics) {\n        let metricSource = { value: key, name: key, meta: value.meta, sort: key };\n\n        //Make sure grafana and mixed are sorted at the bottom\n        if (value.meta.id === 'grafana') {\n          metricSource.sort = String.fromCharCode(253);\n        } else if (value.meta.id === 'mixed') {\n          metricSource.sort = String.fromCharCode(254);\n        }\n\n        metricSources.push(metricSource);\n\n        if (key === config.defaultDatasource) {\n          metricSource = { value: null, name: 'default', meta: value.meta, sort: key };\n          metricSources.push(metricSource);\n        }\n      }\n    });\n\n    if (!options || !options.skipVariables) {\n      this.addDataSourceVariables(metricSources);\n    }\n\n    metricSources.sort((a, b) => {\n      if (a.sort.toLowerCase() > b.sort.toLowerCase()) {\n        return 1;\n      }\n      if (a.sort.toLowerCase() < b.sort.toLowerCase()) {\n        return -1;\n      }\n      return 0;\n    });\n\n    return metricSources;\n  }\n\n  addDataSourceVariables(list) {\n    // look for data source variables\n    for (let i = 0; i < this.templateSrv.variables.length; i++) {\n      const variable = this.templateSrv.variables[i];\n      if (variable.type !== 'datasource') {\n        continue;\n      }\n\n      let first = variable.current.value;\n      if (first === 'default') {\n        first = config.defaultDatasource;\n      }\n\n      const ds = config.datasources[first];\n\n      if (ds) {\n        const key = `$${variable.name}`;\n        list.push({\n          name: key,\n          value: key,\n          meta: ds.meta,\n          sort: key,\n        });\n      }\n    }\n  }\n}\n\ncoreModule.service('datasourceSrv', DatasourceSrv);\nexport default DatasourceSrv;\n","import { PanelCtrl } from 'app/features/panel/panel_ctrl';\n\nexport class UnknownPanelCtrl extends PanelCtrl {\n  static templateUrl = 'public/app/plugins/panel/unknown/module.html';\n\n  /** @ngInject */\n  constructor($scope, $injector) {\n    super($scope, $injector);\n  }\n}\n","import angular from 'angular';\nimport _ from 'lodash';\n\nimport config from 'app/core/config';\nimport coreModule from 'app/core/core_module';\nimport { importPluginModule } from './plugin_loader';\n\nimport { UnknownPanelCtrl } from 'app/plugins/panel/unknown/module';\n\n/** @ngInject */\nfunction pluginDirectiveLoader($compile, datasourceSrv, $rootScope, $q, $http, $templateCache) {\n  function getTemplate(component) {\n    if (component.template) {\n      return $q.when(component.template);\n    }\n    const cached = $templateCache.get(component.templateUrl);\n    if (cached) {\n      return $q.when(cached);\n    }\n    return $http.get(component.templateUrl).then(res => {\n      return res.data;\n    });\n  }\n\n  function relativeTemplateUrlToAbs(templateUrl, baseUrl) {\n    if (!templateUrl) {\n      return undefined;\n    }\n    if (templateUrl.indexOf('public') === 0) {\n      return templateUrl;\n    }\n    return baseUrl + '/' + templateUrl;\n  }\n\n  function getPluginComponentDirective(options) {\n    // handle relative template urls for plugin templates\n    options.Component.templateUrl = relativeTemplateUrlToAbs(options.Component.templateUrl, options.baseUrl);\n\n    return () => {\n      return {\n        templateUrl: options.Component.templateUrl,\n        template: options.Component.template,\n        restrict: 'E',\n        controller: options.Component,\n        controllerAs: 'ctrl',\n        bindToController: true,\n        scope: options.bindings,\n        link: (scope, elem, attrs, ctrl) => {\n          if (ctrl.link) {\n            ctrl.link(scope, elem, attrs, ctrl);\n          }\n          if (ctrl.init) {\n            ctrl.init();\n          }\n        },\n      };\n    };\n  }\n\n  function loadPanelComponentInfo(scope, attrs) {\n    const componentInfo: any = {\n      name: 'panel-plugin-' + scope.panel.type,\n      bindings: { dashboard: '=', panel: '=', row: '=' },\n      attrs: {\n        dashboard: 'dashboard',\n        panel: 'panel',\n        class: 'panel-height-helper',\n      },\n    };\n\n    const panelInfo = config.panels[scope.panel.type];\n    let panelCtrlPromise = Promise.resolve(UnknownPanelCtrl);\n    if (panelInfo) {\n      panelCtrlPromise = importPluginModule(panelInfo.module).then(panelModule => {\n        return panelModule.PanelCtrl;\n      });\n    }\n\n    return panelCtrlPromise.then((PanelCtrl: any) => {\n      componentInfo.Component = PanelCtrl;\n\n      if (!PanelCtrl || PanelCtrl.registered) {\n        return componentInfo;\n      }\n\n      if (PanelCtrl.templatePromise) {\n        return PanelCtrl.templatePromise.then(res => {\n          return componentInfo;\n        });\n      }\n\n      if (panelInfo) {\n        PanelCtrl.templateUrl = relativeTemplateUrlToAbs(PanelCtrl.templateUrl, panelInfo.baseUrl);\n      }\n\n      PanelCtrl.templatePromise = getTemplate(PanelCtrl).then(template => {\n        PanelCtrl.templateUrl = null;\n        PanelCtrl.template = `<grafana-panel ctrl=\"ctrl\" class=\"panel-height-helper\">${template}</grafana-panel>`;\n        return componentInfo;\n      });\n\n      return PanelCtrl.templatePromise;\n    });\n  }\n\n  function getModule(scope, attrs) {\n    switch (attrs.type) {\n      // QueryCtrl\n      case 'query-ctrl': {\n        const datasource = scope.target.datasource || scope.ctrl.panel.datasource;\n        return datasourceSrv.get(datasource).then(ds => {\n          scope.datasource = ds;\n\n          return importPluginModule(ds.meta.module).then(dsModule => {\n            return {\n              baseUrl: ds.meta.baseUrl,\n              name: 'query-ctrl-' + ds.meta.id,\n              bindings: { target: '=', panelCtrl: '=', datasource: '=' },\n              attrs: {\n                target: 'target',\n                'panel-ctrl': 'ctrl.panelCtrl',\n                datasource: 'datasource',\n              },\n              Component: dsModule.QueryCtrl,\n            };\n          });\n        });\n      }\n      // Annotations\n      case 'annotations-query-ctrl': {\n        return importPluginModule(scope.ctrl.currentDatasource.meta.module).then(dsModule => {\n          return {\n            baseUrl: scope.ctrl.currentDatasource.meta.baseUrl,\n            name: 'annotations-query-ctrl-' + scope.ctrl.currentDatasource.meta.id,\n            bindings: { annotation: '=', datasource: '=' },\n            attrs: {\n              annotation: 'ctrl.currentAnnotation',\n              datasource: 'ctrl.currentDatasource',\n            },\n            Component: dsModule.AnnotationsQueryCtrl,\n          };\n        });\n      }\n      // Datasource ConfigCtrl\n      case 'datasource-config-ctrl': {\n        const dsMeta = scope.ctrl.datasourceMeta;\n        return importPluginModule(dsMeta.module).then((dsModule): any => {\n          if (!dsModule.ConfigCtrl) {\n            return { notFound: true };\n          }\n\n          return {\n            baseUrl: dsMeta.baseUrl,\n            name: 'ds-config-' + dsMeta.id,\n            bindings: { meta: '=', current: '=' },\n            attrs: { meta: 'ctrl.datasourceMeta', current: 'ctrl.current' },\n            Component: dsModule.ConfigCtrl,\n          };\n        });\n      }\n      // AppConfigCtrl\n      case 'app-config-ctrl': {\n        const model = scope.ctrl.model;\n        return importPluginModule(model.module).then(appModule => {\n          return {\n            baseUrl: model.baseUrl,\n            name: 'app-config-' + model.id,\n            bindings: { appModel: '=', appEditCtrl: '=' },\n            attrs: { 'app-model': 'ctrl.model', 'app-edit-ctrl': 'ctrl' },\n            Component: appModule.ConfigCtrl,\n          };\n        });\n      }\n      // App Page\n      case 'app-page': {\n        const appModel = scope.ctrl.appModel;\n        return importPluginModule(appModel.module).then(appModule => {\n          return {\n            baseUrl: appModel.baseUrl,\n            name: 'app-page-' + appModel.id + '-' + scope.ctrl.page.slug,\n            bindings: { appModel: '=' },\n            attrs: { 'app-model': 'ctrl.appModel' },\n            Component: appModule[scope.ctrl.page.component],\n          };\n        });\n      }\n      // Panel\n      case 'panel': {\n        return loadPanelComponentInfo(scope, attrs);\n      }\n      default: {\n        return $q.reject({\n          message: 'Could not find component type: ' + attrs.type,\n        });\n      }\n    }\n  }\n\n  function appendAndCompile(scope, elem, componentInfo) {\n    const child = angular.element(document.createElement(componentInfo.name));\n    _.each(componentInfo.attrs, (value, key) => {\n      child.attr(key, value);\n    });\n\n    $compile(child)(scope);\n    elem.empty();\n\n    // let a binding digest cycle complete before adding to dom\n    setTimeout(() => {\n      elem.append(child);\n      scope.$applyAsync(() => {\n        scope.$broadcast('component-did-mount');\n        scope.$broadcast('refresh');\n      });\n    });\n  }\n\n  function registerPluginComponent(scope, elem, attrs, componentInfo) {\n    if (componentInfo.notFound) {\n      elem.empty();\n      return;\n    }\n\n    if (!componentInfo.Component) {\n      throw {\n        message: 'Failed to find exported plugin component for ' + componentInfo.name,\n      };\n    }\n\n    if (!componentInfo.Component.registered) {\n      const directiveName = attrs.$normalize(componentInfo.name);\n      const directiveFn = getPluginComponentDirective(componentInfo);\n      coreModule.directive(directiveName, directiveFn);\n      componentInfo.Component.registered = true;\n    }\n\n    appendAndCompile(scope, elem, componentInfo);\n  }\n\n  return {\n    restrict: 'E',\n    link: (scope, elem, attrs) => {\n      getModule(scope, attrs)\n        .then(componentInfo => {\n          registerPluginComponent(scope, elem, attrs, componentInfo);\n        })\n        .catch(err => {\n          $rootScope.appEvent('alert-error', ['插件报错', err.message || err]);\n          console.log('Plugin component error', err);\n        });\n    },\n  };\n}\n\ncoreModule.directive('pluginComponent', pluginDirectiveLoader);\n","import config from 'app/core/config';\n\nimport coreModule from 'app/core/core_module';\nimport { PanelContainer } from './dashgrid/PanelContainer';\nimport { DashboardModel } from './dashboard_model';\nimport { PanelModel } from './panel_model';\n\nexport class DashboardCtrl implements PanelContainer {\n  dashboard: DashboardModel;\n  dashboardViewState: any;\n  loadedFallbackDashboard: boolean;\n  editTab: number;\n\n  /** @ngInject */\n  constructor(\n    private $scope,\n    private $rootScope,\n    private keybindingSrv,\n    private timeSrv,\n    private variableSrv,\n    private alertingSrv,\n    private dashboardSrv,\n    private unsavedChangesSrv,\n    private dashboardViewStateSrv,\n    public playlistSrv,\n    private panelLoader\n  ) {\n    // temp hack due to way dashboards are loaded\n    // can't use controllerAs on route yet\n    $scope.ctrl = this;\n\n    // TODO: break out settings view to separate view & controller\n    this.editTab = 0;\n\n    // funcs called from React component bindings and needs this binding\n    this.getPanelContainer = this.getPanelContainer.bind(this);\n  }\n\n  setupDashboard(data) {\n    try {\n      this.setupDashboardInternal(data);\n    } catch (err) {\n      this.onInitFailed(err, '仪表盘初始化失败', true);\n    }\n  }\n\n  setupDashboardInternal(data) {\n    const dashboard = this.dashboardSrv.create(data.dashboard, data.meta);\n    this.dashboardSrv.setCurrent(dashboard);\n\n    // init services\n    this.timeSrv.init(dashboard);\n    this.alertingSrv.init(dashboard, data.alerts);\n\n    // template values service needs to initialize completely before\n    // the rest of the dashboard can load\n    this.variableSrv\n      .init(dashboard)\n      // template values failes are non fatal\n      .catch(this.onInitFailed.bind(this, '模板初始化失败', false))\n      // continue\n      .finally(() => {\n        this.dashboard = dashboard;\n        this.dashboard.processRepeats();\n        this.dashboard.updateSubmenuVisibility();\n        this.dashboard.autoFitPanels(window.innerHeight);\n\n        this.unsavedChangesSrv.init(dashboard, this.$scope);\n\n        // TODO refactor ViewStateSrv\n        this.$scope.dashboard = dashboard;\n        this.dashboardViewState = this.dashboardViewStateSrv.create(this.$scope);\n\n        this.keybindingSrv.setupDashboardBindings(this.$scope, dashboard);\n        this.setWindowTitleAndTheme();\n\n        this.$scope.appEvent('dashboard-initialized', dashboard);\n      })\n      .catch(this.onInitFailed.bind(this, '仪表盘初始化失败', true));\n  }\n\n  onInitFailed(msg, fatal, err) {\n    console.log(msg, err);\n\n    if (err.data && err.data.message) {\n      err.message = err.data.message;\n    } else if (!err.message) {\n      err = { message: err.toString() };\n    }\n\n    this.$scope.appEvent('alert-error', [msg, err.message]);\n\n    // protect against  recursive fallbacks\n    if (fatal && !this.loadedFallbackDashboard) {\n      this.loadedFallbackDashboard = true;\n      this.setupDashboard({ dashboard: { title: '仪表盘初始化失败' } });\n    }\n  }\n\n  templateVariableUpdated() {\n    this.dashboard.processRepeats();\n  }\n\n  setWindowTitleAndTheme() {\n    window.document.title = config.windowTitlePrefix + this.dashboard.title;\n  }\n\n  showJsonEditor(evt, options) {\n    const editScope = this.$rootScope.$new();\n    editScope.object = options.object;\n    editScope.updateHandler = options.updateHandler;\n    this.$scope.appEvent('show-dash-editor', {\n      src: 'public/app/partials/edit_json.html',\n      scope: editScope,\n    });\n  }\n\n  getDashboard() {\n    return this.dashboard;\n  }\n\n  getPanelLoader() {\n    return this.panelLoader;\n  }\n\n  timezoneChanged() {\n    this.$rootScope.$broadcast('refresh');\n  }\n\n  getPanelContainer() {\n    return this;\n  }\n\n  onRemovingPanel(evt, options) {\n    options = options || {};\n    if (!options.panelId) {\n      return;\n    }\n\n    const panelInfo = this.dashboard.getPanelInfoById(options.panelId);\n    this.removePanel(panelInfo.panel, true);\n  }\n\n  removePanel(panel: PanelModel, ask: boolean) {\n    // confirm deletion\n    if (ask !== false) {\n      let text2, confirmText;\n\n      if (panel.alert) {\n        text2 = '面板包含告警规则，删除面板也将删除告警规则';\n        confirmText = '确认';\n      }\n\n      this.$scope.appEvent('confirm-modal', {\n        title: '删除面板',\n        text: '确定要删除此面板吗?',\n        text2: text2,\n        icon: 'fa-trash',\n        confirmText: confirmText,\n        yesText: '删除',\n        onConfirm: () => {\n          this.removePanel(panel, false);\n        },\n      });\n      return;\n    }\n\n    this.dashboard.removePanel(panel);\n  }\n\n  init(dashboard) {\n    this.$scope.onAppEvent('show-json-editor', this.showJsonEditor.bind(this));\n    this.$scope.onAppEvent('template-variable-value-updated', this.templateVariableUpdated.bind(this));\n    this.$scope.onAppEvent('panel-remove', this.onRemovingPanel.bind(this));\n    this.setupDashboard(dashboard);\n  }\n}\n\ncoreModule.controller('DashboardCtrl', DashboardCtrl);\n","import './plugin_edit_ctrl';\nimport './plugin_page_ctrl';\nimport './plugin_list_ctrl';\nimport './import_list/import_list';\nimport './ds_edit_ctrl';\nimport './ds_dashboards_ctrl';\nimport './ds_list_ctrl';\nimport './datasource_srv';\nimport './plugin_component';\n","import './history_srv';\n\nimport _ from 'lodash';\nimport angular from 'angular';\nimport moment from 'moment';\n\nimport locationUtil from 'app/core/utils/location_util';\nimport { DashboardModel } from '../dashboard_model';\nimport { HistoryListOpts, RevisionsModel, CalculateDiffOptions, HistorySrv } from './history_srv';\n\nexport class HistoryListCtrl {\n  appending: boolean;\n  dashboard: DashboardModel;\n  delta: { basic: string; json: string };\n  diff: string;\n  limit: number;\n  loading: boolean;\n  max: number;\n  mode: string;\n  revisions: RevisionsModel[];\n  start: number;\n  newInfo: RevisionsModel;\n  baseInfo: RevisionsModel;\n  canCompare: boolean;\n  isNewLatest: boolean;\n\n  /** @ngInject */\n  constructor(\n    private $route,\n    private $rootScope,\n    private $location,\n    private $q,\n    private historySrv: HistorySrv,\n    public $scope\n  ) {\n    this.appending = false;\n    this.diff = 'basic';\n    this.limit = 10;\n    this.loading = false;\n    this.max = 2;\n    this.mode = 'list';\n    this.start = 0;\n    this.canCompare = false;\n\n    this.$rootScope.onAppEvent('dashboard-saved', this.onDashboardSaved.bind(this), $scope);\n    this.resetFromSource();\n  }\n\n  onDashboardSaved() {\n    this.resetFromSource();\n  }\n\n  switchMode(mode: string) {\n    this.mode = mode;\n    if (this.mode === 'list') {\n      this.reset();\n    }\n  }\n\n  dismiss() {\n    this.$rootScope.appEvent('hide-dash-editor');\n  }\n\n  addToLog() {\n    this.start = this.start + this.limit;\n    this.getLog(true);\n  }\n\n  revisionSelectionChanged() {\n    const selected = _.filter(this.revisions, { checked: true }).length;\n    this.canCompare = selected === 2;\n  }\n\n  formatDate(date) {\n    return this.dashboard.formatDate(date);\n  }\n\n  formatBasicDate(date) {\n    const now = this.dashboard.timezone === 'browser' ? moment() : moment.utc();\n    const then = this.dashboard.timezone === 'browser' ? moment(date) : moment.utc(date);\n    return then.from(now);\n  }\n\n  getDiff(diff: string) {\n    this.diff = diff;\n    this.mode = 'compare';\n\n    // have it already been fetched?\n    if (this.delta[this.diff]) {\n      return this.$q.when(this.delta[this.diff]);\n    }\n\n    const selected = _.filter(this.revisions, { checked: true });\n\n    this.newInfo = selected[0];\n    this.baseInfo = selected[1];\n    this.isNewLatest = this.newInfo.version === this.dashboard.version;\n\n    this.loading = true;\n    const options: CalculateDiffOptions = {\n      new: {\n        dashboardId: this.dashboard.id,\n        version: this.newInfo.version,\n      },\n      base: {\n        dashboardId: this.dashboard.id,\n        version: this.baseInfo.version,\n      },\n      diffType: diff,\n    };\n\n    return this.historySrv\n      .calculateDiff(options)\n      .then(response => {\n        this.delta[this.diff] = response;\n      })\n      .catch(() => {\n        this.mode = 'list';\n      })\n      .finally(() => {\n        this.loading = false;\n      });\n  }\n\n  getLog(append = false) {\n    this.loading = !append;\n    this.appending = append;\n    const options: HistoryListOpts = {\n      limit: this.limit,\n      start: this.start,\n    };\n\n    return this.historySrv\n      .getHistoryList(this.dashboard, options)\n      .then(revisions => {\n        // set formatted dates & default values\n        for (const rev of revisions) {\n          rev.createdDateString = this.formatDate(rev.created);\n          rev.ageString = this.formatBasicDate(rev.created);\n          rev.checked = false;\n        }\n\n        this.revisions = append ? this.revisions.concat(revisions) : revisions;\n      })\n      .catch(err => {\n        this.loading = false;\n      })\n      .finally(() => {\n        this.loading = false;\n        this.appending = false;\n      });\n  }\n\n  isLastPage() {\n    return _.find(this.revisions, rev => rev.version === 1);\n  }\n\n  reset() {\n    this.delta = { basic: '', json: '' };\n    this.diff = 'basic';\n    this.mode = 'list';\n    this.revisions = _.map(this.revisions, rev => _.extend({}, rev, { checked: false }));\n    this.canCompare = false;\n    this.start = 0;\n    this.isNewLatest = false;\n  }\n\n  resetFromSource() {\n    this.revisions = [];\n    return this.getLog().then(this.reset.bind(this));\n  }\n\n  restore(version: number) {\n    this.$rootScope.appEvent('confirm-modal', {\n      title: '还原版本',\n      text: '',\n      text2: `您确定要将仪表盘还原到版本 ${version}吗？ 所有未保存的更改都将丢失。`,\n      icon: 'fa-history',\n      yesText: `是的，恢复到版本 ${version}`,\n      onConfirm: this.restoreConfirm.bind(this, version),\n    });\n  }\n\n  restoreConfirm(version: number) {\n    this.loading = true;\n    return this.historySrv\n      .restoreDashboard(this.dashboard, version)\n      .then(response => {\n        this.$location.url(locationUtil.stripBaseFromUrl(response.url)).replace();\n        this.$route.reload();\n        this.$rootScope.appEvent('alert-success', ['仪表盘已恢复', '恢复到版本 ' + version]);\n      })\n      .catch(() => {\n        this.mode = 'list';\n        this.loading = false;\n      });\n  }\n}\n\nexport function dashboardHistoryDirective() {\n  return {\n    restrict: 'E',\n    templateUrl: 'public/app/features/dashboard/history/history.html',\n    controller: HistoryListCtrl,\n    bindToController: true,\n    controllerAs: 'ctrl',\n    scope: {\n      dashboard: '=',\n    },\n  };\n}\n\nangular.module('grafana.directives').directive('gfDashboardHistory', dashboardHistoryDirective);\n","import coreModule from 'app/core/core_module';\n\nexport class AlertingSrv {\n  dashboard: any;\n  alerts: any[];\n\n  init(dashboard, alerts) {\n    this.dashboard = dashboard;\n    this.alerts = alerts || [];\n  }\n}\n\ncoreModule.service('alertingSrv', AlertingSrv);\n","import _ from 'lodash';\nimport coreModule from 'app/core/core_module';\nimport { DashboardModel } from '../dashboard_model';\n\nexport interface HistoryListOpts {\n  limit: number;\n  start: number;\n}\n\nexport interface RevisionsModel {\n  id: number;\n  checked: boolean;\n  dashboardId: number;\n  parentVersion: number;\n  version: number;\n  created: Date;\n  createdBy: string;\n  message: string;\n}\n\nexport interface CalculateDiffOptions {\n  new: DiffTarget;\n  base: DiffTarget;\n  diffType: string;\n}\n\nexport interface DiffTarget {\n  dashboardId: number;\n  version: number;\n  unsavedDashboard?: DashboardModel; // when doing diffs against unsaved dashboard version\n}\n\nexport class HistorySrv {\n  /** @ngInject */\n  constructor(private backendSrv) {}\n\n  getHistoryList(dashboard: DashboardModel, options: HistoryListOpts) {\n    const id = dashboard && dashboard.id ? dashboard.id : void 0;\n    return id ? this.backendSrv.get(`api/dashboards/id/${id}/versions`, options) : Promise.resolve([]);\n  }\n\n  calculateDiff(options: CalculateDiffOptions) {\n    return this.backendSrv.post('api/dashboards/calculate-diff', options);\n  }\n\n  restoreDashboard(dashboard: DashboardModel, version: number) {\n    const id = dashboard && dashboard.id ? dashboard.id : void 0;\n    const url = `api/dashboards/id/${id}/restore`;\n\n    return id && _.isNumber(version) ? this.backendSrv.post(url, { version }) : Promise.resolve({});\n  }\n}\n\ncoreModule.service('historySrv', HistorySrv);\n","import angular from 'angular';\nimport moment from 'moment';\nimport _ from 'lodash';\nimport $ from 'jquery';\nimport kbn from 'app/core/utils/kbn';\nimport * as dateMath from 'app/core/utils/datemath';\nimport impressionSrv from 'app/core/services/impression_srv';\n\nexport class DashboardLoaderSrv {\n  /** @ngInject */\n  constructor(\n    private backendSrv,\n    private dashboardSrv,\n    private datasourceSrv,\n    private $http,\n    private $q,\n    private $timeout,\n    contextSrv,\n    private $routeParams,\n    private $rootScope\n  ) {}\n\n  _dashboardLoadFailed(title, snapshot?) {\n    snapshot = snapshot || false;\n    return {\n      meta: {\n        canStar: false,\n        isSnapshot: snapshot,\n        canDelete: false,\n        canSave: false,\n        canEdit: false,\n        dashboardNotFound: true,\n      },\n      dashboard: { title: title },\n    };\n  }\n\n  loadDashboard(type, slug, uid) {\n    let promise;\n\n    if (type === 'script') {\n      promise = this._loadScriptedDashboard(slug);\n    } else if (type === 'snapshot') {\n      promise = this.backendSrv.get('/api/snapshots/' + slug).catch(() => {\n        return this._dashboardLoadFailed('未找到快照', true);\n      });\n    } else {\n      promise = this.backendSrv\n        .getDashboardByUid(uid)\n        .then(result => {\n          if (result.meta.isFolder) {\n            this.$rootScope.appEvent('alert-error', ['未找到仪表盘']);\n            throw new Error('Dashboard not found');\n          }\n          return result;\n        })\n        .catch(() => {\n          return this._dashboardLoadFailed('未找到', true);\n        });\n    }\n\n    promise.then(result => {\n      if (result.meta.dashboardNotFound !== true) {\n        impressionSrv.addDashboardImpression(result.dashboard.id);\n      }\n\n      return result;\n    });\n\n    return promise;\n  }\n\n  _loadScriptedDashboard(file) {\n    const url = 'public/dashboards/' + file.replace(/\\.(?!js)/, '/') + '?' + new Date().getTime();\n\n    return this.$http({ url: url, method: 'GET' })\n      .then(this._executeScript.bind(this))\n      .then(\n        result => {\n          return {\n            meta: {\n              fromScript: true,\n              canDelete: false,\n              canSave: false,\n              canStar: false,\n            },\n            dashboard: result.data,\n          };\n        },\n        err => {\n          console.log('Script dashboard error ' + err);\n          this.$rootScope.appEvent('alert-error', [\n            '脚本错误',\n            '请确保它存在并返回有效的仪表盘',\n          ]);\n          return this._dashboardLoadFailed('Scripted dashboard');\n        }\n      );\n  }\n\n  _executeScript(result) {\n    const services = {\n      dashboardSrv: this.dashboardSrv,\n      datasourceSrv: this.datasourceSrv,\n      $q: this.$q,\n    };\n\n    /*jshint -W054 */\n    const scriptFunc = new Function(\n      'ARGS',\n      'kbn',\n      'dateMath',\n      '_',\n      'moment',\n      'window',\n      'document',\n      '$',\n      'jQuery',\n      'services',\n      result.data\n    );\n    const scriptResult = scriptFunc(this.$routeParams, kbn, dateMath, _, moment, window, document, $, $, services);\n\n    // Handle async dashboard scripts\n    if (_.isFunction(scriptResult)) {\n      const deferred = this.$q.defer();\n      scriptResult(dashboard => {\n        this.$timeout(() => {\n          deferred.resolve({ data: dashboard });\n        });\n      });\n      return deferred.promise;\n    }\n\n    return { data: scriptResult };\n  }\n}\n\nangular.module('grafana.services').service('dashboardLoaderSrv', DashboardLoaderSrv);\n","import moment from 'moment';\nimport angular from 'angular';\nimport { appEvents, NavModel } from 'app/core/core';\nimport { DashboardModel } from '../dashboard_model';\n\nexport class DashNavCtrl {\n  dashboard: DashboardModel;\n  navModel: NavModel;\n  titleTooltip: string;\n\n  /** @ngInject */\n  constructor(private $scope, private dashboardSrv, private $location, public playlistSrv) {\n    appEvents.on('save-dashboard', this.saveDashboard.bind(this), $scope);\n\n    if (this.dashboard.meta.isSnapshot) {\n      const meta = this.dashboard.meta;\n      this.titleTooltip = '创建于: &nbsp;' + moment(meta.created).calendar();\n      if (meta.expires) {\n        this.titleTooltip += '<br>失效于: &nbsp;' + moment(meta.expires).fromNow() + '<br>';\n      }\n    }\n  }\n\n  toggleSettings() {\n    const search = this.$location.search();\n    if (search.editview) {\n      delete search.editview;\n    } else {\n      search.editview = 'settings';\n    }\n    this.$location.search(search);\n  }\n\n  toggleViewMode() {\n    appEvents.emit('toggle-kiosk-mode');\n  }\n\n  close() {\n    const search = this.$location.search();\n    if (search.editview) {\n      delete search.editview;\n    } else if (search.fullscreen) {\n      delete search.fullscreen;\n      delete search.edit;\n    }\n    this.$location.search(search);\n  }\n\n  starDashboard() {\n    this.dashboardSrv.starDashboard(this.dashboard.id, this.dashboard.meta.isStarred).then(newState => {\n      this.dashboard.meta.isStarred = newState;\n    });\n  }\n\n  shareDashboard(tabIndex) {\n    const modalScope = this.$scope.$new();\n    modalScope.tabIndex = tabIndex;\n    modalScope.dashboard = this.dashboard;\n\n    appEvents.emit('show-modal', {\n      src: 'public/app/features/dashboard/partials/shareModal.html',\n      scope: modalScope,\n    });\n  }\n\n  hideTooltip(evt) {\n    angular.element(evt.currentTarget).tooltip('hide');\n  }\n\n  saveDashboard() {\n    return this.dashboardSrv.saveDashboard();\n  }\n\n  showSearch() {\n    appEvents.emit('show-dash-search');\n  }\n\n  addPanel() {\n    appEvents.emit('dash-scroll', { animate: true, evt: 0 });\n\n    if (this.dashboard.panels.length > 0 && this.dashboard.panels[0].type === 'add-panel') {\n      return; // Return if the \"Add panel\" exists already\n    }\n\n    this.dashboard.addPanel({\n      type: 'add-panel',\n      gridPos: { x: 0, y: 0, w: 12, h: 9 },\n      title: '面板标题',\n    });\n  }\n\n  navItemClicked(navItem, evt) {\n    if (navItem.clickHandler) {\n      navItem.clickHandler();\n      evt.preventDefault();\n    }\n  }\n}\n\nexport function dashNavDirective() {\n  return {\n    restrict: 'E',\n    templateUrl: 'public/app/features/dashboard/dashnav/dashnav.html',\n    controller: DashNavCtrl,\n    bindToController: true,\n    controllerAs: 'ctrl',\n    transclude: true,\n    scope: { dashboard: '=' },\n  };\n}\n\nangular.module('grafana.directives').directive('dashnav', dashNavDirective);\n","import angular from 'angular';\nimport _ from 'lodash';\n\nexport class SubmenuCtrl {\n  annotations: any;\n  variables: any;\n  dashboard: any;\n\n  /** @ngInject */\n  constructor(private $rootScope, private variableSrv, private $location) {\n    this.annotations = this.dashboard.templating.list;\n    this.variables = this.variableSrv.variables;\n  }\n\n  annotationStateChanged() {\n    this.$rootScope.$broadcast('refresh');\n  }\n\n  variableUpdated(variable) {\n    this.variableSrv.variableUpdated(variable, true);\n  }\n\n  openEditView(editview) {\n    const search = _.extend(this.$location.search(), { editview: editview });\n    this.$location.search(search);\n  }\n}\n\nexport function submenuDirective() {\n  return {\n    restrict: 'E',\n    templateUrl: 'public/app/features/dashboard/submenu/submenu.html',\n    controller: SubmenuCtrl,\n    bindToController: true,\n    controllerAs: 'ctrl',\n    scope: {\n      dashboard: '=',\n    },\n  };\n}\n\nangular.module('grafana.directives').directive('dashboardSubmenu', submenuDirective);\n","import coreModule from 'app/core/core_module';\n\nconst template = `\n<div class=\"modal-body\">\n\t<div class=\"modal-header\">\n\t\t<h2 class=\"modal-header-title\">\n\t\t\t<i class=\"fa fa-copy\"></i>\n\t\t\t<span class=\"p-l-1\">另存为...</span>\n\t\t</h2>\n\n\t\t<a class=\"modal-header-close\" ng-click=\"ctrl.dismiss();\">\n\t\t\t<i class=\"fa fa-remove\"></i>\n\t\t</a>\n\t</div>\n\n\t<form name=\"ctrl.saveForm\" class=\"modal-content\" novalidate>\n\t\t<div class=\"p-t-2\">\n\t\t\t<div class=\"gf-form\">\n\t\t\t\t<label class=\"gf-form-label width-7\">新名称</label>\n\t\t\t\t<input type=\"text\" class=\"gf-form-input\" ng-model=\"ctrl.clone.title\" give-focus=\"true\" required>\n\t\t\t</div>\n      <div class=\"gf-form\">\n        <folder-picker initial-folder-id=\"ctrl.folderId\"\n                       on-change=\"ctrl.onFolderChange($folder)\"\n                       enter-folder-creation=\"ctrl.onEnterFolderCreation()\"\n                       exit-folder-creation=\"ctrl.onExitFolderCreation()\"\n                       enable-create-new=\"true\"\n                       label-class=\"width-7\">\n        </folder-picker>\n      </div>\n\t\t</div>\n\n\t\t<div class=\"gf-form-button-row text-center\">\n\t\t\t<button type=\"submit\" class=\"btn btn-success\" ng-click=\"ctrl.save()\" ng-disabled=\"!ctrl.isValidFolderSelection\">保存</button>\n\t\t\t<a class=\"btn-text\" ng-click=\"ctrl.dismiss();\">取消</a>\n\t\t</div>\n\t</form>\n</div>\n`;\n\nexport class SaveDashboardAsModalCtrl {\n  clone: any;\n  folderId: any;\n  dismiss: () => void;\n  isValidFolderSelection = true;\n\n  /** @ngInject */\n  constructor(private dashboardSrv) {\n    const dashboard = this.dashboardSrv.getCurrent();\n    this.clone = dashboard.getSaveModelClone();\n    this.clone.id = null;\n    this.clone.uid = '';\n    this.clone.title += ' 副本';\n    this.clone.editable = true;\n    this.clone.hideControls = false;\n    this.folderId = dashboard.meta.folderId;\n\n    // remove alerts if source dashboard is already persisted\n    // do not want to create alert dupes\n    if (dashboard.id > 0) {\n      this.clone.panels.forEach(panel => {\n        if (panel.type === 'graph' && panel.alert) {\n          delete panel.thresholds;\n        }\n        delete panel.alert;\n      });\n    }\n\n    delete this.clone.autoUpdate;\n  }\n\n  save() {\n    return this.dashboardSrv.save(this.clone, { folderId: this.folderId }).then(this.dismiss);\n  }\n\n  keyDown(evt) {\n    if (evt.keyCode === 13) {\n      this.save();\n    }\n  }\n\n  onFolderChange(folder) {\n    this.folderId = folder.id;\n  }\n\n  onEnterFolderCreation() {\n    this.isValidFolderSelection = false;\n  }\n\n  onExitFolderCreation() {\n    this.isValidFolderSelection = true;\n  }\n}\n\nexport function saveDashboardAsDirective() {\n  return {\n    restrict: 'E',\n    template: template,\n    controller: SaveDashboardAsModalCtrl,\n    bindToController: true,\n    controllerAs: 'ctrl',\n    scope: { dismiss: '&' },\n  };\n}\n\ncoreModule.directive('saveDashboardAsModal', saveDashboardAsDirective);\n","import coreModule from 'app/core/core_module';\n\nconst template = `\n<div class=\"modal-body\">\n  <div class=\"modal-header\">\n    <h2 class=\"modal-header-title\">\n      <i class=\"fa fa-save\"></i>\n      <span class=\"p-l-1\">保存更改</span>\n    </h2>\n\n    <a class=\"modal-header-close\" ng-click=\"ctrl.dismiss();\">\n      <i class=\"fa fa-remove\"></i>\n    </a>\n  </div>\n\n  <form name=\"ctrl.saveForm\" ng-submit=\"ctrl.save()\" class=\"modal-content\" novalidate>\n    <div class=\"p-t-1\">\n      <div class=\"gf-form-group\" ng-if=\"ctrl.timeChange || ctrl.variableValueChange\">\n\t\t    <gf-form-switch class=\"gf-form\"\n\t\t\t    label=\"保存当前的时间范围\" ng-if=\"ctrl.timeChange\" label-class=\"width-12\" switch-class=\"max-width-6\"\n\t\t\t    checked=\"ctrl.saveTimerange\" on-change=\"buildUrl()\">\n\t\t    </gf-form-switch>\n\t\t    <gf-form-switch class=\"gf-form\"\n\t\t\t    label=\"保存当前的所有变量\" ng-if=\"ctrl.variableValueChange\" label-class=\"width-12\" switch-class=\"max-width-6\"\n\t\t\t    checked=\"ctrl.saveVariables\" on-change=\"buildUrl()\">\n\t\t    </gf-form-switch>\n\t    </div>\n      <div class=\"gf-form\">\n        <label class=\"gf-form-hint\">\n          <input\n            type=\"text\"\n            name=\"message\"\n            class=\"gf-form-input\"\n            placeholder=\"添加备注以描述您的更改 &hellip;\"\n            give-focus=\"true\"\n            ng-model=\"ctrl.message\"\n            ng-model-options=\"{allowInvalid: true}\"\n            ng-maxlength=\"this.max\"\n            maxlength=\"64\"\n            autocomplete=\"off\" />\n          <small class=\"gf-form-hint-text muted\" ng-cloak>\n            <span ng-class=\"{'text-error': ctrl.saveForm.message.$invalid && ctrl.saveForm.message.$dirty }\">\n              {{ctrl.message.length || 0}}\n            </span>\n            / {{ctrl.max}} 字符\n          </small>\n        </label>\n      </div>\n    </div>\n\n    <div class=\"gf-form-button-row text-center\">\n      <button\n        id=\"saveBtn\"\n        type=\"submit\"\n        class=\"btn btn-success\"\n        ng-class=\"{'btn-success--processing': ctrl.isSaving}\"\n        ng-disabled=\"ctrl.saveForm.$invalid || ctrl.isSaving\"\n      >\n        <span ng-if=\"!ctrl.isSaving\">保存</span>\n        <span ng-if=\"ctrl.isSaving === true\">保存中...</span>\n      </button>\n      <button class=\"btn btn-inverse\" ng-click=\"ctrl.dismiss();\">取消</button>\n    </div>\n  </form>\n</div>\n`;\n\nexport class SaveDashboardModalCtrl {\n  message: string;\n  saveVariables = false;\n  saveTimerange = false;\n  time: any;\n  originalTime: any;\n  current = [];\n  originalCurrent = [];\n  max: number;\n  saveForm: any;\n  isSaving: boolean;\n  dismiss: () => void;\n  timeChange = false;\n  variableValueChange = false;\n\n  /** @ngInject */\n  constructor(private dashboardSrv) {\n    this.message = '';\n    this.max = 64;\n    this.isSaving = false;\n    this.timeChange = this.dashboardSrv.getCurrent().hasTimeChanged();\n    this.variableValueChange = this.dashboardSrv.getCurrent().hasVariableValuesChanged();\n  }\n\n  save() {\n    if (!this.saveForm.$valid) {\n      return;\n    }\n\n    const options = {\n      saveVariables: this.saveVariables,\n      saveTimerange: this.saveTimerange,\n      message: this.message,\n    };\n\n    const dashboard = this.dashboardSrv.getCurrent();\n    const saveModel = dashboard.getSaveModelClone(options);\n\n    this.isSaving = true;\n\n    return this.dashboardSrv.save(saveModel, options).then(this.postSave.bind(this, options));\n  }\n\n  postSave(options) {\n    if (options.saveVariables) {\n      this.dashboardSrv.getCurrent().resetOriginalVariables();\n    }\n\n    if (options.saveTimerange) {\n      this.dashboardSrv.getCurrent().resetOriginalTime();\n    }\n\n    this.dismiss();\n  }\n}\n\nexport function saveDashboardModalDirective() {\n  return {\n    restrict: 'E',\n    template: template,\n    controller: SaveDashboardModalCtrl,\n    bindToController: true,\n    controllerAs: 'ctrl',\n    scope: { dismiss: '&' },\n  };\n}\n\ncoreModule.directive('saveDashboardModal', saveDashboardModalDirective);\n","import angular from 'angular';\nimport { saveAs } from 'file-saver';\nimport coreModule from 'app/core/core_module';\n\nconst template = `\n<div class=\"modal-body\">\n  <div class=\"modal-header\">\n    <h2 class=\"modal-header-title\">\n      <i class=\"fa fa-save\"></i><span class=\"p-l-1\">无法保存配置的仪表盘</span>\n    </h2>\n\n    <a class=\"modal-header-close\" ng-click=\"ctrl.dismiss();\">\n      <i class=\"fa fa-remove\"></i>\n    </a>\n  </div>\n\n  <div class=\"modal-content\">\n    <small>\n      此仪表盘无法从Grafana的UI中保存，因为它已从其他来源进行配置。\n      复制JSON或将其保存到下面的文件中。 然后，您可以在相应的配置源中更新仪表盘。<br/>\n      <i>查看 <a class=\"external-link\" href=\"http://docs.grafana.org/administration/provisioning/#dashboards\" target=\"_blank\">\n      文档</a> 获取有关配置的更多信息。</i>\n    </small>\n    <div class=\"p-t-2\">\n      <div class=\"gf-form\">\n        <code-editor content=\"ctrl.dashboardJson\" data-mode=\"json\" data-max-lines=15></code-editor>\n      </div>\n      <div class=\"gf-form-button-row\">\n        <button class=\"btn btn-success\" clipboard-button=\"ctrl.getJsonForClipboard()\">\n          <i class=\"fa fa-clipboard\"></i>&nbsp;将JSON复制到剪贴板\n        </button>\n        <button class=\"btn btn-secondary\" clipboard-button=\"ctrl.save()\">\n          <i class=\"fa fa-save\"></i>&nbsp;将JSON保存到文件\n        </button>\n        <a class=\"btn btn-link\" ng-click=\"ctrl.dismiss();\">取消</a>\n      </div>\n    </div>\n  </div>\n</div>\n`;\n\nexport class SaveProvisionedDashboardModalCtrl {\n  dash: any;\n  dashboardJson: string;\n  dismiss: () => void;\n\n  /** @ngInject */\n  constructor(dashboardSrv) {\n    this.dash = dashboardSrv.getCurrent().getSaveModelClone();\n    delete this.dash.id;\n    this.dashboardJson = angular.toJson(this.dash, true);\n  }\n\n  save() {\n    const blob = new Blob([angular.toJson(this.dash, true)], {\n      type: 'application/json;charset=utf-8',\n    });\n    saveAs(blob, this.dash.title + '-' + new Date().getTime() + '.json');\n  }\n\n  getJsonForClipboard() {\n    return this.dashboardJson;\n  }\n}\n\nexport function saveProvisionedDashboardModalDirective() {\n  return {\n    restrict: 'E',\n    template: template,\n    controller: SaveProvisionedDashboardModalCtrl,\n    bindToController: true,\n    controllerAs: 'ctrl',\n    scope: { dismiss: '&' },\n  };\n}\n\ncoreModule.directive('saveProvisionedDashboardModal', saveProvisionedDashboardModalDirective);\n","import angular from 'angular';\nimport config from 'app/core/config';\nimport moment from 'moment';\n\n/** @ngInject */\nexport function ShareModalCtrl($scope, $rootScope, $location, $timeout, timeSrv, templateSrv, linkSrv) {\n  $scope.options = {\n    forCurrent: true,\n    includeTemplateVars: true,\n    theme: 'current',\n  };\n  $scope.editor = { index: $scope.tabIndex || 0 };\n\n  $scope.init = () => {\n    $scope.modeSharePanel = $scope.panel ? true : false;\n\n    $scope.tabs = [{ title: '链接', src: 'shareLink.html' }];\n\n    if ($scope.modeSharePanel) {\n      $scope.modalTitle = '共享面板';\n      $scope.tabs.push({ title: '嵌入式', src: 'shareEmbed.html' });\n    } else {\n      $scope.modalTitle = '共享';\n    }\n\n    if (!$scope.dashboard.meta.isSnapshot) {\n      $scope.tabs.push({ title: '快照', src: 'shareSnapshot.html' });\n    }\n\n    if (!$scope.dashboard.meta.isSnapshot && !$scope.modeSharePanel) {\n      $scope.tabs.push({ title: '导出', src: 'shareExport.html' });\n    }\n\n    $scope.buildUrl();\n  };\n\n  $scope.buildUrl = () => {\n    let baseUrl = $location.absUrl();\n    const queryStart = baseUrl.indexOf('?');\n\n    if (queryStart !== -1) {\n      baseUrl = baseUrl.substring(0, queryStart);\n    }\n\n    const params = angular.copy($location.search());\n\n    const range = timeSrv.timeRange();\n    params.from = range.from.valueOf();\n    params.to = range.to.valueOf();\n    params.orgId = config.bootData.user.orgId;\n\n    if ($scope.options.includeTemplateVars) {\n      templateSrv.fillVariableValuesForUrl(params);\n    }\n\n    if (!$scope.options.forCurrent) {\n      delete params.from;\n      delete params.to;\n    }\n\n    if ($scope.options.theme !== 'current') {\n      params.theme = $scope.options.theme;\n    }\n\n    if ($scope.modeSharePanel) {\n      params.panelId = $scope.panel.id;\n      params.fullscreen = true;\n    } else {\n      delete params.panelId;\n      delete params.fullscreen;\n    }\n\n    $scope.shareUrl = linkSrv.addParamsToUrl(baseUrl, params);\n\n    let soloUrl = baseUrl.replace(config.appSubUrl + '/dashboard/', config.appSubUrl + '/dashboard-solo/');\n    soloUrl = soloUrl.replace(config.appSubUrl + '/d/', config.appSubUrl + '/d-solo/');\n    delete params.fullscreen;\n    delete params.edit;\n    soloUrl = linkSrv.addParamsToUrl(soloUrl, params);\n\n    $scope.iframeHtml = '<iframe src=\"' + soloUrl + '\" width=\"450\" height=\"200\" frameborder=\"0\"></iframe>';\n\n    $scope.imageUrl = soloUrl.replace(\n      config.appSubUrl + '/dashboard-solo/',\n      config.appSubUrl + '/render/dashboard-solo/'\n    );\n    $scope.imageUrl = $scope.imageUrl.replace(config.appSubUrl + '/d-solo/', config.appSubUrl + '/render/d-solo/');\n    $scope.imageUrl += '&width=1000&height=500' + $scope.getLocalTimeZone();\n  };\n\n  // This function will try to return the proper full name of the local timezone\n  // Chrome does not handle the timezone offset (but phantomjs does)\n  $scope.getLocalTimeZone = () => {\n    const utcOffset = '&tz=UTC' + encodeURIComponent(moment().format('Z'));\n\n    // Older browser does not the internationalization API\n    if (!(window as any).Intl) {\n      return utcOffset;\n    }\n\n    const dateFormat = (window as any).Intl.DateTimeFormat();\n    if (!dateFormat.resolvedOptions) {\n      return utcOffset;\n    }\n\n    const options = dateFormat.resolvedOptions();\n    if (!options.timeZone) {\n      return utcOffset;\n    }\n\n    return '&tz=' + encodeURIComponent(options.timeZone);\n  };\n\n  $scope.getShareUrl = () => {\n    return $scope.shareUrl;\n  };\n}\n\nangular.module('grafana.controllers').controller('ShareModalCtrl', ShareModalCtrl);\n","import angular from 'angular';\nimport _ from 'lodash';\n\nexport class ShareSnapshotCtrl {\n  /** @ngInject */\n  constructor($scope, $rootScope, $location, backendSrv, $timeout, timeSrv) {\n    $scope.snapshot = {\n      name: $scope.dashboard.title,\n      expires: 0,\n      timeoutSeconds: 4,\n    };\n\n    $scope.step = 1;\n\n    $scope.expireOptions = [\n      { text: '1 小时', value: 60 * 60 },\n      { text: '1 天', value: 60 * 60 * 24 },\n      { text: '7 天', value: 60 * 60 * 24 * 7 },\n      { text: '从不', value: 0 },\n    ];\n\n    $scope.accessOptions = [\n      { text: '拥有链接的任何人', value: 1 },\n      { text: '组织用户', value: 2 },\n      { text: '在网上公开', value: 3 },\n    ];\n\n    $scope.init = () => {\n      backendSrv.get('/api/snapshot/shared-options').then(options => {\n        $scope.externalUrl = options['externalSnapshotURL'];\n        $scope.sharingButtonText = options['externalSnapshotName'];\n        $scope.externalEnabled = options['externalEnabled'];\n      });\n    };\n\n    $scope.apiUrl = '/api/snapshots';\n\n    $scope.createSnapshot = external => {\n      $scope.dashboard.snapshot = {\n        timestamp: new Date(),\n      };\n\n      if (!external) {\n        $scope.dashboard.snapshot.originalUrl = $location.absUrl();\n      }\n\n      $scope.loading = true;\n      $scope.snapshot.external = external;\n\n      $rootScope.$broadcast('refresh');\n\n      $timeout(() => {\n        $scope.saveSnapshot(external);\n      }, $scope.snapshot.timeoutSeconds * 1000);\n    };\n\n    $scope.saveSnapshot = external => {\n      const dash = $scope.dashboard.getSaveModelClone();\n      $scope.scrubDashboard(dash);\n\n      const cmdData = {\n        dashboard: dash,\n        name: dash.title,\n        expires: $scope.snapshot.expires,\n      };\n\n      const postUrl = external ? $scope.externalUrl + $scope.apiUrl : $scope.apiUrl;\n\n      backendSrv.post(postUrl, cmdData).then(\n        results => {\n          $scope.loading = false;\n\n          if (external) {\n            $scope.deleteUrl = results.deleteUrl;\n            $scope.snapshotUrl = results.url;\n            $scope.saveExternalSnapshotRef(cmdData, results);\n          } else {\n            const url = $location.url();\n            let baseUrl = $location.absUrl();\n\n            if (url !== '/') {\n              baseUrl = baseUrl.replace(url, '') + '/';\n            }\n\n            $scope.snapshotUrl = baseUrl + 'dashboard/snapshot/' + results.key;\n            $scope.deleteUrl = baseUrl + 'api/snapshots-delete/' + results.deleteKey;\n          }\n\n          $scope.step = 2;\n        },\n        () => {\n          $scope.loading = false;\n        }\n      );\n    };\n\n    $scope.getSnapshotUrl = () => {\n      return $scope.snapshotUrl;\n    };\n\n    $scope.scrubDashboard = dash => {\n      // change title\n      dash.title = $scope.snapshot.name;\n\n      // make relative times absolute\n      dash.time = timeSrv.timeRange();\n\n      // remove panel queries & links\n      _.each(dash.panels, panel => {\n        panel.targets = [];\n        panel.links = [];\n        panel.datasource = null;\n      });\n\n      // remove annotation queries\n      dash.annotations.list = _.chain(dash.annotations.list)\n        .filter(annotation => {\n          return annotation.enable;\n        })\n        .map(annotation => {\n          return {\n            name: annotation.name,\n            enable: annotation.enable,\n            iconColor: annotation.iconColor,\n            snapshotData: annotation.snapshotData,\n            type: annotation.type,\n            builtIn: annotation.builtIn,\n            hide: annotation.hide,\n          };\n        })\n        .value();\n\n      // remove template queries\n      _.each(dash.templating.list, variable => {\n        variable.query = '';\n        variable.options = variable.current;\n        variable.refresh = false;\n      });\n\n      // snapshot single panel\n      if ($scope.modeSharePanel) {\n        const singlePanel = $scope.panel.getSaveModel();\n        singlePanel.gridPos.w = 24;\n        singlePanel.gridPos.x = 0;\n        singlePanel.gridPos.y = 0;\n        singlePanel.gridPos.h = 20;\n        dash.panels = [singlePanel];\n      }\n\n      // cleanup snapshotData\n      delete $scope.dashboard.snapshot;\n      $scope.dashboard.forEachPanel(panel => {\n        delete panel.snapshotData;\n      });\n      _.each($scope.dashboard.annotations.list, annotation => {\n        delete annotation.snapshotData;\n      });\n    };\n\n    $scope.deleteSnapshot = () => {\n      backendSrv.get($scope.deleteUrl).then(() => {\n        $scope.step = 3;\n      });\n    };\n\n    $scope.saveExternalSnapshotRef = (cmdData, results) => {\n      // save external in local instance as well\n      cmdData.external = true;\n      cmdData.key = results.key;\n      cmdData.deleteKey = results.deleteKey;\n      backendSrv.post('/api/snapshots/', cmdData);\n    };\n  }\n}\n\nangular.module('grafana.controllers').controller('ShareSnapshotCtrl', ShareSnapshotCtrl);\n","import coreModule from 'app/core/core_module';\nimport { DashboardModel } from './dashboard_model';\nimport locationUtil from 'app/core/utils/location_util';\n\nexport class DashboardSrv {\n  dash: any;\n\n  /** @ngInject */\n  constructor(private backendSrv, private $rootScope, private $location) {}\n\n  create(dashboard, meta) {\n    return new DashboardModel(dashboard, meta);\n  }\n\n  setCurrent(dashboard) {\n    this.dash = dashboard;\n  }\n\n  getCurrent() {\n    return this.dash;\n  }\n\n  handleSaveDashboardError(clone, options, err) {\n    options = options || {};\n    options.overwrite = true;\n\n    if (err.data && err.data.status === 'version-mismatch') {\n      err.isHandled = true;\n\n      this.$rootScope.appEvent('confirm-modal', {\n        title: '冲突',\n        text: '其他人已更新此仪表盘。',\n        text2: '你还想保存这个仪表盘吗?',\n        yesText: '保存并覆盖',\n        icon: 'fa-warning',\n        onConfirm: () => {\n          this.save(clone, options);\n        },\n      });\n    }\n\n    if (err.data && err.data.status === 'name-exists') {\n      err.isHandled = true;\n\n      this.$rootScope.appEvent('confirm-modal', {\n        title: '冲突',\n        text: '所选文件夹中已存在相同名称的仪表盘。',\n        text2: '你还想保存这个仪表盘吗?',\n        yesText: '保存并覆盖',\n        icon: 'fa-warning',\n        onConfirm: () => {\n          this.save(clone, options);\n        },\n      });\n    }\n\n    if (err.data && err.data.status === 'plugin-dashboard') {\n      err.isHandled = true;\n\n      this.$rootScope.appEvent('confirm-modal', {\n        title: '插件仪表盘',\n        text: err.data.message,\n        text2: '更新插件时，您的更改将丢失。 使用“另存为”创建自定义版本。',\n        yesText: '覆盖',\n        icon: 'fa-warning',\n        altActionText: '另存为',\n        onAltAction: () => {\n          this.showSaveAsModal();\n        },\n        onConfirm: () => {\n          this.save(clone, { overwrite: true });\n        },\n      });\n    }\n  }\n\n  postSave(clone, data) {\n    this.dash.version = data.version;\n\n    const newUrl = locationUtil.stripBaseFromUrl(data.url);\n    const currentPath = this.$location.path();\n\n    if (newUrl !== currentPath) {\n      this.$location.url(newUrl).replace();\n    }\n\n    this.$rootScope.appEvent('dashboard-saved', this.dash);\n    this.$rootScope.appEvent('alert-success', ['仪表盘已保存']);\n\n    return this.dash;\n  }\n\n  save(clone, options) {\n    options = options || {};\n    options.folderId = options.folderId >= 0 ? options.folderId : this.dash.meta.folderId || clone.folderId;\n\n    return this.backendSrv\n      .saveDashboard(clone, options)\n      .then(this.postSave.bind(this, clone))\n      .catch(this.handleSaveDashboardError.bind(this, clone, options));\n  }\n\n  saveDashboard(options?, clone?) {\n    if (clone) {\n      this.setCurrent(this.create(clone, this.dash.meta));\n    }\n\n    if (this.dash.meta.provisioned) {\n      return this.showDashboardProvisionedModal();\n    }\n\n    if (!this.dash.meta.canSave && options.makeEditable !== true) {\n      return Promise.resolve();\n    }\n\n    if (this.dash.title === 'New dashboard') {\n      return this.showSaveAsModal();\n    }\n\n    if (this.dash.version > 0) {\n      return this.showSaveModal();\n    }\n\n    return this.save(this.dash.getSaveModelClone(), options);\n  }\n\n  saveJSONDashboard(json: string) {\n    return this.save(JSON.parse(json), {});\n  }\n\n  showDashboardProvisionedModal() {\n    this.$rootScope.appEvent('show-modal', {\n      templateHtml: '<save-provisioned-dashboard-modal dismiss=\"dismiss()\"></save-provisioned-dashboard-modal>',\n    });\n  }\n\n  showSaveAsModal() {\n    this.$rootScope.appEvent('show-modal', {\n      templateHtml: '<save-dashboard-as-modal dismiss=\"dismiss()\"></save-dashboard-as-modal>',\n      modalClass: 'modal--narrow',\n    });\n  }\n\n  showSaveModal() {\n    this.$rootScope.appEvent('show-modal', {\n      templateHtml: '<save-dashboard-modal dismiss=\"dismiss()\"></save-dashboard-modal>',\n      modalClass: 'modal--narrow',\n    });\n  }\n\n  starDashboard(dashboardId, isStarred) {\n    let promise;\n\n    if (isStarred) {\n      promise = this.backendSrv.delete('/api/user/stars/dashboard/' + dashboardId).then(() => {\n        return false;\n      });\n    } else {\n      promise = this.backendSrv.post('/api/user/stars/dashboard/' + dashboardId).then(() => {\n        return true;\n      });\n    }\n\n    return promise.then(res => {\n      if (this.dash && this.dash.id === dashboardId) {\n        this.dash.meta.isStarred = res;\n      }\n      return res;\n    });\n  }\n}\n\ncoreModule.service('dashboardSrv', DashboardSrv);\n","import angular from 'angular';\nimport _ from 'lodash';\nimport config from 'app/core/config';\nimport { DashboardModel } from './dashboard_model';\n\n// represents the transient view state\n// like fullscreen panel & edit\nexport class DashboardViewState {\n  state: any;\n  panelScopes: any;\n  $scope: any;\n  dashboard: DashboardModel;\n  editStateChanged: any;\n  fullscreenPanel: any;\n  oldTimeRange: any;\n\n  /** @ngInject */\n  constructor($scope, private $location, private $timeout, private $rootScope) {\n    const self = this;\n    self.state = {};\n    self.panelScopes = [];\n    self.$scope = $scope;\n    self.dashboard = $scope.dashboard;\n\n    $scope.onAppEvent('$routeUpdate', () => {\n      const urlState = self.getQueryStringState();\n      if (self.needsSync(urlState)) {\n        self.update(urlState, true);\n      }\n    });\n\n    $scope.onAppEvent('panel-change-view', (evt, payload) => {\n      self.update(payload);\n    });\n\n    $scope.onAppEvent('panel-initialized', (evt, payload) => {\n      self.registerPanel(payload.scope);\n    });\n\n    // this marks changes to location during this digest cycle as not to add history item\n    // don't want url changes like adding orgId to add browser history\n    $location.replace();\n    this.update(this.getQueryStringState());\n  }\n\n  needsSync(urlState) {\n    return _.isEqual(this.state, urlState) === false;\n  }\n\n  getQueryStringState() {\n    const state = this.$location.search();\n    state.panelId = parseInt(state.panelId, 10) || null;\n    state.fullscreen = state.fullscreen ? true : null;\n    state.edit = state.edit === 'true' || state.edit === true || null;\n    state.editview = state.editview || null;\n    state.orgId = config.bootData.user.orgId;\n    return state;\n  }\n\n  serializeToUrl() {\n    const urlState = _.clone(this.state);\n    urlState.fullscreen = this.state.fullscreen ? true : null;\n    urlState.edit = this.state.edit ? true : null;\n    return urlState;\n  }\n\n  update(state, fromRouteUpdated?) {\n    // implement toggle logic\n    if (state.toggle) {\n      delete state.toggle;\n      if (this.state.fullscreen && state.fullscreen) {\n        if (this.state.edit === state.edit) {\n          state.fullscreen = !state.fullscreen;\n        }\n      }\n    }\n\n    // remember if editStateChanged\n    this.editStateChanged = (state.edit || false) !== (this.state.edit || false);\n\n    _.extend(this.state, state);\n    this.dashboard.meta.fullscreen = this.state.fullscreen;\n\n    if (!this.state.fullscreen) {\n      this.state.fullscreen = null;\n      this.state.edit = null;\n      // clear panel id unless in solo mode\n      if (!this.dashboard.meta.soloMode) {\n        this.state.panelId = null;\n      }\n    }\n\n    if ((this.state.fullscreen || this.dashboard.meta.soloMode) && this.state.panelId) {\n      // Trying to render panel in fullscreen when it's in the collapsed row causes an issue.\n      // So in this case expand collapsed row first.\n      this.toggleCollapsedPanelRow(this.state.panelId);\n    }\n\n    // if no edit state cleanup tab parm\n    if (!this.state.edit) {\n      delete this.state.tab;\n    }\n\n    // do not update url params if we are here\n    // from routeUpdated event\n    if (fromRouteUpdated !== true) {\n      this.$location.search(this.serializeToUrl());\n    }\n\n    this.syncState();\n  }\n\n  toggleCollapsedPanelRow(panelId) {\n    for (const panel of this.dashboard.panels) {\n      if (panel.collapsed) {\n        for (const rowPanel of panel.panels) {\n          if (rowPanel.id === panelId) {\n            this.dashboard.toggleRow(panel);\n            return;\n          }\n        }\n      }\n    }\n  }\n\n  syncState() {\n    if (this.panelScopes.length === 0) {\n      return;\n    }\n\n    if (this.dashboard.meta.fullscreen) {\n      const panelScope = this.getPanelScope(this.state.panelId);\n      if (!panelScope) {\n        return;\n      }\n\n      if (this.fullscreenPanel) {\n        // if already fullscreen\n        if (this.fullscreenPanel === panelScope && this.editStateChanged === false) {\n          return;\n        } else {\n          this.leaveFullscreen(false);\n        }\n      }\n\n      if (!panelScope.ctrl.editModeInitiated) {\n        panelScope.ctrl.initEditMode();\n      }\n\n      if (!panelScope.ctrl.fullscreen) {\n        this.enterFullscreen(panelScope);\n      }\n    } else if (this.fullscreenPanel) {\n      this.leaveFullscreen(true);\n    }\n  }\n\n  getPanelScope(id) {\n    return _.find(this.panelScopes, panelScope => {\n      return panelScope.ctrl.panel.id === id;\n    });\n  }\n\n  leaveFullscreen(render) {\n    const self = this;\n    const ctrl = self.fullscreenPanel.ctrl;\n\n    ctrl.editMode = false;\n    ctrl.fullscreen = false;\n\n    this.dashboard.setViewMode(ctrl.panel, false, false);\n    this.$scope.appEvent('panel-fullscreen-exit', { panelId: ctrl.panel.id });\n    this.$scope.appEvent('dash-scroll', { restore: true });\n\n    if (!render) {\n      return false;\n    }\n\n    this.$timeout(() => {\n      if (self.oldTimeRange !== ctrl.range) {\n        self.$rootScope.$broadcast('refresh');\n      } else {\n        self.$rootScope.$broadcast('render');\n      }\n      delete self.fullscreenPanel;\n    });\n    return true;\n  }\n\n  enterFullscreen(panelScope) {\n    const ctrl = panelScope.ctrl;\n\n    ctrl.editMode = this.state.edit && this.dashboard.meta.canEdit;\n    ctrl.fullscreen = true;\n\n    this.oldTimeRange = ctrl.range;\n    this.fullscreenPanel = panelScope;\n\n    // Firefox doesn't return scrollTop position properly if 'dash-scroll' is emitted after setViewMode()\n    this.$scope.appEvent('dash-scroll', { animate: false, pos: 0 });\n    this.dashboard.setViewMode(ctrl.panel, true, ctrl.editMode);\n    this.$scope.appEvent('panel-fullscreen-enter', { panelId: ctrl.panel.id });\n  }\n\n  registerPanel(panelScope) {\n    const self = this;\n    self.panelScopes.push(panelScope);\n\n    if (!self.dashboard.meta.soloMode) {\n      if (self.state.panelId === panelScope.ctrl.panel.id) {\n        if (self.state.edit) {\n          panelScope.ctrl.editPanel();\n        } else {\n          panelScope.ctrl.viewPanel();\n        }\n      }\n    }\n\n    const unbind = panelScope.$on('$destroy', () => {\n      self.panelScopes = _.without(self.panelScopes, panelScope);\n      unbind();\n    });\n  }\n}\n\n/** @ngInject */\nexport function dashboardViewStateSrv($location, $timeout, $rootScope) {\n  return {\n    create: $scope => {\n      return new DashboardViewState($scope, $location, $timeout, $rootScope);\n    },\n  };\n}\n\nangular.module('grafana.services').factory('dashboardViewStateSrv', dashboardViewStateSrv);\n","import coreModule from 'app/core/core_module';\n\nconst hitTypes = {\n  FOLDER: 'dash-folder',\n  DASHBOARD: 'dash-db',\n};\n\nexport class ValidationSrv {\n  rootName = 'general';\n\n  /** @ngInject */\n  constructor(private $q, private backendSrv) {}\n\n  validateNewDashboardName(folderId, name) {\n    return this.validate(folderId, name, '此文件夹中已存在同名的仪表盘');\n  }\n\n  validateNewFolderName(name) {\n    return this.validate(0, name, '默认文件夹中已存在同名的仪表盘或文件夹');\n  }\n\n  private validate(folderId, name, existingErrorMessage) {\n    name = (name || '').trim();\n    const nameLowerCased = name.toLowerCase();\n\n    if (name.length === 0) {\n      return this.$q.reject({\n        type: 'REQUIRED',\n        message: '名称是必需的',\n      });\n    }\n\n    if (folderId === 0 && nameLowerCased === this.rootName) {\n      return this.$q.reject({\n        type: 'EXISTING',\n        message: '这是保留名称，不能用于文件夹命名。',\n      });\n    }\n\n    const deferred = this.$q.defer();\n\n    const promises = [];\n    promises.push(this.backendSrv.search({ type: hitTypes.FOLDER, folderIds: [folderId], query: name }));\n    promises.push(this.backendSrv.search({ type: hitTypes.DASHBOARD, folderIds: [folderId], query: name }));\n\n    this.$q.all(promises).then(res => {\n      let hits = [];\n\n      if (res.length > 0 && res[0].length > 0) {\n        hits = res[0];\n      }\n\n      if (res.length > 1 && res[1].length > 0) {\n        hits = hits.concat(res[1]);\n      }\n\n      for (const hit of hits) {\n        if (nameLowerCased === hit.title.toLowerCase()) {\n          deferred.reject({\n            type: 'EXISTING',\n            message: existingErrorMessage,\n          });\n          break;\n        }\n      }\n\n      deferred.resolve();\n    });\n\n    return deferred.promise;\n  }\n}\n\ncoreModule.service('validationSrv', ValidationSrv);\n","import moment from 'moment';\nimport _ from 'lodash';\nimport coreModule from 'app/core/core_module';\nimport kbn from 'app/core/utils/kbn';\nimport * as dateMath from 'app/core/utils/datemath';\n\nexport class TimeSrv {\n  time: any;\n  refreshTimer: any;\n  refresh: boolean;\n  oldRefresh: boolean;\n  dashboard: any;\n  timeAtLoad: any;\n  private autoRefreshBlocked: boolean;\n\n  /** @ngInject */\n  constructor(private $rootScope, private $timeout, private $location, private timer, private contextSrv) {\n    // default time\n    this.time = { from: '6h', to: 'now' };\n\n    $rootScope.$on('zoom-out', this.zoomOut.bind(this));\n    $rootScope.$on('$routeUpdate', this.routeUpdated.bind(this));\n\n    document.addEventListener('visibilitychange', () => {\n      if (this.autoRefreshBlocked && document.visibilityState === 'visible') {\n        this.autoRefreshBlocked = false;\n\n        this.refreshDashboard();\n      }\n    });\n  }\n\n  init(dashboard) {\n    this.timer.cancelAll();\n\n    this.dashboard = dashboard;\n    this.time = dashboard.time;\n    this.refresh = dashboard.refresh;\n\n    this.initTimeFromUrl();\n    this.parseTime();\n\n    // remember time at load so we can go back to it\n    this.timeAtLoad = _.cloneDeep(this.time);\n\n    if (this.refresh) {\n      this.setAutoRefresh(this.refresh);\n    }\n  }\n\n  private parseTime() {\n    // when absolute time is saved in json it is turned to a string\n    if (_.isString(this.time.from) && this.time.from.indexOf('Z') >= 0) {\n      this.time.from = moment(this.time.from).utc();\n    }\n    if (_.isString(this.time.to) && this.time.to.indexOf('Z') >= 0) {\n      this.time.to = moment(this.time.to).utc();\n    }\n  }\n\n  private parseUrlParam(value) {\n    if (value.indexOf('now') !== -1) {\n      return value;\n    }\n    if (value.length === 8) {\n      return moment.utc(value, 'YYYYMMDD');\n    }\n    if (value.length === 15) {\n      return moment.utc(value, 'YYYYMMDDTHHmmss');\n    }\n\n    if (!isNaN(value)) {\n      const epoch = parseInt(value, 10);\n      return moment.utc(epoch);\n    }\n\n    return null;\n  }\n\n  private initTimeFromUrl() {\n    const params = this.$location.search();\n    if (params.from) {\n      this.time.from = this.parseUrlParam(params.from) || this.time.from;\n    }\n    if (params.to) {\n      this.time.to = this.parseUrlParam(params.to) || this.time.to;\n    }\n    if (params.refresh) {\n      this.refresh = params.refresh || this.refresh;\n    }\n  }\n\n  private routeUpdated() {\n    const params = this.$location.search();\n    const urlRange = this.timeRangeForUrl();\n    // check if url has time range\n    if (params.from && params.to) {\n      // is it different from what our current time range?\n      if (params.from !== urlRange.from || params.to !== urlRange.to) {\n        // issue update\n        this.initTimeFromUrl();\n        this.setTime(this.time, true);\n      }\n    } else if (this.timeHasChangedSinceLoad()) {\n      this.setTime(this.timeAtLoad, true);\n    }\n  }\n\n  private timeHasChangedSinceLoad() {\n    return this.timeAtLoad.from !== this.time.from || this.timeAtLoad.to !== this.time.to;\n  }\n\n  setAutoRefresh(interval) {\n    this.dashboard.refresh = interval;\n    this.cancelNextRefresh();\n    if (interval) {\n      const intervalMs = kbn.interval_to_ms(interval);\n\n      this.refreshTimer = this.timer.register(\n        this.$timeout(() => {\n          this.startNextRefreshTimer(intervalMs);\n          this.refreshDashboard();\n        }, intervalMs)\n      );\n    }\n\n    // update url\n    const params = this.$location.search();\n    if (interval) {\n      params.refresh = interval;\n      this.$location.search(params);\n    } else if (params.refresh) {\n      delete params.refresh;\n      this.$location.search(params);\n    }\n  }\n\n  refreshDashboard() {\n    this.$rootScope.$broadcast('refresh');\n  }\n\n  private startNextRefreshTimer(afterMs) {\n    this.cancelNextRefresh();\n    this.refreshTimer = this.timer.register(\n      this.$timeout(() => {\n        this.startNextRefreshTimer(afterMs);\n        if (this.contextSrv.isGrafanaVisible()) {\n          this.refreshDashboard();\n        } else {\n          this.autoRefreshBlocked = true;\n        }\n      }, afterMs)\n    );\n  }\n\n  private cancelNextRefresh() {\n    this.timer.cancel(this.refreshTimer);\n  }\n\n  setTime(time, fromRouteUpdate?) {\n    _.extend(this.time, time);\n\n    // disable refresh if zoom in or zoom out\n    if (moment.isMoment(time.to)) {\n      this.oldRefresh = this.dashboard.refresh || this.oldRefresh;\n      this.setAutoRefresh(false);\n    } else if (this.oldRefresh && this.oldRefresh !== this.dashboard.refresh) {\n      this.setAutoRefresh(this.oldRefresh);\n      this.oldRefresh = null;\n    }\n\n    // update url\n    if (fromRouteUpdate !== true) {\n      const urlRange = this.timeRangeForUrl();\n      const urlParams = this.$location.search();\n      urlParams.from = urlRange.from;\n      urlParams.to = urlRange.to;\n      this.$location.search(urlParams);\n    }\n\n    this.$rootScope.appEvent('time-range-changed', this.time);\n    this.$timeout(this.refreshDashboard.bind(this), 0);\n  }\n\n  timeRangeForUrl() {\n    const range = this.timeRange().raw;\n\n    if (moment.isMoment(range.from)) {\n      range.from = range.from.valueOf().toString();\n    }\n    if (moment.isMoment(range.to)) {\n      range.to = range.to.valueOf().toString();\n    }\n\n    return range;\n  }\n\n  timeRange() {\n    // make copies if they are moment  (do not want to return out internal moment, because they are mutable!)\n    const raw = {\n      from: moment.isMoment(this.time.from) ? moment(this.time.from) : this.time.from,\n      to: moment.isMoment(this.time.to) ? moment(this.time.to) : this.time.to,\n    };\n\n    const timezone = this.dashboard && this.dashboard.getTimezone();\n\n    return {\n      from: dateMath.parse(raw.from, false, timezone),\n      to: dateMath.parse(raw.to, true, timezone),\n      raw: raw,\n    };\n  }\n\n  zoomOut(e, factor) {\n    const range = this.timeRange();\n\n    const timespan = range.to.valueOf() - range.from.valueOf();\n    const center = range.to.valueOf() - timespan / 2;\n\n    let to = center + timespan * factor / 2;\n    let from = center - timespan * factor / 2;\n\n    if (to > Date.now() && range.to <= Date.now()) {\n      const offset = to - Date.now();\n      from = from - offset;\n      to = Date.now();\n    }\n\n    this.setTime({ from: moment.utc(from), to: moment.utc(to) });\n  }\n}\n\ncoreModule.service('timeSrv', TimeSrv);\n","import angular from 'angular';\nimport _ from 'lodash';\nimport { DashboardModel } from './dashboard_model';\n\nexport class ChangeTracker {\n  current: any;\n  originalPath: any;\n  scope: any;\n  original: any;\n  next: any;\n  $window: any;\n\n  /** @ngInject */\n  constructor(\n    dashboard,\n    scope,\n    originalCopyDelay,\n    private $location,\n    $window,\n    private $timeout,\n    private contextSrv,\n    private $rootScope\n  ) {\n    this.$location = $location;\n    this.$window = $window;\n\n    this.current = dashboard;\n    this.originalPath = $location.path();\n    this.scope = scope;\n\n    // register events\n    scope.onAppEvent('dashboard-saved', () => {\n      this.original = this.current.getSaveModelClone();\n      this.originalPath = $location.path();\n    });\n\n    $window.onbeforeunload = () => {\n      if (this.ignoreChanges()) {\n        return undefined;\n      }\n      if (this.hasChanges()) {\n        return '此仪表盘有未保存的更改';\n      }\n      return undefined;\n    };\n\n    scope.$on('$locationChangeStart', (event, next) => {\n      // check if we should look for changes\n      if (this.originalPath === $location.path()) {\n        return true;\n      }\n      if (this.ignoreChanges()) {\n        return true;\n      }\n\n      if (this.hasChanges()) {\n        event.preventDefault();\n        this.next = next;\n\n        this.$timeout(() => {\n          this.open_modal();\n        });\n      }\n      return false;\n    });\n\n    if (originalCopyDelay) {\n      this.$timeout(() => {\n        // wait for different services to patch the dashboard (missing properties)\n        this.original = dashboard.getSaveModelClone();\n      }, originalCopyDelay);\n    } else {\n      this.original = dashboard.getSaveModelClone();\n    }\n  }\n\n  // for some dashboards and users\n  // changes should be ignored\n  ignoreChanges() {\n    if (!this.original) {\n      return true;\n    }\n    if (!this.contextSrv.isEditor) {\n      return true;\n    }\n    if (!this.current || !this.current.meta) {\n      return true;\n    }\n\n    const meta = this.current.meta;\n    return !meta.canSave || meta.fromScript || meta.fromFile;\n  }\n\n  // remove stuff that should not count in diff\n  cleanDashboardFromIgnoredChanges(dashData) {\n    // need to new up the domain model class to get access to expand / collapse row logic\n    const model = new DashboardModel(dashData);\n\n    // Expand all rows before making comparison. This is required because row expand / collapse\n    // change order of panel array and panel positions.\n    model.expandRows();\n\n    const dash = model.getSaveModelClone();\n\n    // ignore time and refresh\n    dash.time = 0;\n    dash.refresh = 0;\n    dash.schemaVersion = 0;\n\n    // ignore iteration property\n    delete dash.iteration;\n\n    dash.panels = _.filter(dash.panels, panel => {\n      if (panel.repeatPanelId) {\n        return false;\n      }\n\n      // remove scopedVars\n      panel.scopedVars = null;\n\n      // ignore panel legend sort\n      if (panel.legend) {\n        delete panel.legend.sort;\n        delete panel.legend.sortDesc;\n      }\n\n      return true;\n    });\n\n    // ignore template variable values\n    _.each(dash.templating.list, value => {\n      value.current = null;\n      value.options = null;\n      value.filters = null;\n    });\n\n    return dash;\n  }\n\n  hasChanges() {\n    const current = this.cleanDashboardFromIgnoredChanges(this.current.getSaveModelClone());\n    const original = this.cleanDashboardFromIgnoredChanges(this.original);\n\n    const currentTimepicker = _.find(current.nav, { type: 'timepicker' });\n    const originalTimepicker = _.find(original.nav, { type: 'timepicker' });\n\n    if (currentTimepicker && originalTimepicker) {\n      currentTimepicker.now = originalTimepicker.now;\n    }\n\n    const currentJson = angular.toJson(current, true);\n    const originalJson = angular.toJson(original, true);\n\n    return currentJson !== originalJson;\n  }\n\n  discardChanges() {\n    this.original = null;\n    this.gotoNext();\n  }\n\n  open_modal() {\n    this.$rootScope.appEvent('show-modal', {\n      templateHtml: '<unsaved-changes-modal dismiss=\"dismiss()\"></unsaved-changes-modal>',\n      modalClass: 'modal--narrow confirm-modal',\n    });\n  }\n\n  saveChanges() {\n    const self = this;\n    const cancel = this.$rootScope.$on('dashboard-saved', () => {\n      cancel();\n      this.$timeout(() => {\n        self.gotoNext();\n      });\n    });\n\n    this.$rootScope.appEvent('save-dashboard');\n  }\n\n  gotoNext() {\n    const baseLen = this.$location.absUrl().length - this.$location.url().length;\n    const nextUrl = this.next.substring(baseLen);\n    this.$location.url(nextUrl);\n  }\n}\n","import angular from 'angular';\nimport { ChangeTracker } from './change_tracker';\n\n/** @ngInject */\nexport function unsavedChangesSrv(this: any, $rootScope, $q, $location, $timeout, contextSrv, dashboardSrv, $window) {\n  this.init = function(dashboard, scope) {\n    this.tracker = new ChangeTracker(dashboard, scope, 1000, $location, $window, $timeout, contextSrv, $rootScope);\n    return this.tracker;\n  };\n}\n\nangular.module('grafana.services').service('unsavedChangesSrv', unsavedChangesSrv);\n","import coreModule from 'app/core/core_module';\n\nconst template = `\n<div class=\"modal-body\">\n  <div class=\"modal-header\">\n    <h2 class=\"modal-header-title\">\n      <i class=\"fa fa-exclamation\"></i>\n      <span class=\"p-l-1\">未保存的更改</span>\n    </h2>\n\n    <a class=\"modal-header-close\" ng-click=\"ctrl.dismiss();\">\n      <i class=\"fa fa-remove\"></i>\n    </a>\n  </div>\n\n  <div class=\"modal-content text-center\">\n\n    <div class=\"confirm-modal-text\">\n      要保存更改吗?\n    </div>\n\n    <div class=\"confirm-modal-buttons\">\n      <button type=\"button\" class=\"btn btn-success\" ng-click=\"ctrl.save()\">保存</button>\n      <button type=\"button\" class=\"btn btn-danger\" ng-click=\"ctrl.discard()\">放弃</button>\n      <button type=\"button\" class=\"btn btn-inverse\" ng-click=\"ctrl.dismiss()\">取消</button>\n    </div>\n  </div>\n</div>\n`;\n\nexport class UnsavedChangesModalCtrl {\n  clone: any;\n  dismiss: () => void;\n\n  /** @ngInject */\n  constructor(private unsavedChangesSrv) {}\n\n  discard() {\n    this.dismiss();\n    this.unsavedChangesSrv.tracker.discardChanges();\n  }\n\n  save() {\n    this.dismiss();\n    this.unsavedChangesSrv.tracker.saveChanges();\n  }\n}\n\nexport function unsavedChangesModalDirective() {\n  return {\n    restrict: 'E',\n    template: template,\n    controller: UnsavedChangesModalCtrl,\n    bindToController: true,\n    controllerAs: 'ctrl',\n    scope: { dismiss: '&' },\n  };\n}\n\ncoreModule.directive('unsavedChangesModal', unsavedChangesModalDirective);\n","import moment from 'moment';\nimport * as dateMath from 'app/core/utils/datemath';\n\nexport function inputDateDirective() {\n  return {\n    restrict: 'A',\n    require: 'ngModel',\n    link: ($scope, $elem, attrs, ngModel) => {\n      const format = 'YYYY-MM-DD HH:mm:ss';\n\n      const fromUser = text => {\n        if (text.indexOf('now') !== -1) {\n          if (!dateMath.isValid(text)) {\n            ngModel.$setValidity('error', false);\n            return undefined;\n          }\n          ngModel.$setValidity('error', true);\n          return text;\n        }\n\n        let parsed;\n        if ($scope.ctrl.isUtc) {\n          parsed = moment.utc(text, format);\n        } else {\n          parsed = moment(text, format);\n        }\n\n        if (!parsed.isValid()) {\n          ngModel.$setValidity('error', false);\n          return undefined;\n        }\n\n        ngModel.$setValidity('error', true);\n        return parsed;\n      };\n\n      const toUser = currentValue => {\n        if (moment.isMoment(currentValue)) {\n          return currentValue.format(format);\n        } else {\n          return currentValue;\n        }\n      };\n\n      ngModel.$parsers.push(fromUser);\n      ngModel.$formatters.push(toUser);\n    },\n  };\n}\n","import _ from 'lodash';\nimport angular from 'angular';\nimport moment from 'moment';\n\nimport * as rangeUtil from 'app/core/utils/rangeutil';\n\nexport class TimePickerCtrl {\n  static tooltipFormat = 'MMM D, YYYY HH:mm:ss';\n  static defaults = {\n    time_options: ['5m', '15m', '1h', '6h', '12h', '24h', '2d', '7d', '30d'],\n    refresh_intervals: ['5s', '10s', '30s', '1m', '5m', '15m', '30m', '1h', '2h', '1d'],\n  };\n\n  dashboard: any;\n  panel: any;\n  absolute: any;\n  timeRaw: any;\n  editTimeRaw: any;\n  tooltip: string;\n  rangeString: string;\n  timeOptions: any;\n  refresh: any;\n  isUtc: boolean;\n  firstDayOfWeek: number;\n  isOpen: boolean;\n  isAbsolute: boolean;\n\n  /** @ngInject */\n  constructor(private $scope, private $rootScope, private timeSrv) {\n    this.$scope.ctrl = this;\n\n    $rootScope.onAppEvent('shift-time-forward', () => this.move(1), $scope);\n    $rootScope.onAppEvent('shift-time-backward', () => this.move(-1), $scope);\n    $rootScope.onAppEvent('refresh', this.onRefresh.bind(this), $scope);\n    $rootScope.onAppEvent('closeTimepicker', this.openDropdown.bind(this), $scope);\n\n    // init options\n    this.panel = this.dashboard.timepicker;\n    _.defaults(this.panel, TimePickerCtrl.defaults);\n    this.firstDayOfWeek = moment.localeData().firstDayOfWeek();\n\n    // init time stuff\n    this.onRefresh();\n  }\n\n  onRefresh() {\n    const time = angular.copy(this.timeSrv.timeRange());\n    const timeRaw = angular.copy(time.raw);\n\n    if (!this.dashboard.isTimezoneUtc()) {\n      time.from.local();\n      time.to.local();\n      if (moment.isMoment(timeRaw.from)) {\n        timeRaw.from.local();\n      }\n      if (moment.isMoment(timeRaw.to)) {\n        timeRaw.to.local();\n      }\n      this.isUtc = false;\n    } else {\n      this.isUtc = true;\n    }\n\n    this.rangeString = rangeUtil.describeTimeRange(timeRaw);\n    this.absolute = { fromJs: time.from.toDate(), toJs: time.to.toDate() };\n    this.tooltip = this.dashboard.formatDate(time.from) + ' <br>to<br>';\n    this.tooltip += this.dashboard.formatDate(time.to);\n    this.timeRaw = timeRaw;\n    this.isAbsolute = moment.isMoment(this.timeRaw.to);\n  }\n\n  zoom(factor) {\n    this.$rootScope.appEvent('zoom-out', 2);\n  }\n\n  move(direction) {\n    const range = this.timeSrv.timeRange();\n\n    const timespan = (range.to.valueOf() - range.from.valueOf()) / 2;\n    let to, from;\n    if (direction === -1) {\n      to = range.to.valueOf() - timespan;\n      from = range.from.valueOf() - timespan;\n    } else if (direction === 1) {\n      to = range.to.valueOf() + timespan;\n      from = range.from.valueOf() + timespan;\n      if (to > Date.now() && range.to < Date.now()) {\n        to = Date.now();\n        from = range.from.valueOf();\n      }\n    } else {\n      to = range.to.valueOf();\n      from = range.from.valueOf();\n    }\n\n    this.timeSrv.setTime({ from: moment.utc(from), to: moment.utc(to) });\n  }\n\n  openDropdown() {\n    if (this.isOpen) {\n      this.closeDropdown();\n      return;\n    }\n\n    this.onRefresh();\n    this.editTimeRaw = this.timeRaw;\n    this.timeOptions = rangeUtil.getRelativeTimesList(this.panel, this.rangeString);\n    this.refresh = {\n      value: this.dashboard.refresh,\n      options: _.map(this.panel.refresh_intervals, (interval: any) => {\n        return { text: interval, value: interval };\n      }),\n    };\n\n    this.refresh.options.unshift({ text: 'off' });\n    this.isOpen = true;\n    this.$rootScope.appEvent('timepickerOpen');\n  }\n\n  closeDropdown() {\n    this.isOpen = false;\n    this.$rootScope.appEvent('timepickerClosed');\n  }\n\n  applyCustom() {\n    if (this.refresh.value !== this.dashboard.refresh) {\n      this.timeSrv.setAutoRefresh(this.refresh.value);\n    }\n\n    this.timeSrv.setTime(this.editTimeRaw);\n    this.closeDropdown();\n  }\n\n  absoluteFromChanged() {\n    this.editTimeRaw.from = this.getAbsoluteMomentForTimezone(this.absolute.fromJs);\n  }\n\n  absoluteToChanged() {\n    this.editTimeRaw.to = this.getAbsoluteMomentForTimezone(this.absolute.toJs);\n  }\n\n  getAbsoluteMomentForTimezone(jsDate) {\n    return this.dashboard.isTimezoneUtc() ? moment(jsDate).utc() : moment(jsDate);\n  }\n\n  setRelativeFilter(timespan) {\n    const range = { from: timespan.from, to: timespan.to };\n\n    if (this.panel.nowDelay && range.to === 'now') {\n      range.to = 'now-' + this.panel.nowDelay;\n    }\n\n    this.timeSrv.setTime(range);\n    this.closeDropdown();\n  }\n}\n\nexport function settingsDirective() {\n  return {\n    restrict: 'E',\n    templateUrl: 'public/app/features/dashboard/timepicker/settings.html',\n    controller: TimePickerCtrl,\n    bindToController: true,\n    controllerAs: 'ctrl',\n    scope: {\n      dashboard: '=',\n    },\n  };\n}\n\nexport function timePickerDirective() {\n  return {\n    restrict: 'E',\n    templateUrl: 'public/app/features/dashboard/timepicker/timepicker.html',\n    controller: TimePickerCtrl,\n    bindToController: true,\n    controllerAs: 'ctrl',\n    scope: {\n      dashboard: '=',\n    },\n  };\n}\n\nangular.module('grafana.directives').directive('gfTimePickerSettings', settingsDirective);\nangular.module('grafana.directives').directive('gfTimePicker', timePickerDirective);\n\nimport { inputDateDirective } from './input_date';\nangular.module('grafana.directives').directive('inputDatetime', inputDateDirective);\n","import coreModule from 'app/core/core_module';\n\nconst template = `\n<input type=\"file\" id=\"dashupload\" name=\"dashupload\" class=\"hide\"/>\n<label class=\"btn btn-success\" for=\"dashupload\">\n  <i class=\"fa fa-upload\"></i>\n  上传 .json 文件\n</label>\n`;\n\n/** @ngInject */\nfunction uploadDashboardDirective(timer, alertSrv, $location) {\n  return {\n    restrict: 'E',\n    template: template,\n    scope: {\n      onUpload: '&',\n    },\n    link: scope => {\n      function file_selected(evt) {\n        const files = evt.target.files; // FileList object\n        const readerOnload = () => {\n          return e => {\n            let dash;\n            try {\n              dash = JSON.parse(e.target.result);\n            } catch (err) {\n              console.log(err);\n              scope.appEvent('alert-error', ['导入失败', 'JSON -> JS序列化失败: ' + err.message]);\n              return;\n            }\n\n            scope.$apply(() => {\n              scope.onUpload({ dash: dash });\n            });\n          };\n        };\n\n        let i = 0;\n        let file = files[i];\n\n        while (file) {\n          const reader = new FileReader();\n          reader.onload = readerOnload();\n          reader.readAsText(file);\n          i += 1;\n          file = files[i];\n        }\n      }\n\n      const wnd: any = window;\n      // Check for the various File API support.\n      if (wnd.File && wnd.FileReader && wnd.FileList && wnd.Blob) {\n        // Something\n        document.getElementById('dashupload').addEventListener('change', file_selected, false);\n      } else {\n        alertSrv.set('Oops', '抱歉，此浏览器不完全支持HTML5文件API', 'error');\n      }\n    },\n  };\n}\n\ncoreModule.directive('dashUpload', uploadDashboardDirective);\n","import config from 'app/core/config';\nimport _ from 'lodash';\nimport { DashboardModel } from '../dashboard_model';\n\nexport class DashboardExporter {\n  constructor(private datasourceSrv) {}\n\n  makeExportable(dashboard: DashboardModel) {\n    // clean up repeated rows and panels,\n    // this is done on the live real dashboard instance, not on a clone\n    // so we need to undo this\n    // this is pretty hacky and needs to be changed\n    dashboard.cleanUpRepeats();\n\n    const saveModel = dashboard.getSaveModelClone();\n    saveModel.id = null;\n\n    // undo repeat cleanup\n    dashboard.processRepeats();\n\n    const inputs = [];\n    const requires = {};\n    const datasources = {};\n    const promises = [];\n    const variableLookup: any = {};\n\n    for (const variable of saveModel.templating.list) {\n      variableLookup[variable.name] = variable;\n    }\n\n    const templateizeDatasourceUsage = obj => {\n      // ignore data source properties that contain a variable\n      if (obj.datasource && obj.datasource.indexOf('$') === 0) {\n        if (variableLookup[obj.datasource.substring(1)]) {\n          return;\n        }\n      }\n\n      promises.push(\n        this.datasourceSrv.get(obj.datasource).then(ds => {\n          if (ds.meta.builtIn) {\n            return;\n          }\n\n          const refName = 'DS_' + ds.name.replace(' ', '_').toUpperCase();\n          datasources[refName] = {\n            name: refName,\n            label: ds.name,\n            description: '',\n            type: 'datasource',\n            pluginId: ds.meta.id,\n            pluginName: ds.meta.name,\n          };\n          obj.datasource = '${' + refName + '}';\n\n          requires['datasource' + ds.meta.id] = {\n            type: 'datasource',\n            id: ds.meta.id,\n            name: ds.meta.name,\n            version: ds.meta.info.version || '1.0.0',\n          };\n        })\n      );\n    };\n\n    const processPanel = panel => {\n      if (panel.datasource !== undefined) {\n        templateizeDatasourceUsage(panel);\n      }\n\n      if (panel.targets) {\n        for (const target of panel.targets) {\n          if (target.datasource !== undefined) {\n            templateizeDatasourceUsage(target);\n          }\n        }\n      }\n\n      const panelDef = config.panels[panel.type];\n      if (panelDef) {\n        requires['panel' + panelDef.id] = {\n          type: 'panel',\n          id: panelDef.id,\n          name: panelDef.name,\n          version: panelDef.info.version,\n        };\n      }\n    };\n\n    // check up panel data sources\n    for (const panel of saveModel.panels) {\n      processPanel(panel);\n\n      // handle collapsed rows\n      if (panel.collapsed !== undefined && panel.collapsed === true && panel.panels) {\n        for (const rowPanel of panel.panels) {\n          processPanel(rowPanel);\n        }\n      }\n    }\n\n    // templatize template vars\n    for (const variable of saveModel.templating.list) {\n      if (variable.type === 'query') {\n        templateizeDatasourceUsage(variable);\n        variable.options = [];\n        variable.current = {};\n        variable.refresh = variable.refresh > 0 ? variable.refresh : 1;\n      }\n    }\n\n    // templatize annotations vars\n    for (const annotationDef of saveModel.annotations.list) {\n      templateizeDatasourceUsage(annotationDef);\n    }\n\n    // add grafana version\n    requires['grafana'] = {\n      type: 'grafana',\n      id: 'grafana',\n      name: 'Grafana',\n      version: config.buildInfo.version,\n    };\n\n    return Promise.all(promises)\n      .then(() => {\n        _.each(datasources, (value, key) => {\n          inputs.push(value);\n        });\n\n        // templatize constants\n        for (const variable of saveModel.templating.list) {\n          if (variable.type === 'constant') {\n            const refName = 'VAR_' + variable.name.replace(' ', '_').toUpperCase();\n            inputs.push({\n              name: refName,\n              type: 'constant',\n              label: variable.label || variable.name,\n              value: variable.current.value,\n              description: '',\n            });\n            // update current and option\n            variable.query = '${' + refName + '}';\n            variable.options[0] = variable.current = {\n              value: variable.query,\n              text: variable.query,\n            };\n          }\n        }\n\n        // make inputs and requires a top thing\n        const newObj = {};\n        newObj['__inputs'] = inputs;\n        newObj['__requires'] = _.sortBy(requires, ['id']);\n\n        _.defaults(newObj, saveModel);\n        return newObj;\n      })\n      .catch(err => {\n        console.log('Export failed:', err);\n        return {\n          error: err,\n        };\n      });\n  }\n}\n","import angular from 'angular';\nimport { saveAs } from 'file-saver';\n\nimport coreModule from 'app/core/core_module';\nimport { DashboardExporter } from './exporter';\n\nexport class DashExportCtrl {\n  dash: any;\n  exporter: DashboardExporter;\n  dismiss: () => void;\n\n  /** @ngInject */\n  constructor(private dashboardSrv, datasourceSrv, private $scope, private $rootScope) {\n    this.exporter = new DashboardExporter(datasourceSrv);\n\n    this.exporter.makeExportable(this.dashboardSrv.getCurrent()).then(dash => {\n      this.$scope.$apply(() => {\n        this.dash = dash;\n      });\n    });\n  }\n\n  save() {\n    const blob = new Blob([angular.toJson(this.dash, true)], {\n      type: 'application/json;charset=utf-8',\n    });\n    saveAs(blob, this.dash.title + '-' + new Date().getTime() + '.json');\n  }\n\n  saveJson() {\n    const clone = this.dash;\n    const editScope = this.$rootScope.$new();\n    editScope.object = clone;\n    editScope.enableCopy = true;\n\n    this.$rootScope.appEvent('show-modal', {\n      src: 'public/app/partials/edit_json.html',\n      scope: editScope,\n    });\n\n    this.dismiss();\n  }\n}\n\nexport function dashExportDirective() {\n  return {\n    restrict: 'E',\n    templateUrl: 'public/app/features/dashboard/export/export_modal.html',\n    controller: DashExportCtrl,\n    bindToController: true,\n    controllerAs: 'ctrl',\n    scope: { dismiss: '&' },\n  };\n}\n\ncoreModule.directive('dashExportModal', dashExportDirective);\n","import angular from 'angular';\nimport * as fileExport from 'app/core/utils/file_export';\nimport appEvents from 'app/core/app_events';\n\nexport class ExportDataModalCtrl {\n  private data: any[];\n  private panel: string;\n  asRows = true;\n  dateTimeFormat = 'YYYY-MM-DDTHH:mm:ssZ';\n  excel = false;\n\n  export() {\n    if (this.panel === 'table') {\n      fileExport.exportTableDataToCsv(this.data, this.excel);\n    } else {\n      if (this.asRows) {\n        fileExport.exportSeriesListToCsv(this.data, this.dateTimeFormat, this.excel);\n      } else {\n        fileExport.exportSeriesListToCsvColumns(this.data, this.dateTimeFormat, this.excel);\n      }\n    }\n\n    this.dismiss();\n  }\n\n  dismiss() {\n    appEvents.emit('hide-modal');\n  }\n}\n\nexport function exportDataModal() {\n  return {\n    restrict: 'E',\n    templateUrl: 'public/app/features/dashboard/export_data/export_data_modal.html',\n    controller: ExportDataModalCtrl,\n    controllerAs: 'ctrl',\n    scope: {\n      panel: '<',\n      data: '<', // The difference to '=' is that the bound properties are not watched\n    },\n    bindToController: true,\n  };\n}\n\nangular.module('grafana.directives').directive('exportDataModal', exportDataModal);\n","import _ from 'lodash';\nimport angular from 'angular';\nimport coreModule from 'app/core/core_module';\n\nexport class AdHocFiltersCtrl {\n  segments: any;\n  variable: any;\n  removeTagFilterSegment: any;\n\n  /** @ngInject */\n  constructor(\n    private uiSegmentSrv,\n    private datasourceSrv,\n    private $q,\n    private variableSrv,\n    $scope,\n    private $rootScope\n  ) {\n    this.removeTagFilterSegment = uiSegmentSrv.newSegment({\n      fake: true,\n      value: '-- remove filter --',\n    });\n    this.buildSegmentModel();\n    this.$rootScope.onAppEvent('template-variable-value-updated', this.buildSegmentModel.bind(this), $scope);\n  }\n\n  buildSegmentModel() {\n    this.segments = [];\n\n    if (this.variable.value && !_.isArray(this.variable.value)) {\n    }\n\n    for (const tag of this.variable.filters) {\n      if (this.segments.length > 0) {\n        this.segments.push(this.uiSegmentSrv.newCondition('AND'));\n      }\n\n      if (tag.key !== undefined && tag.value !== undefined) {\n        this.segments.push(this.uiSegmentSrv.newKey(tag.key));\n        this.segments.push(this.uiSegmentSrv.newOperator(tag.operator));\n        this.segments.push(this.uiSegmentSrv.newKeyValue(tag.value));\n      }\n    }\n\n    this.segments.push(this.uiSegmentSrv.newPlusButton());\n  }\n\n  getOptions(segment, index) {\n    if (segment.type === 'operator') {\n      return this.$q.when(this.uiSegmentSrv.newOperators(['=', '!=', '<', '>', '=~', '!~']));\n    }\n\n    if (segment.type === 'condition') {\n      return this.$q.when([this.uiSegmentSrv.newSegment('AND')]);\n    }\n\n    return this.datasourceSrv.get(this.variable.datasource).then(ds => {\n      const options: any = {};\n      let promise = null;\n\n      if (segment.type !== 'value') {\n        promise = ds.getTagKeys();\n      } else {\n        options.key = this.segments[index - 2].value;\n        promise = ds.getTagValues(options);\n      }\n\n      return promise.then(results => {\n        results = _.map(results, segment => {\n          return this.uiSegmentSrv.newSegment({ value: segment.text });\n        });\n\n        // add remove option for keys\n        if (segment.type === 'key') {\n          results.splice(0, 0, angular.copy(this.removeTagFilterSegment));\n        }\n        return results;\n      });\n    });\n  }\n\n  segmentChanged(segment, index) {\n    this.segments[index] = segment;\n\n    // handle remove tag condition\n    if (segment.value === this.removeTagFilterSegment.value) {\n      this.segments.splice(index, 3);\n      if (this.segments.length === 0) {\n        this.segments.push(this.uiSegmentSrv.newPlusButton());\n      } else if (this.segments.length > 2) {\n        this.segments.splice(Math.max(index - 1, 0), 1);\n        if (this.segments[this.segments.length - 1].type !== 'plus-button') {\n          this.segments.push(this.uiSegmentSrv.newPlusButton());\n        }\n      }\n    } else {\n      if (segment.type === 'plus-button') {\n        if (index > 2) {\n          this.segments.splice(index, 0, this.uiSegmentSrv.newCondition('AND'));\n        }\n        this.segments.push(this.uiSegmentSrv.newOperator('='));\n        this.segments.push(this.uiSegmentSrv.newFake('select tag value', 'value', 'query-segment-value'));\n        segment.type = 'key';\n        segment.cssClass = 'query-segment-key';\n      }\n\n      if (index + 1 === this.segments.length) {\n        this.segments.push(this.uiSegmentSrv.newPlusButton());\n      }\n    }\n\n    this.updateVariableModel();\n  }\n\n  updateVariableModel() {\n    const filters = [];\n    let filterIndex = -1;\n    let hasFakes = false;\n\n    this.segments.forEach(segment => {\n      if (segment.type === 'value' && segment.fake) {\n        hasFakes = true;\n        return;\n      }\n\n      switch (segment.type) {\n        case 'key': {\n          filters.push({ key: segment.value });\n          filterIndex += 1;\n          break;\n        }\n        case 'value': {\n          filters[filterIndex].value = segment.value;\n          break;\n        }\n        case 'operator': {\n          filters[filterIndex].operator = segment.value;\n          break;\n        }\n        case 'condition': {\n          filters[filterIndex].condition = segment.value;\n          break;\n        }\n      }\n    });\n\n    if (hasFakes) {\n      return;\n    }\n\n    this.variable.setFilters(filters);\n    this.variableSrv.variableUpdated(this.variable, true);\n  }\n}\n\nconst template = `\n<div class=\"gf-form-inline\">\n  <div class=\"gf-form\" ng-repeat=\"segment in ctrl.segments\">\n    <metric-segment segment=\"segment\" get-options=\"ctrl.getOptions(segment, $index)\"\n                    on-change=\"ctrl.segmentChanged(segment, $index)\"></metric-segment>\n  </div>\n</div>\n`;\n\nexport function adHocFiltersComponent() {\n  return {\n    restrict: 'E',\n    template: template,\n    controller: AdHocFiltersCtrl,\n    bindToController: true,\n    controllerAs: 'ctrl',\n    scope: {\n      variable: '=',\n    },\n  };\n}\n\ncoreModule.directive('adHocFilters', adHocFiltersComponent);\n","import { coreModule } from 'app/core/core';\n\nconst template = `\n<div class=\"gf-form-select-wrapper max-width-18\">\n  <select class=\"gf-form-input\" ng-model=\"panel.repeat\" ng-options=\"f.value as f.text for f in variables\" ng-change=\"optionChanged()\">\n  <option value=\"\"></option>\n</div>\n`;\n\n/** @ngInject */\nfunction dashRepeatOptionDirective(variableSrv) {\n  return {\n    restrict: 'E',\n    template: template,\n    scope: {\n      panel: '=',\n    },\n    link: (scope, element) => {\n      element.css({ display: 'block', width: '100%' });\n\n      scope.variables = variableSrv.variables.map(item => {\n        return { text: item.name, value: item.name };\n      });\n\n      if (scope.variables.length === 0) {\n        scope.variables.unshift({\n          text: '暂无模板变量',\n          value: null,\n        });\n      }\n\n      scope.variables.unshift({ text: 'Disabled', value: null });\n\n      // if repeat is set and no direction set to horizontal\n      if (scope.panel.repeat && !scope.panel.repeatDirection) {\n        scope.panel.repeatDirection = 'h';\n      }\n\n      scope.optionChanged = () => {\n        if (scope.panel.repeat) {\n          scope.panel.repeatDirection = 'h';\n        }\n      };\n    },\n  };\n}\n\ncoreModule.directive('dashRepeatOption', dashRepeatOptionDirective);\n","import React from 'react';\nimport classNames from 'classnames';\nimport { PanelModel } from '../panel_model';\nimport { PanelContainer } from './PanelContainer';\nimport templateSrv from 'app/features/templating/template_srv';\nimport appEvents from 'app/core/app_events';\n\nexport interface DashboardRowProps {\n  panel: PanelModel;\n  getPanelContainer: () => PanelContainer;\n}\n\nexport class DashboardRow extends React.Component<DashboardRowProps, any> {\n  dashboard: any;\n  panelContainer: any;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      collapsed: this.props.panel.collapsed,\n    };\n\n    this.panelContainer = this.props.getPanelContainer();\n    this.dashboard = this.panelContainer.getDashboard();\n\n    this.toggle = this.toggle.bind(this);\n    this.openSettings = this.openSettings.bind(this);\n    this.delete = this.delete.bind(this);\n    this.update = this.update.bind(this);\n  }\n\n  toggle() {\n    this.dashboard.toggleRow(this.props.panel);\n\n    this.setState(prevState => {\n      return { collapsed: !prevState.collapsed };\n    });\n  }\n\n  update() {\n    this.dashboard.processRepeats();\n    this.forceUpdate();\n  }\n\n  openSettings() {\n    appEvents.emit('show-modal', {\n      templateHtml: `<row-options row=\"model.row\" on-updated=\"model.onUpdated()\" dismiss=\"dismiss()\"></row-options>`,\n      modalClass: 'modal--narrow',\n      model: {\n        row: this.props.panel,\n        onUpdated: this.update.bind(this),\n      },\n    });\n  }\n\n  delete() {\n    appEvents.emit('confirm-modal', {\n      title: '删除行',\n      text: '确定想要删除删除该行及下属所有面板?',\n      altActionText: '只删除行',\n      icon: 'fa-trash',\n      onConfirm: () => {\n        const panelContainer = this.props.getPanelContainer();\n        const dashboard = panelContainer.getDashboard();\n        dashboard.removeRow(this.props.panel, true);\n      },\n      onAltAction: () => {\n        const panelContainer = this.props.getPanelContainer();\n        const dashboard = panelContainer.getDashboard();\n        dashboard.removeRow(this.props.panel, false);\n      },\n    });\n  }\n\n  render() {\n    const classes = classNames({\n      'dashboard-row': true,\n      'dashboard-row--collapsed': this.state.collapsed,\n    });\n    const chevronClass = classNames({\n      fa: true,\n      'fa-chevron-down': !this.state.collapsed,\n      'fa-chevron-right': this.state.collapsed,\n    });\n\n    const title = templateSrv.replaceWithText(this.props.panel.title, this.props.panel.scopedVars);\n    const count = this.props.panel.panels ? this.props.panel.panels.length : 0;\n    const panels = count === 1 ? 'panel' : 'panels';\n\n    return (\n      <div className={classes}>\n        <a className=\"dashboard-row__title pointer\" onClick={this.toggle}>\n          <i className={chevronClass} />\n          {title}\n          <span className=\"dashboard-row__panel_count\">\n            ({count} {panels})\n          </span>\n        </a>\n        {this.dashboard.meta.canEdit === true && (\n          <div className=\"dashboard-row__actions\">\n            <a className=\"pointer\" onClick={this.openSettings}>\n              <i className=\"fa fa-cog\" />\n            </a>\n            <a className=\"pointer\" onClick={this.delete}>\n              <i className=\"fa fa-trash\" />\n            </a>\n          </div>\n        )}\n        {this.state.collapsed === true && (\n          <div className=\"dashboard-row__toggle-target\" onClick={this.toggle}>\n            &nbsp;\n          </div>\n        )}\n        <div className=\"dashboard-row__drag grid-drag-handle\" />\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport baron from 'baron';\n\nexport interface Props {\n  children: any;\n  className: string;\n}\n\nexport default class ScrollBar extends React.Component<Props, any> {\n  private container: any;\n  private scrollbar: baron;\n\n  constructor(props) {\n    super(props);\n  }\n\n  componentDidMount() {\n    this.scrollbar = baron({\n      root: this.container.parentElement,\n      scroller: this.container,\n      bar: '.baron__bar',\n      barOnCls: '_scrollbar',\n      scrollingCls: '_scrolling',\n      track: '.baron__track',\n    });\n  }\n\n  componentDidUpdate() {\n    this.scrollbar.update();\n  }\n\n  componentWillUnmount() {\n    this.scrollbar.dispose();\n  }\n\n  // methods can be invoked by outside\n  setScrollTop(top) {\n    if (this.container) {\n      this.container.scrollTop = top;\n      this.scrollbar.update();\n\n      return true;\n    }\n    return false;\n  }\n\n  setScrollLeft(left) {\n    if (this.container) {\n      this.container.scrollLeft = left;\n      this.scrollbar.update();\n\n      return true;\n    }\n    return false;\n  }\n\n  update() {\n    this.scrollbar.update();\n  }\n\n  handleRef = ref => {\n    this.container = ref;\n  };\n\n  render() {\n    return (\n      <div className=\"baron baron__root baron__clipper\">\n        <div className={this.props.className + ' baron__scroller'} ref={this.handleRef}>\n          {this.props.children}\n        </div>\n\n        <div className=\"baron__track\">\n          <div className=\"baron__bar\" />\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport _ from 'lodash';\nimport classNames from 'classnames';\nimport config from 'app/core/config';\nimport { PanelModel } from '../panel_model';\nimport { PanelContainer } from './PanelContainer';\nimport ScrollBar from 'app/core/components/ScrollBar/ScrollBar';\nimport store from 'app/core/store';\nimport { LS_PANEL_COPY_KEY } from 'app/core/constants';\nimport Highlighter from 'react-highlight-words';\n\nexport interface AddPanelPanelProps {\n  panel: PanelModel;\n  getPanelContainer: () => PanelContainer;\n}\n\nexport interface AddPanelPanelState {\n  filter: string;\n  panelPlugins: any[];\n  copiedPanelPlugins: any[];\n  tab: string;\n}\n\nexport class AddPanelPanel extends React.Component<AddPanelPanelProps, AddPanelPanelState> {\n  private scrollbar: ScrollBar;\n\n  constructor(props) {\n    super(props);\n    this.handleCloseAddPanel = this.handleCloseAddPanel.bind(this);\n    this.renderPanelItem = this.renderPanelItem.bind(this);\n    this.panelSizeChanged = this.panelSizeChanged.bind(this);\n\n    this.state = {\n      panelPlugins: this.getPanelPlugins(''),\n      copiedPanelPlugins: this.getCopiedPanelPlugins(''),\n      filter: '',\n      tab: 'Add',\n    };\n  }\n\n  componentDidMount() {\n    this.props.panel.events.on('panel-size-changed', this.panelSizeChanged);\n  }\n\n  componentWillUnmount() {\n    this.props.panel.events.off('panel-size-changed', this.panelSizeChanged);\n  }\n\n  panelSizeChanged() {\n    setTimeout(() => {\n      this.scrollbar.update();\n    });\n  }\n\n  getPanelPlugins(filter) {\n    let panels = _.chain(config.panels)\n      .filter({ hideFromList: false })\n      .map(item => item)\n      .value();\n\n    // add special row type\n    panels.push({ id: 'row', name: 'Row', sort: 8, info: { logos: { small: 'public/img/icn-row.svg' } } });\n\n    panels = this.filterPanels(panels, filter);\n\n    // add sort by sort property\n    return _.sortBy(panels, 'sort');\n  }\n\n  getCopiedPanelPlugins(filter) {\n    const panels = _.chain(config.panels)\n      .filter({ hideFromList: false })\n      .map(item => item)\n      .value();\n    let copiedPanels = [];\n\n    const copiedPanelJson = store.get(LS_PANEL_COPY_KEY);\n    if (copiedPanelJson) {\n      const copiedPanel = JSON.parse(copiedPanelJson);\n      const pluginInfo = _.find(panels, { id: copiedPanel.type });\n      if (pluginInfo) {\n        const pluginCopy = _.cloneDeep(pluginInfo);\n        pluginCopy.name = copiedPanel.title;\n        pluginCopy.sort = -1;\n        pluginCopy.defaults = copiedPanel;\n        copiedPanels.push(pluginCopy);\n      }\n    }\n\n    copiedPanels = this.filterPanels(copiedPanels, filter);\n\n    return _.sortBy(copiedPanels, 'sort');\n  }\n\n  onAddPanel = panelPluginInfo => {\n    const panelContainer = this.props.getPanelContainer();\n    const dashboard = panelContainer.getDashboard();\n    const { gridPos } = this.props.panel;\n\n    const newPanel: any = {\n      type: panelPluginInfo.id,\n      title: '面板标题',\n      gridPos: { x: gridPos.x, y: gridPos.y, w: gridPos.w, h: gridPos.h },\n    };\n\n    if (panelPluginInfo.id === 'row') {\n      newPanel.title = '行标题';\n      newPanel.gridPos = { x: 0, y: 0 };\n    }\n\n    // apply panel template / defaults\n    if (panelPluginInfo.defaults) {\n      _.defaults(newPanel, panelPluginInfo.defaults);\n      newPanel.gridPos.w = panelPluginInfo.defaults.gridPos.w;\n      newPanel.gridPos.h = panelPluginInfo.defaults.gridPos.h;\n      newPanel.title = panelPluginInfo.defaults.title;\n      store.delete(LS_PANEL_COPY_KEY);\n    }\n\n    dashboard.addPanel(newPanel);\n    dashboard.removePanel(this.props.panel);\n  };\n\n  handleCloseAddPanel(evt) {\n    evt.preventDefault();\n    const panelContainer = this.props.getPanelContainer();\n    const dashboard = panelContainer.getDashboard();\n    dashboard.removePanel(dashboard.panels[0]);\n  }\n\n  renderText(text: string) {\n    const searchWords = this.state.filter.split('');\n    return <Highlighter highlightClassName=\"highlight-search-match\" textToHighlight={text} searchWords={searchWords} />;\n  }\n\n  renderPanelItem(panel, index) {\n    return (\n      <div key={index} className=\"add-panel__item\" onClick={() => this.onAddPanel(panel)} title={panel.name}>\n        <img className=\"add-panel__item-img\" src={panel.info.logos.small} />\n        <div className=\"add-panel__item-name\">{this.renderText(panel.name)}</div>\n      </div>\n    );\n  }\n\n  noCopiedPanelPlugins() {\n    return <div className=\"add-panel__no-panels\">暂无面板副本。</div>;\n  }\n\n  filterChange(evt) {\n    this.setState({\n      filter: evt.target.value,\n      panelPlugins: this.getPanelPlugins(evt.target.value),\n      copiedPanelPlugins: this.getCopiedPanelPlugins(evt.target.value),\n    });\n  }\n\n  filterKeyPress(evt) {\n    if (evt.key === 'Enter') {\n      const panel = _.head(this.state.panelPlugins);\n      if (panel) {\n        this.onAddPanel(panel);\n      }\n    }\n  }\n\n  filterPanels(panels, filter) {\n    const regex = new RegExp(filter, 'i');\n    return panels.filter(panel => {\n      return regex.test(panel.name);\n    });\n  }\n\n  openCopy() {\n    this.setState({\n      tab: 'Copy',\n      filter: '',\n      panelPlugins: this.getPanelPlugins(''),\n      copiedPanelPlugins: this.getCopiedPanelPlugins(''),\n    });\n  }\n\n  openAdd() {\n    this.setState({\n      tab: 'Add',\n      filter: '',\n      panelPlugins: this.getPanelPlugins(''),\n      copiedPanelPlugins: this.getCopiedPanelPlugins(''),\n    });\n  }\n\n  render() {\n    const addClass = classNames({\n      'active active--panel': this.state.tab === 'Add',\n      '': this.state.tab === 'Copy',\n    });\n\n    const copyClass = classNames({\n      '': this.state.tab === 'Add',\n      'active active--panel': this.state.tab === 'Copy',\n    });\n\n    let panelTab;\n\n    if (this.state.tab === 'Add') {\n      panelTab = this.state.panelPlugins.map(this.renderPanelItem);\n    } else if (this.state.tab === 'Copy') {\n      if (this.state.copiedPanelPlugins.length > 0) {\n        panelTab = this.state.copiedPanelPlugins.map(this.renderPanelItem);\n      } else {\n        panelTab = this.noCopiedPanelPlugins();\n      }\n    }\n\n    return (\n      <div className=\"panel-container add-panel-container\">\n        <div className=\"add-panel\">\n          <div className=\"add-panel__header\">\n            <i className=\"gicon gicon-add-panel\" />\n            <span className=\"add-panel__title\">添加面板</span>\n            <ul className=\"gf-tabs\">\n              <li className=\"gf-tabs-item\">\n                <div className={'gf-tabs-link pointer ' + addClass} onClick={this.openAdd.bind(this)}>\n                  添加\n                </div>\n              </li>\n              <li className=\"gf-tabs-item\">\n                <div className={'gf-tabs-link pointer ' + copyClass} onClick={this.openCopy.bind(this)}>\n                  粘贴\n                </div>\n              </li>\n            </ul>\n            <button className=\"add-panel__close\" onClick={this.handleCloseAddPanel}>\n              <i className=\"fa fa-close\" />\n            </button>\n          </div>\n          <ScrollBar ref={element => (this.scrollbar = element)} className=\"add-panel__items\">\n            <div className=\"add-panel__searchbar\">\n              <label className=\"gf-form gf-form--grow gf-form--has-input-icon\">\n                <input\n                  type=\"text\"\n                  autoFocus\n                  className=\"gf-form-input gf-form--grow\"\n                  placeholder=\"过滤搜索面板插件\"\n                  value={this.state.filter}\n                  onChange={this.filterChange.bind(this)}\n                  onKeyPress={this.filterKeyPress.bind(this)}\n                />\n                <i className=\"gf-form-input-icon fa fa-search\" />\n              </label>\n            </div>\n            {panelTab}\n          </ScrollBar>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport {PanelModel} from '../panel_model';\nimport {PanelContainer} from './PanelContainer';\nimport {AttachedPanel} from './PanelLoader';\nimport {DashboardRow} from './DashboardRow';\nimport {AddPanelPanel} from './AddPanelPanel';\n\nexport interface DashboardPanelProps {\n  panel: PanelModel;\n  getPanelContainer: () => PanelContainer;\n}\n\nexport class DashboardPanel extends React.Component<DashboardPanelProps, any> {\n  element: any;\n  attachedPanel: AttachedPanel;\n\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  componentDidMount() {\n    if (!this.element) {\n      return;\n    }\n\n    const panelContainer = this.props.getPanelContainer();\n    const dashboard = panelContainer.getDashboard();\n    const loader = panelContainer.getPanelLoader();\n    this.attachedPanel = loader.load(this.element, this.props.panel, dashboard);\n  }\n\n  componentWillUnmount() {\n    if (this.attachedPanel) {\n      this.attachedPanel.destroy();\n    }\n  }\n\n  render() {\n    // special handling for rows\n    if (this.props.panel.type === 'row') {\n      return <DashboardRow panel={this.props.panel} getPanelContainer={this.props.getPanelContainer} />;\n    }\n\n    if (this.props.panel.type === 'add-panel') {\n      return <AddPanelPanel panel={this.props.panel} getPanelContainer={this.props.getPanelContainer} />;\n    }\n\n    return (\n      <div ref={element => this.element = element} className=\"panel-height-helper\" />\n    );\n  }\n}\n\n","import React from 'react';\nimport ReactGridLayout from 'react-grid-layout';\nimport { GRID_CELL_HEIGHT, GRID_CELL_VMARGIN, GRID_COLUMN_COUNT } from 'app/core/constants';\nimport { DashboardPanel } from './DashboardPanel';\nimport { DashboardModel } from '../dashboard_model';\nimport { PanelContainer } from './PanelContainer';\nimport { PanelModel } from '../panel_model';\nimport classNames from 'classnames';\nimport sizeMe from 'react-sizeme';\n\nlet lastGridWidth = 1200;\n\nfunction GridWrapper({\n  size,\n  layout,\n  onLayoutChange,\n  children,\n  onDragStop,\n  onResize,\n  onResizeStop,\n  onWidthChange,\n  className,\n  isResizable,\n  isDraggable,\n}) {\n  if (size.width === 0) {\n    console.log('size is zero!');\n  }\n\n  const width = size.width > 0 ? size.width : lastGridWidth;\n  if (width !== lastGridWidth) {\n    onWidthChange();\n    lastGridWidth = width;\n  }\n\n  return (\n    <ReactGridLayout\n      width={lastGridWidth}\n      className={className}\n      isDraggable={isDraggable}\n      isResizable={isResizable}\n      measureBeforeMount={false}\n      containerPadding={[0, 0]}\n      useCSSTransforms={true}\n      margin={[GRID_CELL_VMARGIN, GRID_CELL_VMARGIN]}\n      cols={GRID_COLUMN_COUNT}\n      rowHeight={GRID_CELL_HEIGHT}\n      draggableHandle=\".grid-drag-handle\"\n      layout={layout}\n      onResize={onResize}\n      onResizeStop={onResizeStop}\n      onDragStop={onDragStop}\n      onLayoutChange={onLayoutChange}\n    >\n      {children}\n    </ReactGridLayout>\n  );\n}\n\nconst SizedReactLayoutGrid = sizeMe({ monitorWidth: true })(GridWrapper);\n\nexport interface DashboardGridProps {\n  getPanelContainer: () => PanelContainer;\n}\n\nexport class DashboardGrid extends React.Component<DashboardGridProps, any> {\n  gridToPanelMap: any;\n  panelContainer: PanelContainer;\n  dashboard: DashboardModel;\n  panelMap: { [id: string]: PanelModel };\n\n  constructor(props) {\n    super(props);\n    this.panelContainer = this.props.getPanelContainer();\n    this.onLayoutChange = this.onLayoutChange.bind(this);\n    this.onResize = this.onResize.bind(this);\n    this.onResizeStop = this.onResizeStop.bind(this);\n    this.onDragStop = this.onDragStop.bind(this);\n    this.onWidthChange = this.onWidthChange.bind(this);\n\n    this.state = { animated: false };\n\n    // subscribe to dashboard events\n    this.dashboard = this.panelContainer.getDashboard();\n    this.dashboard.on('panel-added', this.triggerForceUpdate.bind(this));\n    this.dashboard.on('panel-removed', this.triggerForceUpdate.bind(this));\n    this.dashboard.on('repeats-processed', this.triggerForceUpdate.bind(this));\n    this.dashboard.on('view-mode-changed', this.triggerForceUpdate.bind(this));\n    this.dashboard.on('row-collapsed', this.triggerForceUpdate.bind(this));\n    this.dashboard.on('row-expanded', this.triggerForceUpdate.bind(this));\n  }\n\n  buildLayout() {\n    const layout = [];\n    this.panelMap = {};\n\n    for (const panel of this.dashboard.panels) {\n      const stringId = panel.id.toString();\n      this.panelMap[stringId] = panel;\n\n      if (!panel.gridPos) {\n        console.log('panel without gridpos');\n        continue;\n      }\n\n      const panelPos: any = {\n        i: stringId,\n        x: panel.gridPos.x,\n        y: panel.gridPos.y,\n        w: panel.gridPos.w,\n        h: panel.gridPos.h,\n      };\n\n      if (panel.type === 'row') {\n        panelPos.w = GRID_COLUMN_COUNT;\n        panelPos.h = 1;\n        panelPos.isResizable = false;\n        panelPos.isDraggable = panel.collapsed;\n      }\n\n      layout.push(panelPos);\n    }\n\n    return layout;\n  }\n\n  onLayoutChange(newLayout) {\n    for (const newPos of newLayout) {\n      this.panelMap[newPos.i].updateGridPos(newPos);\n    }\n\n    this.dashboard.sortPanelsByGridPos();\n  }\n\n  triggerForceUpdate() {\n    this.forceUpdate();\n  }\n\n  onWidthChange() {\n    for (const panel of this.dashboard.panels) {\n      panel.resizeDone();\n    }\n  }\n\n  updateGridPos(item, layout) {\n    this.panelMap[item.i].updateGridPos(item);\n\n    // react-grid-layout has a bug (#670), and onLayoutChange() is only called when the component is mounted.\n    // So it's required to call it explicitly when panel resized or moved to save layout changes.\n    this.onLayoutChange(layout);\n  }\n\n  onResize(layout, oldItem, newItem) {\n    this.panelMap[newItem.i].updateGridPos(newItem);\n  }\n\n  onResizeStop(layout, oldItem, newItem) {\n    this.updateGridPos(newItem, layout);\n    this.panelMap[newItem.i].resizeDone();\n  }\n\n  onDragStop(layout, oldItem, newItem) {\n    this.updateGridPos(newItem, layout);\n  }\n\n  componentDidMount() {\n    setTimeout(() => {\n      this.setState(() => {\n        return { animated: true };\n      });\n    });\n  }\n\n  renderPanels() {\n    const panelElements = [];\n\n    for (const panel of this.dashboard.panels) {\n      const panelClasses = classNames({ panel: true, 'panel--fullscreen': panel.fullscreen });\n      panelElements.push(\n        /** panel-id is set for html bookmarks */\n        <div key={panel.id.toString()} className={panelClasses} id={`panel-${panel.id.toString()}`}>\n          <DashboardPanel panel={panel} getPanelContainer={this.props.getPanelContainer} />\n        </div>\n      );\n    }\n\n    return panelElements;\n  }\n\n  render() {\n    return (\n      <SizedReactLayoutGrid\n        className={classNames({ layout: true, animated: this.state.animated })}\n        layout={this.buildLayout()}\n        isResizable={this.dashboard.meta.canEdit}\n        isDraggable={this.dashboard.meta.canEdit}\n        onLayoutChange={this.onLayoutChange}\n        onWidthChange={this.onWidthChange}\n        onDragStop={this.onDragStop}\n        onResize={this.onResize}\n        onResizeStop={this.onResizeStop}\n      >\n        {this.renderPanels()}\n      </SizedReactLayoutGrid>\n    );\n  }\n}\n","import { react2AngularDirective } from 'app/core/utils/react2angular';\nimport { DashboardGrid } from './DashboardGrid';\n\nreact2AngularDirective('dashboardGrid', DashboardGrid, [\n  ['getPanelContainer', { watchDepth: 'reference', wrapApply: false }],\n]);\n","import angular from 'angular';\nimport coreModule from 'app/core/core_module';\n\nexport interface AttachedPanel {\n  destroy();\n}\n\nexport class PanelLoader {\n  /** @ngInject */\n  constructor(private $compile, private $rootScope) {}\n\n  load(elem, panel, dashboard): AttachedPanel {\n    const template = '<plugin-component type=\"panel\" class=\"panel-height-helper\"></plugin-component>';\n    const panelScope = this.$rootScope.$new();\n    panelScope.panel = panel;\n    panelScope.dashboard = dashboard;\n\n    const compiledElem = this.$compile(template)(panelScope);\n    const rootNode = angular.element(elem);\n    rootNode.append(compiledElem);\n\n    return {\n      destroy: () => {\n        panelScope.$destroy();\n        compiledElem.remove();\n      },\n    };\n  }\n}\n\ncoreModule.service('panelLoader', PanelLoader);\n","import { coreModule } from 'app/core/core';\n\nexport class RowOptionsCtrl {\n  row: any;\n  source: any;\n  dismiss: any;\n  onUpdated: any;\n  showDelete: boolean;\n\n  /** @ngInject */\n  constructor() {\n    this.source = this.row;\n    this.row = this.row.getSaveModel();\n  }\n\n  update() {\n    this.source.title = this.row.title;\n    this.source.repeat = this.row.repeat;\n    this.onUpdated();\n    this.dismiss();\n  }\n}\n\nexport function rowOptionsDirective() {\n  return {\n    restrict: 'E',\n    templateUrl: 'public/app/features/dashboard/partials/row_options.html',\n    controller: RowOptionsCtrl,\n    bindToController: true,\n    controllerAs: 'ctrl',\n    scope: {\n      row: '=',\n      dismiss: '&',\n      onUpdated: '&',\n    },\n  };\n}\n\ncoreModule.directive('rowOptions', rowOptionsDirective);\n","import _ from 'lodash';\nimport coreModule from 'app/core/core_module';\nimport appEvents from 'app/core/app_events';\n\nexport class FolderPickerCtrl {\n  initialTitle: string;\n  initialFolderId?: number;\n  labelClass: string;\n  onChange: any;\n  onLoad: any;\n  onCreateFolder: any;\n  enterFolderCreation: any;\n  exitFolderCreation: any;\n  enableCreateNew: boolean;\n  enableReset: boolean;\n  rootName = '通用';\n  folder: any;\n  createNewFolder: boolean;\n  newFolderName: string;\n  newFolderNameTouched: boolean;\n  hasValidationError: boolean;\n  validationError: any;\n  isEditor: boolean;\n\n  /** @ngInject */\n  constructor(private backendSrv, private validationSrv, private contextSrv) {\n    this.isEditor = this.contextSrv.isEditor;\n\n    if (!this.labelClass) {\n      this.labelClass = 'width-7';\n    }\n\n    this.loadInitialValue();\n  }\n\n  getOptions(query) {\n    const params = {\n      query: query,\n      type: 'dash-folder',\n      permission: 'Edit',\n    };\n\n    return this.backendSrv.get('api/search', params).then(result => {\n      if (\n        this.isEditor &&\n        (query === '' ||\n          query.toLowerCase() === 'g' ||\n          query.toLowerCase() === 'ge' ||\n          query.toLowerCase() === 'gen' ||\n          query.toLowerCase() === 'gene' ||\n          query.toLowerCase() === 'gener' ||\n          query.toLowerCase() === 'genera' ||\n          query.toLowerCase() === 'general')\n      ) {\n        result.unshift({ title: this.rootName, id: 0 });\n      }\n\n      if (this.isEditor && this.enableCreateNew && query === '') {\n        result.unshift({ title: '-- 新建文件夹 --', id: -1 });\n      }\n\n      if (this.enableReset && query === '' && this.initialTitle !== '') {\n        result.unshift({ title: this.initialTitle, id: null });\n      }\n\n      return _.map(result, item => {\n        return { text: item.title, value: item.id };\n      });\n    });\n  }\n\n  onFolderChange(option) {\n    if (!option) {\n      option = { value: 0, text: this.rootName };\n    } else if (option.value === -1) {\n      this.createNewFolder = true;\n      this.enterFolderCreation();\n      return;\n    }\n    this.onChange({ $folder: { id: option.value, title: option.text } });\n  }\n\n  newFolderNameChanged() {\n    this.newFolderNameTouched = true;\n\n    this.validationSrv\n      .validateNewFolderName(this.newFolderName)\n      .then(() => {\n        this.hasValidationError = false;\n      })\n      .catch(err => {\n        this.hasValidationError = true;\n        this.validationError = err.message;\n      });\n  }\n\n  createFolder(evt) {\n    if (evt) {\n      evt.stopPropagation();\n      evt.preventDefault();\n    }\n\n    return this.backendSrv.createFolder({ title: this.newFolderName }).then(result => {\n      appEvents.emit('alert-success', ['文件夹已创建', 'OK']);\n\n      this.closeCreateFolder();\n      this.folder = { text: result.title, value: result.id };\n      this.onFolderChange(this.folder);\n    });\n  }\n\n  cancelCreateFolder(evt) {\n    if (evt) {\n      evt.stopPropagation();\n      evt.preventDefault();\n    }\n\n    this.closeCreateFolder();\n    this.loadInitialValue();\n  }\n\n  private closeCreateFolder() {\n    this.exitFolderCreation();\n    this.createNewFolder = false;\n    this.hasValidationError = false;\n    this.validationError = null;\n    this.newFolderName = '';\n    this.newFolderNameTouched = false;\n  }\n\n  private loadInitialValue() {\n    const resetFolder = { text: this.initialTitle, value: null };\n    const rootFolder = { text: this.rootName, value: 0 };\n\n    this.getOptions('').then(result => {\n      let folder;\n      if (this.initialFolderId) {\n        folder = _.find(result, { value: this.initialFolderId });\n      } else if (this.enableReset && this.initialTitle && this.initialFolderId === null) {\n        folder = resetFolder;\n      }\n\n      if (!folder) {\n        if (this.isEditor) {\n          folder = rootFolder;\n        } else {\n          folder = result.length > 0 ? result[0] : resetFolder;\n        }\n      }\n\n      this.folder = folder;\n\n      // if this is not the same as our initial value notify parent\n      if (this.folder.value !== this.initialFolderId) {\n        this.onChange({ $folder: { id: this.folder.value, title: this.folder.text } });\n      }\n    });\n  }\n}\n\nexport function folderPicker() {\n  return {\n    restrict: 'E',\n    templateUrl: 'public/app/features/dashboard/folder_picker/folder_picker.html',\n    controller: FolderPickerCtrl,\n    bindToController: true,\n    controllerAs: 'ctrl',\n    scope: {\n      initialTitle: '<',\n      initialFolderId: '<',\n      labelClass: '@',\n      rootName: '@',\n      onChange: '&',\n      onCreateFolder: '&',\n      enterFolderCreation: '&',\n      exitFolderCreation: '&',\n      enableCreateNew: '@',\n      enableReset: '@',\n    },\n  };\n}\n\ncoreModule.directive('folderPicker', folderPicker);\n","import coreModule from 'app/core/core_module';\nimport appEvents from 'app/core/app_events';\n\nexport class MoveToFolderCtrl {\n  dashboards: any;\n  folder: any;\n  dismiss: any;\n  afterSave: any;\n  isValidFolderSelection = true;\n\n  /** @ngInject */\n  constructor(private backendSrv) {}\n\n  onFolderChange(folder) {\n    this.folder = folder;\n  }\n\n  save() {\n    return this.backendSrv.moveDashboards(this.dashboards, this.folder).then(result => {\n      if (result.successCount > 0) {\n        const header = `${result.successCount === 1 ? '' : 's'} 个仪表盘已移动`;\n        const msg = `${result.successCount} 个仪表盘 ${result.successCount === 1 ? '' : 's'} 移动到 ${\n          this.folder.title\n        }`;\n        appEvents.emit('alert-success', [header, msg]);\n      }\n\n      if (result.totalCount === result.alreadyInFolderCount) {\n        appEvents.emit('alert-error', ['错误', `该仪表盘已存在文件夹 ${this.folder.title} 中`]);\n      }\n\n      this.dismiss();\n      return this.afterSave();\n    });\n  }\n\n  onEnterFolderCreation() {\n    this.isValidFolderSelection = false;\n  }\n\n  onExitFolderCreation() {\n    this.isValidFolderSelection = true;\n  }\n}\n\nexport function moveToFolderModal() {\n  return {\n    restrict: 'E',\n    templateUrl: 'public/app/features/dashboard/move_to_folder_modal/move_to_folder.html',\n    controller: MoveToFolderCtrl,\n    bindToController: true,\n    controllerAs: 'ctrl',\n    scope: {\n      dismiss: '&',\n      dashboards: '=',\n      afterSave: '&',\n    },\n  };\n}\n\ncoreModule.directive('moveToFolderModal', moveToFolderModal);\n","import { coreModule, appEvents, contextSrv } from 'app/core/core';\nimport { DashboardModel } from '../dashboard_model';\nimport $ from 'jquery';\nimport _ from 'lodash';\nimport angular from 'angular';\nimport config from 'app/core/config';\n\nexport class SettingsCtrl {\n  dashboard: DashboardModel;\n  isOpen: boolean;\n  viewId: string;\n  json: string;\n  alertCount: number;\n  canSaveAs: boolean;\n  canSave: boolean;\n  canDelete: boolean;\n  sections: any[];\n  hasUnsavedFolderChange: boolean;\n\n  /** @ngInject */\n  constructor(\n    private $scope,\n    private $route,\n    private $location,\n    private $rootScope,\n    private backendSrv,\n    private dashboardSrv\n  ) {\n    // temp hack for annotations and variables editors\n    // that rely on inherited scope\n    $scope.dashboard = this.dashboard;\n\n    this.$scope.$on('$destroy', () => {\n      this.dashboard.updateSubmenuVisibility();\n      this.$rootScope.$broadcast('refresh');\n      setTimeout(() => {\n        this.$rootScope.appEvent('dash-scroll', { restore: true });\n      });\n    });\n\n    this.canSaveAs = this.dashboard.meta.canEdit && contextSrv.hasEditPermissionInFolders;\n    this.canSave = this.dashboard.meta.canSave;\n    this.canDelete = this.dashboard.meta.canSave;\n\n    this.buildSectionList();\n    this.onRouteUpdated();\n\n    this.$rootScope.onAppEvent('$routeUpdate', this.onRouteUpdated.bind(this), $scope);\n    this.$rootScope.appEvent('dash-scroll', { animate: false, pos: 0 });\n    this.$rootScope.onAppEvent('dashboard-saved', this.onPostSave.bind(this), $scope);\n  }\n\n  buildSectionList() {\n    this.sections = [];\n\n    if (this.dashboard.meta.canEdit) {\n      this.sections.push({\n        title: '通用',\n        id: 'settings',\n        icon: 'gicon gicon-preferences',\n      });\n      this.sections.push({\n        title: '注释',\n        id: 'annotations',\n        icon: 'gicon gicon-annotation',\n      });\n      this.sections.push({\n        title: '变量',\n        id: 'templating',\n        icon: 'gicon gicon-variable',\n      });\n      this.sections.push({\n        title: '链接',\n        id: 'links',\n        icon: 'gicon gicon-link',\n      });\n    }\n\n    if (this.dashboard.id && this.dashboard.meta.canSave) {\n      this.sections.push({\n        title: '版本',\n        id: 'versions',\n        icon: 'fa fa-fw fa-history',\n      });\n    }\n\n    if (this.dashboard.id && this.dashboard.meta.canAdmin) {\n      this.sections.push({\n        title: '权限',\n        id: 'permissions',\n        icon: 'fa fa-fw fa-lock',\n      });\n    }\n\n    if (this.dashboard.meta.canMakeEditable) {\n      this.sections.push({\n        title: '通用',\n        icon: 'gicon gicon-preferences',\n        id: 'make_editable',\n      });\n    }\n\n    this.sections.push({\n      title: 'JSON 模型',\n      id: 'dashboard_json',\n      icon: 'gicon gicon-json',\n    });\n\n    const params = this.$location.search();\n    const url = this.$location.path();\n\n    for (const section of this.sections) {\n      const sectionParams = _.defaults({ editview: section.id }, params);\n      section.url = config.appSubUrl + url + '?' + $.param(sectionParams);\n    }\n  }\n\n  onRouteUpdated() {\n    this.viewId = this.$location.search().editview;\n\n    if (this.viewId) {\n      this.json = angular.toJson(this.dashboard.getSaveModelClone(), true);\n    }\n\n    if (this.viewId === 'settings' && this.dashboard.meta.canMakeEditable) {\n      this.viewId = 'make_editable';\n    }\n\n    const currentSection = _.find(this.sections, { id: this.viewId });\n    if (!currentSection) {\n      this.sections.unshift({\n        title: '暂无',\n        id: '404',\n        icon: 'fa fa-fw fa-warning',\n      });\n      this.viewId = '404';\n    }\n  }\n\n  openSaveAsModal() {\n    this.dashboardSrv.showSaveAsModal();\n  }\n\n  saveDashboard() {\n    this.dashboardSrv.saveDashboard();\n  }\n\n  saveDashboardJson() {\n    this.dashboardSrv.saveJSONDashboard(this.json).then(() => {\n      this.$route.reload();\n    });\n  }\n\n  onPostSave() {\n    this.hasUnsavedFolderChange = false;\n  }\n\n  hideSettings() {\n    const urlParams = this.$location.search();\n    delete urlParams.editview;\n    setTimeout(() => {\n      this.$rootScope.$apply(() => {\n        this.$location.search(urlParams);\n      });\n    });\n  }\n\n  makeEditable() {\n    this.dashboard.editable = true;\n    this.dashboard.meta.canMakeEditable = false;\n    this.dashboard.meta.canEdit = true;\n    this.dashboard.meta.canSave = true;\n    this.canDelete = true;\n    this.viewId = 'settings';\n    this.buildSectionList();\n\n    const currentSection = _.find(this.sections, { id: this.viewId });\n    this.$location.url(currentSection.url);\n  }\n\n  deleteDashboard() {\n    let confirmText = '';\n    let text2 = this.dashboard.title;\n\n    const alerts = _.sumBy(this.dashboard.panels, panel => {\n      return panel.alert ? 1 : 0;\n    });\n\n    if (alerts > 0) {\n      confirmText = '删除';\n      text2 = `此仪表盘包含 ${alerts} 告警。 删除此仪表盘也会删除这些告警`;\n    }\n\n    appEvents.emit('confirm-modal', {\n      title: '删除',\n      text: '希望删除此仪表盘?',\n      text2: text2,\n      icon: 'fa-trash',\n      confirmText: confirmText,\n      yesText: '删除',\n      onConfirm: () => {\n        this.dashboard.meta.canSave = false;\n        this.deleteDashboardConfirmed();\n      },\n    });\n  }\n\n  deleteDashboardConfirmed() {\n    this.backendSrv.deleteDashboard(this.dashboard.uid).then(() => {\n      appEvents.emit('alert-success', ['仪表盘已删除', this.dashboard.title + ' 已删除']);\n      this.$location.url('/');\n    });\n  }\n\n  onFolderChange(folder) {\n    this.dashboard.meta.folderId = folder.id;\n    this.dashboard.meta.folderTitle = folder.title;\n    this.hasUnsavedFolderChange = true;\n  }\n\n  getFolder() {\n    return {\n      id: this.dashboard.meta.folderId,\n      title: this.dashboard.meta.folderTitle,\n      url: this.dashboard.meta.folderUrl,\n    };\n  }\n}\n\nexport function dashboardSettings() {\n  return {\n    restrict: 'E',\n    templateUrl: 'public/app/features/dashboard/settings/settings.html',\n    controller: SettingsCtrl,\n    bindToController: true,\n    controllerAs: 'ctrl',\n    transclude: true,\n    scope: { dashboard: '=' },\n  };\n}\n\ncoreModule.directive('dashboardSettings', dashboardSettings);\n","import angular from 'angular';\nimport _ from 'lodash';\n\nexport let iconMap = {\n  'external link': 'fa-external-link',\n  dashboard: 'fa-th-large',\n  question: 'fa-question',\n  info: 'fa-info',\n  bolt: 'fa-bolt',\n  doc: 'fa-file-text-o',\n  cloud: 'fa-cloud',\n};\n\nexport class DashLinkEditorCtrl {\n  dashboard: any;\n  iconMap: any;\n  mode: any;\n  link: any;\n\n  /** @ngInject */\n  constructor($scope, $rootScope) {\n    this.iconMap = iconMap;\n    this.dashboard.links = this.dashboard.links || [];\n    this.mode = 'list';\n\n    $scope.$on('$destroy', () => {\n      $rootScope.appEvent('dash-links-updated');\n    });\n  }\n\n  backToList() {\n    this.mode = 'list';\n  }\n\n  setupNew() {\n    this.mode = 'new';\n    this.link = { type: 'dashboards', icon: 'external link' };\n  }\n\n  addLink() {\n    this.dashboard.links.push(this.link);\n    this.mode = 'list';\n  }\n\n  editLink(link) {\n    this.link = link;\n    this.mode = 'edit';\n    console.log(this.link);\n  }\n\n  saveLink() {\n    this.backToList();\n  }\n\n  moveLink(index, dir) {\n    _.move(this.dashboard.links, index, index + dir);\n  }\n\n  deleteLink(index) {\n    this.dashboard.links.splice(index, 1);\n    this.dashboard.updateSubmenuVisibility();\n  }\n}\n\nfunction dashLinksEditor() {\n  return {\n    restrict: 'E',\n    controller: DashLinkEditorCtrl,\n    templateUrl: 'public/app/features/dashboard/dashlinks/editor.html',\n    bindToController: true,\n    controllerAs: 'ctrl',\n    scope: {\n      dashboard: '=',\n    },\n  };\n}\n\nangular.module('grafana.directives').directive('dashLinksEditor', dashLinksEditor);\n","import angular from 'angular';\nimport _ from 'lodash';\nimport './link_srv';\n\nfunction panelLinksEditor() {\n  return {\n    scope: {\n      panel: '=',\n    },\n    restrict: 'E',\n    controller: 'PanelLinksEditorCtrl',\n    templateUrl: 'public/app/features/dashboard/panellinks/module.html',\n    link: () => {},\n  };\n}\n\nexport class PanelLinksEditorCtrl {\n  /** @ngInject */\n  constructor($scope, backendSrv) {\n    $scope.panel.links = $scope.panel.links || [];\n\n    $scope.addLink = () => {\n      $scope.panel.links.push({\n        type: 'dashboard',\n      });\n    };\n\n    $scope.searchDashboards = (queryStr, callback) => {\n      backendSrv.search({ query: queryStr }).then(hits => {\n        const dashboards = _.map(hits, dash => {\n          return dash.title;\n        });\n\n        callback(dashboards);\n      });\n    };\n\n    $scope.dashboardChanged = link => {\n      backendSrv.search({ query: link.dashboard }).then(hits => {\n        const dashboard = _.find(hits, { title: link.dashboard });\n        if (dashboard) {\n          if (dashboard.url) {\n            link.url = dashboard.url;\n          } else {\n            // To support legacy url's\n            link.dashUri = dashboard.uri;\n          }\n          link.title = dashboard.title;\n        }\n      });\n    };\n\n    $scope.deleteLink = link => {\n      $scope.panel.links = _.without($scope.panel.links, link);\n    };\n  }\n}\n\nangular\n  .module('grafana.directives')\n  .directive('panelLinksEditor', panelLinksEditor)\n  .controller('PanelLinksEditorCtrl', PanelLinksEditorCtrl);\n","import angular from 'angular';\nimport _ from 'lodash';\nimport { iconMap } from './editor';\n\nfunction dashLinksContainer() {\n  return {\n    scope: {\n      links: '=',\n    },\n    restrict: 'E',\n    controller: 'DashLinksContainerCtrl',\n    template: '<dash-link ng-repeat=\"link in generatedLinks\" link=\"link\"></dash-link>',\n    link: () => {},\n  };\n}\n\n/** @ngInject */\nfunction dashLink($compile, $sanitize, linkSrv) {\n  return {\n    restrict: 'E',\n    link: (scope, elem) => {\n      const link = scope.link;\n      let template =\n        '<div class=\"gf-form\">' +\n        '<a class=\"pointer gf-form-label\" data-placement=\"bottom\"' +\n        (link.asDropdown ? ' ng-click=\"fillDropdown(link)\" data-toggle=\"dropdown\"' : '') +\n        '>' +\n        '<i></i> <span></span></a>';\n\n      if (link.asDropdown) {\n        template +=\n          '<ul class=\"dropdown-menu\" role=\"menu\">' +\n          '<li ng-repeat=\"dash in link.searchHits\">' +\n          '<a href=\"{{dash.url}}\" target=\"{{dash.target}}\">{{dash.title}}</a>' +\n          '</li>' +\n          '</ul>';\n      }\n\n      template += '</div>';\n\n      elem.html(template);\n      $compile(elem.contents())(scope);\n\n      function update() {\n        const linkInfo = linkSrv.getAnchorInfo(link);\n\n        const anchor = elem.find('a');\n        const span = elem.find('span');\n        span.text(linkInfo.title);\n\n        if (!link.asDropdown) {\n          anchor.attr('href', linkInfo.href);\n          sanitizeAnchor();\n        }\n        anchor.attr('data-placement', 'bottom');\n        // tooltip\n        anchor.tooltip({\n          title: $sanitize(scope.link.tooltip),\n          html: true,\n          container: 'body',\n        });\n      }\n\n      function sanitizeAnchor() {\n        const anchor = elem.find('a');\n        const anchorSanitized = $sanitize(anchor.parent().html());\n        anchor.parent().html(anchorSanitized);\n      }\n\n      elem.find('i').attr('class', 'fa fa-fw ' + scope.link.icon);\n      elem.find('a').attr('target', scope.link.target);\n\n      // fix for menus on the far right\n      if (link.asDropdown && scope.$last) {\n        elem.find('.dropdown-menu').addClass('pull-right');\n      }\n\n      update();\n      scope.$on('refresh', update);\n    },\n  };\n}\n\nexport class DashLinksContainerCtrl {\n  /** @ngInject */\n  constructor($scope, $rootScope, $q, backendSrv, dashboardSrv, linkSrv) {\n    const currentDashId = dashboardSrv.getCurrent().id;\n\n    function buildLinks(linkDef) {\n      if (linkDef.type === 'dashboards') {\n        if (!linkDef.tags) {\n          console.log('Dashboard link missing tag');\n          return $q.when([]);\n        }\n\n        if (linkDef.asDropdown) {\n          return $q.when([\n            {\n              title: linkDef.title,\n              tags: linkDef.tags,\n              keepTime: linkDef.keepTime,\n              includeVars: linkDef.includeVars,\n              target: linkDef.targetBlank ? '_blank' : '_self',\n              icon: 'fa fa-bars',\n              asDropdown: true,\n            },\n          ]);\n        }\n\n        return $scope.searchDashboards(linkDef, 7);\n      }\n\n      if (linkDef.type === 'link') {\n        return $q.when([\n          {\n            url: linkDef.url,\n            title: linkDef.title,\n            icon: iconMap[linkDef.icon],\n            tooltip: linkDef.tooltip,\n            target: linkDef.targetBlank ? '_blank' : '_self',\n            keepTime: linkDef.keepTime,\n            includeVars: linkDef.includeVars,\n          },\n        ]);\n      }\n\n      return $q.when([]);\n    }\n\n    function updateDashLinks() {\n      const promises = _.map($scope.links, buildLinks);\n\n      $q.all(promises).then(results => {\n        $scope.generatedLinks = _.flatten(results);\n      });\n    }\n\n    $scope.searchDashboards = (link, limit) => {\n      return backendSrv.search({ tag: link.tags, limit: limit }).then(results => {\n        return _.reduce(\n          results,\n          (memo, dash) => {\n            // do not add current dashboard\n            if (dash.id !== currentDashId) {\n              memo.push({\n                title: dash.title,\n                url: dash.url,\n                target: link.target === '_self' ? '' : link.target,\n                icon: 'fa fa-th-large',\n                keepTime: link.keepTime,\n                includeVars: link.includeVars,\n              });\n            }\n            return memo;\n          },\n          []\n        );\n      });\n    };\n\n    $scope.fillDropdown = link => {\n      $scope.searchDashboards(link, 100).then(results => {\n        _.each(results, hit => {\n          hit.url = linkSrv.getLinkUrl(hit);\n        });\n        link.searchHits = results;\n      });\n    };\n\n    updateDashLinks();\n    $rootScope.onAppEvent('dash-links-updated', updateDashLinks, $scope);\n  }\n}\n\nangular.module('grafana.directives').directive('dashLinksContainer', dashLinksContainer);\nangular.module('grafana.directives').directive('dashLink', dashLink);\nangular.module('grafana.directives').controller('DashLinksContainerCtrl', DashLinksContainerCtrl);\n","export class FolderPageLoader {\n  constructor(private backendSrv) {}\n\n  load(ctrl, uid, activeChildId) {\n    ctrl.navModel = {\n      main: {\n        icon: 'fa fa-folder-open',\n        id: 'manage-folder',\n        subTitle: '管理文件夹仪表盘与权限',\n        url: '',\n        text: '',\n        breadcrumbs: [{ title: '仪表盘', url: 'dashboards' }],\n        children: [\n          {\n            active: activeChildId === 'manage-folder-dashboards',\n            icon: 'fa fa-fw fa-th-large',\n            id: 'manage-folder-dashboards',\n            text: '仪表盘',\n            url: 'dashboards',\n          },\n          {\n            active: activeChildId === 'manage-folder-permissions',\n            icon: 'fa fa-fw fa-lock',\n            id: 'manage-folder-permissions',\n            text: '权限',\n            url: 'dashboards/permissions',\n          },\n          {\n            active: activeChildId === 'manage-folder-settings',\n            icon: 'fa fa-fw fa-cog',\n            id: 'manage-folder-settings',\n            text: '设置',\n            url: 'dashboards/settings',\n          },\n        ],\n      },\n    };\n\n    return this.backendSrv.getFolderByUid(uid).then(folder => {\n      ctrl.folderId = folder.id;\n      const folderTitle = folder.title;\n      const folderUrl = folder.url;\n      ctrl.navModel.main.text = folderTitle;\n\n      const dashTab = ctrl.navModel.main.children.find(child => child.id === 'manage-folder-dashboards');\n      dashTab.url = folderUrl;\n\n      if (folder.canAdmin) {\n        const permTab = ctrl.navModel.main.children.find(child => child.id === 'manage-folder-permissions');\n        permTab.url = folderUrl + '/permissions';\n\n        const settingsTab = ctrl.navModel.main.children.find(child => child.id === 'manage-folder-settings');\n        settingsTab.url = folderUrl + '/settings';\n      } else {\n        ctrl.navModel.main.children = [dashTab];\n      }\n\n      return folder;\n    });\n  }\n}\n","import { FolderPageLoader } from './folder_page_loader';\nimport locationUtil from 'app/core/utils/location_util';\n\nexport class FolderDashboardsCtrl {\n  navModel: any;\n  folderId: number;\n  uid: string;\n\n  /** @ngInject */\n  constructor(private backendSrv, navModelSrv, private $routeParams, $location) {\n    if (this.$routeParams.uid) {\n      this.uid = $routeParams.uid;\n\n      const loader = new FolderPageLoader(this.backendSrv);\n\n      loader.load(this, this.uid, 'manage-folder-dashboards').then(folder => {\n        const url = locationUtil.stripBaseFromUrl(folder.url);\n\n        if (url !== $location.path()) {\n          $location.path(url).replace();\n        }\n      });\n    }\n  }\n}\n","import { FolderPageLoader } from './folder_page_loader';\nimport appEvents from 'app/core/app_events';\n\nexport class FolderSettingsCtrl {\n  folderPageLoader: FolderPageLoader;\n  navModel: any;\n  folderId: number;\n  uid: string;\n  canSave = false;\n  folder: any;\n  title: string;\n  hasChanged: boolean;\n\n  /** @ngInject */\n  constructor(private backendSrv, navModelSrv, private $routeParams, private $location) {\n    if (this.$routeParams.uid) {\n      this.uid = $routeParams.uid;\n\n      this.folderPageLoader = new FolderPageLoader(this.backendSrv);\n      this.folderPageLoader.load(this, this.uid, 'manage-folder-settings').then(folder => {\n        if ($location.path() !== folder.meta.url) {\n          $location.path(`${folder.meta.url}/settings`).replace();\n        }\n\n        this.folder = folder;\n        this.canSave = this.folder.canSave;\n        this.title = this.folder.title;\n      });\n    }\n  }\n\n  save() {\n    this.titleChanged();\n\n    if (!this.hasChanged) {\n      return;\n    }\n\n    this.folder.title = this.title.trim();\n\n    return this.backendSrv\n      .updateFolder(this.folder)\n      .then(result => {\n        if (result.url !== this.$location.path()) {\n          this.$location.url(result.url + '/settings');\n        }\n\n        appEvents.emit('dashboard-saved');\n        appEvents.emit('alert-success', ['文件夹已保存']);\n      })\n      .catch(this.handleSaveFolderError);\n  }\n\n  titleChanged() {\n    this.hasChanged = this.folder.title.toLowerCase() !== this.title.trim().toLowerCase();\n  }\n\n  delete(evt) {\n    if (evt) {\n      evt.stopPropagation();\n      evt.preventDefault();\n    }\n\n    appEvents.emit('confirm-modal', {\n      title: '删除',\n      text: `要删除此文件夹及其所有仪表盘吗?`,\n      icon: 'fa-trash',\n      yesText: '删除',\n      onConfirm: () => {\n        return this.backendSrv.deleteFolder(this.uid).then(() => {\n          appEvents.emit('alert-success', ['文件夹已删除', `${this.folder.title} 已被删除`]);\n          this.$location.url('dashboards');\n        });\n      },\n    });\n  }\n\n  handleSaveFolderError(err) {\n    if (err.data && err.data.status === 'version-mismatch') {\n      err.isHandled = true;\n\n      appEvents.emit('confirm-modal', {\n        title: '冲突',\n        text: '其他人已更新此文件夹。',\n        text2: '你还想保存这个文件夹吗?',\n        yesText: '保存 & 覆盖',\n        icon: 'fa-warning',\n        onConfirm: () => {\n          this.backendSrv.updateFolder(this.folder, { overwrite: true });\n        },\n      });\n    }\n  }\n}\n","import _ from 'lodash';\nimport config from 'app/core/config';\nimport locationUtil from 'app/core/utils/location_util';\n\nexport class DashboardImportCtrl {\n  navModel: any;\n  step: number;\n  jsonText: string;\n  parseError: string;\n  nameExists: boolean;\n  uidExists: boolean;\n  dash: any;\n  inputs: any[];\n  inputsValid: boolean;\n  gnetUrl: string;\n  gnetError: string;\n  gnetInfo: any;\n  titleTouched: boolean;\n  hasNameValidationError: boolean;\n  nameValidationError: any;\n  hasUidValidationError: boolean;\n  uidValidationError: any;\n  autoGenerateUid: boolean;\n  autoGenerateUidValue: string;\n  folderId: number;\n  initialFolderTitle: string;\n  isValidFolderSelection: boolean;\n\n  /** @ngInject */\n  constructor(private backendSrv, private validationSrv, navModelSrv, private $location, $routeParams) {\n    this.navModel = navModelSrv.getNav('create', 'import');\n\n    this.step = 1;\n    this.nameExists = false;\n    this.uidExists = false;\n    this.autoGenerateUid = true;\n    this.autoGenerateUidValue = 'auto-generated';\n    this.folderId = $routeParams.folderId ? Number($routeParams.folderId) || 0 : null;\n    this.initialFolderTitle = '选择一个文件夹';\n\n    // check gnetId in url\n    if ($routeParams.gnetId) {\n      this.gnetUrl = $routeParams.gnetId;\n      this.checkGnetDashboard();\n    }\n  }\n\n  onUpload(dash) {\n    this.dash = dash;\n    this.dash.id = null;\n    this.step = 2;\n    this.inputs = [];\n\n    if (this.dash.__inputs) {\n      for (const input of this.dash.__inputs) {\n        const inputModel = {\n          name: input.name,\n          label: input.label,\n          info: input.description,\n          value: input.value,\n          type: input.type,\n          pluginId: input.pluginId,\n          options: [],\n        };\n\n        if (input.type === 'datasource') {\n          this.setDatasourceOptions(input, inputModel);\n        } else if (!inputModel.info) {\n          inputModel.info = '指定字符串常量';\n        }\n\n        this.inputs.push(inputModel);\n      }\n    }\n\n    this.inputsValid = this.inputs.length === 0;\n    this.titleChanged();\n    this.uidChanged(true);\n  }\n\n  setDatasourceOptions(input, inputModel) {\n    const sources = _.filter(config.datasources, val => {\n      return val.type === input.pluginId;\n    });\n\n    if (sources.length === 0) {\n      inputModel.info = '没有找到 ' + input.pluginName + ' 类型的数据源';\n    } else if (!inputModel.info) {\n      inputModel.info = '选择一个 ' + input.pluginName + ' 数据源';\n    }\n\n    inputModel.options = sources.map(val => {\n      return { text: val.name, value: val.name };\n    });\n  }\n\n  inputValueChanged() {\n    this.inputsValid = true;\n    for (const input of this.inputs) {\n      if (!input.value) {\n        this.inputsValid = false;\n      }\n    }\n  }\n\n  titleChanged() {\n    this.titleTouched = true;\n    this.nameExists = false;\n\n    this.validationSrv\n      .validateNewDashboardName(this.folderId, this.dash.title)\n      .then(() => {\n        this.nameExists = false;\n        this.hasNameValidationError = false;\n      })\n      .catch(err => {\n        if (err.type === 'EXISTING') {\n          this.nameExists = true;\n        }\n\n        this.hasNameValidationError = true;\n        this.nameValidationError = err.message;\n      });\n  }\n\n  uidChanged(initial) {\n    this.uidExists = false;\n    this.hasUidValidationError = false;\n\n    if (initial === true && this.dash.uid) {\n      this.autoGenerateUidValue = 'value set';\n    }\n\n    this.backendSrv\n      .getDashboardByUid(this.dash.uid)\n      .then(res => {\n        this.uidExists = true;\n        this.hasUidValidationError = true;\n        this.uidValidationError = `名为 '${res.dashboard.title}' 的仪表盘在文件夹 '${\n          res.meta.folderTitle\n        }' 中存在相同的 uid`;\n      })\n      .catch(err => {\n        err.isHandled = true;\n      });\n  }\n\n  onFolderChange(folder) {\n    this.folderId = folder.id;\n    this.titleChanged();\n  }\n\n  onEnterFolderCreation() {\n    this.inputsValid = false;\n  }\n\n  onExitFolderCreation() {\n    this.inputValueChanged();\n  }\n\n  isValid() {\n    return this.inputsValid && this.folderId !== null;\n  }\n\n  saveDashboard() {\n    const inputs = this.inputs.map(input => {\n      return {\n        name: input.name,\n        type: input.type,\n        pluginId: input.pluginId,\n        value: input.value,\n      };\n    });\n\n    return this.backendSrv\n      .post('api/dashboards/import', {\n        dashboard: this.dash,\n        overwrite: true,\n        inputs: inputs,\n        folderId: this.folderId,\n      })\n      .then(res => {\n        const dashUrl = locationUtil.stripBaseFromUrl(res.importedUrl);\n        this.$location.url(dashUrl);\n      });\n  }\n\n  loadJsonText() {\n    try {\n      this.parseError = '';\n      const dash = JSON.parse(this.jsonText);\n      this.onUpload(dash);\n    } catch (err) {\n      console.log(err);\n      this.parseError = err.message;\n      return;\n    }\n  }\n\n  checkGnetDashboard() {\n    this.gnetError = '';\n\n    const match = /(^\\d+$)|dashboards\\/(\\d+)/.exec(this.gnetUrl);\n    let dashboardId;\n\n    if (match && match[1]) {\n      dashboardId = match[1];\n    } else if (match && match[2]) {\n      dashboardId = match[2];\n    } else {\n      this.gnetError = 'Could not find dashboard';\n    }\n\n    return this.backendSrv\n      .get('api/gnet/dashboards/' + dashboardId)\n      .then(res => {\n        this.gnetInfo = res;\n        // store reference to grafana.com\n        res.json.gnetId = res.id;\n        this.onUpload(res.json);\n      })\n      .catch(err => {\n        err.isHandled = true;\n        this.gnetError = err.data.message || err;\n      });\n  }\n\n  back() {\n    this.gnetUrl = '';\n    this.step = 1;\n    this.gnetError = '';\n    this.gnetInfo = '';\n  }\n}\n","import _ from 'lodash';\nimport coreModule from '../../core/core_module';\n\nexport class PlaylistsCtrl {\n  playlists: any;\n  navModel: any;\n\n  /** @ngInject */\n  constructor(private $scope, private backendSrv, navModelSrv) {\n    this.navModel = navModelSrv.getNav('dashboards', 'playlists', 0);\n\n    backendSrv.get('/api/playlists').then(result => {\n      this.playlists = result.map(item => {\n        item.startUrl = `playlists/play/${item.id}`;\n        return item;\n      });\n    });\n  }\n\n  removePlaylistConfirmed(playlist) {\n    _.remove(this.playlists, { id: playlist.id });\n\n    this.backendSrv.delete('/api/playlists/' + playlist.id).then(\n      () => {\n        this.$scope.appEvent('alert-success', ['播放列表已删除', '']);\n      },\n      () => {\n        this.$scope.appEvent('alert-error', ['无法删除播放列表', '']);\n        this.playlists.push(playlist);\n      }\n    );\n  }\n\n  removePlaylist(playlist) {\n    this.$scope.appEvent('confirm-modal', {\n      title: '删除',\n      text: '确定想要删除播放列表 ' + playlist.name + '?',\n      yesText: '删除',\n      icon: 'fa-trash',\n      onConfirm: () => {\n        this.removePlaylistConfirmed(playlist);\n      },\n    });\n  }\n}\n\ncoreModule.controller('PlaylistsCtrl', PlaylistsCtrl);\n","import appEvents from 'app/core/app_events';\nimport locationUtil from 'app/core/utils/location_util';\n\nexport class CreateFolderCtrl {\n  title = '';\n  navModel: any;\n  titleTouched = false;\n  hasValidationError: boolean;\n  validationError: any;\n\n  /** @ngInject */\n  constructor(private backendSrv, private $location, private validationSrv, navModelSrv) {\n    this.navModel = navModelSrv.getNav('dashboards', 'manage-dashboards', 0);\n  }\n\n  create() {\n    if (this.hasValidationError) {\n      return;\n    }\n\n    return this.backendSrv.createFolder({ title: this.title }).then(result => {\n      appEvents.emit('alert-success', ['文件夹已创建', '完成']);\n      this.$location.url(locationUtil.stripBaseFromUrl(result.url));\n    });\n  }\n\n  titleChanged() {\n    this.titleTouched = true;\n\n    this.validationSrv\n      .validateNewFolderName(this.title)\n      .then(() => {\n        this.hasValidationError = false;\n      })\n      .catch(err => {\n        this.hasValidationError = true;\n        this.validationError = err.message;\n      });\n  }\n}\n","import './dashboard_ctrl';\nimport './alerting_srv';\nimport './history/history';\nimport './dashboard_loader_srv';\nimport './dashnav/dashnav';\nimport './submenu/submenu';\nimport './save_as_modal';\nimport './save_modal';\nimport './save_provisioned_modal';\nimport './shareModalCtrl';\nimport './share_snapshot_ctrl';\nimport './dashboard_srv';\nimport './view_state_srv';\nimport './validation_srv';\nimport './time_srv';\nimport './unsaved_changes_srv';\nimport './unsaved_changes_modal';\nimport './timepicker/timepicker';\nimport './upload';\nimport './export/export_modal';\nimport './export_data/export_data_modal';\nimport './ad_hoc_filters';\nimport './repeat_option/repeat_option';\nimport './dashgrid/DashboardGridDirective';\nimport './dashgrid/PanelLoader';\nimport './dashgrid/RowOptions';\nimport './folder_picker/folder_picker';\nimport './move_to_folder_modal/move_to_folder';\nimport './settings/settings';\nimport './panellinks/module';\nimport './dashlinks/module';\n\nimport coreModule from 'app/core/core_module';\nimport { FolderDashboardsCtrl } from './folder_dashboards_ctrl';\nimport { FolderSettingsCtrl } from './folder_settings_ctrl';\nimport { DashboardImportCtrl } from './dashboard_import_ctrl';\nimport { CreateFolderCtrl } from './create_folder_ctrl';\n\ncoreModule.controller('FolderDashboardsCtrl', FolderDashboardsCtrl);\ncoreModule.controller('FolderSettingsCtrl', FolderSettingsCtrl);\ncoreModule.controller('DashboardImportCtrl', DashboardImportCtrl);\ncoreModule.controller('CreateFolderCtrl', CreateFolderCtrl);\n","import coreModule from '../../core/core_module';\n\nexport class PlaylistSearchCtrl {\n  query: any;\n  tagsMode: boolean;\n\n  searchStarted: any;\n\n  /** @ngInject */\n  constructor($timeout, private backendSrv) {\n    this.query = { query: '', tag: [], starred: false, limit: 20 };\n\n    $timeout(() => {\n      this.query.query = '';\n      this.query.type = 'dash-db';\n      this.searchDashboards();\n    }, 100);\n  }\n\n  searchDashboards() {\n    this.tagsMode = false;\n    const prom: any = {};\n\n    prom.promise = this.backendSrv.search(this.query).then(result => {\n      return {\n        dashboardResult: result,\n        tagResult: [],\n      };\n    });\n\n    this.searchStarted(prom);\n  }\n\n  showStarred() {\n    this.query.starred = !this.query.starred;\n    this.searchDashboards();\n  }\n\n  queryHasNoFilters() {\n    return this.query.query === '' && this.query.starred === false && this.query.tag.length === 0;\n  }\n\n  filterByTag(tag, evt) {\n    this.query.tag.push(tag);\n    this.searchDashboards();\n    if (evt) {\n      evt.stopPropagation();\n      evt.preventDefault();\n    }\n  }\n\n  getTags() {\n    const prom: any = {};\n    prom.promise = this.backendSrv.get('/api/dashboards/tags').then(result => {\n      return {\n        dashboardResult: [],\n        tagResult: result,\n      };\n    });\n\n    this.searchStarted(prom);\n  }\n}\n\nexport function playlistSearchDirective() {\n  return {\n    restrict: 'E',\n    templateUrl: 'public/app/features/playlist/partials/playlist_search.html',\n    controller: PlaylistSearchCtrl,\n    bindToController: true,\n    controllerAs: 'ctrl',\n    scope: {\n      searchStarted: '&',\n    },\n  };\n}\n\ncoreModule.directive('playlistSearch', playlistSearchDirective);\n","import coreModule from '../../core/core_module';\nimport kbn from 'app/core/utils/kbn';\nimport appEvents from 'app/core/app_events';\nimport _ from 'lodash';\nimport { toUrlParams } from 'app/core/utils/url';\n\nclass PlaylistSrv {\n  private cancelPromise: any;\n  private dashboards: any;\n  private index: number;\n  private interval: any;\n  private startUrl: string;\n  isPlaying: boolean;\n\n  /** @ngInject */\n  constructor(private $location: any, private $timeout: any, private backendSrv: any) {}\n\n  next() {\n    this.$timeout.cancel(this.cancelPromise);\n\n    const playedAllDashboards = this.index > this.dashboards.length - 1;\n    if (playedAllDashboards) {\n      window.location.href = this.startUrl;\n      return;\n    }\n\n    const dash = this.dashboards[this.index];\n    const queryParams = this.$location.search();\n    const filteredParams = _.pickBy(queryParams, value => value !== null);\n\n    this.$location.url('dashboard/' + dash.uri + '?' + toUrlParams(filteredParams));\n\n    this.index++;\n    this.cancelPromise = this.$timeout(() => this.next(), this.interval);\n  }\n\n  prev() {\n    this.index = Math.max(this.index - 2, 0);\n    this.next();\n  }\n\n  start(playlistId) {\n    this.stop();\n\n    this.startUrl = window.location.href;\n    this.index = 0;\n    this.isPlaying = true;\n\n    this.backendSrv.get(`/api/playlists/${playlistId}`).then(playlist => {\n      this.backendSrv.get(`/api/playlists/${playlistId}/dashboards`).then(dashboards => {\n        this.dashboards = dashboards;\n        this.interval = kbn.interval_to_ms(playlist.interval);\n        this.next();\n      });\n    });\n  }\n\n  stop() {\n    if (this.isPlaying) {\n      const queryParams = this.$location.search();\n      if (queryParams.kiosk) {\n        appEvents.emit('toggle-kiosk-mode', { exit: true });\n      }\n    }\n\n    this.index = 0;\n    this.isPlaying = false;\n\n    if (this.cancelPromise) {\n      this.$timeout.cancel(this.cancelPromise);\n    }\n  }\n}\n\ncoreModule.service('playlistSrv', PlaylistSrv);\n","import _ from 'lodash';\nimport coreModule from '../../core/core_module';\n\nexport class PlaylistEditCtrl {\n  filteredDashboards: any = [];\n  filteredTags: any = [];\n  searchQuery = '';\n  loading = false;\n  playlist: any = {\n    interval: '5m',\n  };\n\n  playlistItems: any = [];\n  dashboardresult: any = [];\n  tagresult: any = [];\n  navModel: any;\n  isNew: boolean;\n\n  /** @ngInject */\n  constructor(private $scope, private backendSrv, private $location, $route, navModelSrv) {\n    this.navModel = navModelSrv.getNav('dashboards', 'playlists', 0);\n    this.isNew = !$route.current.params.id;\n\n    if ($route.current.params.id) {\n      const playlistId = $route.current.params.id;\n\n      backendSrv.get('/api/playlists/' + playlistId).then(result => {\n        this.playlist = result;\n      });\n\n      backendSrv.get('/api/playlists/' + playlistId + '/items').then(result => {\n        this.playlistItems = result;\n      });\n    }\n  }\n\n  filterFoundPlaylistItems() {\n    this.filteredDashboards = _.reject(this.dashboardresult, playlistItem => {\n      return _.find(this.playlistItems, listPlaylistItem => {\n        return parseInt(listPlaylistItem.value, 10) === playlistItem.id;\n      });\n    });\n\n    this.filteredTags = _.reject(this.tagresult, tag => {\n      return _.find(this.playlistItems, listPlaylistItem => {\n        return listPlaylistItem.value === tag.term;\n      });\n    });\n  }\n\n  addPlaylistItem(playlistItem) {\n    playlistItem.value = playlistItem.id.toString();\n    playlistItem.type = 'dashboard_by_id';\n    playlistItem.order = this.playlistItems.length + 1;\n\n    this.playlistItems.push(playlistItem);\n    this.filterFoundPlaylistItems();\n  }\n\n  addTagPlaylistItem(tag) {\n    const playlistItem: any = {\n      value: tag.term,\n      type: 'dashboard_by_tag',\n      order: this.playlistItems.length + 1,\n      title: tag.term,\n    };\n\n    this.playlistItems.push(playlistItem);\n    this.filterFoundPlaylistItems();\n  }\n\n  removePlaylistItem(playlistItem) {\n    _.remove(this.playlistItems, listedPlaylistItem => {\n      return playlistItem === listedPlaylistItem;\n    });\n    this.filterFoundPlaylistItems();\n  }\n\n  savePlaylist(playlist, playlistItems) {\n    let savePromise;\n\n    playlist.items = playlistItems;\n\n    savePromise = playlist.id\n      ? this.backendSrv.put('/api/playlists/' + playlist.id, playlist)\n      : this.backendSrv.post('/api/playlists', playlist);\n\n    savePromise.then(\n      () => {\n        this.$scope.appEvent('alert-success', ['播放列表已保存', '']);\n        this.$location.path('/playlists');\n      },\n      () => {\n        this.$scope.appEvent('alert-error', ['无法保存播放列表', '']);\n      }\n    );\n  }\n\n  isPlaylistEmpty() {\n    return !this.playlistItems.length;\n  }\n\n  backToList() {\n    this.$location.path('/playlists');\n  }\n\n  searchStarted(promise) {\n    promise.then(data => {\n      this.dashboardresult = data.dashboardResult;\n      this.tagresult = data.tagResult;\n      this.filterFoundPlaylistItems();\n    });\n  }\n\n  movePlaylistItem(playlistItem, offset) {\n    const currentPosition = this.playlistItems.indexOf(playlistItem);\n    const newPosition = currentPosition + offset;\n\n    if (newPosition >= 0 && newPosition < this.playlistItems.length) {\n      this.playlistItems.splice(currentPosition, 1);\n      this.playlistItems.splice(newPosition, 0, playlistItem);\n    }\n  }\n\n  movePlaylistItemUp(playlistItem) {\n    this.movePlaylistItem(playlistItem, -1);\n  }\n\n  movePlaylistItemDown(playlistItem) {\n    this.movePlaylistItem(playlistItem, 1);\n  }\n}\n\ncoreModule.controller('PlaylistEditCtrl', PlaylistEditCtrl);\n","import angular from 'angular';\n\n/** @ngInject */\nfunction grafanaRoutes($routeProvider) {\n  $routeProvider\n    .when('/playlists', {\n      templateUrl: 'public/app/features/playlist/partials/playlists.html',\n      controllerAs: 'ctrl',\n      controller: 'PlaylistsCtrl',\n    })\n    .when('/playlists/create', {\n      templateUrl: 'public/app/features/playlist/partials/playlist.html',\n      controllerAs: 'ctrl',\n      controller: 'PlaylistEditCtrl',\n    })\n    .when('/playlists/edit/:id', {\n      templateUrl: 'public/app/features/playlist/partials/playlist.html',\n      controllerAs: 'ctrl',\n      controller: 'PlaylistEditCtrl',\n    })\n    .when('/playlists/play/:id', {\n      template: '',\n      resolve: {\n        init: (playlistSrv, $route) => {\n          const playlistId = $route.current.params.id;\n          playlistSrv.start(playlistId);\n        },\n      },\n    });\n}\n\nangular.module('grafana.routes').config(grafanaRoutes);\n","import './playlists_ctrl';\nimport './playlist_search';\nimport './playlist_srv';\nimport './playlist_edit_ctrl';\nimport './playlist_routes';\n","import $ from 'jquery';\nimport { coreModule } from 'app/core/core';\n\nconst template = `\n<span class=\"panel-title\">\n  <span class=\"icon-gf panel-alert-icon\"></span>\n  <span class=\"panel-title-text\">{{ctrl.panel.title | interpolateTemplateVars:this}}</span>\n  <span class=\"panel-menu-container dropdown\">\n    <span class=\"fa fa-caret-down panel-menu-toggle\" data-toggle=\"dropdown\"></span>\n    <ul class=\"dropdown-menu dropdown-menu--menu panel-menu\" role=\"menu\">\n      <li>\n        <a ng-click=\"ctrl.addDataQuery(datasource);\">\n          <i class=\"fa fa-cog\"></i> 编辑 <span class=\"dropdown-menu-item-shortcut\">e</span>\n        </a>\n      </li>\n      <li class=\"dropdown-submenu\">\n        <a ng-click=\"ctrl.addDataQuery(datasource);\"><i class=\"fa fa-cube\"></i> Actions</a>\n        <ul class=\"dropdown-menu panel-menu\">\n          <li><a ng-click=\"ctrl.addDataQuery(datasource);\"><i class=\"fa fa-flash\"></i> 添加注释</a></li>\n          <li><a ng-click=\"ctrl.addDataQuery(datasource);\"><i class=\"fa fa-bullseye\"></i> 切换图例</a></li>\n          <li><a ng-click=\"ctrl.addDataQuery(datasource);\"><i class=\"fa fa-download\"></i> 导出CSV</a></li>\n          <li><a ng-click=\"ctrl.addDataQuery(datasource);\"><i class=\"fa fa-eye\"></i> 查看JSON</a></li>\n        </ul>\n      </li>\n      <li><a ng-click=\"ctrl.addDataQuery(datasource);\"><i class=\"fa fa-trash\"></i> 移除</a></li>\n    </ul>\n  </span>\n  <span class=\"panel-time-info\" ng-if=\"ctrl.timeInfo\"><i class=\"fa fa-clock-o\"></i> {{ctrl.timeInfo}}</span>\n</span>`;\n\nfunction renderMenuItem(item, ctrl) {\n  let html = '';\n  let listItemClass = '';\n\n  if (item.divider) {\n    return '<li class=\"divider\"></li>';\n  }\n\n  if (item.submenu) {\n    listItemClass = 'dropdown-submenu';\n  }\n\n  html += `<li class=\"${listItemClass}\"><a `;\n\n  if (item.click) {\n    html += ` ng-click=\"${item.click}\"`;\n  }\n  if (item.href) {\n    html += ` href=\"${item.href}\"`;\n  }\n\n  html += `><i class=\"${item.icon}\"></i>`;\n  html += `<span class=\"dropdown-item-text\">${item.text}</span>`;\n\n  if (item.shortcut) {\n    html += `<span class=\"dropdown-menu-item-shortcut\">${item.shortcut}</span>`;\n  }\n\n  html += `</a>`;\n\n  if (item.submenu) {\n    html += '<ul class=\"dropdown-menu dropdown-menu--menu panel-menu\">';\n    for (const subitem of item.submenu) {\n      html += renderMenuItem(subitem, ctrl);\n    }\n    html += '</ul>';\n  }\n\n  html += `</li>`;\n  return html;\n}\n\nfunction createMenuTemplate(ctrl) {\n  let html = '';\n\n  for (const item of ctrl.getMenu()) {\n    html += renderMenuItem(item, ctrl);\n  }\n\n  return html;\n}\n\n/** @ngInject */\nfunction panelHeader($compile) {\n  return {\n    restrict: 'E',\n    template: template,\n    link: (scope, elem, attrs) => {\n      const menuElem = elem.find('.panel-menu');\n      let menuScope;\n      let isDragged;\n\n      elem.click(evt => {\n        const targetClass = evt.target.className;\n\n        // remove existing scope\n        if (menuScope) {\n          menuScope.$destroy();\n        }\n\n        menuScope = scope.$new();\n        const menuHtml = createMenuTemplate(scope.ctrl);\n        menuElem.html(menuHtml);\n        $compile(menuElem)(menuScope);\n\n        if (targetClass.indexOf('panel-title-text') >= 0 || targetClass.indexOf('panel-title') >= 0) {\n          togglePanelMenu(evt);\n        }\n      });\n\n      elem.find('.panel-menu-toggle').click(() => {\n        togglePanelStackPosition();\n      });\n\n      function togglePanelMenu(e) {\n        if (!isDragged) {\n          e.stopPropagation();\n          togglePanelStackPosition();\n          elem.find('[data-toggle=dropdown]').dropdown('toggle');\n        }\n      }\n\n      /**\n       * Hack for adding special class 'dropdown-menu-open' to the panel.\n       * This class sets z-index for panel and prevents menu overlapping.\n       */\n      function togglePanelStackPosition() {\n        const menuOpenClass = 'dropdown-menu-open';\n        const panelGridClass = '.react-grid-item.panel';\n\n        let panelElem = elem\n          .find('[data-toggle=dropdown]')\n          .parentsUntil('.panel')\n          .parent();\n        const menuElem = elem.find('[data-toggle=dropdown]').parent();\n        panelElem = panelElem && panelElem.length ? panelElem[0] : undefined;\n        if (panelElem) {\n          panelElem = $(panelElem);\n          $(panelGridClass).removeClass(menuOpenClass);\n          const state = !menuElem.hasClass('open');\n          panelElem.toggleClass(menuOpenClass, state);\n        }\n      }\n\n      let mouseX, mouseY;\n      elem.mousedown(e => {\n        mouseX = e.pageX;\n        mouseY = e.pageY;\n      });\n\n      elem.mouseup(e => {\n        if (mouseX === e.pageX && mouseY === e.pageY) {\n          isDragged = false;\n        } else {\n          isDragged = true;\n        }\n      });\n    },\n  };\n}\n\ncoreModule.directive('panelHeader', panelHeader);\n","import angular from 'angular';\nimport $ from 'jquery';\nimport Drop from 'tether-drop';\nimport baron from 'baron';\n\nconst module = angular.module('grafana.directives');\n\nconst panelTemplate = `\n  <div class=\"panel-container\">\n    <div class=\"panel-header\" ng-class=\"{'grid-drag-handle': !ctrl.fullscreen}\">\n      <span class=\"panel-info-corner\">\n        <i class=\"fa\"></i>\n        <span class=\"panel-info-corner-inner\"></span>\n      </span>\n\n      <span class=\"panel-loading\" ng-show=\"ctrl.loading\">\n        <i class=\"fa fa-spinner fa-spin\"></i>\n      </span>\n\n      <panel-header class=\"panel-title-container\" panel-ctrl=\"ctrl\"></panel-header>\n    </div>\n\n    <div class=\"panel-content\">\n      <ng-transclude class=\"panel-height-helper\"></ng-transclude>\n    </div>\n  </div>\n\n  <div class=\"panel-full-edit\" ng-if=\"ctrl.editMode\">\n    <div class=\"tabbed-view tabbed-view--panel-edit\">\n      <div class=\"tabbed-view-header\">\n        <h3 class=\"tabbed-view-panel-title\">\n          {{ctrl.pluginName}}\n        </h3>\n\n        <ul class=\"gf-tabs\">\n          <li class=\"gf-tabs-item\" ng-repeat=\"tab in ::ctrl.editorTabs\">\n            <a class=\"gf-tabs-link\" ng-click=\"ctrl.changeTab($index)\" ng-class=\"{active: ctrl.editorTabIndex === $index}\">\n              {{::tab.title}}\n            </a>\n          </li>\n        </ul>\n\n        <button class=\"tabbed-view-close-btn\" ng-click=\"ctrl.exitFullscreen();\">\n          <i class=\"fa fa-remove\"></i>\n        </button>\n      </div>\n\n      <div class=\"tabbed-view-body\">\n        <div ng-repeat=\"tab in ctrl.editorTabs\" ng-if=\"ctrl.editorTabIndex === $index\">\n          <panel-editor-tab editor-tab=\"tab\" ctrl=\"ctrl\" index=\"$index\"></panel-editor-tab>\n        </div>\n      </div>\n    </div>\n  </div>\n`;\n\nmodule.directive('grafanaPanel', ($rootScope, $document, $timeout) => {\n  return {\n    restrict: 'E',\n    template: panelTemplate,\n    transclude: true,\n    scope: { ctrl: '=' },\n    link: (scope, elem) => {\n      const panelContainer = elem.find('.panel-container');\n      const panelContent = elem.find('.panel-content');\n      const cornerInfoElem = elem.find('.panel-info-corner');\n      const ctrl = scope.ctrl;\n      let infoDrop;\n      let panelScrollbar;\n\n      // the reason for handling these classes this way is for performance\n      // limit the watchers on panels etc\n      let transparentLastState = false;\n      let lastHasAlertRule = false;\n      let lastAlertState;\n      let hasAlertRule;\n\n      function mouseEnter() {\n        panelContainer.toggleClass('panel-hover-highlight', true);\n        ctrl.dashboard.setPanelFocus(ctrl.panel.id);\n      }\n\n      function mouseLeave() {\n        panelContainer.toggleClass('panel-hover-highlight', false);\n        ctrl.dashboard.setPanelFocus(0);\n      }\n\n      function panelHeightUpdated() {\n        panelContent.css({ height: ctrl.height + 'px' });\n      }\n\n      function resizeScrollableContent() {\n        if (panelScrollbar) {\n          panelScrollbar.update();\n        }\n      }\n\n      // set initial transparency\n      if (ctrl.panel.transparent) {\n        transparentLastState = true;\n        panelContainer.addClass('panel-transparent', true);\n      }\n\n      // update scrollbar after mounting\n      ctrl.events.on('component-did-mount', () => {\n        if (ctrl.__proto__.constructor.scrollable) {\n          const scrollRootClass = 'baron baron__root baron__clipper panel-content--scrollable';\n          const scrollerClass = 'baron__scroller';\n          const scrollBarHTML = `\n            <div class=\"baron__track\">\n              <div class=\"baron__bar\"></div>\n            </div>\n          `;\n\n          const scrollRoot = panelContent;\n          const scroller = panelContent.find(':first').find(':first');\n\n          scrollRoot.addClass(scrollRootClass);\n          $(scrollBarHTML).appendTo(scrollRoot);\n          scroller.addClass(scrollerClass);\n\n          panelScrollbar = baron({\n            root: scrollRoot[0],\n            scroller: scroller[0],\n            bar: '.baron__bar',\n            barOnCls: '_scrollbar',\n            scrollingCls: '_scrolling',\n          });\n\n          panelScrollbar.scroll();\n        }\n      });\n\n      ctrl.events.on('panel-size-changed', () => {\n        ctrl.calculatePanelHeight();\n        panelHeightUpdated();\n        $timeout(() => {\n          resizeScrollableContent();\n          ctrl.render();\n        });\n      });\n\n      // set initial height\n      ctrl.calculatePanelHeight();\n      panelHeightUpdated();\n\n      ctrl.events.on('render', () => {\n        if (transparentLastState !== ctrl.panel.transparent) {\n          panelContainer.toggleClass('panel-transparent', ctrl.panel.transparent === true);\n          transparentLastState = ctrl.panel.transparent;\n        }\n\n        hasAlertRule = ctrl.panel.alert !== undefined;\n        if (lastHasAlertRule !== hasAlertRule) {\n          panelContainer.toggleClass('panel-has-alert', hasAlertRule);\n\n          lastHasAlertRule = hasAlertRule;\n        }\n\n        if (ctrl.alertState) {\n          if (lastAlertState) {\n            panelContainer.removeClass('panel-alert-state--' + lastAlertState);\n          }\n\n          if (ctrl.alertState.state === 'ok' || ctrl.alertState.state === 'alerting') {\n            panelContainer.addClass('panel-alert-state--' + ctrl.alertState.state);\n          }\n\n          lastAlertState = ctrl.alertState.state;\n        } else if (lastAlertState) {\n          panelContainer.removeClass('panel-alert-state--' + lastAlertState);\n          lastAlertState = null;\n        }\n      });\n\n      function updatePanelCornerInfo() {\n        const cornerMode = ctrl.getInfoMode();\n        cornerInfoElem[0].className = 'panel-info-corner panel-info-corner--' + cornerMode;\n\n        if (cornerMode) {\n          if (infoDrop) {\n            infoDrop.destroy();\n          }\n\n          infoDrop = new Drop({\n            target: cornerInfoElem[0],\n            content: () => {\n              return ctrl.getInfoContent({ mode: 'tooltip' });\n            },\n            classes: ctrl.error ? 'drop-error' : 'drop-help',\n            openOn: 'hover',\n            hoverOpenDelay: 100,\n            tetherOptions: {\n              attachment: 'bottom left',\n              targetAttachment: 'top left',\n              constraints: [\n                {\n                  to: 'window',\n                  attachment: 'together',\n                  pin: true,\n                },\n              ],\n            },\n          });\n        }\n      }\n\n      scope.$watchGroup(['ctrl.error', 'ctrl.panel.description'], updatePanelCornerInfo);\n      scope.$watchCollection('ctrl.panel.links', updatePanelCornerInfo);\n\n      cornerInfoElem.on('click', () => {\n        infoDrop.close();\n        scope.$apply(ctrl.openInspector.bind(ctrl));\n      });\n\n      elem.on('mouseenter', mouseEnter);\n      elem.on('mouseleave', mouseLeave);\n\n      scope.$on('$destroy', () => {\n        elem.off();\n        cornerInfoElem.off();\n\n        if (infoDrop) {\n          infoDrop.destroy();\n        }\n\n        if (panelScrollbar) {\n          panelScrollbar.dispose();\n        }\n      });\n    },\n  };\n});\n\nmodule.directive('panelHelpCorner', $rootScope => {\n  return {\n    restrict: 'E',\n    template: `\n    <span class=\"alert-error panel-error small pointer\" ng-if=\"ctrl.error\" ng-click=\"ctrl.openInspector()\">\n    <span data-placement=\"top\" bs-tooltip=\"ctrl.error\">\n    <i class=\"fa fa-exclamation\"></i><span class=\"panel-error-arrow\"></span>\n    </span>\n    </span>\n    `,\n    link: (scope, elem) => {},\n  };\n});\n","import angular from 'angular';\nimport locationUtil from 'app/core/utils/location_util';\nimport appEvents from 'app/core/app_events';\n\nexport class SoloPanelCtrl {\n  /** @ngInject */\n  constructor($scope, $routeParams, $location, dashboardLoaderSrv, contextSrv, backendSrv) {\n    let panelId;\n\n    $scope.init = () => {\n      contextSrv.sidemenu = false;\n      appEvents.emit('toggle-sidemenu-hidden');\n\n      const params = $location.search();\n      panelId = parseInt(params.panelId, 10);\n\n      $scope.onAppEvent('dashboard-initialized', $scope.initPanelScope);\n\n      // if no uid, redirect to new route based on slug\n      if (!($routeParams.type === 'script' || $routeParams.type === 'snapshot') && !$routeParams.uid) {\n        backendSrv.getDashboardBySlug($routeParams.slug).then(res => {\n          if (res) {\n            const url = locationUtil.stripBaseFromUrl(res.meta.url.replace('/d/', '/d-solo/'));\n            $location.path(url).replace();\n          }\n        });\n        return;\n      }\n\n      dashboardLoaderSrv.loadDashboard($routeParams.type, $routeParams.slug, $routeParams.uid).then(result => {\n        result.meta.soloMode = true;\n        $scope.initDashboard(result, $scope);\n      });\n    };\n\n    $scope.initPanelScope = () => {\n      const panelInfo = $scope.dashboard.getPanelInfoById(panelId);\n\n      // fake row ctrl scope\n      $scope.ctrl = {\n        dashboard: $scope.dashboard,\n      };\n\n      $scope.panel = panelInfo.panel;\n      $scope.panel.soloMode = true;\n      $scope.$index = 0;\n\n      if (!$scope.panel) {\n        $scope.appEvent('alert-error', ['未找到面板', '']);\n        return;\n      }\n    };\n\n    $scope.init();\n  }\n}\n\nangular.module('grafana.routes').controller('SoloPanelCtrl', SoloPanelCtrl);\n","import angular from 'angular';\n\nconst directiveModule = angular.module('grafana.directives');\n\n/** @ngInject */\nfunction panelEditorTab(dynamicDirectiveSrv) {\n  return dynamicDirectiveSrv.create({\n    scope: {\n      ctrl: '=',\n      editorTab: '=',\n      index: '=',\n    },\n    directive: scope => {\n      const pluginId = scope.ctrl.pluginId;\n      const tabIndex = scope.index;\n      // create a wrapper for directiveFn\n      // required for metrics tab directive\n      // that is the same for many panels but\n      // given different names in this function\n      const fn = () => scope.editorTab.directiveFn();\n\n      return Promise.resolve({\n        name: `panel-editor-tab-${pluginId}${tabIndex}`,\n        fn: fn,\n      });\n    },\n  });\n}\n\ndirectiveModule.directive('panelEditorTab', panelEditorTab);\n","import angular from 'angular';\n\nconst module = angular.module('grafana.directives');\n\nexport class QueryRowCtrl {\n  collapsedText: string;\n  canCollapse: boolean;\n  getCollapsedText: any;\n  target: any;\n  queryCtrl: any;\n  panelCtrl: any;\n  panel: any;\n  collapsed: any;\n\n  constructor() {\n    this.panelCtrl = this.queryCtrl.panelCtrl;\n    this.target = this.queryCtrl.target;\n    this.panel = this.panelCtrl.panel;\n\n    if (!this.target.refId) {\n      this.target.refId = this.panelCtrl.dashboard.getNextQueryLetter(this.panel);\n    }\n\n    this.toggleCollapse(true);\n    if (this.target.isNew) {\n      delete this.target.isNew;\n      this.toggleCollapse(false);\n    }\n\n    if (this.panel.targets.length < 4) {\n      this.collapsed = false;\n    }\n  }\n\n  toggleHideQuery() {\n    this.target.hide = !this.target.hide;\n    this.panelCtrl.refresh();\n  }\n\n  toggleCollapse(init) {\n    if (!this.canCollapse) {\n      return;\n    }\n\n    if (!this.panelCtrl.__collapsedQueryCache) {\n      this.panelCtrl.__collapsedQueryCache = {};\n    }\n\n    if (init) {\n      this.collapsed = this.panelCtrl.__collapsedQueryCache[this.target.refId] !== false;\n    } else {\n      this.collapsed = !this.collapsed;\n      this.panelCtrl.__collapsedQueryCache[this.target.refId] = this.collapsed;\n    }\n\n    try {\n      this.collapsedText = this.queryCtrl.getCollapsedText();\n    } catch (e) {\n      const err = e.message || e.toString();\n      this.collapsedText = 'Error: ' + err;\n    }\n  }\n\n  toggleEditorMode() {\n    if (this.canCollapse && this.collapsed) {\n      this.collapsed = false;\n    }\n\n    this.queryCtrl.toggleEditorMode();\n  }\n\n  removeQuery() {\n    if (this.panelCtrl.__collapsedQueryCache) {\n      delete this.panelCtrl.__collapsedQueryCache[this.target.refId];\n    }\n\n    this.panelCtrl.removeQuery(this.target);\n  }\n\n  duplicateQuery() {\n    const clone = angular.copy(this.target);\n    this.panelCtrl.addQuery(clone);\n  }\n\n  moveQuery(direction) {\n    this.panelCtrl.moveQuery(this.target, direction);\n  }\n}\n\n/** @ngInject */\nfunction queryEditorRowDirective() {\n  return {\n    restrict: 'E',\n    controller: QueryRowCtrl,\n    bindToController: true,\n    controllerAs: 'ctrl',\n    templateUrl: 'public/app/features/panel/partials/query_editor_row.html',\n    transclude: true,\n    scope: {\n      queryCtrl: '=',\n      canCollapse: '=',\n      hasTextEditMode: '=',\n    },\n  };\n}\n\nmodule.directive('queryEditorRow', queryEditorRowDirective);\n","import _ from 'lodash';\nimport appEvents from 'app/core/app_events';\nimport { coreModule, JsonExplorer } from 'app/core/core';\n\nconst template = `\n<div class=\"query-troubleshooter\" ng-if=\"ctrl.isOpen\">\n  <div class=\"query-troubleshooter__header\">\n    <a class=\"pointer\" ng-click=\"ctrl.toggleMocking()\">模拟响应</a>\n    <a class=\"pointer\" ng-click=\"ctrl.toggleExpand()\" ng-hide=\"ctrl.allNodesExpanded\">\n      <i class=\"fa fa-plus-square-o\"></i> 展开全部\n    </a>\n    <a class=\"pointer\" ng-click=\"ctrl.toggleExpand()\" ng-show=\"ctrl.allNodesExpanded\">\n      <i class=\"fa fa-minus-square-o\"></i> 折叠全部\n    </a>\n    <a class=\"pointer\" clipboard-button=\"ctrl.getClipboardText()\"><i class=\"fa fa-clipboard\"></i> 复制到剪贴板</a>\n  </div>\n  <div class=\"query-troubleshooter__body\" ng-hide=\"ctrl.isMocking\">\n    <i class=\"fa fa-spinner fa-spin\" ng-show=\"ctrl.isLoading\"></i>\n    <div class=\"query-troubleshooter-json\"></div>\n  </div>\n  <div class=\"query-troubleshooter__body\" ng-show=\"ctrl.isMocking\">\n    <div class=\"gf-form p-l-1 gf-form--v-stretch\">\n\t\t\t<textarea class=\"gf-form-input\" style=\"width: 95%\" rows=\"10\" ng-model=\"ctrl.mockedResponse\"  placeholder=\"JSON\"></textarea>\n    </div>\n  </div>\n</div>\n`;\n\nexport class QueryTroubleshooterCtrl {\n  isOpen: any;\n  isLoading: boolean;\n  showResponse: boolean;\n  panelCtrl: any;\n  renderJsonExplorer: (data) => void;\n  onRequestErrorEventListener: any;\n  onRequestResponseEventListener: any;\n  hasError: boolean;\n  allNodesExpanded: boolean;\n  isMocking: boolean;\n  mockedResponse: string;\n  jsonExplorer: JsonExplorer;\n\n  /** @ngInject */\n  constructor($scope, private $timeout) {\n    this.onRequestErrorEventListener = this.onRequestError.bind(this);\n    this.onRequestResponseEventListener = this.onRequestResponse.bind(this);\n\n    appEvents.on('ds-request-response', this.onRequestResponseEventListener);\n    appEvents.on('ds-request-error', this.onRequestErrorEventListener);\n\n    $scope.$on('$destroy', this.removeEventsListeners.bind(this));\n    $scope.$watch('ctrl.isOpen', this.stateChanged.bind(this));\n  }\n\n  removeEventsListeners() {\n    appEvents.off('ds-request-response', this.onRequestResponseEventListener);\n    appEvents.off('ds-request-error', this.onRequestErrorEventListener);\n  }\n\n  toggleMocking() {\n    this.isMocking = !this.isMocking;\n  }\n\n  onRequestError(err) {\n    // ignore if closed\n    if (!this.isOpen) {\n      return;\n    }\n\n    this.isOpen = true;\n    this.hasError = true;\n    this.onRequestResponse(err);\n  }\n\n  stateChanged() {\n    if (this.isOpen) {\n      this.panelCtrl.refresh();\n      this.isLoading = true;\n    }\n  }\n\n  getClipboardText(): string {\n    if (this.jsonExplorer) {\n      return JSON.stringify(this.jsonExplorer.json, null, 2);\n    }\n    return '';\n  }\n\n  handleMocking(data) {\n    let mockedData;\n    try {\n      mockedData = JSON.parse(this.mockedResponse);\n    } catch (err) {\n      appEvents.emit('alert-error', ['无法解析模拟的响应']);\n      return;\n    }\n\n    data.data = mockedData;\n  }\n\n  onRequestResponse(data) {\n    // ignore if closed\n    if (!this.isOpen) {\n      return;\n    }\n\n    if (this.isMocking) {\n      this.handleMocking(data);\n      return;\n    }\n\n    this.isLoading = false;\n    data = _.cloneDeep(data);\n\n    if (data.headers) {\n      delete data.headers;\n    }\n\n    if (data.config) {\n      data.request = data.config;\n      delete data.config;\n      delete data.request.transformRequest;\n      delete data.request.transformResponse;\n      delete data.request.paramSerializer;\n      delete data.request.jsonpCallbackParam;\n      delete data.request.headers;\n      delete data.request.requestId;\n      delete data.request.inspect;\n      delete data.request.retry;\n      delete data.request.timeout;\n    }\n\n    if (data.data) {\n      data.response = data.data;\n\n      if (data.status === 200) {\n        // if we are in error state, assume we automatically opened\n        // and auto close it again\n        if (this.hasError) {\n          this.hasError = false;\n          this.isOpen = false;\n        }\n      }\n\n      delete data.data;\n      delete data.status;\n      delete data.statusText;\n      delete data.$$config;\n    }\n\n    this.$timeout(_.partial(this.renderJsonExplorer, data));\n  }\n\n  toggleExpand(depth) {\n    if (this.jsonExplorer) {\n      this.allNodesExpanded = !this.allNodesExpanded;\n      this.jsonExplorer.openAtDepth(this.allNodesExpanded ? 20 : 1);\n    }\n  }\n}\n\nexport function queryTroubleshooter() {\n  return {\n    restrict: 'E',\n    template: template,\n    controller: QueryTroubleshooterCtrl,\n    bindToController: true,\n    controllerAs: 'ctrl',\n    scope: {\n      panelCtrl: '=',\n      isOpen: '=',\n    },\n    link: (scope, elem, attrs, ctrl) => {\n      ctrl.renderJsonExplorer = data => {\n        const jsonElem = elem.find('.query-troubleshooter-json');\n\n        ctrl.jsonExplorer = new JsonExplorer(data, 3, {\n          animateOpen: true,\n        });\n\n        const html = ctrl.jsonExplorer.render(true);\n        jsonElem.html(html);\n      };\n    },\n  };\n}\n\ncoreModule.directive('queryTroubleshooter', queryTroubleshooter);\n","import './panel_header';\nimport './panel_directive';\nimport './solo_panel_ctrl';\nimport './query_ctrl';\nimport './panel_editor_tab';\nimport './query_editor_row';\nimport './query_troubleshooter';\n","import config from 'app/core/config';\nimport coreModule from 'app/core/core_module';\nimport Remarkable from 'remarkable';\nimport _ from 'lodash';\n\nexport class OrgUsersCtrl {\n  unfiltered: any;\n  users: any;\n  pendingInvites: any;\n  editor: any;\n  navModel: any;\n  externalUserMngLinkUrl: string;\n  externalUserMngLinkName: string;\n  externalUserMngInfo: string;\n  canInvite: boolean;\n  searchQuery: string;\n  showInvites: boolean;\n\n  /** @ngInject */\n  constructor(private $scope, private backendSrv, navModelSrv, $sce) {\n    this.navModel = navModelSrv.getNav('cfg', 'users', 0);\n\n    this.get();\n    this.externalUserMngLinkUrl = config.externalUserMngLinkUrl;\n    this.externalUserMngLinkName = config.externalUserMngLinkName;\n    this.canInvite = !config.disableLoginForm && !config.externalUserMngLinkName;\n\n    // render external user management info markdown\n    if (config.externalUserMngInfo) {\n      this.externalUserMngInfo = new Remarkable({\n        linkTarget: '__blank',\n      }).render(config.externalUserMngInfo);\n    }\n  }\n\n  get() {\n    this.backendSrv.get('/api/org/users').then(users => {\n      this.users = users;\n      this.unfiltered = users;\n    });\n    this.backendSrv.get('/api/org/invites').then(pendingInvites => {\n      this.pendingInvites = pendingInvites;\n    });\n  }\n\n  onQueryUpdated() {\n    const regex = new RegExp(this.searchQuery, 'ig');\n    this.users = _.filter(this.unfiltered, item => {\n      return regex.test(item.email) || regex.test(item.login);\n    });\n  }\n\n  updateOrgUser(user) {\n    this.backendSrv.patch('/api/org/users/' + user.userId, user);\n  }\n\n  removeUser(user) {\n    this.$scope.appEvent('confirm-modal', {\n      title: '删除',\n      text: '您确定要删除用户 ' + user.login + '?',\n      yesText: '删除',\n      icon: 'fa-warning',\n      onConfirm: () => {\n        this.removeUserConfirmed(user);\n      },\n    });\n  }\n\n  removeUserConfirmed(user) {\n    this.backendSrv.delete('/api/org/users/' + user.userId).then(this.get.bind(this));\n  }\n\n  revokeInvite(invite, evt) {\n    evt.stopPropagation();\n    this.backendSrv.patch('/api/org/invites/' + invite.code + '/revoke').then(this.get.bind(this));\n  }\n\n  copyInviteToClipboard(evt) {\n    evt.stopPropagation();\n  }\n\n  getInviteUrl(invite) {\n    return invite.url;\n  }\n}\n\ncoreModule.controller('OrgUsersCtrl', OrgUsersCtrl);\n","import config from 'app/core/config';\nimport { coreModule } from 'app/core/core';\n\nexport class ProfileCtrl {\n  user: any;\n  oldTheme: any;\n  teams: any = [];\n  orgs: any = [];\n  userForm: any;\n  showTeamsList = false;\n  showOrgsList = false;\n  readonlyLoginFields = config.disableLoginForm;\n  navModel: any;\n\n  /** @ngInject */\n  constructor(private backendSrv, private contextSrv, private $location, navModelSrv) {\n    this.getUser();\n    this.getUserTeams();\n    this.getUserOrgs();\n    this.navModel = navModelSrv.getNav('profile', 'profile-settings', 0);\n  }\n\n  getUser() {\n    this.backendSrv.get('/api/user').then(user => {\n      this.user = user;\n      this.user.theme = user.theme || 'dark';\n    });\n  }\n\n  getUserTeams() {\n    this.backendSrv.get('/api/user/teams').then(teams => {\n      this.teams = teams;\n      this.showTeamsList = this.teams.length > 0;\n    });\n  }\n\n  getUserOrgs() {\n    this.backendSrv.get('/api/user/orgs').then(orgs => {\n      this.orgs = orgs;\n      this.showOrgsList = orgs.length > 1;\n    });\n  }\n\n  setUsingOrg(org) {\n    this.backendSrv.post('/api/user/using/' + org.orgId).then(() => {\n      window.location.href = config.appSubUrl + '/profile';\n    });\n  }\n\n  update() {\n    if (!this.userForm.$valid) {\n      return;\n    }\n\n    this.backendSrv.put('/api/user/', this.user).then(() => {\n      this.contextSrv.user.name = this.user.name || this.user.login;\n      if (this.oldTheme !== this.user.theme) {\n        window.location.href = config.appSubUrl + this.$location.path();\n      }\n    });\n  }\n}\n\ncoreModule.controller('ProfileCtrl', ProfileCtrl);\n","import angular from 'angular';\nimport config from 'app/core/config';\n\nexport class SelectOrgCtrl {\n  /** @ngInject */\n  constructor($scope, backendSrv, contextSrv) {\n    contextSrv.sidemenu = false;\n\n    $scope.navModel = {\n      main: {\n        icon: 'gicon gicon-branding',\n        subTitle: '偏好',\n        text: '选择活跃组织',\n      },\n    };\n\n    $scope.init = () => {\n      $scope.getUserOrgs();\n    };\n\n    $scope.getUserOrgs = () => {\n      backendSrv.get('/api/user/orgs').then(orgs => {\n        $scope.orgs = orgs;\n      });\n    };\n\n    $scope.setUsingOrg = org => {\n      backendSrv.post('/api/user/using/' + org.orgId).then(() => {\n        window.location.href = config.appSubUrl + '/';\n      });\n    };\n\n    $scope.init();\n  }\n}\n\nangular.module('grafana.controllers').controller('SelectOrgCtrl', SelectOrgCtrl);\n","import angular from 'angular';\nimport config from 'app/core/config';\n\nexport class NewOrgCtrl {\n  /** @ngInject */\n  constructor($scope, $http, backendSrv, navModelSrv) {\n    $scope.navModel = navModelSrv.getNav('cfg', 'admin', 'global-orgs', 1);\n    $scope.newOrg = { name: '' };\n\n    $scope.createOrg = () => {\n      backendSrv.post('/api/orgs/', $scope.newOrg).then(result => {\n        backendSrv.post('/api/user/using/' + result.orgId).then(() => {\n          window.location.href = config.appSubUrl + '/org';\n        });\n      });\n    };\n  }\n}\n\nangular.module('grafana.controllers').controller('NewOrgCtrl', NewOrgCtrl);\n","import angular from 'angular';\nimport config from 'app/core/config';\n\nexport class ChangePasswordCtrl {\n  /** @ngInject */\n  constructor($scope, backendSrv, $location, navModelSrv) {\n    $scope.command = {};\n    $scope.authProxyEnabled = config.authProxyEnabled;\n    $scope.ldapEnabled = config.ldapEnabled;\n    $scope.navModel = navModelSrv.getNav('profile', 'change-password', 0);\n\n    $scope.changePassword = () => {\n      if (!$scope.userForm.$valid) {\n        return;\n      }\n\n      if ($scope.command.newPassword !== $scope.command.confirmNew) {\n        $scope.appEvent('alert-warning', ['新旧密码不匹配', '']);\n        return;\n      }\n\n      backendSrv.put('/api/user/password', $scope.command).then(() => {\n        $location.path('profile');\n      });\n    };\n  }\n}\n\nangular.module('grafana.controllers').controller('ChangePasswordCtrl', ChangePasswordCtrl);\n","import coreModule from 'app/core/core_module';\n\nexport class UserInviteCtrl {\n  navModel: any;\n  invite: any;\n  inviteForm: any;\n\n  /** @ngInject */\n  constructor(private backendSrv, navModelSrv, private $location) {\n    this.navModel = navModelSrv.getNav('cfg', 'users', 0);\n\n    this.invite = {\n      name: '',\n      email: '',\n      role: 'Editor',\n      sendEmail: true,\n    };\n  }\n\n  sendInvite() {\n    if (!this.inviteForm.$valid) {\n      return;\n    }\n\n    return this.backendSrv.post('/api/org/invites', this.invite).then(() => {\n      this.$location.path('org/users/');\n    });\n  }\n}\n\ncoreModule.controller('UserInviteCtrl', UserInviteCtrl);\n","import coreModule from 'app/core/core_module';\n\nexport default class CreateTeamCtrl {\n  name: string;\n  email: string;\n  navModel: any;\n\n  /** @ngInject */\n  constructor(private backendSrv, private $location, navModelSrv) {\n    this.navModel = navModelSrv.getNav('cfg', 'teams', 0);\n  }\n\n  create() {\n    const payload = {\n      name: this.name,\n      email: this.email,\n    };\n    this.backendSrv.post('/api/teams', payload).then(result => {\n      if (result.teamId) {\n        this.$location.path('/org/teams/edit/' + result.teamId);\n      }\n    });\n  }\n}\n\ncoreModule.controller('CreateTeamCtrl', CreateTeamCtrl);\n","import angular from 'angular';\n\nexport class OrgApiKeysCtrl {\n  /** @ngInject */\n  constructor($scope, $http, backendSrv, navModelSrv) {\n    $scope.navModel = navModelSrv.getNav('cfg', 'apikeys', 0);\n\n    $scope.roleTypes = [{text: '观看者', value: 'Viewer'}, {text: '编辑者', value: 'Editor'},{text: '管理员', value: 'Admin'}];\n    $scope.token = { role: 'Viewer' };\n\n    $scope.init = () => {\n      $scope.getTokens();\n    };\n\n    $scope.getTokens = () => {\n      backendSrv.get('/api/auth/keys').then(tokens => {\n        $scope.tokens = tokens;\n      });\n    };\n\n    $scope.removeToken = id => {\n      backendSrv.delete('/api/auth/keys/' + id).then($scope.getTokens);\n    };\n\n    $scope.addToken = () => {\n      backendSrv.post('/api/auth/keys', $scope.token).then(result => {\n        const modalScope = $scope.$new(true);\n        modalScope.key = result.key;\n        modalScope.rootPath = window.location.origin + $scope.$root.appSubUrl;\n\n        $scope.appEvent('show-modal', {\n          src: 'public/app/features/org/partials/apikeyModal.html',\n          scope: modalScope,\n        });\n\n        $scope.getTokens();\n      });\n    };\n\n    $scope.init();\n  }\n}\n\nangular.module('grafana.controllers').controller('OrgApiKeysCtrl', OrgApiKeysCtrl);\n","import angular from 'angular';\n\nexport class OrgDetailsCtrl {\n  /** @ngInject */\n  constructor($scope, $http, backendSrv, contextSrv, navModelSrv) {\n    $scope.init = () => {\n      $scope.getOrgInfo();\n      $scope.navModel = navModelSrv.getNav('cfg', 'org-settings', 0);\n    };\n\n    $scope.getOrgInfo = () => {\n      backendSrv.get('/api/org').then(org => {\n        $scope.org = org;\n        $scope.address = org.address;\n        contextSrv.user.orgName = org.name;\n      });\n    };\n\n    $scope.update = () => {\n      if (!$scope.orgForm.$valid) {\n        return;\n      }\n      const data = { name: $scope.org.name };\n      backendSrv.put('/api/org', data).then($scope.getOrgInfo);\n    };\n\n    $scope.updateAddress = () => {\n      if (!$scope.addressForm.$valid) {\n        return;\n      }\n      backendSrv.put('/api/org/address', $scope.address).then($scope.getOrgInfo);\n    };\n\n    $scope.init();\n  }\n}\n\nangular.module('grafana.controllers').controller('OrgDetailsCtrl', OrgDetailsCtrl);\n","import config from 'app/core/config';\nimport coreModule from 'app/core/core_module';\n\nexport class PrefsControlCtrl {\n  prefs: any;\n  oldTheme: any;\n  prefsForm: any;\n  mode: string;\n\n  timezones: any = [\n    { value: '', text: '默认' },\n    { value: 'browser', text: '本地浏览器时间' },\n    { value: 'utc', text: 'UTC' },\n  ];\n  themes: any = [{ value: '', text: '默认' }, { value: 'dark', text: 'Dark' }, { value: 'light', text: 'Light' }];\n\n  /** @ngInject */\n  constructor(private backendSrv, private $location) {}\n\n  $onInit() {\n    return this.backendSrv.get(`/api/${this.mode}/preferences`).then(prefs => {\n      this.prefs = prefs;\n      this.oldTheme = prefs.theme;\n    });\n  }\n\n  updatePrefs() {\n    if (!this.prefsForm.$valid) {\n      return;\n    }\n\n    const cmd = {\n      theme: this.prefs.theme,\n      timezone: this.prefs.timezone,\n      homeDashboardId: this.prefs.homeDashboardId,\n    };\n\n    this.backendSrv.put(`/api/${this.mode}/preferences`, cmd).then(() => {\n      window.location.href = config.appSubUrl + this.$location.path();\n    });\n  }\n}\n\nconst template = `\n<form name=\"ctrl.prefsForm\" class=\"section gf-form-group\">\n  <h3 class=\"page-heading\">偏好</h3>\n\n  <div class=\"gf-form\">\n    <span class=\"gf-form-label width-11\">UI主题</span>\n    <div class=\"gf-form-select-wrapper max-width-20\">\n      <select class=\"gf-form-input\" ng-model=\"ctrl.prefs.theme\" ng-options=\"f.value as f.text for f in ctrl.themes\"></select>\n    </div>\n  </div>\n\n  <div class=\"gf-form\">\n    <span class=\"gf-form-label width-11\">\n      主页仪表盘\n      <info-popover mode=\"right-normal\">\n        找不到你想要的仪表盘？ 首先加注星标收藏，然后它将出现在此下拉框中。\n      </info-popover>\n    </span>\n    <dashboard-selector class=\"gf-form-select-wrapper max-width-20\" model=\"ctrl.prefs.homeDashboardId\">\n    </dashboard-selector>\n  </div>\n\n  <div class=\"gf-form\">\n    <label class=\"gf-form-label width-11\">时区</label>\n    <div class=\"gf-form-select-wrapper max-width-20\">\n      <select class=\"gf-form-input\" ng-model=\"ctrl.prefs.timezone\" ng-options=\"f.value as f.text for f in ctrl.timezones\"></select>\n    </div>\n  </div>\n\n  <div class=\"gf-form-button-row\">\n    <button type=\"submit\" class=\"btn btn-success\" ng-click=\"ctrl.updatePrefs()\">保存</button>\n  </div>\n</form>\n`;\n\nexport function prefsControlDirective() {\n  return {\n    restrict: 'E',\n    controller: PrefsControlCtrl,\n    bindToController: true,\n    controllerAs: 'ctrl',\n    template: template,\n    scope: {\n      mode: '@',\n    },\n  };\n}\n\ncoreModule.directive('prefsControl', prefsControlDirective);\n","import './org_users_ctrl';\nimport './profile_ctrl';\nimport './org_users_ctrl';\nimport './select_org_ctrl';\nimport './change_password_ctrl';\nimport './new_org_ctrl';\nimport './user_invite_ctrl';\nimport './create_team_ctrl';\nimport './org_api_keys_ctrl';\nimport './org_details_ctrl';\nimport './prefs_control';\n","export default class AdminListUsersCtrl {\n  users: any;\n  pages = [];\n  perPage = 50;\n  page = 1;\n  totalPages: number;\n  showPaging = false;\n  query: any;\n  navModel: any;\n\n  /** @ngInject */\n  constructor(private $scope, private backendSrv, navModelSrv) {\n    this.navModel = navModelSrv.getNav('cfg', 'admin', 'global-users', 1);\n    this.query = '';\n    this.getUsers();\n  }\n\n  getUsers() {\n    this.backendSrv\n      .get(`/api/users/search?perpage=${this.perPage}&page=${this.page}&query=${this.query}`)\n      .then(result => {\n        this.users = result.users;\n        this.page = result.page;\n        this.perPage = result.perPage;\n        this.totalPages = Math.ceil(result.totalCount / result.perPage);\n        this.showPaging = this.totalPages > 1;\n        this.pages = [];\n\n        for (let i = 1; i < this.totalPages + 1; i++) {\n          this.pages.push({ page: i, current: i === this.page });\n        }\n      });\n  }\n\n  navigateToPage(page) {\n    this.page = page.page;\n    this.getUsers();\n  }\n\n  deleteUser(user) {\n    this.$scope.appEvent('confirm-modal', {\n      title: '删除',\n      text: '确定希望删除 ' + user.login + '?',\n      icon: 'fa-trash',\n      yesText: '删除',\n      onConfirm: () => {\n        this.backendSrv.delete('/api/admin/users/' + user.id).then(() => {\n          this.getUsers();\n        });\n      },\n    });\n  }\n}\n","import _ from 'lodash';\n\nexport default class AdminEditUserCtrl {\n  /** @ngInject */\n  constructor($scope, $routeParams, backendSrv, $location, navModelSrv) {\n    $scope.user = {};\n    $scope.newOrg = { name: '', role: 'Editor' };\n    $scope.permissions = {};\n    $scope.navModel = navModelSrv.getNav('cfg', 'admin', 'global-users', 1);\n\n    $scope.init = () => {\n      if ($routeParams.id) {\n        $scope.getUser($routeParams.id);\n        $scope.getUserOrgs($routeParams.id);\n      }\n    };\n\n    $scope.getUser = id => {\n      backendSrv.get('/api/users/' + id).then(user => {\n        $scope.user = user;\n        $scope.user_id = id;\n        $scope.permissions.isGrafanaAdmin = user.isGrafanaAdmin;\n      });\n    };\n\n    $scope.setPassword = () => {\n      if (!$scope.passwordForm.$valid) {\n        return;\n      }\n\n      const payload = { password: $scope.password };\n      backendSrv.put('/api/admin/users/' + $scope.user_id + '/password', payload).then(() => {\n        $location.path('/admin/users');\n      });\n    };\n\n    $scope.updatePermissions = () => {\n      const payload = $scope.permissions;\n\n      backendSrv.put('/api/admin/users/' + $scope.user_id + '/permissions', payload).then(() => {\n        $location.path('/admin/users');\n      });\n    };\n\n    $scope.create = () => {\n      if (!$scope.userForm.$valid) {\n        return;\n      }\n\n      backendSrv.post('/api/admin/users', $scope.user).then(() => {\n        $location.path('/admin/users');\n      });\n    };\n\n    $scope.getUserOrgs = id => {\n      backendSrv.get('/api/users/' + id + '/orgs').then(orgs => {\n        $scope.orgs = orgs;\n      });\n    };\n\n    $scope.update = () => {\n      if (!$scope.userForm.$valid) {\n        return;\n      }\n\n      backendSrv.put('/api/users/' + $scope.user_id, $scope.user).then(() => {\n        $location.path('/admin/users');\n      });\n    };\n\n    $scope.updateOrgUser = orgUser => {\n      backendSrv.patch('/api/orgs/' + orgUser.orgId + '/users/' + $scope.user_id, orgUser).then(() => {});\n    };\n\n    $scope.removeOrgUser = orgUser => {\n      backendSrv.delete('/api/orgs/' + orgUser.orgId + '/users/' + $scope.user_id).then(() => {\n        $scope.getUser($scope.user_id);\n        $scope.getUserOrgs($scope.user_id);\n      });\n    };\n\n    $scope.orgsSearchCache = [];\n\n    $scope.searchOrgs = (queryStr, callback) => {\n      if ($scope.orgsSearchCache.length > 0) {\n        callback(_.map($scope.orgsSearchCache, 'name'));\n        return;\n      }\n\n      backendSrv.get('/api/orgs', { query: '' }).then(result => {\n        $scope.orgsSearchCache = result;\n        callback(_.map(result, 'name'));\n      });\n    };\n\n    $scope.addOrgUser = () => {\n      if (!$scope.addOrgForm.$valid) {\n        return;\n      }\n\n      const orgInfo = _.find($scope.orgsSearchCache, {\n        name: $scope.newOrg.name,\n      });\n      if (!orgInfo) {\n        return;\n      }\n\n      $scope.newOrg.loginOrEmail = $scope.user.login;\n\n      backendSrv.post('/api/orgs/' + orgInfo.id + '/users/', $scope.newOrg).then(() => {\n        $scope.getUser($scope.user_id);\n        $scope.getUserOrgs($scope.user_id);\n      });\n    };\n\n    $scope.init();\n  }\n}\n","\nexport default class AdminEditOrgCtrl {\n  /** @ngInject */\n  constructor($scope, $routeParams, backendSrv, $location, navModelSrv) {\n    $scope.init = () => {\n      $scope.navModel = navModelSrv.getNav('cfg', 'admin', 'global-orgs', 1);\n\n      if ($routeParams.id) {\n        $scope.getOrg($routeParams.id);\n        $scope.getOrgUsers($routeParams.id);\n      }\n    };\n\n    $scope.getOrg = id => {\n      backendSrv.get('/api/orgs/' + id).then(org => {\n        $scope.org = org;\n      });\n    };\n\n    $scope.getOrgUsers = id => {\n      backendSrv.get('/api/orgs/' + id + '/users').then(orgUsers => {\n        $scope.orgUsers = orgUsers;\n      });\n    };\n\n    $scope.update = () => {\n      if (!$scope.orgDetailsForm.$valid) {\n        return;\n      }\n\n      backendSrv.put('/api/orgs/' + $scope.org.id, $scope.org).then(() => {\n        $location.path('/admin/orgs');\n      });\n    };\n\n    $scope.updateOrgUser = orgUser => {\n      backendSrv.patch('/api/orgs/' + orgUser.orgId + '/users/' + orgUser.userId, orgUser);\n    };\n\n    $scope.removeOrgUser = orgUser => {\n      backendSrv.delete('/api/orgs/' + orgUser.orgId + '/users/' + orgUser.userId).then(() => {\n        $scope.getOrgUsers($scope.org.id);\n      });\n    };\n\n    $scope.init();\n  }\n}\n\n","\nexport default class AdminListOrgsCtrl {\n  /** @ngInject */\n  constructor($scope, backendSrv, navModelSrv) {\n    $scope.init = () => {\n      $scope.navModel = navModelSrv.getNav('cfg', 'admin', 'global-orgs', 1);\n      $scope.getOrgs();\n    };\n\n    $scope.getOrgs = () => {\n      backendSrv.get('/api/orgs').then(orgs => {\n        $scope.orgs = orgs;\n      });\n    };\n\n    $scope.deleteOrg = org => {\n      $scope.appEvent('confirm-modal', {\n        title: '删除',\n        text: '希望删除组织 ' + org.name + '?',\n        text2: '该组织下的所有仪表盘也会被删除!',\n        icon: 'fa-trash',\n        yesText: '删除',\n        onConfirm: () => {\n          backendSrv.delete('/api/orgs/' + org.id).then(() => {\n            $scope.getOrgs();\n          });\n        },\n      });\n    };\n\n    $scope.init();\n  }\n}\n\n","import _ from 'lodash';\nimport { appEvents, coreModule } from 'app/core/core';\n\nexport class AlertNotificationEditCtrl {\n  theForm: any;\n  navModel: any;\n  testSeverity = 'critical';\n  notifiers: any;\n  notifierTemplateId: string;\n  isNew: boolean;\n  model: any;\n  defaults: any = {\n    type: 'email',\n    sendReminder: false,\n    frequency: '15m',\n    settings: {\n      httpMethod: 'POST',\n      autoResolve: true,\n      uploadImage: true,\n    },\n    isDefault: false,\n  };\n  getFrequencySuggestion: any;\n\n  /** @ngInject */\n  constructor(private $routeParams, private backendSrv, private $location, private $templateCache, navModelSrv) {\n    this.navModel = navModelSrv.getNav('alerting', 'channels', 0);\n    this.isNew = !this.$routeParams.id;\n\n    this.getFrequencySuggestion = () => {\n      return ['1m', '5m', '10m', '15m', '30m', '1h'];\n    };\n\n    this.backendSrv\n      .get(`/api/alert-notifiers`)\n      .then(notifiers => {\n        this.notifiers = notifiers;\n\n        // add option templates\n        for (const notifier of this.notifiers) {\n          this.$templateCache.put(this.getNotifierTemplateId(notifier.type), notifier.optionsTemplate);\n        }\n\n        if (!this.$routeParams.id) {\n          this.navModel.breadcrumbs.push({ text: 'New channel' });\n          this.navModel.node = { text: 'New channel' };\n          return _.defaults(this.model, this.defaults);\n        }\n\n        return this.backendSrv.get(`/api/alert-notifications/${this.$routeParams.id}`).then(result => {\n          this.navModel.breadcrumbs.push({ text: result.name });\n          this.navModel.node = { text: result.name };\n          result.settings = _.defaults(result.settings, this.defaults.settings);\n          return result;\n        });\n      })\n      .then(model => {\n        this.model = model;\n        this.notifierTemplateId = this.getNotifierTemplateId(this.model.type);\n      });\n  }\n\n  save() {\n    if (!this.theForm.$valid) {\n      return;\n    }\n\n    if (this.model.id) {\n      this.backendSrv\n        .put(`/api/alert-notifications/${this.model.id}`, this.model)\n        .then(res => {\n          this.model = res;\n          appEvents.emit('alert-success', ['通知已更新', '']);\n        })\n        .catch(err => {\n          if (err.data && err.data.error) {\n            appEvents.emit('alert-error', [err.data.error]);\n          }\n        });\n    } else {\n      this.backendSrv\n        .post(`/api/alert-notifications`, this.model)\n        .then(res => {\n          appEvents.emit('alert-success', ['通知已创建', '']);\n          this.$location.path('alerting/notifications');\n        })\n        .catch(err => {\n          if (err.data && err.data.error) {\n            appEvents.emit('alert-error', [err.data.error]);\n          }\n        });\n    }\n  }\n\n  getNotifierTemplateId(type) {\n    return `notifier-options-${type}`;\n  }\n\n  typeChanged() {\n    this.model.settings = _.defaults({}, this.defaults.settings);\n    this.notifierTemplateId = this.getNotifierTemplateId(this.model.type);\n  }\n\n  testNotification() {\n    if (!this.theForm.$valid) {\n      return;\n    }\n\n    const payload = {\n      name: this.model.name,\n      type: this.model.type,\n      frequency: this.model.frequency,\n      settings: this.model.settings,\n    };\n\n    this.backendSrv.post(`/api/alert-notifications/test`, payload).then(res => {\n      appEvents.emit('alert-success', ['通知测试已发出', '']);\n    });\n  }\n}\n\ncoreModule.controller('AlertNotificationEditCtrl', AlertNotificationEditCtrl);\n","import config from 'app/core/config';\n\nexport default class StyleGuideCtrl {\n  theme: string;\n  buttonNames = ['primary', 'secondary', 'inverse', 'success', 'warning', 'danger'];\n  buttonSizes = ['btn-small', '', 'btn-large'];\n  buttonVariants = ['-'];\n  navModel: any;\n\n  /** @ngInject */\n  constructor(private $routeParams, private backendSrv, navModelSrv) {\n    this.navModel = navModelSrv.getNav('cfg', 'admin', 'styleguide', 1);\n    this.theme = config.bootData.user.lightTheme ? 'light' : 'dark';\n  }\n\n  switchTheme() {\n    this.$routeParams.theme = this.theme === 'dark' ? 'light' : 'dark';\n\n    const cmd = {\n      theme: this.$routeParams.theme,\n    };\n\n    this.backendSrv.put('/api/user/preferences', cmd).then(() => {\n      window.location.href = window.location.href;\n    });\n  }\n}\n\n","import AdminListUsersCtrl from './AdminListUsersCtrl';\nimport AdminEditUserCtrl from './AdminEditUserCtrl';\nimport AdminListOrgsCtrl from './AdminListOrgsCtrl';\nimport AdminEditOrgCtrl from './AdminEditOrgCtrl';\nimport StyleGuideCtrl from './StyleGuideCtrl';\n\nimport coreModule from 'app/core/core_module';\n\nclass AdminSettingsCtrl {\n  navModel: any;\n\n  /** @ngInject */\n  constructor($scope, backendSrv, navModelSrv) {\n    this.navModel = navModelSrv.getNav('cfg', 'admin', 'server-settings', 1);\n\n    backendSrv.get('/api/admin/settings').then(settings => {\n      $scope.settings = settings;\n    });\n  }\n}\n\nclass AdminHomeCtrl {\n  navModel: any;\n\n  /** @ngInject */\n  constructor(navModelSrv) {\n    this.navModel = navModelSrv.getNav('cfg', 'admin', 1);\n  }\n}\n\ncoreModule.controller('AdminListUsersCtrl', AdminListUsersCtrl);\ncoreModule.controller('AdminEditUserCtrl', AdminEditUserCtrl);\ncoreModule.controller('AdminListOrgsCtrl', AdminListOrgsCtrl);\ncoreModule.controller('AdminEditOrgCtrl', AdminEditOrgCtrl);\ncoreModule.controller('AdminSettingsCtrl', AdminSettingsCtrl);\ncoreModule.controller('AdminHomeCtrl', AdminHomeCtrl);\ncoreModule.controller('StyleGuideCtrl', StyleGuideCtrl);\n","import { coreModule } from 'app/core/core';\n\nexport class AlertNotificationsListCtrl {\n  notifications: any;\n  navModel: any;\n\n  /** @ngInject */\n  constructor(private backendSrv, navModelSrv) {\n    this.loadNotifications();\n    this.navModel = navModelSrv.getNav('alerting', 'channels', 0);\n  }\n\n  loadNotifications() {\n    this.backendSrv.get(`/api/alert-notifications`).then(result => {\n      this.notifications = result;\n    });\n  }\n\n  deleteNotification(id) {\n    this.backendSrv.delete(`/api/alert-notifications/${id}`).then(() => {\n      this.notifications = this.notifications.filter(notification => {\n        return notification.id !== id;\n      });\n    });\n  }\n}\n\ncoreModule.controller('AlertNotificationsListCtrl', AlertNotificationsListCtrl);\n","export class DashboardListCtrl {\n  navModel: any;\n\n  /** @ngInject */\n  constructor(navModelSrv) {\n    this.navModel = navModelSrv.getNav('dashboards', 'manage-dashboards', 0);\n  }\n}\n","import _ from 'lodash';\n\nexport class SnapshotListCtrl {\n  navModel: any;\n  snapshots: any;\n\n  /** @ngInject */\n  constructor(private $rootScope, private backendSrv, navModelSrv) {\n    this.navModel = navModelSrv.getNav('dashboards', 'snapshots', 0);\n    this.backendSrv.get('/api/dashboard/snapshots').then(result => {\n      this.snapshots = result;\n    });\n  }\n\n  removeSnapshotConfirmed(snapshot) {\n    _.remove(this.snapshots, { key: snapshot.key });\n    this.backendSrv.delete('/api/snapshots/' + snapshot.key).then(\n      () => {},\n      () => {\n        this.snapshots.push(snapshot);\n      }\n    );\n  }\n\n  removeSnapshot(snapshot) {\n    this.$rootScope.appEvent('confirm-modal', {\n      title: '删除',\n      text: '确定要删除快照： ' + snapshot.name + '?',\n      yesText: '删除',\n      icon: 'fa-trash',\n      onConfirm: () => {\n        this.removeSnapshotConfirmed(snapshot);\n      },\n    });\n  }\n}\n","import coreModule from 'app/core/core_module';\n\nimport { DashboardListCtrl } from './DashboardListCtrl';\nimport { SnapshotListCtrl } from './SnapshotListCtrl';\n\ncoreModule.controller('DashboardListCtrl', DashboardListCtrl);\ncoreModule.controller('SnapshotListCtrl', SnapshotListCtrl);\n","import './annotations/all';\nimport './templating/all';\nimport './plugins/all';\nimport './dashboard/all';\nimport './playlist/all';\nimport './panel/all';\nimport './org/all';\nimport './admin';\nimport './alerting/NotificationsEditCtrl';\nimport './alerting/NotificationsListCtrl';\nimport './manage-dashboards';\n"],"sourceRoot":""}